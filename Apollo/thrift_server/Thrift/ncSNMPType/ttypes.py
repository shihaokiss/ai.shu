# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncInterfaceInfo(object):
    """
    Attributes:
     - interfaceName
     - interfaceUsedRatio
     - status

    """


    def __init__(self, interfaceName=None, interfaceUsedRatio=None, status=None,):
        self.interfaceName = interfaceName
        self.interfaceUsedRatio = interfaceUsedRatio
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.interfaceUsedRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncInterfaceInfo')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.interfaceUsedRatio is not None:
            oprot.writeFieldBegin('interfaceUsedRatio', TType.STRING, 2)
            oprot.writeString(self.interfaceUsedRatio.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceUsedRatio)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.interfaceName is None:
            raise TProtocolException(message='Required field interfaceName is unset!')
        if self.interfaceUsedRatio is None:
            raise TProtocolException(message='Required field interfaceUsedRatio is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeInfo(object):
    """
    Attributes:
     - volumePath
     - volumeTotalSize
     - volumeUsedSize
     - volumeUsedRatio

    """


    def __init__(self, volumePath=None, volumeTotalSize=None, volumeUsedSize=None, volumeUsedRatio=None,):
        self.volumePath = volumePath
        self.volumeTotalSize = volumeTotalSize
        self.volumeUsedSize = volumeUsedSize
        self.volumeUsedRatio = volumeUsedRatio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.volumeTotalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.volumeUsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.volumeUsedRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeInfo')
        if self.volumePath is not None:
            oprot.writeFieldBegin('volumePath', TType.STRING, 1)
            oprot.writeString(self.volumePath.encode('utf-8') if sys.version_info[0] == 2 else self.volumePath)
            oprot.writeFieldEnd()
        if self.volumeTotalSize is not None:
            oprot.writeFieldBegin('volumeTotalSize', TType.I64, 2)
            oprot.writeI64(self.volumeTotalSize)
            oprot.writeFieldEnd()
        if self.volumeUsedSize is not None:
            oprot.writeFieldBegin('volumeUsedSize', TType.I64, 3)
            oprot.writeI64(self.volumeUsedSize)
            oprot.writeFieldEnd()
        if self.volumeUsedRatio is not None:
            oprot.writeFieldBegin('volumeUsedRatio', TType.STRING, 4)
            oprot.writeString(self.volumeUsedRatio.encode('utf-8') if sys.version_info[0] == 2 else self.volumeUsedRatio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.volumePath is None:
            raise TProtocolException(message='Required field volumePath is unset!')
        if self.volumeTotalSize is None:
            raise TProtocolException(message='Required field volumeTotalSize is unset!')
        if self.volumeUsedSize is None:
            raise TProtocolException(message='Required field volumeUsedSize is unset!')
        if self.volumeUsedRatio is None:
            raise TProtocolException(message='Required field volumeUsedRatio is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncServerInfo(object):
    """
    Attributes:
     - machineCode
     - ip
     - physicalCPUCount
     - logisticCPUCount
     - cpuCoreCount
     - userCPURatio
     - systemCPURatio
     - idleCPURatio
     - cpuTemperature
     - memoryTotalSize
     - memoryUsedSize
     - memoryCacheSize
     - memoryUsedRatio
     - interfaceCount
     - volumeCount
     - interfaceInfos
     - volumeInfos

    """


    def __init__(self, machineCode=None, ip=None, physicalCPUCount=None, logisticCPUCount=None, cpuCoreCount=None, userCPURatio=None, systemCPURatio=None, idleCPURatio=None, cpuTemperature=None, memoryTotalSize=None, memoryUsedSize=None, memoryCacheSize=None, memoryUsedRatio=None, interfaceCount=None, volumeCount=None, interfaceInfos=None, volumeInfos=None,):
        self.machineCode = machineCode
        self.ip = ip
        self.physicalCPUCount = physicalCPUCount
        self.logisticCPUCount = logisticCPUCount
        self.cpuCoreCount = cpuCoreCount
        self.userCPURatio = userCPURatio
        self.systemCPURatio = systemCPURatio
        self.idleCPURatio = idleCPURatio
        self.cpuTemperature = cpuTemperature
        self.memoryTotalSize = memoryTotalSize
        self.memoryUsedSize = memoryUsedSize
        self.memoryCacheSize = memoryCacheSize
        self.memoryUsedRatio = memoryUsedRatio
        self.interfaceCount = interfaceCount
        self.volumeCount = volumeCount
        self.interfaceInfos = interfaceInfos
        self.volumeInfos = volumeInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.physicalCPUCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.logisticCPUCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.cpuCoreCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userCPURatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.systemCPURatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.idleCPURatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.cpuTemperature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.memoryTotalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.memoryUsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.memoryCacheSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.memoryUsedRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.interfaceCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.volumeCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.interfaceInfos = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncInterfaceInfo()
                        _elem5.read(iprot)
                        self.interfaceInfos.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.volumeInfos = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = ncVolumeInfo()
                        _elem11.read(iprot)
                        self.volumeInfos.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServerInfo')
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 1)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.physicalCPUCount is not None:
            oprot.writeFieldBegin('physicalCPUCount', TType.I32, 3)
            oprot.writeI32(self.physicalCPUCount)
            oprot.writeFieldEnd()
        if self.logisticCPUCount is not None:
            oprot.writeFieldBegin('logisticCPUCount', TType.I32, 4)
            oprot.writeI32(self.logisticCPUCount)
            oprot.writeFieldEnd()
        if self.cpuCoreCount is not None:
            oprot.writeFieldBegin('cpuCoreCount', TType.I32, 5)
            oprot.writeI32(self.cpuCoreCount)
            oprot.writeFieldEnd()
        if self.userCPURatio is not None:
            oprot.writeFieldBegin('userCPURatio', TType.STRING, 6)
            oprot.writeString(self.userCPURatio.encode('utf-8') if sys.version_info[0] == 2 else self.userCPURatio)
            oprot.writeFieldEnd()
        if self.systemCPURatio is not None:
            oprot.writeFieldBegin('systemCPURatio', TType.STRING, 7)
            oprot.writeString(self.systemCPURatio.encode('utf-8') if sys.version_info[0] == 2 else self.systemCPURatio)
            oprot.writeFieldEnd()
        if self.idleCPURatio is not None:
            oprot.writeFieldBegin('idleCPURatio', TType.STRING, 8)
            oprot.writeString(self.idleCPURatio.encode('utf-8') if sys.version_info[0] == 2 else self.idleCPURatio)
            oprot.writeFieldEnd()
        if self.cpuTemperature is not None:
            oprot.writeFieldBegin('cpuTemperature', TType.STRING, 9)
            oprot.writeString(self.cpuTemperature.encode('utf-8') if sys.version_info[0] == 2 else self.cpuTemperature)
            oprot.writeFieldEnd()
        if self.memoryTotalSize is not None:
            oprot.writeFieldBegin('memoryTotalSize', TType.I64, 10)
            oprot.writeI64(self.memoryTotalSize)
            oprot.writeFieldEnd()
        if self.memoryUsedSize is not None:
            oprot.writeFieldBegin('memoryUsedSize', TType.I64, 11)
            oprot.writeI64(self.memoryUsedSize)
            oprot.writeFieldEnd()
        if self.memoryCacheSize is not None:
            oprot.writeFieldBegin('memoryCacheSize', TType.I64, 12)
            oprot.writeI64(self.memoryCacheSize)
            oprot.writeFieldEnd()
        if self.memoryUsedRatio is not None:
            oprot.writeFieldBegin('memoryUsedRatio', TType.STRING, 13)
            oprot.writeString(self.memoryUsedRatio.encode('utf-8') if sys.version_info[0] == 2 else self.memoryUsedRatio)
            oprot.writeFieldEnd()
        if self.interfaceCount is not None:
            oprot.writeFieldBegin('interfaceCount', TType.I32, 14)
            oprot.writeI32(self.interfaceCount)
            oprot.writeFieldEnd()
        if self.volumeCount is not None:
            oprot.writeFieldBegin('volumeCount', TType.I32, 15)
            oprot.writeI32(self.volumeCount)
            oprot.writeFieldEnd()
        if self.interfaceInfos is not None:
            oprot.writeFieldBegin('interfaceInfos', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.interfaceInfos))
            for iter12 in self.interfaceInfos:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.volumeInfos is not None:
            oprot.writeFieldBegin('volumeInfos', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeInfos))
            for iter13 in self.volumeInfos:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.machineCode is None:
            raise TProtocolException(message='Required field machineCode is unset!')
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.physicalCPUCount is None:
            raise TProtocolException(message='Required field physicalCPUCount is unset!')
        if self.logisticCPUCount is None:
            raise TProtocolException(message='Required field logisticCPUCount is unset!')
        if self.cpuCoreCount is None:
            raise TProtocolException(message='Required field cpuCoreCount is unset!')
        if self.userCPURatio is None:
            raise TProtocolException(message='Required field userCPURatio is unset!')
        if self.systemCPURatio is None:
            raise TProtocolException(message='Required field systemCPURatio is unset!')
        if self.idleCPURatio is None:
            raise TProtocolException(message='Required field idleCPURatio is unset!')
        if self.cpuTemperature is None:
            raise TProtocolException(message='Required field cpuTemperature is unset!')
        if self.memoryTotalSize is None:
            raise TProtocolException(message='Required field memoryTotalSize is unset!')
        if self.memoryUsedSize is None:
            raise TProtocolException(message='Required field memoryUsedSize is unset!')
        if self.memoryCacheSize is None:
            raise TProtocolException(message='Required field memoryCacheSize is unset!')
        if self.memoryUsedRatio is None:
            raise TProtocolException(message='Required field memoryUsedRatio is unset!')
        if self.interfaceCount is None:
            raise TProtocolException(message='Required field interfaceCount is unset!')
        if self.volumeCount is None:
            raise TProtocolException(message='Required field volumeCount is unset!')
        if self.interfaceInfos is None:
            raise TProtocolException(message='Required field interfaceInfos is unset!')
        if self.volumeInfos is None:
            raise TProtocolException(message='Required field volumeInfos is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncServiceInfo(object):
    """
    Attributes:
     - machineCode
     - serviceName
     - status
     - memoryUsedSize
     - cpuUsedRatio

    """


    def __init__(self, machineCode=None, serviceName=None, status=None, memoryUsedSize=None, cpuUsedRatio=None,):
        self.machineCode = machineCode
        self.serviceName = serviceName
        self.status = status
        self.memoryUsedSize = memoryUsedSize
        self.cpuUsedRatio = cpuUsedRatio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.memoryUsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.cpuUsedRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServiceInfo')
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 1)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 2)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.memoryUsedSize is not None:
            oprot.writeFieldBegin('memoryUsedSize', TType.I64, 4)
            oprot.writeI64(self.memoryUsedSize)
            oprot.writeFieldEnd()
        if self.cpuUsedRatio is not None:
            oprot.writeFieldBegin('cpuUsedRatio', TType.STRING, 5)
            oprot.writeString(self.cpuUsedRatio.encode('utf-8') if sys.version_info[0] == 2 else self.cpuUsedRatio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.machineCode is None:
            raise TProtocolException(message='Required field machineCode is unset!')
        if self.serviceName is None:
            raise TProtocolException(message='Required field serviceName is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.memoryUsedSize is None:
            raise TProtocolException(message='Required field memoryUsedSize is unset!')
        if self.cpuUsedRatio is None:
            raise TProtocolException(message='Required field cpuUsedRatio is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncWarnObject(object):
    """
    Attributes:
     - id
     - warnKind
     - triggerTime
     - warnLevel
     - warnParam
     - eventType
     - warnContent
     - userId
     - jobName
     - protectType

    """


    def __init__(self, id=None, warnKind=None, triggerTime=None, warnLevel=None, warnParam=None, eventType=None, warnContent=None, userId=None, jobName=None, protectType=None,):
        self.id = id
        self.warnKind = warnKind
        self.triggerTime = triggerTime
        self.warnLevel = warnLevel
        self.warnParam = warnParam
        self.eventType = eventType
        self.warnContent = warnContent
        self.userId = userId
        self.jobName = jobName
        self.protectType = protectType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.warnKind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.triggerTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.warnLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.warnParam = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.eventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.warnContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.protectType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncWarnObject')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.warnKind is not None:
            oprot.writeFieldBegin('warnKind', TType.I32, 2)
            oprot.writeI32(self.warnKind)
            oprot.writeFieldEnd()
        if self.triggerTime is not None:
            oprot.writeFieldBegin('triggerTime', TType.I64, 3)
            oprot.writeI64(self.triggerTime)
            oprot.writeFieldEnd()
        if self.warnLevel is not None:
            oprot.writeFieldBegin('warnLevel', TType.I32, 4)
            oprot.writeI32(self.warnLevel)
            oprot.writeFieldEnd()
        if self.warnParam is not None:
            oprot.writeFieldBegin('warnParam', TType.STRING, 5)
            oprot.writeString(self.warnParam.encode('utf-8') if sys.version_info[0] == 2 else self.warnParam)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 6)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        if self.warnContent is not None:
            oprot.writeFieldBegin('warnContent', TType.STRING, 7)
            oprot.writeString(self.warnContent.encode('utf-8') if sys.version_info[0] == 2 else self.warnContent)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 8)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 9)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.protectType is not None:
            oprot.writeFieldBegin('protectType', TType.I32, 10)
            oprot.writeI32(self.protectType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.warnKind is None:
            raise TProtocolException(message='Required field warnKind is unset!')
        if self.triggerTime is None:
            raise TProtocolException(message='Required field triggerTime is unset!')
        if self.warnLevel is None:
            raise TProtocolException(message='Required field warnLevel is unset!')
        if self.warnParam is None:
            raise TProtocolException(message='Required field warnParam is unset!')
        if self.eventType is None:
            raise TProtocolException(message='Required field eventType is unset!')
        if self.warnContent is None:
            raise TProtocolException(message='Required field warnContent is unset!')
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.jobName is None:
            raise TProtocolException(message='Required field jobName is unset!')
        if self.protectType is None:
            raise TProtocolException(message='Required field protectType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetServerInfoResult(object):
    """
    Attributes:
     - requestId
     - isFinished
     - serverInfo
     - hasErr
     - err

    """


    def __init__(self, requestId=None, isFinished=None, serverInfo=None, hasErr=None, err=None,):
        self.requestId = requestId
        self.isFinished = isFinished
        self.serverInfo = serverInfo
        self.hasErr = hasErr
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.serverInfo = ncServerInfo()
                    self.serverInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hasErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.err = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetServerInfoResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 2)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.serverInfo is not None:
            oprot.writeFieldBegin('serverInfo', TType.STRUCT, 3)
            self.serverInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.hasErr is not None:
            oprot.writeFieldBegin('hasErr', TType.BOOL, 4)
            oprot.writeBool(self.hasErr)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRING, 5)
            oprot.writeString(self.err.encode('utf-8') if sys.version_info[0] == 2 else self.err)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetServiceInfosResult(object):
    """
    Attributes:
     - requestId
     - isFinished
     - serviceInfos
     - hasErr
     - err

    """


    def __init__(self, requestId=None, isFinished=None, serviceInfos=None, hasErr=None, err=None,):
        self.requestId = requestId
        self.isFinished = isFinished
        self.serviceInfos = serviceInfos
        self.hasErr = hasErr
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.serviceInfos = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncServiceInfo()
                        _elem19.read(iprot)
                        self.serviceInfos.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hasErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.err = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetServiceInfosResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 2)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.serviceInfos is not None:
            oprot.writeFieldBegin('serviceInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.serviceInfos))
            for iter20 in self.serviceInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasErr is not None:
            oprot.writeFieldBegin('hasErr', TType.BOOL, 4)
            oprot.writeBool(self.hasErr)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRING, 5)
            oprot.writeString(self.err.encode('utf-8') if sys.version_info[0] == 2 else self.err)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncInterfaceInfo)
ncInterfaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'interfaceUsedRatio', 'UTF8', None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(ncVolumeInfo)
ncVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumePath', 'UTF8', None, ),  # 1
    (2, TType.I64, 'volumeTotalSize', None, None, ),  # 2
    (3, TType.I64, 'volumeUsedSize', None, None, ),  # 3
    (4, TType.STRING, 'volumeUsedRatio', 'UTF8', None, ),  # 4
)
all_structs.append(ncServerInfo)
ncServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'machineCode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.I32, 'physicalCPUCount', None, None, ),  # 3
    (4, TType.I32, 'logisticCPUCount', None, None, ),  # 4
    (5, TType.I32, 'cpuCoreCount', None, None, ),  # 5
    (6, TType.STRING, 'userCPURatio', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'systemCPURatio', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'idleCPURatio', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'cpuTemperature', 'UTF8', None, ),  # 9
    (10, TType.I64, 'memoryTotalSize', None, None, ),  # 10
    (11, TType.I64, 'memoryUsedSize', None, None, ),  # 11
    (12, TType.I64, 'memoryCacheSize', None, None, ),  # 12
    (13, TType.STRING, 'memoryUsedRatio', 'UTF8', None, ),  # 13
    (14, TType.I32, 'interfaceCount', None, None, ),  # 14
    (15, TType.I32, 'volumeCount', None, None, ),  # 15
    (16, TType.LIST, 'interfaceInfos', (TType.STRUCT, [ncInterfaceInfo, None], False), None, ),  # 16
    (17, TType.LIST, 'volumeInfos', (TType.STRUCT, [ncVolumeInfo, None], False), None, ),  # 17
)
all_structs.append(ncServiceInfo)
ncServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'machineCode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'serviceName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.I64, 'memoryUsedSize', None, None, ),  # 4
    (5, TType.STRING, 'cpuUsedRatio', 'UTF8', None, ),  # 5
)
all_structs.append(ncWarnObject)
ncWarnObject.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.I32, 'warnKind', None, None, ),  # 2
    (3, TType.I64, 'triggerTime', None, None, ),  # 3
    (4, TType.I32, 'warnLevel', None, None, ),  # 4
    (5, TType.STRING, 'warnParam', 'UTF8', None, ),  # 5
    (6, TType.I32, 'eventType', None, None, ),  # 6
    (7, TType.STRING, 'warnContent', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'userId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'jobName', 'UTF8', None, ),  # 9
    (10, TType.I32, 'protectType', None, None, ),  # 10
)
all_structs.append(ncGetServerInfoResult)
ncGetServerInfoResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isFinished', None, None, ),  # 2
    (3, TType.STRUCT, 'serverInfo', [ncServerInfo, None], None, ),  # 3
    (4, TType.BOOL, 'hasErr', None, None, ),  # 4
    (5, TType.STRING, 'err', 'UTF8', None, ),  # 5
)
all_structs.append(ncGetServiceInfosResult)
ncGetServiceInfosResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isFinished', None, None, ),  # 2
    (3, TType.LIST, 'serviceInfos', (TType.STRUCT, [ncServiceInfo, None], False), None, ),  # 3
    (4, TType.BOOL, 'hasErr', None, None, ),  # 4
    (5, TType.STRING, 'err', 'UTF8', None, ),  # 5
)
fix_spec(all_structs)
del all_structs
