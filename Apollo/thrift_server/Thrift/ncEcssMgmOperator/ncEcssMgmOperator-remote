#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncEcssMgmOperator import ncEcssMgmOperator
from ncEcssMgmOperator.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ncTaskSetInfoSet GetTaskSetInfoSet(ncTaskSetRequest request, ncCloudStorageInfo cloudInfo)')
    print('  ncGNSObjectInfoSet GetSubObjectSet(ncGNSObjectRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  ncCIDObjectInfoSet GetCIDObjectSet(ncCIDObjectRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  ncTimepointInfoSet GetTimepointSet(ncTimepointRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  ncGNSObjectInfoSet GetGNSObjectSet(ncGNSObjectSetRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void SetTimepointAvailable(ncTimepointObjectInfoRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void DelTimepointLineData(ncDeleteDataRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void DelTimepointData(ncDeleteDataRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void DelCIDObjectData(ncGNSObjectRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void DelTaskSetData(ncTaskSetRequest request, ncCloudStorageInfo cloudInfo, string taskSetSign)')
    print('  void SetVolumeInfo(ncEcssVolumeInfo volumeInfo)')
    print('  ncEcssVolumeInfo GetVolumeInfo()')
    print('  bool CheckVolumeIsEmpty()')
    print('  ncBucketInfoReply GetBucketList(ncCloudStorageInfo cloudInfo)')
    print('  ncBucketInfoReply GetMetaBucket(ncCloudStorageInfo cloudInfo)')
    print('  void SetMetaBucket(ncCloudStorageInfo cloudInfo, string metaBucketName)')
    print('   CheckBucketsExists(ncCloudStorageInfo cloudInfo)')
    print('  void SetCloudSign(ncCloudStorageInfo cloudOldInfo, ncCloudStorageInfo cloudInfo)')
    print('  ncBucketInfoReply DelAllBucketData(string requestID, ncCloudStorageInfo cloudInfo)')
    print('  ncCloudCertInfo VerifyCloudCert(ncCloudStorageInfo cloudInfo)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncEcssMgmOperator.Client(protocol)
transport.open()

if cmd == 'GetTaskSetInfoSet':
    if len(args) != 2:
        print('GetTaskSetInfoSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetTaskSetInfoSet(eval(args[0]), eval(args[1]),))

elif cmd == 'GetSubObjectSet':
    if len(args) != 3:
        print('GetSubObjectSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetSubObjectSet(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetCIDObjectSet':
    if len(args) != 3:
        print('GetCIDObjectSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetCIDObjectSet(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetTimepointSet':
    if len(args) != 3:
        print('GetTimepointSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetTimepointSet(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetGNSObjectSet':
    if len(args) != 3:
        print('GetGNSObjectSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetGNSObjectSet(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'SetTimepointAvailable':
    if len(args) != 3:
        print('SetTimepointAvailable requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetTimepointAvailable(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'DelTimepointLineData':
    if len(args) != 3:
        print('DelTimepointLineData requires 3 args')
        sys.exit(1)
    pp.pprint(client.DelTimepointLineData(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'DelTimepointData':
    if len(args) != 3:
        print('DelTimepointData requires 3 args')
        sys.exit(1)
    pp.pprint(client.DelTimepointData(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'DelCIDObjectData':
    if len(args) != 3:
        print('DelCIDObjectData requires 3 args')
        sys.exit(1)
    pp.pprint(client.DelCIDObjectData(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'DelTaskSetData':
    if len(args) != 3:
        print('DelTaskSetData requires 3 args')
        sys.exit(1)
    pp.pprint(client.DelTaskSetData(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'SetVolumeInfo':
    if len(args) != 1:
        print('SetVolumeInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeInfo(eval(args[0]),))

elif cmd == 'GetVolumeInfo':
    if len(args) != 0:
        print('GetVolumeInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeInfo())

elif cmd == 'CheckVolumeIsEmpty':
    if len(args) != 0:
        print('CheckVolumeIsEmpty requires 0 args')
        sys.exit(1)
    pp.pprint(client.CheckVolumeIsEmpty())

elif cmd == 'GetBucketList':
    if len(args) != 1:
        print('GetBucketList requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetBucketList(eval(args[0]),))

elif cmd == 'GetMetaBucket':
    if len(args) != 1:
        print('GetMetaBucket requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetMetaBucket(eval(args[0]),))

elif cmd == 'SetMetaBucket':
    if len(args) != 2:
        print('SetMetaBucket requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetMetaBucket(eval(args[0]), args[1],))

elif cmd == 'CheckBucketsExists':
    if len(args) != 1:
        print('CheckBucketsExists requires 1 args')
        sys.exit(1)
    pp.pprint(client.CheckBucketsExists(eval(args[0]),))

elif cmd == 'SetCloudSign':
    if len(args) != 2:
        print('SetCloudSign requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetCloudSign(eval(args[0]), eval(args[1]),))

elif cmd == 'DelAllBucketData':
    if len(args) != 2:
        print('DelAllBucketData requires 2 args')
        sys.exit(1)
    pp.pprint(client.DelAllBucketData(args[0], eval(args[1]),))

elif cmd == 'VerifyCloudCert':
    if len(args) != 1:
        print('VerifyCloudCert requires 1 args')
        sys.exit(1)
    pp.pprint(client.VerifyCloudCert(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
