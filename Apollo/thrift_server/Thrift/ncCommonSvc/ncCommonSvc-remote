#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncCommonSvc import ncCommonSvc
from ncCommonSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void microprobe()')
    print('   get_all_clients()')
    print('  ncTClient get_available_internal_client()')
    print('   get_clients_by_macs( macs)')
    print('   get_clients_by_ids( client_ids)')
    print('   get_clients_by_id(string client_id)')
    print('  ncCloudStorage get_storage_by_name(string cloudStorageName)')
    print('   get_storages()')
    print('   get_storage_by_type(i32 cloud_type, i32 use_type)')
    print('   get_all_storages()')
    print('  ncTClient get_client(string clientId)')
    print('  void update_client(string clientId, bool isEmail)')
    print('  ncTClient get_client_by_mac(string clientMac)')
    print('   get_platforms_by_request_config(ncGetPlatformsReq p_req)')
    print('  ncTPlatform get_newest_platform(string vplatformId)')
    print('  string get_client_server_ip(string client_uuid)')
    print('  void commit_job(string clientId, ncEEFBase baseInfo)')
    print('  ncTScheTaskResult add_schedule_job(ncTScheTaskInfo tScheTaskInfo)')
    print('  void remove_plans_in_cache( planIds)')
    print('  ncTScheTaskResult modify_schedule_job(ncTScheTaskInfo tScheTaskInfo)')
    print('  void modify_schedule_list_job( tScheTaskInfoList)')
    print('  void delete_schedule_jobs( planId_list, ncServiceType svcType)')
    print('  void update_schedule_jobs_state( planId_list, ncScheStatus state, ncServiceType svcType)')
    print('  ncTScheTaskInfoResult get_schedule_all_jobs(ncServiceType svcType, string filter, i32 count, i32 index, string auther)')
    print('  ncTScheTaskInfo get_schedule_job(string planId)')
    print('  ncTScheTaskInfoResult get_schedule_jobs(string jobId, i32 count, i32 index)')
    print('  ncTScheTaskInfoResult get_schedule_depend_jobs(string jobId, i32 count, i32 index)')
    print('  void remove_all_plan_by_job_id(string jobId, ncServiceType svcType)')
    print('  void remove_all_plan_by_job_ids( jobIds, ncServiceType svcType)')
    print('  ncNextScheResult get_next_run_sche_by_job_id( jobIdList, ncServiceType svcType)')
    print('  bool verify_plan_exists(string planId)')
    print('   get_all_sches_in_node(bool real)')
    print('  ncDBInstanceResponse get_db_instance(ncDBInstanceRequest request)')
    print('  ncDBInstancesResponse get_db_instances(ncDBInstanceRequest request)')
    print('  string get_datasource_client_info(string clientId)')
    print('  ncServer get_server_by_ip(string ip)')
    print('   get_available_child_clients(ncParentClient nc_parent_client, ncChildClientFilterParameter filter_parameter)')
    print('   get_all_child_clients(ncParentClient nc_parent_client, ncChildClientFilterParameter filter_parameter)')
    print('   get_parent_clients(string clientId)')
    print('  ncClientHadoopInfo get_hadoop_info(ncParentClient nc_parent_client)')
    print('  ncMongodbClientInfo get_mongodb_client_info(string parent_client_id, string child_client_id)')
    print('  ncClientDistriRes client_authorize(ncClientDistriReq cliDisReq)')
    print('  ncPlatformDistriRes platform_authorize(ncPlatformDistriReq platDisReq)')
    print('   get_servers(ncGetServerRequest request)')
    print('  ncClientAuthRes del_auth_users_task(ncClientAuthReq authReq)')
    print('  ncClientAuthRes update_state_auth_users_task(ncClientAuthReq authReq, ncUserStatus state)')
    print('  ncStrategyInfo get_strategy(string strategyId)')
    print('  ncStrategyInfo get_strategy_by_name_and_job_type(string strategy_name, string job_type)')
    print('  void create_strategy_schedule(string strategyId, string job_id, string begin_time)')
    print('  void modify_strategy_schedule(string strategyId, string job_id, string begin_time)')
    print('  void new_modify_strategy_schedule( schedules)')
    print('  void delete_strategy_schedule(string job_id, string host_id)')
    print('  void delete_cur_strategy_schedule( plan_id_list)')
    print('   get_clientid_nctclient(ncClientFilterRequest request)')
    print('   get_client_configs_by_client_id(string clientId)')
    print('  bool get_fp_user_status(string fp_id, string user_name)')
    print('  bool get_fp_by_node_ip(string node_ip)')
    print('   get_contentcloudresourceid_resourceobj(ncContentCloudResourceQueryRequest request)')
    print('  string get_username_by_flguid(string flguid)')
    print('  void delete_recovery_client(string client_id)')
    print('  void delete_recovery_clients( client_ids)')
    print('  void update_job_message_for_ams(string jobId, string msgMethod)')
    print('  void add_recovery_job_for_ams(string jobId)')
    print('  void get_task_log_message(string instanceId, string msgMethod)')
    print('  void get_delete_job_message(string taskId)')
    print('  void create_clean_job(ncAmsJobType clean_job)')
    print('  void update_remote_job_log(ncJobLog jobInstance, string msgMethod)')
    print('  void update_remote_job(ncAmsJobType job, string msgMethod)')
    print('  void update_cdm_backup_job(ncAmsJobType job, string msgMethod)')
    print('  void update_cdm_backup_job_history(ncJobLog jobInstance, string msgMethod)')
    print('  void update_cdm_mount_job(ncAmsJobType job, string msgMethod)')
    print('  void update_cdp_job(ncAmsJobType job, string msgMethod)')
    print('  void update_cdp_job_instance(ncJobLog jobInstance, string msgMethod)')
    print('  ncProjectUserDistriRes project_user_authorize(ncProjectUserDistriReq projectUserDisReq)')
    print('   get_newest_projectuser( projectuserIds, bool decrypt)')
    print('   get_newest_projectstorage(string projectId)')
    print('  void update_cdm_mount_job_instance(ncJobLog jobInstance, string msgMethod)')
    print('  i32 get_client_count_by_auth_user(string username)')
    print('   get_clients_by_vir_platform(string vir_platform_id)')
    print('  ncTClient get_client_by_vir_platform_and_node(string vir_platform_id, i32 node_id)')
    print('  string get_data_for_ams(string kwargs)')
    print('  string do_operation_from_ams(string target, string method, string kwargs)')
    print('  ncClusterDataSourceSet get_cluster_datasource(ncDataSourceRequest req)')
    print('  ncDataSourceSet get_virtual_machine_datasource(string client_id, ncDataSourceRequest req)')
    print('  ncTClientDetails get_client_by_ip_or_id(string client_ip, string client_id)')
    print('   get_in_kvm_platform()')
    print('  void update_or_create_fp_pool()')
    print('  bool get_client_type_by_id(string clientId)')
    print('  void check_user_source(string username, ncSource source)')
    print('  ncServer get_server_by_client_ip(string ip)')
    print('  bool get_client_link_type(string configId, string hostId, string wwn)')
    print('  ncVirtualSafetyUsers get_virtual_safety_users(ncVirtualSafetyInfos infos)')
    print('   get_all_clients_to_log(string user_id)')
    print('   get_fp_node_info_by_node_ip(string node_ip)')
    print('  bool get_fl_by_fpoor_id(string fp_id)')
    print('  void update_finger_poor_nodes(string fp_id, string node_ip)')
    print('   get_fl_guid_ids_by_fp_id(string fp_id)')
    print('  ncProtectObjectCountInfo get_protect_object_count(ncUserInfo user)')
    print('  void update_clients(string clientId, string customer, string clusterPort)')
    print('  ncFingerPoorsData get_fp_data_by_primary_key_id(string primary_key_id)')
    print('   get_backup_cloud_jobs(bool query_all)')
    print('   get_projectuser_list( cplatform_types)')
    print('   get_all_protect_object()')
    print('  string abstract_public_interface(string msg, string body)')
    print('  ncDatasourceResult check_get_appsys(ncDatasourceCheckReq req)')
    print('  void update_eceph_info(ncCephInfo cinfo)')
    print('  void modify_schedule_job_cur_node(string strategy_id, string job_id, string begin_time, bool is_modify_strategy)')
    print('   check_user_has_data( user_list)')
    print('  void create_schedules_cur_node( schedules)')
    print('  void modify_job_schedules_cur_node( schedules)')
    print('   get_schedule_start_time( schedules)')
    print('  ncPublicCloudResource get_public_cloud_resource(string public_cloud_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncCommonSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
    if len(args) != 0:
        print('microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.microprobe())

elif cmd == 'get_all_clients':
    if len(args) != 0:
        print('get_all_clients requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_clients())

elif cmd == 'get_available_internal_client':
    if len(args) != 0:
        print('get_available_internal_client requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_available_internal_client())

elif cmd == 'get_clients_by_macs':
    if len(args) != 1:
        print('get_clients_by_macs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clients_by_macs(eval(args[0]),))

elif cmd == 'get_clients_by_ids':
    if len(args) != 1:
        print('get_clients_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clients_by_ids(eval(args[0]),))

elif cmd == 'get_clients_by_id':
    if len(args) != 1:
        print('get_clients_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clients_by_id(args[0],))

elif cmd == 'get_storage_by_name':
    if len(args) != 1:
        print('get_storage_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_storage_by_name(args[0],))

elif cmd == 'get_storages':
    if len(args) != 0:
        print('get_storages requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_storages())

elif cmd == 'get_storage_by_type':
    if len(args) != 2:
        print('get_storage_by_type requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_storage_by_type(eval(args[0]), eval(args[1]),))

elif cmd == 'get_all_storages':
    if len(args) != 0:
        print('get_all_storages requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_storages())

elif cmd == 'get_client':
    if len(args) != 1:
        print('get_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client(args[0],))

elif cmd == 'update_client':
    if len(args) != 2:
        print('update_client requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_client(args[0], eval(args[1]),))

elif cmd == 'get_client_by_mac':
    if len(args) != 1:
        print('get_client_by_mac requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client_by_mac(args[0],))

elif cmd == 'get_platforms_by_request_config':
    if len(args) != 1:
        print('get_platforms_by_request_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_platforms_by_request_config(eval(args[0]),))

elif cmd == 'get_newest_platform':
    if len(args) != 1:
        print('get_newest_platform requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_newest_platform(args[0],))

elif cmd == 'get_client_server_ip':
    if len(args) != 1:
        print('get_client_server_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client_server_ip(args[0],))

elif cmd == 'commit_job':
    if len(args) != 2:
        print('commit_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.commit_job(args[0], eval(args[1]),))

elif cmd == 'add_schedule_job':
    if len(args) != 1:
        print('add_schedule_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_schedule_job(eval(args[0]),))

elif cmd == 'remove_plans_in_cache':
    if len(args) != 1:
        print('remove_plans_in_cache requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_plans_in_cache(eval(args[0]),))

elif cmd == 'modify_schedule_job':
    if len(args) != 1:
        print('modify_schedule_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.modify_schedule_job(eval(args[0]),))

elif cmd == 'modify_schedule_list_job':
    if len(args) != 1:
        print('modify_schedule_list_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.modify_schedule_list_job(eval(args[0]),))

elif cmd == 'delete_schedule_jobs':
    if len(args) != 2:
        print('delete_schedule_jobs requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_schedule_jobs(eval(args[0]), eval(args[1]),))

elif cmd == 'update_schedule_jobs_state':
    if len(args) != 3:
        print('update_schedule_jobs_state requires 3 args')
        sys.exit(1)
    pp.pprint(client.update_schedule_jobs_state(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_schedule_all_jobs':
    if len(args) != 5:
        print('get_schedule_all_jobs requires 5 args')
        sys.exit(1)
    pp.pprint(client.get_schedule_all_jobs(eval(args[0]), args[1], eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'get_schedule_job':
    if len(args) != 1:
        print('get_schedule_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_schedule_job(args[0],))

elif cmd == 'get_schedule_jobs':
    if len(args) != 3:
        print('get_schedule_jobs requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_schedule_jobs(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'get_schedule_depend_jobs':
    if len(args) != 3:
        print('get_schedule_depend_jobs requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_schedule_depend_jobs(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'remove_all_plan_by_job_id':
    if len(args) != 2:
        print('remove_all_plan_by_job_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_all_plan_by_job_id(args[0], eval(args[1]),))

elif cmd == 'remove_all_plan_by_job_ids':
    if len(args) != 2:
        print('remove_all_plan_by_job_ids requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_all_plan_by_job_ids(eval(args[0]), eval(args[1]),))

elif cmd == 'get_next_run_sche_by_job_id':
    if len(args) != 2:
        print('get_next_run_sche_by_job_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_next_run_sche_by_job_id(eval(args[0]), eval(args[1]),))

elif cmd == 'verify_plan_exists':
    if len(args) != 1:
        print('verify_plan_exists requires 1 args')
        sys.exit(1)
    pp.pprint(client.verify_plan_exists(args[0],))

elif cmd == 'get_all_sches_in_node':
    if len(args) != 1:
        print('get_all_sches_in_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_sches_in_node(eval(args[0]),))

elif cmd == 'get_db_instance':
    if len(args) != 1:
        print('get_db_instance requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_instance(eval(args[0]),))

elif cmd == 'get_db_instances':
    if len(args) != 1:
        print('get_db_instances requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_instances(eval(args[0]),))

elif cmd == 'get_datasource_client_info':
    if len(args) != 1:
        print('get_datasource_client_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_datasource_client_info(args[0],))

elif cmd == 'get_server_by_ip':
    if len(args) != 1:
        print('get_server_by_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_server_by_ip(args[0],))

elif cmd == 'get_available_child_clients':
    if len(args) != 2:
        print('get_available_child_clients requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_available_child_clients(eval(args[0]), eval(args[1]),))

elif cmd == 'get_all_child_clients':
    if len(args) != 2:
        print('get_all_child_clients requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_all_child_clients(eval(args[0]), eval(args[1]),))

elif cmd == 'get_parent_clients':
    if len(args) != 1:
        print('get_parent_clients requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_parent_clients(args[0],))

elif cmd == 'get_hadoop_info':
    if len(args) != 1:
        print('get_hadoop_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_hadoop_info(eval(args[0]),))

elif cmd == 'get_mongodb_client_info':
    if len(args) != 2:
        print('get_mongodb_client_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_mongodb_client_info(args[0], args[1],))

elif cmd == 'client_authorize':
    if len(args) != 1:
        print('client_authorize requires 1 args')
        sys.exit(1)
    pp.pprint(client.client_authorize(eval(args[0]),))

elif cmd == 'platform_authorize':
    if len(args) != 1:
        print('platform_authorize requires 1 args')
        sys.exit(1)
    pp.pprint(client.platform_authorize(eval(args[0]),))

elif cmd == 'get_servers':
    if len(args) != 1:
        print('get_servers requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_servers(eval(args[0]),))

elif cmd == 'del_auth_users_task':
    if len(args) != 1:
        print('del_auth_users_task requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_auth_users_task(eval(args[0]),))

elif cmd == 'update_state_auth_users_task':
    if len(args) != 2:
        print('update_state_auth_users_task requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_state_auth_users_task(eval(args[0]), eval(args[1]),))

elif cmd == 'get_strategy':
    if len(args) != 1:
        print('get_strategy requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_strategy(args[0],))

elif cmd == 'get_strategy_by_name_and_job_type':
    if len(args) != 2:
        print('get_strategy_by_name_and_job_type requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_strategy_by_name_and_job_type(args[0], args[1],))

elif cmd == 'create_strategy_schedule':
    if len(args) != 3:
        print('create_strategy_schedule requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_strategy_schedule(args[0], args[1], args[2],))

elif cmd == 'modify_strategy_schedule':
    if len(args) != 3:
        print('modify_strategy_schedule requires 3 args')
        sys.exit(1)
    pp.pprint(client.modify_strategy_schedule(args[0], args[1], args[2],))

elif cmd == 'new_modify_strategy_schedule':
    if len(args) != 1:
        print('new_modify_strategy_schedule requires 1 args')
        sys.exit(1)
    pp.pprint(client.new_modify_strategy_schedule(eval(args[0]),))

elif cmd == 'delete_strategy_schedule':
    if len(args) != 2:
        print('delete_strategy_schedule requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_strategy_schedule(args[0], args[1],))

elif cmd == 'delete_cur_strategy_schedule':
    if len(args) != 1:
        print('delete_cur_strategy_schedule requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_cur_strategy_schedule(eval(args[0]),))

elif cmd == 'get_clientid_nctclient':
    if len(args) != 1:
        print('get_clientid_nctclient requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clientid_nctclient(eval(args[0]),))

elif cmd == 'get_client_configs_by_client_id':
    if len(args) != 1:
        print('get_client_configs_by_client_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client_configs_by_client_id(args[0],))

elif cmd == 'get_fp_user_status':
    if len(args) != 2:
        print('get_fp_user_status requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_fp_user_status(args[0], args[1],))

elif cmd == 'get_fp_by_node_ip':
    if len(args) != 1:
        print('get_fp_by_node_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fp_by_node_ip(args[0],))

elif cmd == 'get_contentcloudresourceid_resourceobj':
    if len(args) != 1:
        print('get_contentcloudresourceid_resourceobj requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_contentcloudresourceid_resourceobj(eval(args[0]),))

elif cmd == 'get_username_by_flguid':
    if len(args) != 1:
        print('get_username_by_flguid requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_username_by_flguid(args[0],))

elif cmd == 'delete_recovery_client':
    if len(args) != 1:
        print('delete_recovery_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_recovery_client(args[0],))

elif cmd == 'delete_recovery_clients':
    if len(args) != 1:
        print('delete_recovery_clients requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_recovery_clients(eval(args[0]),))

elif cmd == 'update_job_message_for_ams':
    if len(args) != 2:
        print('update_job_message_for_ams requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_job_message_for_ams(args[0], args[1],))

elif cmd == 'add_recovery_job_for_ams':
    if len(args) != 1:
        print('add_recovery_job_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_recovery_job_for_ams(args[0],))

elif cmd == 'get_task_log_message':
    if len(args) != 2:
        print('get_task_log_message requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_task_log_message(args[0], args[1],))

elif cmd == 'get_delete_job_message':
    if len(args) != 1:
        print('get_delete_job_message requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_delete_job_message(args[0],))

elif cmd == 'create_clean_job':
    if len(args) != 1:
        print('create_clean_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_clean_job(eval(args[0]),))

elif cmd == 'update_remote_job_log':
    if len(args) != 2:
        print('update_remote_job_log requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_remote_job_log(eval(args[0]), args[1],))

elif cmd == 'update_remote_job':
    if len(args) != 2:
        print('update_remote_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_remote_job(eval(args[0]), args[1],))

elif cmd == 'update_cdm_backup_job':
    if len(args) != 2:
        print('update_cdm_backup_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdm_backup_job(eval(args[0]), args[1],))

elif cmd == 'update_cdm_backup_job_history':
    if len(args) != 2:
        print('update_cdm_backup_job_history requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdm_backup_job_history(eval(args[0]), args[1],))

elif cmd == 'update_cdm_mount_job':
    if len(args) != 2:
        print('update_cdm_mount_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdm_mount_job(eval(args[0]), args[1],))

elif cmd == 'update_cdp_job':
    if len(args) != 2:
        print('update_cdp_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdp_job(eval(args[0]), args[1],))

elif cmd == 'update_cdp_job_instance':
    if len(args) != 2:
        print('update_cdp_job_instance requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdp_job_instance(eval(args[0]), args[1],))

elif cmd == 'project_user_authorize':
    if len(args) != 1:
        print('project_user_authorize requires 1 args')
        sys.exit(1)
    pp.pprint(client.project_user_authorize(eval(args[0]),))

elif cmd == 'get_newest_projectuser':
    if len(args) != 2:
        print('get_newest_projectuser requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_newest_projectuser(eval(args[0]), eval(args[1]),))

elif cmd == 'get_newest_projectstorage':
    if len(args) != 1:
        print('get_newest_projectstorage requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_newest_projectstorage(args[0],))

elif cmd == 'update_cdm_mount_job_instance':
    if len(args) != 2:
        print('update_cdm_mount_job_instance requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_cdm_mount_job_instance(eval(args[0]), args[1],))

elif cmd == 'get_client_count_by_auth_user':
    if len(args) != 1:
        print('get_client_count_by_auth_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client_count_by_auth_user(args[0],))

elif cmd == 'get_clients_by_vir_platform':
    if len(args) != 1:
        print('get_clients_by_vir_platform requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clients_by_vir_platform(args[0],))

elif cmd == 'get_client_by_vir_platform_and_node':
    if len(args) != 2:
        print('get_client_by_vir_platform_and_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_client_by_vir_platform_and_node(args[0], eval(args[1]),))

elif cmd == 'get_data_for_ams':
    if len(args) != 1:
        print('get_data_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'do_operation_from_ams':
    if len(args) != 3:
        print('do_operation_from_ams requires 3 args')
        sys.exit(1)
    pp.pprint(client.do_operation_from_ams(args[0], args[1], args[2],))

elif cmd == 'get_cluster_datasource':
    if len(args) != 1:
        print('get_cluster_datasource requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_datasource(eval(args[0]),))

elif cmd == 'get_virtual_machine_datasource':
    if len(args) != 2:
        print('get_virtual_machine_datasource requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_virtual_machine_datasource(args[0], eval(args[1]),))

elif cmd == 'get_client_by_ip_or_id':
    if len(args) != 2:
        print('get_client_by_ip_or_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_client_by_ip_or_id(args[0], args[1],))

elif cmd == 'get_in_kvm_platform':
    if len(args) != 0:
        print('get_in_kvm_platform requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_in_kvm_platform())

elif cmd == 'update_or_create_fp_pool':
    if len(args) != 0:
        print('update_or_create_fp_pool requires 0 args')
        sys.exit(1)
    pp.pprint(client.update_or_create_fp_pool())

elif cmd == 'get_client_type_by_id':
    if len(args) != 1:
        print('get_client_type_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_client_type_by_id(args[0],))

elif cmd == 'check_user_source':
    if len(args) != 2:
        print('check_user_source requires 2 args')
        sys.exit(1)
    pp.pprint(client.check_user_source(args[0], eval(args[1]),))

elif cmd == 'get_server_by_client_ip':
    if len(args) != 1:
        print('get_server_by_client_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_server_by_client_ip(args[0],))

elif cmd == 'get_client_link_type':
    if len(args) != 3:
        print('get_client_link_type requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_client_link_type(args[0], args[1], args[2],))

elif cmd == 'get_virtual_safety_users':
    if len(args) != 1:
        print('get_virtual_safety_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_virtual_safety_users(eval(args[0]),))

elif cmd == 'get_all_clients_to_log':
    if len(args) != 1:
        print('get_all_clients_to_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_clients_to_log(args[0],))

elif cmd == 'get_fp_node_info_by_node_ip':
    if len(args) != 1:
        print('get_fp_node_info_by_node_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fp_node_info_by_node_ip(args[0],))

elif cmd == 'get_fl_by_fpoor_id':
    if len(args) != 1:
        print('get_fl_by_fpoor_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fl_by_fpoor_id(args[0],))

elif cmd == 'update_finger_poor_nodes':
    if len(args) != 2:
        print('update_finger_poor_nodes requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_finger_poor_nodes(args[0], args[1],))

elif cmd == 'get_fl_guid_ids_by_fp_id':
    if len(args) != 1:
        print('get_fl_guid_ids_by_fp_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fl_guid_ids_by_fp_id(args[0],))

elif cmd == 'get_protect_object_count':
    if len(args) != 1:
        print('get_protect_object_count requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_protect_object_count(eval(args[0]),))

elif cmd == 'update_clients':
    if len(args) != 3:
        print('update_clients requires 3 args')
        sys.exit(1)
    pp.pprint(client.update_clients(args[0], args[1], args[2],))

elif cmd == 'get_fp_data_by_primary_key_id':
    if len(args) != 1:
        print('get_fp_data_by_primary_key_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fp_data_by_primary_key_id(args[0],))

elif cmd == 'get_backup_cloud_jobs':
    if len(args) != 1:
        print('get_backup_cloud_jobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backup_cloud_jobs(eval(args[0]),))

elif cmd == 'get_projectuser_list':
    if len(args) != 1:
        print('get_projectuser_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_projectuser_list(eval(args[0]),))

elif cmd == 'get_all_protect_object':
    if len(args) != 0:
        print('get_all_protect_object requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_protect_object())

elif cmd == 'abstract_public_interface':
    if len(args) != 2:
        print('abstract_public_interface requires 2 args')
        sys.exit(1)
    pp.pprint(client.abstract_public_interface(args[0], args[1],))

elif cmd == 'check_get_appsys':
    if len(args) != 1:
        print('check_get_appsys requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_get_appsys(eval(args[0]),))

elif cmd == 'update_eceph_info':
    if len(args) != 1:
        print('update_eceph_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_eceph_info(eval(args[0]),))

elif cmd == 'modify_schedule_job_cur_node':
    if len(args) != 4:
        print('modify_schedule_job_cur_node requires 4 args')
        sys.exit(1)
    pp.pprint(client.modify_schedule_job_cur_node(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'check_user_has_data':
    if len(args) != 1:
        print('check_user_has_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_user_has_data(eval(args[0]),))

elif cmd == 'create_schedules_cur_node':
    if len(args) != 1:
        print('create_schedules_cur_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_schedules_cur_node(eval(args[0]),))

elif cmd == 'modify_job_schedules_cur_node':
    if len(args) != 1:
        print('modify_job_schedules_cur_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.modify_job_schedules_cur_node(eval(args[0]),))

elif cmd == 'get_schedule_start_time':
    if len(args) != 1:
        print('get_schedule_start_time requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_schedule_start_time(eval(args[0]),))

elif cmd == 'get_public_cloud_resource':
    if len(args) != 1:
        print('get_public_cloud_resource requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_public_cloud_resource(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
