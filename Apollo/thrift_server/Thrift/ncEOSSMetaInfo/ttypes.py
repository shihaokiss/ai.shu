# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncObjectInfo.ttypes

from thrift.transport import TTransport
all_structs = []


class ncObjectType(object):
    NC_UNKNOWN_OBJECT = 0
    NC_ROOT_OBJECT = 1
    NC_CID_OBJECT = 2
    NC_TIMEPOINT_OBJECT = 3
    NC_DATA_OBJECT = 4

    _VALUES_TO_NAMES = {
        0: "NC_UNKNOWN_OBJECT",
        1: "NC_ROOT_OBJECT",
        2: "NC_CID_OBJECT",
        3: "NC_TIMEPOINT_OBJECT",
        4: "NC_DATA_OBJECT",
    }

    _NAMES_TO_VALUES = {
        "NC_UNKNOWN_OBJECT": 0,
        "NC_ROOT_OBJECT": 1,
        "NC_CID_OBJECT": 2,
        "NC_TIMEPOINT_OBJECT": 3,
        "NC_DATA_OBJECT": 4,
    }


class ncObjectIndexData(object):
    """
    Attributes:
     - objectId
     - attributes
     - originalSize
     - type
     - extAttributes
     - versionInfo

    """


    def __init__(self, objectId=None, attributes=None, originalSize=None, type=None, extAttributes=None, versionInfo=None,):
        self.objectId = objectId
        self.attributes = attributes
        self.originalSize = originalSize
        self.type = type
        self.extAttributes = extAttributes
        self.versionInfo = versionInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.originalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.extAttributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.versionInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncObjectIndexData')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 2)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.originalSize is not None:
            oprot.writeFieldBegin('originalSize', TType.I64, 3)
            oprot.writeI64(self.originalSize)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.extAttributes is not None:
            oprot.writeFieldBegin('extAttributes', TType.I32, 5)
            oprot.writeI32(self.extAttributes)
            oprot.writeFieldEnd()
        if self.versionInfo is not None:
            oprot.writeFieldBegin('versionInfo', TType.I64, 6)
            oprot.writeI64(self.versionInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBlockIndexData(object):
    """
    Attributes:
     - offset
     - originlength
     - attributes
     - blockId
     - originChecksum
     - versionInfo

    """


    def __init__(self, offset=None, originlength=None, attributes=None, blockId=None, originChecksum=0, versionInfo=None,):
        self.offset = offset
        self.originlength = originlength
        self.attributes = attributes
        self.blockId = blockId
        self.originChecksum = originChecksum
        self.versionInfo = versionInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.originlength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.originChecksum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.versionInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBlockIndexData')
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 1)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.originlength is not None:
            oprot.writeFieldBegin('originlength', TType.I32, 2)
            oprot.writeI32(self.originlength)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 3)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 4)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        if self.originChecksum is not None:
            oprot.writeFieldBegin('originChecksum', TType.I64, 5)
            oprot.writeI64(self.originChecksum)
            oprot.writeFieldEnd()
        if self.versionInfo is not None:
            oprot.writeFieldBegin('versionInfo', TType.I64, 6)
            oprot.writeI64(self.versionInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCNSObjectInfo(object):
    """
    Attributes:
     - gnsPath
     - indexData
     - metadata
     - displayName
     - signature

    """


    def __init__(self, gnsPath=None, indexData=None, metadata=None, displayName=None, signature=None,):
        self.gnsPath = gnsPath
        self.indexData = indexData
        self.metadata = metadata
        self.displayName = displayName
        self.signature = signature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.indexData = ncObjectIndexData()
                    self.indexData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.metadata = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.signature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCNSObjectInfo')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.indexData is not None:
            oprot.writeFieldBegin('indexData', TType.STRUCT, 2)
            self.indexData.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 3)
            oprot.writeBinary(self.metadata)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 4)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 5)
            oprot.writeString(self.signature.encode('utf-8') if sys.version_info[0] == 2 else self.signature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBlockInfo(object):
    """
    Attributes:
     - objectId
     - indexData
     - chunkChecksum
     - chunkLength

    """


    def __init__(self, objectId=None, indexData=None, chunkChecksum=0, chunkLength=None,):
        self.objectId = objectId
        self.indexData = indexData
        self.chunkChecksum = chunkChecksum
        self.chunkLength = chunkLength

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.indexData = ncBlockIndexData()
                    self.indexData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.chunkChecksum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.chunkLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBlockInfo')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.indexData is not None:
            oprot.writeFieldBegin('indexData', TType.STRUCT, 2)
            self.indexData.write(oprot)
            oprot.writeFieldEnd()
        if self.chunkChecksum is not None:
            oprot.writeFieldBegin('chunkChecksum', TType.I64, 3)
            oprot.writeI64(self.chunkChecksum)
            oprot.writeFieldEnd()
        if self.chunkLength is not None:
            oprot.writeFieldBegin('chunkLength', TType.I32, 4)
            oprot.writeI32(self.chunkLength)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncObjectIndexData)
ncObjectIndexData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'objectId', None, None, ),  # 1
    (2, TType.I32, 'attributes', None, None, ),  # 2
    (3, TType.I64, 'originalSize', None, None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.I32, 'extAttributes', None, None, ),  # 5
    (6, TType.I64, 'versionInfo', None, None, ),  # 6
)
all_structs.append(ncBlockIndexData)
ncBlockIndexData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'offset', None, None, ),  # 1
    (2, TType.I32, 'originlength', None, None, ),  # 2
    (3, TType.I32, 'attributes', None, None, ),  # 3
    (4, TType.I64, 'blockId', None, None, ),  # 4
    (5, TType.I64, 'originChecksum', None, 0, ),  # 5
    (6, TType.I64, 'versionInfo', None, None, ),  # 6
)
all_structs.append(ncCNSObjectInfo)
ncCNSObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'indexData', [ncObjectIndexData, None], None, ),  # 2
    (3, TType.STRING, 'metadata', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'displayName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'signature', 'UTF8', None, ),  # 5
)
all_structs.append(ncBlockInfo)
ncBlockInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'objectId', None, None, ),  # 1
    (2, TType.STRUCT, 'indexData', [ncBlockIndexData, None], None, ),  # 2
    (3, TType.I64, 'chunkChecksum', None, 0, ),  # 3
    (4, TType.I32, 'chunkLength', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
