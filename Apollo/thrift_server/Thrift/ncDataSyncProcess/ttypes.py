# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncDataSourceJobInfo(object):
    """
    Attributes:
     - clusterId
     - authUser
     - jobId
     - jobName
     - passWd
     - customer
     - vip
     - jobType

    """


    def __init__(self, clusterId=None, authUser=None, jobId=None, jobName=None, passWd=None, customer=None, vip=None, jobType=None,):
        self.clusterId = clusterId
        self.authUser = authUser
        self.jobId = jobId
        self.jobName = jobName
        self.passWd = passWd
        self.customer = customer
        self.vip = vip
        self.jobType = jobType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.authUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.passWd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.vip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSourceJobInfo')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.authUser is not None:
            oprot.writeFieldBegin('authUser', TType.STRING, 2)
            oprot.writeString(self.authUser.encode('utf-8') if sys.version_info[0] == 2 else self.authUser)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 3)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 4)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.passWd is not None:
            oprot.writeFieldBegin('passWd', TType.STRING, 5)
            oprot.writeString(self.passWd.encode('utf-8') if sys.version_info[0] == 2 else self.passWd)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 6)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRING, 7)
            oprot.writeString(self.vip.encode('utf-8') if sys.version_info[0] == 2 else self.vip)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 8)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataSyncSourceToDest(object):
    """
    Attributes:
     - sourceVip
     - sourceClusterId
     - sourceSyncJobId
     - sourceSyncJobName
     - sourceSyncJobAuthUser
     - customer
     - recAuthUser
     - sourceJobInfo
     - isDedup

    """


    def __init__(self, sourceVip=None, sourceClusterId=None, sourceSyncJobId=None, sourceSyncJobName=None, sourceSyncJobAuthUser=None, customer=None, recAuthUser=None, sourceJobInfo=None, isDedup=None,):
        self.sourceVip = sourceVip
        self.sourceClusterId = sourceClusterId
        self.sourceSyncJobId = sourceSyncJobId
        self.sourceSyncJobName = sourceSyncJobName
        self.sourceSyncJobAuthUser = sourceSyncJobAuthUser
        self.customer = customer
        self.recAuthUser = recAuthUser
        self.sourceJobInfo = sourceJobInfo
        self.isDedup = isDedup

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sourceClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceSyncJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sourceSyncJobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sourceSyncJobAuthUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.recAuthUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.sourceJobInfo = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncDataSourceJobInfo()
                        _elem5.read(iprot)
                        self.sourceJobInfo.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.isDedup = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSyncSourceToDest')
        if self.sourceVip is not None:
            oprot.writeFieldBegin('sourceVip', TType.STRING, 1)
            oprot.writeString(self.sourceVip.encode('utf-8') if sys.version_info[0] == 2 else self.sourceVip)
            oprot.writeFieldEnd()
        if self.sourceClusterId is not None:
            oprot.writeFieldBegin('sourceClusterId', TType.STRING, 2)
            oprot.writeString(self.sourceClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceClusterId)
            oprot.writeFieldEnd()
        if self.sourceSyncJobId is not None:
            oprot.writeFieldBegin('sourceSyncJobId', TType.STRING, 3)
            oprot.writeString(self.sourceSyncJobId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobId)
            oprot.writeFieldEnd()
        if self.sourceSyncJobName is not None:
            oprot.writeFieldBegin('sourceSyncJobName', TType.STRING, 4)
            oprot.writeString(self.sourceSyncJobName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobName)
            oprot.writeFieldEnd()
        if self.sourceSyncJobAuthUser is not None:
            oprot.writeFieldBegin('sourceSyncJobAuthUser', TType.STRING, 5)
            oprot.writeString(self.sourceSyncJobAuthUser.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobAuthUser)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 6)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.sourceJobInfo is not None:
            oprot.writeFieldBegin('sourceJobInfo', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.sourceJobInfo))
            for iter6 in self.sourceJobInfo:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recAuthUser is not None:
            oprot.writeFieldBegin('recAuthUser', TType.STRING, 8)
            oprot.writeString(self.recAuthUser.encode('utf-8') if sys.version_info[0] == 2 else self.recAuthUser)
            oprot.writeFieldEnd()
        if self.isDedup is not None:
            oprot.writeFieldBegin('isDedup', TType.I32, 9)
            oprot.writeI32(self.isDedup)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAppJobRemoteReq(object):
    """
    Attributes:
     - jobAuthUser
     - jobId
     - jobClusterId
     - jobAppType
     - destClusterVips

    """


    def __init__(self, jobAuthUser=None, jobId=None, jobClusterId=None, jobAppType=None, destClusterVips=None,):
        self.jobAuthUser = jobAuthUser
        self.jobId = jobId
        self.jobClusterId = jobClusterId
        self.jobAppType = jobAppType
        self.destClusterVips = destClusterVips

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobAuthUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.jobAppType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.destClusterVips = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.destClusterVips.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAppJobRemoteReq')
        if self.jobAuthUser is not None:
            oprot.writeFieldBegin('jobAuthUser', TType.STRING, 1)
            oprot.writeString(self.jobAuthUser.encode('utf-8') if sys.version_info[0] == 2 else self.jobAuthUser)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobClusterId is not None:
            oprot.writeFieldBegin('jobClusterId', TType.STRING, 3)
            oprot.writeString(self.jobClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.jobClusterId)
            oprot.writeFieldEnd()
        if self.jobAppType is not None:
            oprot.writeFieldBegin('jobAppType', TType.I32, 4)
            oprot.writeI32(self.jobAppType)
            oprot.writeFieldEnd()
        if self.destClusterVips is not None:
            oprot.writeFieldBegin('destClusterVips', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.destClusterVips))
            for iter13 in self.destClusterVips:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFPRelateJob(object):
    """
    Attributes:
     - jobId
     - clusterVip
     - jobName
     - engineType
     - userName

    """


    def __init__(self, jobId=None, clusterVip=None, jobName=None, engineType=None, userName=None,):
        self.jobId = jobId
        self.clusterVip = clusterVip
        self.jobName = jobName
        self.engineType = engineType
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clusterVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFPRelateJob')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.clusterVip is not None:
            oprot.writeFieldBegin('clusterVip', TType.STRING, 2)
            oprot.writeString(self.clusterVip.encode('utf-8') if sys.version_info[0] == 2 else self.clusterVip)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 3)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 4)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 5)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBackupRemoteJobCountInfo(object):
    """
    Attributes:
     - abnormal
     - stopped
     - running

    """


    def __init__(self, abnormal=None, stopped=None, running=None,):
        self.abnormal = abnormal
        self.stopped = stopped
        self.running = running

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.abnormal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.stopped = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.running = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBackupRemoteJobCountInfo')
        if self.abnormal is not None:
            oprot.writeFieldBegin('abnormal', TType.I32, 1)
            oprot.writeI32(self.abnormal)
            oprot.writeFieldEnd()
        if self.stopped is not None:
            oprot.writeFieldBegin('stopped', TType.I32, 2)
            oprot.writeI32(self.stopped)
            oprot.writeFieldEnd()
        if self.running is not None:
            oprot.writeFieldBegin('running', TType.I32, 3)
            oprot.writeI32(self.running)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncDataSourceJobInfo)
ncDataSourceJobInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'authUser', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'jobName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'passWd', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'customer', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'vip', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'jobType', 'UTF8', None, ),  # 8
)
all_structs.append(ncDataSyncSourceToDest)
ncDataSyncSourceToDest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceVip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sourceClusterId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sourceSyncJobId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sourceSyncJobName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sourceSyncJobAuthUser', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'customer', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'sourceJobInfo', (TType.STRUCT, [ncDataSourceJobInfo, None], False), None, ),  # 7
    (8, TType.STRING, 'recAuthUser', 'UTF8', None, ),  # 8
    (9, TType.I32, 'isDedup', None, None, ),  # 9
)
all_structs.append(ncAppJobRemoteReq)
ncAppJobRemoteReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobAuthUser', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobClusterId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'jobAppType', None, None, ),  # 4
    (5, TType.LIST, 'destClusterVips', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(ncFPRelateJob)
ncFPRelateJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clusterVip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'engineType', None, None, ),  # 4
    (5, TType.STRING, 'userName', 'UTF8', None, ),  # 5
)
all_structs.append(ncBackupRemoteJobCountInfo)
ncBackupRemoteJobCountInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'abnormal', None, None, ),  # 1
    (2, TType.I32, 'stopped', None, None, ),  # 2
    (3, TType.I32, 'running', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
