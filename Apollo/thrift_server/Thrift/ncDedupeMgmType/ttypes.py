# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncFPPoolInfo(object):
    """
    Attributes:
     - poolName
     - poolType
     - poolGuid
     - nodeIPs
     - minSize
     - maxSize

    """


    def __init__(self, poolName=None, poolType=None, poolGuid=None, nodeIPs=None, minSize=None, maxSize=None,):
        self.poolName = poolName
        self.poolType = poolType
        self.poolGuid = poolGuid
        self.nodeIPs = nodeIPs
        self.minSize = minSize
        self.maxSize = maxSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.poolType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.poolGuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodeIPs = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.nodeIPs.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.minSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.maxSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFPPoolInfo')
        if self.poolName is not None:
            oprot.writeFieldBegin('poolName', TType.STRING, 1)
            oprot.writeString(self.poolName.encode('utf-8') if sys.version_info[0] == 2 else self.poolName)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.STRING, 2)
            oprot.writeString(self.poolType.encode('utf-8') if sys.version_info[0] == 2 else self.poolType)
            oprot.writeFieldEnd()
        if self.poolGuid is not None:
            oprot.writeFieldBegin('poolGuid', TType.STRING, 3)
            oprot.writeString(self.poolGuid.encode('utf-8') if sys.version_info[0] == 2 else self.poolGuid)
            oprot.writeFieldEnd()
        if self.nodeIPs is not None:
            oprot.writeFieldBegin('nodeIPs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.nodeIPs))
            for iter6 in self.nodeIPs:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.minSize is not None:
            oprot.writeFieldBegin('minSize', TType.I32, 5)
            oprot.writeI32(self.minSize)
            oprot.writeFieldEnd()
        if self.maxSize is not None:
            oprot.writeFieldBegin('maxSize', TType.I32, 6)
            oprot.writeI32(self.maxSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDDCacheInfo(object):
    """
    Attributes:
     - ddcachename
     - ddcachepath
     - allsize
     - spacesize
     - usesize
     - diskspacesize
     - isfault

    """


    def __init__(self, ddcachename=None, ddcachepath=None, allsize=None, spacesize=None, usesize=None, diskspacesize=None, isfault=None,):
        self.ddcachename = ddcachename
        self.ddcachepath = ddcachepath
        self.allsize = allsize
        self.spacesize = spacesize
        self.usesize = usesize
        self.diskspacesize = diskspacesize
        self.isfault = isfault

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ddcachename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ddcachepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.allsize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.spacesize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.usesize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.diskspacesize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isfault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDDCacheInfo')
        if self.ddcachename is not None:
            oprot.writeFieldBegin('ddcachename', TType.STRING, 1)
            oprot.writeString(self.ddcachename.encode('utf-8') if sys.version_info[0] == 2 else self.ddcachename)
            oprot.writeFieldEnd()
        if self.ddcachepath is not None:
            oprot.writeFieldBegin('ddcachepath', TType.STRING, 2)
            oprot.writeString(self.ddcachepath.encode('utf-8') if sys.version_info[0] == 2 else self.ddcachepath)
            oprot.writeFieldEnd()
        if self.allsize is not None:
            oprot.writeFieldBegin('allsize', TType.I64, 3)
            oprot.writeI64(self.allsize)
            oprot.writeFieldEnd()
        if self.spacesize is not None:
            oprot.writeFieldBegin('spacesize', TType.I64, 4)
            oprot.writeI64(self.spacesize)
            oprot.writeFieldEnd()
        if self.usesize is not None:
            oprot.writeFieldBegin('usesize', TType.I64, 5)
            oprot.writeI64(self.usesize)
            oprot.writeFieldEnd()
        if self.diskspacesize is not None:
            oprot.writeFieldBegin('diskspacesize', TType.I64, 6)
            oprot.writeI64(self.diskspacesize)
            oprot.writeFieldEnd()
        if self.isfault is not None:
            oprot.writeFieldBegin('isfault', TType.BOOL, 7)
            oprot.writeBool(self.isfault)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncFPPoolInfo)
ncFPPoolInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'poolType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'poolGuid', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'nodeIPs', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I32, 'minSize', None, None, ),  # 5
    (6, TType.I32, 'maxSize', None, None, ),  # 6
)
all_structs.append(ncDDCacheInfo)
ncDDCacheInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ddcachename', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ddcachepath', 'UTF8', None, ),  # 2
    (3, TType.I64, 'allsize', None, None, ),  # 3
    (4, TType.I64, 'spacesize', None, None, ),  # 4
    (5, TType.I64, 'usesize', None, None, ),  # 5
    (6, TType.I64, 'diskspacesize', None, None, ),  # 6
    (7, TType.BOOL, 'isfault', None, None, ),  # 7
)
fix_spec(all_structs)
del all_structs
