# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes
import ncClient.ttypes

from thrift.transport import TTransport
all_structs = []


class ncProjectUserDistriReq(object):
    """
    Attributes:
     - requestId
     - projectUserIds
     - userName
     - oper
     - role

    """


    def __init__(self, requestId=None, projectUserIds=None, userName=None, oper=None, role=None,):
        self.requestId = requestId
        self.projectUserIds = projectUserIds
        self.userName = userName
        self.oper = oper
        self.role = role

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.projectUserIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.projectUserIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.oper = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncProjectUserDistriReq')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.projectUserIds is not None:
            oprot.writeFieldBegin('projectUserIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.projectUserIds))
            for iter6 in self.projectUserIds:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 3)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.oper is not None:
            oprot.writeFieldBegin('oper', TType.I32, 4)
            oprot.writeI32(self.oper)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 5)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncProjectUserDistriRes(object):
    """
    Attributes:
     - requestId
     - nodeIp
     - isFinished
     - oper
     - isErr
     - errs

    """


    def __init__(self, requestId=None, nodeIp=None, isFinished=None, oper=None, isErr=None, errs=None,):
        self.requestId = requestId
        self.nodeIp = nodeIp
        self.isFinished = isFinished
        self.oper = oper
        self.isErr = isErr
        self.errs = errs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.oper = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.errs = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.errs.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncProjectUserDistriRes')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 3)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.oper is not None:
            oprot.writeFieldBegin('oper', TType.I32, 4)
            oprot.writeI32(self.oper)
            oprot.writeFieldEnd()
        if self.isErr is not None:
            oprot.writeFieldBegin('isErr', TType.BOOL, 5)
            oprot.writeBool(self.isErr)
            oprot.writeFieldEnd()
        if self.errs is not None:
            oprot.writeFieldBegin('errs', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.errs))
            for iter13 in self.errs:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetProjectUsersReq(object):
    """
    Attributes:
     - authers
     - projectUserIds
     - proIds
     - groupIds
     - proNames
     - deleted
     - cloudPlatIds

    """


    def __init__(self, authers=None, projectUserIds=None, proIds=None, groupIds=None, proNames=None, deleted=False, cloudPlatIds=None,):
        self.authers = authers
        self.projectUserIds = projectUserIds
        self.proIds = proIds
        self.groupIds = groupIds
        self.proNames = proNames
        self.deleted = deleted
        self.cloudPlatIds = cloudPlatIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.authers = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.authers.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.projectUserIds = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.projectUserIds.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.proIds = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.proIds.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.groupIds = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.groupIds.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.proNames = []
                    (_etype41, _size38) = iprot.readListBegin()
                    for _i42 in range(_size38):
                        _elem43 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.proNames.append(_elem43)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.deleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.cloudPlatIds = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.cloudPlatIds.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetProjectUsersReq')
        if self.authers is not None:
            oprot.writeFieldBegin('authers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.authers))
            for iter50 in self.authers:
                oprot.writeString(iter50.encode('utf-8') if sys.version_info[0] == 2 else iter50)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.projectUserIds is not None:
            oprot.writeFieldBegin('projectUserIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.projectUserIds))
            for iter51 in self.projectUserIds:
                oprot.writeString(iter51.encode('utf-8') if sys.version_info[0] == 2 else iter51)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proIds is not None:
            oprot.writeFieldBegin('proIds', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.proIds))
            for iter52 in self.proIds:
                oprot.writeString(iter52.encode('utf-8') if sys.version_info[0] == 2 else iter52)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupIds is not None:
            oprot.writeFieldBegin('groupIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.groupIds))
            for iter53 in self.groupIds:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proNames is not None:
            oprot.writeFieldBegin('proNames', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.proNames))
            for iter54 in self.proNames:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.deleted is not None:
            oprot.writeFieldBegin('deleted', TType.BOOL, 6)
            oprot.writeBool(self.deleted)
            oprot.writeFieldEnd()
        if self.cloudPlatIds is not None:
            oprot.writeFieldBegin('cloudPlatIds', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.cloudPlatIds))
            for iter55 in self.cloudPlatIds:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTProjectUser(object):
    """
    Attributes:
     - proName
     - proId
     - auther
     - userPass
     - userName
     - projectUserId
     - projectUserCustomer
     - groupId
     - deleted
     - cloudplatformId
     - cloudplatformIp
     - cloudplatformPort
     - cloudplatformDomain
     - cloudplatformVersion
     - cloudplatformSSL
     - cloudplatformAuther
     - cloudplatformCustomer
     - type
     - projectDomainId
     - cloudplatformUser
     - cloudplatformUserPass
     - cloudplatformVerification

    """


    def __init__(self, proName=None, proId=None, auther=None, userPass=None, userName=None, projectUserId=None, projectUserCustomer=None, groupId=None, deleted=False, cloudplatformId=None, cloudplatformIp=None, cloudplatformPort=None, cloudplatformDomain=None, cloudplatformVersion=None, cloudplatformSSL=None, cloudplatformAuther=None, cloudplatformCustomer=None, type=None, projectDomainId=None, cloudplatformUser=None, cloudplatformUserPass=None, cloudplatformVerification=None,):
        self.proName = proName
        self.proId = proId
        self.auther = auther
        self.userPass = userPass
        self.userName = userName
        self.projectUserId = projectUserId
        self.projectUserCustomer = projectUserCustomer
        self.groupId = groupId
        self.deleted = deleted
        self.cloudplatformId = cloudplatformId
        self.cloudplatformIp = cloudplatformIp
        self.cloudplatformPort = cloudplatformPort
        self.cloudplatformDomain = cloudplatformDomain
        self.cloudplatformVersion = cloudplatformVersion
        self.cloudplatformSSL = cloudplatformSSL
        self.cloudplatformAuther = cloudplatformAuther
        self.cloudplatformCustomer = cloudplatformCustomer
        self.type = type
        self.projectDomainId = projectDomainId
        self.cloudplatformUser = cloudplatformUser
        self.cloudplatformUserPass = cloudplatformUserPass
        self.cloudplatformVerification = cloudplatformVerification

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.proName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.proId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.auther = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.projectUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.projectUserCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.deleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.cloudplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.cloudplatformIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.cloudplatformPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.cloudplatformDomain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.cloudplatformVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.cloudplatformSSL = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.cloudplatformAuther = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.cloudplatformCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.projectDomainId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.cloudplatformUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.cloudplatformUserPass = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.cloudplatformVerification = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTProjectUser')
        if self.proName is not None:
            oprot.writeFieldBegin('proName', TType.STRING, 1)
            oprot.writeString(self.proName.encode('utf-8') if sys.version_info[0] == 2 else self.proName)
            oprot.writeFieldEnd()
        if self.proId is not None:
            oprot.writeFieldBegin('proId', TType.STRING, 2)
            oprot.writeString(self.proId.encode('utf-8') if sys.version_info[0] == 2 else self.proId)
            oprot.writeFieldEnd()
        if self.auther is not None:
            oprot.writeFieldBegin('auther', TType.STRING, 3)
            oprot.writeString(self.auther.encode('utf-8') if sys.version_info[0] == 2 else self.auther)
            oprot.writeFieldEnd()
        if self.userPass is not None:
            oprot.writeFieldBegin('userPass', TType.STRING, 4)
            oprot.writeString(self.userPass.encode('utf-8') if sys.version_info[0] == 2 else self.userPass)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 5)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.projectUserId is not None:
            oprot.writeFieldBegin('projectUserId', TType.STRING, 6)
            oprot.writeString(self.projectUserId.encode('utf-8') if sys.version_info[0] == 2 else self.projectUserId)
            oprot.writeFieldEnd()
        if self.projectUserCustomer is not None:
            oprot.writeFieldBegin('projectUserCustomer', TType.STRING, 7)
            oprot.writeString(self.projectUserCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.projectUserCustomer)
            oprot.writeFieldEnd()
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 8)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.deleted is not None:
            oprot.writeFieldBegin('deleted', TType.BOOL, 9)
            oprot.writeBool(self.deleted)
            oprot.writeFieldEnd()
        if self.cloudplatformId is not None:
            oprot.writeFieldBegin('cloudplatformId', TType.STRING, 10)
            oprot.writeString(self.cloudplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformId)
            oprot.writeFieldEnd()
        if self.cloudplatformIp is not None:
            oprot.writeFieldBegin('cloudplatformIp', TType.STRING, 11)
            oprot.writeString(self.cloudplatformIp.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformIp)
            oprot.writeFieldEnd()
        if self.cloudplatformPort is not None:
            oprot.writeFieldBegin('cloudplatformPort', TType.I32, 12)
            oprot.writeI32(self.cloudplatformPort)
            oprot.writeFieldEnd()
        if self.cloudplatformDomain is not None:
            oprot.writeFieldBegin('cloudplatformDomain', TType.STRING, 13)
            oprot.writeString(self.cloudplatformDomain.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformDomain)
            oprot.writeFieldEnd()
        if self.cloudplatformVersion is not None:
            oprot.writeFieldBegin('cloudplatformVersion', TType.STRING, 14)
            oprot.writeString(self.cloudplatformVersion.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformVersion)
            oprot.writeFieldEnd()
        if self.cloudplatformSSL is not None:
            oprot.writeFieldBegin('cloudplatformSSL', TType.BOOL, 15)
            oprot.writeBool(self.cloudplatformSSL)
            oprot.writeFieldEnd()
        if self.cloudplatformAuther is not None:
            oprot.writeFieldBegin('cloudplatformAuther', TType.STRING, 16)
            oprot.writeString(self.cloudplatformAuther.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformAuther)
            oprot.writeFieldEnd()
        if self.cloudplatformCustomer is not None:
            oprot.writeFieldBegin('cloudplatformCustomer', TType.STRING, 17)
            oprot.writeString(self.cloudplatformCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformCustomer)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 18)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.projectDomainId is not None:
            oprot.writeFieldBegin('projectDomainId', TType.STRING, 19)
            oprot.writeString(self.projectDomainId.encode('utf-8') if sys.version_info[0] == 2 else self.projectDomainId)
            oprot.writeFieldEnd()
        if self.cloudplatformUser is not None:
            oprot.writeFieldBegin('cloudplatformUser', TType.STRING, 20)
            oprot.writeString(self.cloudplatformUser.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformUser)
            oprot.writeFieldEnd()
        if self.cloudplatformUserPass is not None:
            oprot.writeFieldBegin('cloudplatformUserPass', TType.STRING, 21)
            oprot.writeString(self.cloudplatformUserPass.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformUserPass)
            oprot.writeFieldEnd()
        if self.cloudplatformVerification is not None:
            oprot.writeFieldBegin('cloudplatformVerification', TType.STRING, 22)
            oprot.writeString(self.cloudplatformVerification.encode('utf-8') if sys.version_info[0] == 2 else self.cloudplatformVerification)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTProjectStorage(object):
    """
    Attributes:
     - storageType
     - deviceType
     - port
     - manageip
     - username
     - password
     - verification

    """


    def __init__(self, storageType=None, deviceType=None, port=None, manageip=None, username=None, password=None, verification=None,):
        self.storageType = storageType
        self.deviceType = deviceType
        self.port = port
        self.manageip = manageip
        self.username = username
        self.password = password
        self.verification = verification

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.storageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.manageip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.verification = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTProjectStorage')
        if self.storageType is not None:
            oprot.writeFieldBegin('storageType', TType.STRING, 1)
            oprot.writeString(self.storageType.encode('utf-8') if sys.version_info[0] == 2 else self.storageType)
            oprot.writeFieldEnd()
        if self.deviceType is not None:
            oprot.writeFieldBegin('deviceType', TType.STRING, 2)
            oprot.writeString(self.deviceType.encode('utf-8') if sys.version_info[0] == 2 else self.deviceType)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.manageip is not None:
            oprot.writeFieldBegin('manageip', TType.STRING, 4)
            oprot.writeString(self.manageip.encode('utf-8') if sys.version_info[0] == 2 else self.manageip)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 5)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 6)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.verification is not None:
            oprot.writeFieldBegin('verification', TType.STRING, 7)
            oprot.writeString(self.verification.encode('utf-8') if sys.version_info[0] == 2 else self.verification)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncProjectUserDistriReq)
ncProjectUserDistriReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'projectUserIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'userName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'oper', None, None, ),  # 4
    (5, TType.I32, 'role', None, None, ),  # 5
)
all_structs.append(ncProjectUserDistriRes)
ncProjectUserDistriRes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isFinished', None, None, ),  # 3
    (4, TType.I32, 'oper', None, None, ),  # 4
    (5, TType.BOOL, 'isErr', None, None, ),  # 5
    (6, TType.LIST, 'errs', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(ncGetProjectUsersReq)
ncGetProjectUsersReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'authers', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'projectUserIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'proIds', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'groupIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'proNames', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.BOOL, 'deleted', None, False, ),  # 6
    (7, TType.LIST, 'cloudPlatIds', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(ncTProjectUser)
ncTProjectUser.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'proName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'proId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'auther', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userPass', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'projectUserId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'projectUserCustomer', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'groupId', 'UTF8', None, ),  # 8
    (9, TType.BOOL, 'deleted', None, False, ),  # 9
    (10, TType.STRING, 'cloudplatformId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'cloudplatformIp', 'UTF8', None, ),  # 11
    (12, TType.I32, 'cloudplatformPort', None, None, ),  # 12
    (13, TType.STRING, 'cloudplatformDomain', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'cloudplatformVersion', 'UTF8', None, ),  # 14
    (15, TType.BOOL, 'cloudplatformSSL', None, None, ),  # 15
    (16, TType.STRING, 'cloudplatformAuther', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'cloudplatformCustomer', 'UTF8', None, ),  # 17
    (18, TType.I32, 'type', None, None, ),  # 18
    (19, TType.STRING, 'projectDomainId', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'cloudplatformUser', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'cloudplatformUserPass', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'cloudplatformVerification', 'UTF8', None, ),  # 22
)
all_structs.append(ncTProjectStorage)
ncTProjectStorage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'storageType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'deviceType', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.STRING, 'manageip', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'username', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'password', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'verification', 'UTF8', None, ),  # 7
)
fix_spec(all_structs)
del all_structs
