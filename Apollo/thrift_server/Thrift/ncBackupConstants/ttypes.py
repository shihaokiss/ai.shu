# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncFilterTypeEnum(object):
    """
    筛选类型

    目前有4中筛选类型

    """
    FILE = 1
    DIRECTORY = 2
    FORMAT = 3
    DATETIME = 4

    _VALUES_TO_NAMES = {
        1: "FILE",
        2: "DIRECTORY",
        3: "FORMAT",
        4: "DATETIME",
    }

    _NAMES_TO_VALUES = {
        "FILE": 1,
        "DIRECTORY": 2,
        "FORMAT": 3,
        "DATETIME": 4,
    }


class ncFilterModeEnum(object):
    """
    筛选方式(模式)

    排除
    仅包含

    """
    EXCLUDE = 1
    ONLY_CONTAIN = 2

    _VALUES_TO_NAMES = {
        1: "EXCLUDE",
        2: "ONLY_CONTAIN",
    }

    _NAMES_TO_VALUES = {
        "EXCLUDE": 1,
        "ONLY_CONTAIN": 2,
    }


class ncFileFormatEnum(object):
    """
    筛选格式(大类分类)


    """
    MS_OFFICE = 1
    MUSIC_AND_VIDEO = 2
    PICTURE = 3
    PDF = 4
    WEB = 5
    COMPRESSION = 6
    USR_FORMAT = 7

    _VALUES_TO_NAMES = {
        1: "MS_OFFICE",
        2: "MUSIC_AND_VIDEO",
        3: "PICTURE",
        4: "PDF",
        5: "WEB",
        6: "COMPRESSION",
        7: "USR_FORMAT",
    }

    _NAMES_TO_VALUES = {
        "MS_OFFICE": 1,
        "MUSIC_AND_VIDEO": 2,
        "PICTURE": 3,
        "PDF": 4,
        "WEB": 5,
        "COMPRESSION": 6,
        "USR_FORMAT": 7,
    }


class ncTimeTypeEnum(object):
    """
    时间类型

    """
    CREATE_TIME = 1
    LAST_MODIFICATION_TIME = 2
    LAST_ACCESS_TIME = 3

    _VALUES_TO_NAMES = {
        1: "CREATE_TIME",
        2: "LAST_MODIFICATION_TIME",
        3: "LAST_ACCESS_TIME",
    }

    _NAMES_TO_VALUES = {
        "CREATE_TIME": 1,
        "LAST_MODIFICATION_TIME": 2,
        "LAST_ACCESS_TIME": 3,
    }


class ncTargetFileSystemEnum(object):
    HDFS = 0
    EXTX = 1
    NTFS = 2

    _VALUES_TO_NAMES = {
        0: "HDFS",
        1: "EXTX",
        2: "NTFS",
    }

    _NAMES_TO_VALUES = {
        "HDFS": 0,
        "EXTX": 1,
        "NTFS": 2,
    }


class ncReplaceStrategyEnum(object):
    ALWAYS = 0
    ONLY_OLD = 1
    DO_NOT = 2

    _VALUES_TO_NAMES = {
        0: "ALWAYS",
        1: "ONLY_OLD",
        2: "DO_NOT",
    }

    _NAMES_TO_VALUES = {
        "ALWAYS": 0,
        "ONLY_OLD": 1,
        "DO_NOT": 2,
    }


class ncDataProduceTypeEnum(object):
    LOCAL_BACKUP = 1
    REMOTE_COPY_DATA_SYNC = 2
    REMOTE_COPY_REVERSE_COPY = 3
    D2C = 4

    _VALUES_TO_NAMES = {
        1: "LOCAL_BACKUP",
        2: "REMOTE_COPY_DATA_SYNC",
        3: "REMOTE_COPY_REVERSE_COPY",
        4: "D2C",
    }

    _NAMES_TO_VALUES = {
        "LOCAL_BACKUP": 1,
        "REMOTE_COPY_DATA_SYNC": 2,
        "REMOTE_COPY_REVERSE_COPY": 3,
        "D2C": 4,
    }


class ncLinkVolumeMappingStatusEnum(object):
    """
    任务链路创建卷映射的状态

    """
    TRIGGER_LINK_READY = 0
    TRIGGER_LINK_CREATE = 1
    TRIGGER_LINK_DELETE = 2

    _VALUES_TO_NAMES = {
        0: "TRIGGER_LINK_READY",
        1: "TRIGGER_LINK_CREATE",
        2: "TRIGGER_LINK_DELETE",
    }

    _NAMES_TO_VALUES = {
        "TRIGGER_LINK_READY": 0,
        "TRIGGER_LINK_CREATE": 1,
        "TRIGGER_LINK_DELETE": 2,
    }


class ncChannelVolumeMappingStatusEnum(object):
    """
    创建/删除卷映射的状态

    """
    VOLUME_MAPPING_READY = 0
    VOLUME_MAPPING_DOING = 1
    VOLUME_MAPPING_SUCC = 2
    VOLUME_MAPPING_FAILE = 3

    _VALUES_TO_NAMES = {
        0: "VOLUME_MAPPING_READY",
        1: "VOLUME_MAPPING_DOING",
        2: "VOLUME_MAPPING_SUCC",
        3: "VOLUME_MAPPING_FAILE",
    }

    _NAMES_TO_VALUES = {
        "VOLUME_MAPPING_READY": 0,
        "VOLUME_MAPPING_DOING": 1,
        "VOLUME_MAPPING_SUCC": 2,
        "VOLUME_MAPPING_FAILE": 3,
    }


class ncEEFCreateBackupLunMapping(object):
    """
    Lan-Free创建卷映射请求参数

    Attributes:
     - clientid
     - serverid
     - execid
     - storageport

    """


    def __init__(self, clientid=None, serverid=None, execid=None, storageport=None,):
        self.clientid = clientid
        self.serverid = serverid
        self.execid = execid
        self.storageport = storageport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serverid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.execid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storageport = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFCreateBackupLunMapping')
        if self.clientid is not None:
            oprot.writeFieldBegin('clientid', TType.STRING, 1)
            oprot.writeString(self.clientid.encode('utf-8') if sys.version_info[0] == 2 else self.clientid)
            oprot.writeFieldEnd()
        if self.serverid is not None:
            oprot.writeFieldBegin('serverid', TType.STRING, 2)
            oprot.writeString(self.serverid.encode('utf-8') if sys.version_info[0] == 2 else self.serverid)
            oprot.writeFieldEnd()
        if self.execid is not None:
            oprot.writeFieldBegin('execid', TType.STRING, 3)
            oprot.writeString(self.execid.encode('utf-8') if sys.version_info[0] == 2 else self.execid)
            oprot.writeFieldEnd()
        if self.storageport is not None:
            oprot.writeFieldBegin('storageport', TType.STRING, 4)
            oprot.writeString(self.storageport.encode('utf-8') if sys.version_info[0] == 2 else self.storageport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFCreateBackupLunMappingParams(object):
    """
    Lan-Free创建卷映射返回信息

    Attributes:
     - deviceCfgString
     - serverWwn
     - lunId
     - clientWwn

    """


    def __init__(self, deviceCfgString=None, serverWwn=None, lunId=None, clientWwn=None,):
        self.deviceCfgString = deviceCfgString
        self.serverWwn = serverWwn
        self.lunId = lunId
        self.clientWwn = clientWwn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceCfgString = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serverWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFCreateBackupLunMappingParams')
        if self.deviceCfgString is not None:
            oprot.writeFieldBegin('deviceCfgString', TType.STRING, 1)
            oprot.writeString(self.deviceCfgString.encode('utf-8') if sys.version_info[0] == 2 else self.deviceCfgString)
            oprot.writeFieldEnd()
        if self.serverWwn is not None:
            oprot.writeFieldBegin('serverWwn', TType.STRING, 2)
            oprot.writeString(self.serverWwn.encode('utf-8') if sys.version_info[0] == 2 else self.serverWwn)
            oprot.writeFieldEnd()
        if self.lunId is not None:
            oprot.writeFieldBegin('lunId', TType.I32, 3)
            oprot.writeI32(self.lunId)
            oprot.writeFieldEnd()
        if self.clientWwn is not None:
            oprot.writeFieldBegin('clientWwn', TType.STRING, 4)
            oprot.writeString(self.clientWwn.encode('utf-8') if sys.version_info[0] == 2 else self.clientWwn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFDeleteBackupLunMapping(object):
    """
    Lan-Free删除卷映射请求参数

    Attributes:
     - clientid
     - serverid
     - execid
     - storageport

    """


    def __init__(self, clientid=None, serverid=None, execid=None, storageport=None,):
        self.clientid = clientid
        self.serverid = serverid
        self.execid = execid
        self.storageport = storageport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serverid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.execid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storageport = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFDeleteBackupLunMapping')
        if self.clientid is not None:
            oprot.writeFieldBegin('clientid', TType.STRING, 1)
            oprot.writeString(self.clientid.encode('utf-8') if sys.version_info[0] == 2 else self.clientid)
            oprot.writeFieldEnd()
        if self.serverid is not None:
            oprot.writeFieldBegin('serverid', TType.STRING, 2)
            oprot.writeString(self.serverid.encode('utf-8') if sys.version_info[0] == 2 else self.serverid)
            oprot.writeFieldEnd()
        if self.execid is not None:
            oprot.writeFieldBegin('execid', TType.STRING, 3)
            oprot.writeString(self.execid.encode('utf-8') if sys.version_info[0] == 2 else self.execid)
            oprot.writeFieldEnd()
        if self.storageport is not None:
            oprot.writeFieldBegin('storageport', TType.STRING, 4)
            oprot.writeString(self.storageport.encode('utf-8') if sys.version_info[0] == 2 else self.storageport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFDeleteBackupLunMappingParams(object):
    """
    Lan-Free删除卷映射返回信息

    Attributes:
     - isSuccess

    """


    def __init__(self, isSuccess=None,):
        self.isSuccess = isSuccess

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.isSuccess = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFDeleteBackupLunMappingParams')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.STRING, 1)
            oprot.writeString(self.isSuccess.encode('utf-8') if sys.version_info[0] == 2 else self.isSuccess)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncEEFCreateBackupLunMapping)
ncEEFCreateBackupLunMapping.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'serverid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'execid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storageport', 'UTF8', None, ),  # 4
)
all_structs.append(ncEEFCreateBackupLunMappingParams)
ncEEFCreateBackupLunMappingParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'deviceCfgString', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'serverWwn', 'UTF8', None, ),  # 2
    (3, TType.I32, 'lunId', None, None, ),  # 3
    (4, TType.STRING, 'clientWwn', 'UTF8', None, ),  # 4
)
all_structs.append(ncEEFDeleteBackupLunMapping)
ncEEFDeleteBackupLunMapping.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'serverid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'execid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storageport', 'UTF8', None, ),  # 4
)
all_structs.append(ncEEFDeleteBackupLunMappingParams)
ncEEFDeleteBackupLunMappingParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'isSuccess', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
