# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncCIDAuthFilter(object):
    NONE_FILTER = 65535
    LOCAL = 1
    SYNC = 2
    RESYNC = 4

    _VALUES_TO_NAMES = {
        65535: "NONE_FILTER",
        1: "LOCAL",
        2: "SYNC",
        4: "RESYNC",
    }

    _NAMES_TO_VALUES = {
        "NONE_FILTER": 65535,
        "LOCAL": 1,
        "SYNC": 2,
        "RESYNC": 4,
    }


class ncTimepointFilter(object):
    NONE_TP_FILTER = 0
    ALL_FULL_TP_FILTER = 1
    ALL_NEWEST_FULL_TP_FILTER = 2
    NEWEST_TP_FILTER = 3
    NEWEST_FULL_TP_FILTER = 4

    _VALUES_TO_NAMES = {
        0: "NONE_TP_FILTER",
        1: "ALL_FULL_TP_FILTER",
        2: "ALL_NEWEST_FULL_TP_FILTER",
        3: "NEWEST_TP_FILTER",
        4: "NEWEST_FULL_TP_FILTER",
    }

    _NAMES_TO_VALUES = {
        "NONE_TP_FILTER": 0,
        "ALL_FULL_TP_FILTER": 1,
        "ALL_NEWEST_FULL_TP_FILTER": 2,
        "NEWEST_TP_FILTER": 3,
        "NEWEST_FULL_TP_FILTER": 4,
    }


class ncGNSObjectSetRequest(object):
    """
    获取指定GNS对象集请求信息

    Attributes:
     - requestId
     - gnsPaths
     - engineType
     - needMetadata
     - userId
     - userName

    """


    def __init__(self, requestId=None, gnsPaths=None, engineType=None, needMetadata=None, userId=None, userName=None,):
        self.requestId = requestId
        self.gnsPaths = gnsPaths
        self.engineType = engineType
        self.needMetadata = needMetadata
        self.userId = userId
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gnsPaths = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.gnsPaths.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGNSObjectSetRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.gnsPaths is not None:
            oprot.writeFieldBegin('gnsPaths', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.gnsPaths))
            for iter6 in self.gnsPaths:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 3)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 4)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 5)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 6)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGNSObjectRequest(object):
    """
    GNS对象请求信息

    Attributes:
     - requstId
     - gnsPath
     - index
     - count
     - engineType
     - needMetadata
     - hint
     - userName
     - userId

    """


    def __init__(self, requstId=None, gnsPath=None, index=None, count=None, engineType=None, needMetadata=None, hint=None, userName=None, userId=None,):
        self.requstId = requstId
        self.gnsPath = gnsPath
        self.index = index
        self.count = count
        self.engineType = engineType
        self.needMetadata = needMetadata
        self.hint = hint
        self.userName = userName
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requstId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGNSObjectRequest')
        if self.requstId is not None:
            oprot.writeFieldBegin('requstId', TType.STRING, 1)
            oprot.writeString(self.requstId.encode('utf-8') if sys.version_info[0] == 2 else self.requstId)
            oprot.writeFieldEnd()
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 3)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 4)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 5)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 6)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 7)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 8)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 9)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGNSObjectInfo(object):
    """
    GNS对象信息

    Attributes:
     - gnsPath
     - attributes
     - objectSize
     - nodeType
     - displayName
     - expandedFlag
     - displayFlag
     - checked
     - checkable
     - extAttributes
     - metadata
     - signature

    """


    def __init__(self, gnsPath=None, attributes=None, objectSize=None, nodeType=None, displayName=None, expandedFlag=None, displayFlag=None, checked=None, checkable=None, extAttributes=None, metadata=None, signature=None,):
        self.gnsPath = gnsPath
        self.attributes = attributes
        self.objectSize = objectSize
        self.nodeType = nodeType
        self.displayName = displayName
        self.expandedFlag = expandedFlag
        self.displayFlag = displayFlag
        self.checked = checked
        self.checkable = checkable
        self.extAttributes = extAttributes
        self.metadata = metadata
        self.signature = signature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.objectSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.nodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.expandedFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.displayFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.checked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.checkable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.extAttributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.metadata = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.signature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGNSObjectInfo')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 2)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.objectSize is not None:
            oprot.writeFieldBegin('objectSize', TType.I64, 3)
            oprot.writeI64(self.objectSize)
            oprot.writeFieldEnd()
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.I32, 4)
            oprot.writeI32(self.nodeType)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 5)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.expandedFlag is not None:
            oprot.writeFieldBegin('expandedFlag', TType.BOOL, 6)
            oprot.writeBool(self.expandedFlag)
            oprot.writeFieldEnd()
        if self.displayFlag is not None:
            oprot.writeFieldBegin('displayFlag', TType.BOOL, 7)
            oprot.writeBool(self.displayFlag)
            oprot.writeFieldEnd()
        if self.checked is not None:
            oprot.writeFieldBegin('checked', TType.BOOL, 8)
            oprot.writeBool(self.checked)
            oprot.writeFieldEnd()
        if self.checkable is not None:
            oprot.writeFieldBegin('checkable', TType.BOOL, 9)
            oprot.writeBool(self.checkable)
            oprot.writeFieldEnd()
        if self.extAttributes is not None:
            oprot.writeFieldBegin('extAttributes', TType.I32, 10)
            oprot.writeI32(self.extAttributes)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 11)
            oprot.writeBinary(self.metadata)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 12)
            oprot.writeString(self.signature.encode('utf-8') if sys.version_info[0] == 2 else self.signature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGNSObjectInfoSet(object):
    """
    GNS对象信息集

    Attributes:
     - data
     - requestId
     - totalNum
     - finished
     - exist

    """


    def __init__(self, data=None, requestId=None, totalNum=None, finished=None, exist=True,):
        self.data = data
        self.requestId = requestId
        self.totalNum = totalNum
        self.finished = finished
        self.exist = exist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncGNSObjectInfo()
                        _elem12.read(iprot)
                        self.data.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGNSObjectInfoSet')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter13 in self.data:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 3)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 4)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 5)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDAuthInfo(object):
    """
    Attributes:
     - user
     - clusterGuid
     - clusterIp

    """


    def __init__(self, user=None, clusterGuid=None, clusterIp=None,):
        self.user = user
        self.clusterGuid = clusterGuid
        self.clusterIp = clusterIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clusterGuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clusterIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDAuthInfo')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 1)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.clusterGuid is not None:
            oprot.writeFieldBegin('clusterGuid', TType.STRING, 2)
            oprot.writeString(self.clusterGuid.encode('utf-8') if sys.version_info[0] == 2 else self.clusterGuid)
            oprot.writeFieldEnd()
        if self.clusterIp is not None:
            oprot.writeFieldBegin('clusterIp', TType.STRING, 3)
            oprot.writeString(self.clusterIp.encode('utf-8') if sys.version_info[0] == 2 else self.clusterIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectRequestEx(object):
    """
    CID对象请求信息

    Attributes:
     - requestId
     - clientId
     - syncJobId
     - authInfos
     - index
     - count
     - filterEmpty
     - hint
     - authFilter

    """


    def __init__(self, requestId=None, clientId=None, syncJobId=None, authInfos=None, index=None, count=None, filterEmpty=True, hint=None, authFilter=65535,):
        self.requestId = requestId
        self.clientId = clientId
        self.syncJobId = syncJobId
        self.authInfos = authInfos
        self.index = index
        self.count = count
        self.filterEmpty = filterEmpty
        self.hint = hint
        self.authFilter = authFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.syncJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.authInfos = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncCIDAuthInfo()
                        _elem19.read(iprot)
                        self.authInfos.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.filterEmpty = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.authFilter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectRequestEx')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.syncJobId is not None:
            oprot.writeFieldBegin('syncJobId', TType.STRING, 3)
            oprot.writeString(self.syncJobId.encode('utf-8') if sys.version_info[0] == 2 else self.syncJobId)
            oprot.writeFieldEnd()
        if self.authInfos is not None:
            oprot.writeFieldBegin('authInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.authInfos))
            for iter20 in self.authInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 5)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 6)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.filterEmpty is not None:
            oprot.writeFieldBegin('filterEmpty', TType.BOOL, 7)
            oprot.writeBool(self.filterEmpty)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 8)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        if self.authFilter is not None:
            oprot.writeFieldBegin('authFilter', TType.I32, 9)
            oprot.writeI32(self.authFilter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDBatchRequest(object):
    """
    CID对象请求信息

    Attributes:
     - gnsPaths

    """


    def __init__(self, gnsPaths=None,):
        self.gnsPaths = gnsPaths

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.gnsPaths = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.gnsPaths.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDBatchRequest')
        if self.gnsPaths is not None:
            oprot.writeFieldBegin('gnsPaths', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.gnsPaths))
            for iter27 in self.gnsPaths:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectRequest(object):
    """
    CID对象请求信息

    Attributes:
     - requestId
     - clientId
     - index
     - count
     - filterEmpty
     - hint
     - gnsPath
     - userName
     - userId
     - isArchive

    """


    def __init__(self, requestId=None, clientId=None, index=None, count=None, filterEmpty=True, hint=None, gnsPath=None, userName=None, userId=None, isArchive=False,):
        self.requestId = requestId
        self.clientId = clientId
        self.index = index
        self.count = count
        self.filterEmpty = filterEmpty
        self.hint = hint
        self.gnsPath = gnsPath
        self.userName = userName
        self.userId = userId
        self.isArchive = isArchive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.filterEmpty = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.isArchive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 3)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 4)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.filterEmpty is not None:
            oprot.writeFieldBegin('filterEmpty', TType.BOOL, 5)
            oprot.writeBool(self.filterEmpty)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 8)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 9)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 10)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 11)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.isArchive is not None:
            oprot.writeFieldBegin('isArchive', TType.BOOL, 12)
            oprot.writeBool(self.isArchive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectInfo(object):
    """
    CID对象信息

    Attributes:
     - gnsPath
     - jobId
     - jobName
     - jobType
     - clientId
     - clientMac
     - clientType
     - engineType
     - nodeId
     - secretKey
     - dedupPoolId
     - userName
     - sourceIp
     - orginalInfo
     - syncJobId
     - senderInfo
     - recipientInfo
     - encryptAlgo
     - compressAlgo
     - custom
     - clientName
     - osInfo

    """


    def __init__(self, gnsPath=None, jobId=None, jobName=None, jobType=None, clientId=None, clientMac=None, clientType=None, engineType=None, nodeId=None, secretKey=None, dedupPoolId=None, userName=None, sourceIp=None, orginalInfo=None, syncJobId=None, senderInfo=None, recipientInfo=None, encryptAlgo=None, compressAlgo=None, custom=None, clientName=None, osInfo=None,):
        self.gnsPath = gnsPath
        self.jobId = jobId
        self.jobName = jobName
        self.jobType = jobType
        self.clientId = clientId
        self.clientMac = clientMac
        self.clientType = clientType
        self.engineType = engineType
        self.nodeId = nodeId
        self.secretKey = secretKey
        self.dedupPoolId = dedupPoolId
        self.userName = userName
        self.sourceIp = sourceIp
        self.orginalInfo = orginalInfo
        self.syncJobId = syncJobId
        self.senderInfo = senderInfo
        self.recipientInfo = recipientInfo
        self.encryptAlgo = encryptAlgo
        self.compressAlgo = compressAlgo
        self.custom = custom
        self.clientName = clientName
        self.osInfo = osInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.secretKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.dedupPoolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sourceIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.orginalInfo = ncCIDAuthInfo()
                    self.orginalInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.syncJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.senderInfo = ncCIDAuthInfo()
                    self.senderInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.recipientInfo = ncCIDAuthInfo()
                    self.recipientInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.encryptAlgo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.compressAlgo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.osInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectInfo')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 3)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 4)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 5)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 6)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 7)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 8)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 9)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.secretKey is not None:
            oprot.writeFieldBegin('secretKey', TType.STRING, 10)
            oprot.writeString(self.secretKey.encode('utf-8') if sys.version_info[0] == 2 else self.secretKey)
            oprot.writeFieldEnd()
        if self.dedupPoolId is not None:
            oprot.writeFieldBegin('dedupPoolId', TType.STRING, 11)
            oprot.writeString(self.dedupPoolId.encode('utf-8') if sys.version_info[0] == 2 else self.dedupPoolId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 12)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.sourceIp is not None:
            oprot.writeFieldBegin('sourceIp', TType.STRING, 13)
            oprot.writeString(self.sourceIp.encode('utf-8') if sys.version_info[0] == 2 else self.sourceIp)
            oprot.writeFieldEnd()
        if self.orginalInfo is not None:
            oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 14)
            self.orginalInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.syncJobId is not None:
            oprot.writeFieldBegin('syncJobId', TType.STRING, 15)
            oprot.writeString(self.syncJobId.encode('utf-8') if sys.version_info[0] == 2 else self.syncJobId)
            oprot.writeFieldEnd()
        if self.senderInfo is not None:
            oprot.writeFieldBegin('senderInfo', TType.STRUCT, 16)
            self.senderInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.recipientInfo is not None:
            oprot.writeFieldBegin('recipientInfo', TType.STRUCT, 17)
            self.recipientInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.encryptAlgo is not None:
            oprot.writeFieldBegin('encryptAlgo', TType.STRING, 18)
            oprot.writeString(self.encryptAlgo.encode('utf-8') if sys.version_info[0] == 2 else self.encryptAlgo)
            oprot.writeFieldEnd()
        if self.compressAlgo is not None:
            oprot.writeFieldBegin('compressAlgo', TType.STRING, 19)
            oprot.writeString(self.compressAlgo.encode('utf-8') if sys.version_info[0] == 2 else self.compressAlgo)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 20)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 21)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.osInfo is not None:
            oprot.writeFieldBegin('osInfo', TType.STRING, 22)
            oprot.writeString(self.osInfo.encode('utf-8') if sys.version_info[0] == 2 else self.osInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTapeCIDObjectInfo(object):
    """
    磁带CID对象信息

    Attributes:
     - gnsPath
     - jobId
     - jobName
     - jobType
     - clientId
     - clientMac
     - clientType
     - engineType
     - nodeId
     - userName
     - sourceIp
     - orginalInfo
     - custom
     - clientName
     - osInfo
     - mediaSetName
     - syncJobId
     - senderInfo
     - recipientInfo

    """


    def __init__(self, gnsPath=None, jobId=None, jobName=None, jobType=None, clientId=None, clientMac=None, clientType=None, engineType=None, nodeId=None, userName=None, sourceIp=None, orginalInfo=None, custom=None, clientName=None, osInfo=None, mediaSetName=None, syncJobId=None, senderInfo=None, recipientInfo=None,):
        self.gnsPath = gnsPath
        self.jobId = jobId
        self.jobName = jobName
        self.jobType = jobType
        self.clientId = clientId
        self.clientMac = clientMac
        self.clientType = clientType
        self.engineType = engineType
        self.nodeId = nodeId
        self.userName = userName
        self.sourceIp = sourceIp
        self.orginalInfo = orginalInfo
        self.custom = custom
        self.clientName = clientName
        self.osInfo = osInfo
        self.mediaSetName = mediaSetName
        self.syncJobId = syncJobId
        self.senderInfo = senderInfo
        self.recipientInfo = recipientInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sourceIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.orginalInfo = ncCIDAuthInfo()
                    self.orginalInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.osInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.mediaSetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.syncJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.senderInfo = ncCIDAuthInfo()
                    self.senderInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.recipientInfo = ncCIDAuthInfo()
                    self.recipientInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTapeCIDObjectInfo')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 3)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 4)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 5)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 6)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 7)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 8)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 9)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 10)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.sourceIp is not None:
            oprot.writeFieldBegin('sourceIp', TType.STRING, 11)
            oprot.writeString(self.sourceIp.encode('utf-8') if sys.version_info[0] == 2 else self.sourceIp)
            oprot.writeFieldEnd()
        if self.orginalInfo is not None:
            oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 12)
            self.orginalInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 13)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 14)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.osInfo is not None:
            oprot.writeFieldBegin('osInfo', TType.STRING, 15)
            oprot.writeString(self.osInfo.encode('utf-8') if sys.version_info[0] == 2 else self.osInfo)
            oprot.writeFieldEnd()
        if self.mediaSetName is not None:
            oprot.writeFieldBegin('mediaSetName', TType.STRING, 16)
            oprot.writeString(self.mediaSetName.encode('utf-8') if sys.version_info[0] == 2 else self.mediaSetName)
            oprot.writeFieldEnd()
        if self.syncJobId is not None:
            oprot.writeFieldBegin('syncJobId', TType.STRING, 17)
            oprot.writeString(self.syncJobId.encode('utf-8') if sys.version_info[0] == 2 else self.syncJobId)
            oprot.writeFieldEnd()
        if self.senderInfo is not None:
            oprot.writeFieldBegin('senderInfo', TType.STRUCT, 18)
            self.senderInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.recipientInfo is not None:
            oprot.writeFieldBegin('recipientInfo', TType.STRUCT, 19)
            self.recipientInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTapeCIDObjectInfoSet(object):
    """
    磁带CID对象信息对象集合

    Attributes:
     - data
     - requestId
     - totalNum
     - finished

    """


    def __init__(self, data=None, requestId=None, totalNum=None, finished=None,):
        self.data = data
        self.requestId = requestId
        self.totalNum = totalNum
        self.finished = finished

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncTapeCIDObjectInfo()
                        _elem33.read(iprot)
                        self.data.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTapeCIDObjectInfoSet')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter34 in self.data:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 3)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 4)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectInfoSet(object):
    """
    CID对象信息对象集合

    Attributes:
     - data
     - requestId
     - totalNum
     - finished

    """


    def __init__(self, data=None, requestId=None, totalNum=None, finished=None,):
        self.data = data
        self.requestId = requestId
        self.totalNum = totalNum
        self.finished = finished

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = ncCIDObjectInfo()
                        _elem40.read(iprot)
                        self.data.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectInfoSet')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter41 in self.data:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 3)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 4)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointRequest(object):
    """
    时间点对象请求信息
    startTime 和 endTime 用于时间段过滤 不指定时获取所有的时间点

    Attributes:
     - requestId
     - gnsPath
     - index
     - count
     - startTime
     - endTime
     - filter
     - noflying
     - needMetadata
     - hint
     - order
     - userId
     - userName

    """


    def __init__(self, requestId=None, gnsPath=None, index=0, count=100, startTime=0, endTime=0, filter=0, noflying=True, needMetadata=False, hint=None, order=True, userId=None, userName=None,):
        self.requestId = requestId
        self.gnsPath = gnsPath
        self.index = index
        self.count = count
        self.startTime = startTime
        self.endTime = endTime
        self.filter = filter
        self.noflying = noflying
        self.needMetadata = needMetadata
        self.hint = hint
        self.order = order
        self.userId = userId
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.filter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.noflying = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.order = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 3)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 4)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 5)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 6)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.I32, 7)
            oprot.writeI32(self.filter)
            oprot.writeFieldEnd()
        if self.noflying is not None:
            oprot.writeFieldBegin('noflying', TType.BOOL, 8)
            oprot.writeBool(self.noflying)
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 9)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 10)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.BOOL, 11)
            oprot.writeBool(self.order)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 12)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 13)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointInfo(object):
    """
    时间点对象信息

    Attributes:
     - timepoint
     - gnsPath
     - attributes
     - backupType
     - extAttributes
     - displayFlag

    """


    def __init__(self, timepoint=None, gnsPath=None, attributes=None, backupType=None, extAttributes=None, displayFlag=True,):
        self.timepoint = timepoint
        self.gnsPath = gnsPath
        self.attributes = attributes
        self.backupType = backupType
        self.extAttributes = extAttributes
        self.displayFlag = displayFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timepoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.backupType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.extAttributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.displayFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointInfo')
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.I64, 1)
            oprot.writeI64(self.timepoint)
            oprot.writeFieldEnd()
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 3)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.backupType is not None:
            oprot.writeFieldBegin('backupType', TType.I32, 4)
            oprot.writeI32(self.backupType)
            oprot.writeFieldEnd()
        if self.extAttributes is not None:
            oprot.writeFieldBegin('extAttributes', TType.I32, 5)
            oprot.writeI32(self.extAttributes)
            oprot.writeFieldEnd()
        if self.displayFlag is not None:
            oprot.writeFieldBegin('displayFlag', TType.BOOL, 6)
            oprot.writeBool(self.displayFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointInfoSet(object):
    """
    时间点对象信息集合

    Attributes:
     - data
     - requestId
     - totalNum
     - finished
     - exist

    """


    def __init__(self, data=None, requestId=None, totalNum=None, finished=None, exist=True,):
        self.data = data
        self.requestId = requestId
        self.totalNum = totalNum
        self.finished = finished
        self.exist = exist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = ncTimepointInfo()
                        _elem47.read(iprot)
                        self.data.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointInfoSet')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter48 in self.data:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 3)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 4)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 5)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteDataRequest(object):
    """
    删除数据操作请求

    Attributes:
     - requstId
     - gnsPaths

    """


    def __init__(self, requstId=None, gnsPaths=None,):
        self.requstId = requstId
        self.gnsPaths = gnsPaths

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requstId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gnsPaths = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.gnsPaths.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteDataRequest')
        if self.requstId is not None:
            oprot.writeFieldBegin('requstId', TType.STRING, 1)
            oprot.writeString(self.requstId.encode('utf-8') if sys.version_info[0] == 2 else self.requstId)
            oprot.writeFieldEnd()
        if self.gnsPaths is not None:
            oprot.writeFieldBegin('gnsPaths', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.gnsPaths))
            for iter55 in self.gnsPaths:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteDataReply(object):
    """
    删除数据操作结果

    Attributes:
     - succGnsPaths
     - failGnsPaths
     - requestId

    """


    def __init__(self, succGnsPaths=None, failGnsPaths=None, requestId=None,):
        self.succGnsPaths = succGnsPaths
        self.failGnsPaths = failGnsPaths
        self.requestId = requestId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.succGnsPaths = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.succGnsPaths.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.failGnsPaths = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.failGnsPaths.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteDataReply')
        if self.succGnsPaths is not None:
            oprot.writeFieldBegin('succGnsPaths', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.succGnsPaths))
            for iter68 in self.succGnsPaths:
                oprot.writeString(iter68.encode('utf-8') if sys.version_info[0] == 2 else iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.failGnsPaths is not None:
            oprot.writeFieldBegin('failGnsPaths', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.failGnsPaths))
            for iter69 in self.failGnsPaths:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 3)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectInfoRequest(object):
    """
    Attributes:
     - gnsPath
     - requestId
     - cid

    """


    def __init__(self, gnsPath=None, requestId=None, cid=None,):
        self.gnsPath = gnsPath
        self.requestId = requestId
        self.cid = cid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectInfoRequest')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectInfoReply(object):
    """
    Attributes:
     - requestId
     - exist
     - cidInfo

    """


    def __init__(self, requestId=None, exist=None, cidInfo=None,):
        self.requestId = requestId
        self.exist = exist
        self.cidInfo = cidInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.cidInfo = ncCIDObjectInfo()
                    self.cidInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectInfoReply')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 2)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        if self.cidInfo is not None:
            oprot.writeFieldBegin('cidInfo', TType.STRUCT, 3)
            self.cidInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointObjectInfoRequest(object):
    """
    Attributes:
     - gnsPath
     - requestId
     - cid

    """


    def __init__(self, gnsPath=None, requestId=None, cid=None,):
        self.gnsPath = gnsPath
        self.requestId = requestId
        self.cid = cid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointObjectInfoRequest')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointObjectInfoReply(object):
    """
    Attributes:
     - requestId
     - exist
     - tpInfo

    """


    def __init__(self, requestId=None, exist=None, tpInfo=None,):
        self.requestId = requestId
        self.exist = exist
        self.tpInfo = tpInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tpInfo = ncTimepointInfo()
                    self.tpInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointObjectInfoReply')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 2)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        if self.tpInfo is not None:
            oprot.writeFieldBegin('tpInfo', TType.STRUCT, 3)
            self.tpInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDObjectInfoSetEx(object):
    """
    CID对象信息对象集合

    Attributes:
     - data

    """


    def __init__(self, data=None,):
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = ncCIDObjectInfo()
                        _elem75.read(iprot)
                        self.data.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDObjectInfoSetEx')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter76 in self.data:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeletedJobRequest(object):
    """
    Attributes:
     - requestId
     - cidGnsPath

    """


    def __init__(self, requestId=None, cidGnsPath=None,):
        self.requestId = requestId
        self.cidGnsPath = cidGnsPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.requestId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cidGnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeletedJobRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I64, 1)
            oprot.writeI64(self.requestId)
            oprot.writeFieldEnd()
        if self.cidGnsPath is not None:
            oprot.writeFieldBegin('cidGnsPath', TType.STRING, 2)
            oprot.writeString(self.cidGnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.cidGnsPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeletedJobReply(object):
    """
    Attributes:
     - requestId
     - isIdentify

    """


    def __init__(self, requestId=None, isIdentify=False,):
        self.requestId = requestId
        self.isIdentify = isIdentify

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.requestId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isIdentify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeletedJobReply')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I64, 1)
            oprot.writeI64(self.requestId)
            oprot.writeFieldEnd()
        if self.isIdentify is not None:
            oprot.writeFieldBegin('isIdentify', TType.BOOL, 2)
            oprot.writeBool(self.isIdentify)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncGNSObjectSetRequest)
ncGNSObjectSetRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'gnsPaths', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.BOOL, 'needMetadata', None, None, ),  # 3
    (4, TType.I32, 'engineType', None, None, ),  # 4
    (5, TType.STRING, 'userId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'userName', 'UTF8', None, ),  # 6
)
all_structs.append(ncGNSObjectRequest)
ncGNSObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requstId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 2
    (3, TType.I64, 'index', None, None, ),  # 3
    (4, TType.I32, 'count', None, None, ),  # 4
    (5, TType.I32, 'engineType', None, None, ),  # 5
    (6, TType.BOOL, 'needMetadata', None, None, ),  # 6
    (7, TType.STRING, 'hint', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'userName', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'userId', 'UTF8', None, ),  # 9
)
all_structs.append(ncGNSObjectInfo)
ncGNSObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.I32, 'attributes', None, None, ),  # 2
    (3, TType.I64, 'objectSize', None, None, ),  # 3
    (4, TType.I32, 'nodeType', None, None, ),  # 4
    (5, TType.STRING, 'displayName', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'expandedFlag', None, None, ),  # 6
    (7, TType.BOOL, 'displayFlag', None, None, ),  # 7
    (8, TType.BOOL, 'checked', None, None, ),  # 8
    (9, TType.BOOL, 'checkable', None, None, ),  # 9
    (10, TType.I32, 'extAttributes', None, None, ),  # 10
    (11, TType.STRING, 'metadata', 'BINARY', None, ),  # 11
    (12, TType.STRING, 'signature', 'UTF8', None, ),  # 12
)
all_structs.append(ncGNSObjectInfoSet)
ncGNSObjectInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [ncGNSObjectInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'totalNum', None, None, ),  # 3
    (4, TType.BOOL, 'finished', None, None, ),  # 4
    (5, TType.BOOL, 'exist', None, True, ),  # 5
)
all_structs.append(ncCIDAuthInfo)
ncCIDAuthInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clusterGuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'clusterIp', 'UTF8', None, ),  # 3
)
all_structs.append(ncCIDObjectRequestEx)
ncCIDObjectRequestEx.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'syncJobId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'authInfos', (TType.STRUCT, [ncCIDAuthInfo, None], False), None, ),  # 4
    (5, TType.I64, 'index', None, None, ),  # 5
    (6, TType.I32, 'count', None, None, ),  # 6
    (7, TType.BOOL, 'filterEmpty', None, True, ),  # 7
    (8, TType.STRING, 'hint', 'UTF8', None, ),  # 8
    (9, TType.I32, 'authFilter', None, 65535, ),  # 9
)
all_structs.append(ncCIDBatchRequest)
ncCIDBatchRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'gnsPaths', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncCIDObjectRequest)
ncCIDObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
    (3, TType.I64, 'index', None, None, ),  # 3
    (4, TType.I32, 'count', None, None, ),  # 4
    (5, TType.BOOL, 'filterEmpty', None, True, ),  # 5
    None,  # 6
    None,  # 7
    (8, TType.STRING, 'hint', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'userName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'userId', 'UTF8', None, ),  # 11
    (12, TType.BOOL, 'isArchive', None, False, ),  # 12
)
all_structs.append(ncCIDObjectInfo)
ncCIDObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'jobType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'clientId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientMac', 'UTF8', None, ),  # 6
    (7, TType.I32, 'clientType', None, None, ),  # 7
    (8, TType.I32, 'engineType', None, None, ),  # 8
    (9, TType.STRING, 'nodeId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'secretKey', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'dedupPoolId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'userName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'sourceIp', 'UTF8', None, ),  # 13
    (14, TType.STRUCT, 'orginalInfo', [ncCIDAuthInfo, None], None, ),  # 14
    (15, TType.STRING, 'syncJobId', 'UTF8', None, ),  # 15
    (16, TType.STRUCT, 'senderInfo', [ncCIDAuthInfo, None], None, ),  # 16
    (17, TType.STRUCT, 'recipientInfo', [ncCIDAuthInfo, None], None, ),  # 17
    (18, TType.STRING, 'encryptAlgo', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'compressAlgo', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'custom', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'clientName', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'osInfo', 'UTF8', None, ),  # 22
)
all_structs.append(ncTapeCIDObjectInfo)
ncTapeCIDObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'jobType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'clientId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientMac', 'UTF8', None, ),  # 6
    (7, TType.I32, 'clientType', None, None, ),  # 7
    (8, TType.I32, 'engineType', None, None, ),  # 8
    (9, TType.STRING, 'nodeId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'userName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'sourceIp', 'UTF8', None, ),  # 11
    (12, TType.STRUCT, 'orginalInfo', [ncCIDAuthInfo, None], None, ),  # 12
    (13, TType.STRING, 'custom', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'clientName', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'osInfo', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'mediaSetName', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'syncJobId', 'UTF8', None, ),  # 17
    (18, TType.STRUCT, 'senderInfo', [ncCIDAuthInfo, None], None, ),  # 18
    (19, TType.STRUCT, 'recipientInfo', [ncCIDAuthInfo, None], None, ),  # 19
)
all_structs.append(ncTapeCIDObjectInfoSet)
ncTapeCIDObjectInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [ncTapeCIDObjectInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'totalNum', None, None, ),  # 3
    (4, TType.BOOL, 'finished', None, None, ),  # 4
)
all_structs.append(ncCIDObjectInfoSet)
ncCIDObjectInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [ncCIDObjectInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'totalNum', None, None, ),  # 3
    (4, TType.BOOL, 'finished', None, None, ),  # 4
)
all_structs.append(ncTimepointRequest)
ncTimepointRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 2
    (3, TType.I64, 'index', None, 0, ),  # 3
    (4, TType.I32, 'count', None, 100, ),  # 4
    (5, TType.I64, 'startTime', None, 0, ),  # 5
    (6, TType.I64, 'endTime', None, 0, ),  # 6
    (7, TType.I32, 'filter', None, 0, ),  # 7
    (8, TType.BOOL, 'noflying', None, True, ),  # 8
    (9, TType.BOOL, 'needMetadata', None, False, ),  # 9
    (10, TType.STRING, 'hint', 'UTF8', None, ),  # 10
    (11, TType.BOOL, 'order', None, True, ),  # 11
    (12, TType.STRING, 'userId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'userName', 'UTF8', None, ),  # 13
)
all_structs.append(ncTimepointInfo)
ncTimepointInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timepoint', None, None, ),  # 1
    (2, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 2
    (3, TType.I32, 'attributes', None, None, ),  # 3
    (4, TType.I32, 'backupType', None, None, ),  # 4
    (5, TType.I32, 'extAttributes', None, None, ),  # 5
    (6, TType.BOOL, 'displayFlag', None, True, ),  # 6
)
all_structs.append(ncTimepointInfoSet)
ncTimepointInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [ncTimepointInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'totalNum', None, None, ),  # 3
    (4, TType.BOOL, 'finished', None, None, ),  # 4
    (5, TType.BOOL, 'exist', None, True, ),  # 5
)
all_structs.append(ncDeleteDataRequest)
ncDeleteDataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requstId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'gnsPaths', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncDeleteDataReply)
ncDeleteDataReply.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'succGnsPaths', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'failGnsPaths', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'requestId', 'UTF8', None, ),  # 3
)
all_structs.append(ncCIDObjectInfoRequest)
ncCIDObjectInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
)
all_structs.append(ncCIDObjectInfoReply)
ncCIDObjectInfoReply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'exist', None, None, ),  # 2
    (3, TType.STRUCT, 'cidInfo', [ncCIDObjectInfo, None], None, ),  # 3
)
all_structs.append(ncTimepointObjectInfoRequest)
ncTimepointObjectInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
)
all_structs.append(ncTimepointObjectInfoReply)
ncTimepointObjectInfoReply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'exist', None, None, ),  # 2
    (3, TType.STRUCT, 'tpInfo', [ncTimepointInfo, None], None, ),  # 3
)
all_structs.append(ncCIDObjectInfoSetEx)
ncCIDObjectInfoSetEx.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [ncCIDObjectInfo, None], False), None, ),  # 1
)
all_structs.append(ncDeletedJobRequest)
ncDeletedJobRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'requestId', None, None, ),  # 1
    (2, TType.STRING, 'cidGnsPath', 'UTF8', None, ),  # 2
)
all_structs.append(ncDeletedJobReply)
ncDeletedJobReply.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'requestId', None, None, ),  # 1
    (2, TType.BOOL, 'isIdentify', None, False, ),  # 2
)
fix_spec(all_structs)
del all_structs
