#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncCdmDispatchSvc import ncCdmDispatchSvc
from ncCdmDispatchSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void microprobe()')
    print('   get_all_jobs()')
    print('   get_all_mount_jobs()')
    print('   get_all_mounted_images()')
    print('   get_backup_jobs_by_pool(string pool_id)')
    print('   get_mount_jobs_by_pool(string pool_id)')
    print('   get_residue_mount_jobs_by_pool(string pool_id)')
    print('   get_images_by_pool(string pool_id)')
    print('  ncTJob get_job(string jobId)')
    print('  void update_jobs_nstart_time( jobs_params)')
    print('   get_jobs_like_for_schedule(string jobName,  clientIds)')
    print('   get_jobs_for_schedule_by_ids( jobIds)')
    print('  void commit_job(string jobId, string customer, i32 backupType, string desc, bool is_auto_execute, i64 nstart_time, string strategy_id)')
    print('   get_support_backup_type(string job_id)')
    print('   get_jobs_by_instance_name(string instance_name)')
    print('  bool client_exsit_job(string clientId)')
    print('   get_db_job_instances(ncDBJobInstanceRequest request)')
    print('   get_db_job_mappings(ncDBJobInstanceRequest request)')
    print('  void ExcuteSnapshot( lunUuids, i32 copiesNum, i64 timePoint)')
    print('  void ExcuteSnapshotHw( lunUuids, i32 copiesNum, i64 timePoint)')
    print('  i64 del_exceeded_snapshot_copies( lunUuids, i32 copiesNum)')
    print('  string ExcuteSnapshot_mount( lunUuids, i32 backupType, string jobCid, i32 protocol)')
    print('  void UpdateMountPoint(string clientMac, string connector, string snapshotName, string drivername)')
    print('  string GetLunCopyStatus(string volId, string lunCopyId)')
    print('  void CreateTimepoint( lunUuids, i64 timePoint)')
    print('  ncTwoStringList remove_all_jobs_by_client_ids( clientIds)')
    print('  ncTwoStringList remove_all_jobs_by_vplatform_ids( vplatformIds)')
    print('  void stop_backup_jobs_by_pool(string pool_id, string pool_name)')
    print('   getTaskCdmLuns(string jobid)')
    print('  ncThriftCdmLunInfo createCdmLun(i64 size, string jobId)')
    print('  void updateCdmLunInfo( cdmLuns, string jobId)')
    print('  void createVmCdmLunInfo( vmVolumes, string job_id, string timepoint)')
    print('   getVmCdmLunInfo(string job_id,  vmuuid)')
    print('  void createVmwareTimePoint( vminfos, string timepoint, string job_id)')
    print('   get_all_backup_jobs_historys_for_ams()')
    print('   get_all_backup_jobs_for_ams()')
    print('   get_all_mount_job_for_ams()')
    print('   get_all_mount_jobInstance_for_ams()')
    print('  string get_data_for_ams(string kwargs)')
    print('  string do_operation_from_ams(string target, string method, string kwargs)')
    print('  bool is_exists_running_job_on_client(string clientId)')
    print('  bool is_exists_time_points_by_backup_job_id(string backup_job_id)')
    print('  bool is_exists_base_volumes_by_backup_job_id(string backup_job_id)')
    print('  ncCanSyncJobResponseData get_origin_job_by_id(string originJobId)')
    print('  ncTimePointsResponse get_time_points_by_origin_job_id(ncTimePointsRequest TimePointReq)')
    print('  void create_sync_job(ncCreateSyncJobRequest createSyncJobReq)')
    print('  ncCanSyncJobResponse get_can_sync_jobs(ncCanSyncJobRequest canSyncJobReq)')
    print('  void create_sync_time_point(ncCreateSyncTimePointRequest createSyncTimePointReq)')
    print('  bool is_exists_origin_job_by_id(string originJobId)')
    print('  ncCreateSyncTimePointResponse create_sync_time_point_on_sync_start(ncCreateSyncTimePointRequest createSyncTimePointReq)')
    print('  void update_sync_time_point_on_sync_finish(ncUpdateSyncTimePointRequest updateSyncTimePointReq)')
    print('  void update_sync_time_point_base_map_snap(ncUpdateSyncTimePointVolumeRequest updateSyncTimePointVolumeReq)')
    print('  ncDeleteSyncTimePointResponse delete_sync_time_point_by_id(ncDeleteSyncTimePointRequest deleteSyncTimePointIds)')
    print('  void update_job_status_origin_job_by_id(ncUpdateJobStatusRequest UpdateJobStatusReq)')
    print('  bool check_time_point_is_exist(string timePointId)')
    print('   get_dict_export( body, string jobInstanceId, string userId)')
    print('   mount_get_dict_export( body, string jobInstanceId, string userId)')
    print('   backup_get_dict_export( body, string jobInstanceId, string userId)')
    print('   get_jobs_by_sourceId(ncSourceType sourceType, ncServiceType svcType, string sourceId, ncRelationStatus relation)')
    print('   get_jobs_by_datasource(string datasource, string clientId, string dbRunUserName)')
    print('  ncJobInfo get_sync_job_origin_job_by_id(string originJobId)')
    print('   check_user_has_data( user_list)')
    print('  void resolve_clean_job_time_points(string job_id, string clean_type,  time_points, ncUserInfo user, string clean_job_id, string login_ip)')
    print('  ncJobCountInfo get_job_count_info(i64 startTime, string userId)')
    print('  void run_backup_job_handler(string job_instance_id, string user_id)')
    print('  void run_mount_job_handler(string job_instance_id, string user_id)')
    print('  void image_mount_handler(string job_instance_id, string user_id)')
    print('  void image_unmount_handler(string job_instance_id, string user_id)')
    print('  void delete_extra_resource_by_username( user_names)')
    print('   get_task_src_from_DB(string job_id)')
    print('  ncBackupJobsResponse get_all_jobs_by_pages(ncBaseRequest BaseReq)')
    print('   get_cdmdatasource_by_client(string client_id, string job_is_backup)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncCdmDispatchSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
    if len(args) != 0:
        print('microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.microprobe())

elif cmd == 'get_all_jobs':
    if len(args) != 0:
        print('get_all_jobs requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_jobs())

elif cmd == 'get_all_mount_jobs':
    if len(args) != 0:
        print('get_all_mount_jobs requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_mount_jobs())

elif cmd == 'get_all_mounted_images':
    if len(args) != 0:
        print('get_all_mounted_images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_mounted_images())

elif cmd == 'get_backup_jobs_by_pool':
    if len(args) != 1:
        print('get_backup_jobs_by_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backup_jobs_by_pool(args[0],))

elif cmd == 'get_mount_jobs_by_pool':
    if len(args) != 1:
        print('get_mount_jobs_by_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_mount_jobs_by_pool(args[0],))

elif cmd == 'get_residue_mount_jobs_by_pool':
    if len(args) != 1:
        print('get_residue_mount_jobs_by_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_residue_mount_jobs_by_pool(args[0],))

elif cmd == 'get_images_by_pool':
    if len(args) != 1:
        print('get_images_by_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_images_by_pool(args[0],))

elif cmd == 'get_job':
    if len(args) != 1:
        print('get_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_job(args[0],))

elif cmd == 'update_jobs_nstart_time':
    if len(args) != 1:
        print('update_jobs_nstart_time requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_jobs_nstart_time(eval(args[0]),))

elif cmd == 'get_jobs_like_for_schedule':
    if len(args) != 2:
        print('get_jobs_like_for_schedule requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_like_for_schedule(args[0], eval(args[1]),))

elif cmd == 'get_jobs_for_schedule_by_ids':
    if len(args) != 1:
        print('get_jobs_for_schedule_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_for_schedule_by_ids(eval(args[0]),))

elif cmd == 'commit_job':
    if len(args) != 7:
        print('commit_job requires 7 args')
        sys.exit(1)
    pp.pprint(client.commit_job(args[0], args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), args[6],))

elif cmd == 'get_support_backup_type':
    if len(args) != 1:
        print('get_support_backup_type requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_support_backup_type(args[0],))

elif cmd == 'get_jobs_by_instance_name':
    if len(args) != 1:
        print('get_jobs_by_instance_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_by_instance_name(args[0],))

elif cmd == 'client_exsit_job':
    if len(args) != 1:
        print('client_exsit_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.client_exsit_job(args[0],))

elif cmd == 'get_db_job_instances':
    if len(args) != 1:
        print('get_db_job_instances requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_job_instances(eval(args[0]),))

elif cmd == 'get_db_job_mappings':
    if len(args) != 1:
        print('get_db_job_mappings requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_db_job_mappings(eval(args[0]),))

elif cmd == 'ExcuteSnapshot':
    if len(args) != 3:
        print('ExcuteSnapshot requires 3 args')
        sys.exit(1)
    pp.pprint(client.ExcuteSnapshot(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ExcuteSnapshotHw':
    if len(args) != 3:
        print('ExcuteSnapshotHw requires 3 args')
        sys.exit(1)
    pp.pprint(client.ExcuteSnapshotHw(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'del_exceeded_snapshot_copies':
    if len(args) != 2:
        print('del_exceeded_snapshot_copies requires 2 args')
        sys.exit(1)
    pp.pprint(client.del_exceeded_snapshot_copies(eval(args[0]), eval(args[1]),))

elif cmd == 'ExcuteSnapshot_mount':
    if len(args) != 4:
        print('ExcuteSnapshot_mount requires 4 args')
        sys.exit(1)
    pp.pprint(client.ExcuteSnapshot_mount(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'UpdateMountPoint':
    if len(args) != 4:
        print('UpdateMountPoint requires 4 args')
        sys.exit(1)
    pp.pprint(client.UpdateMountPoint(args[0], args[1], args[2], args[3],))

elif cmd == 'GetLunCopyStatus':
    if len(args) != 2:
        print('GetLunCopyStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetLunCopyStatus(args[0], args[1],))

elif cmd == 'CreateTimepoint':
    if len(args) != 2:
        print('CreateTimepoint requires 2 args')
        sys.exit(1)
    pp.pprint(client.CreateTimepoint(eval(args[0]), eval(args[1]),))

elif cmd == 'remove_all_jobs_by_client_ids':
    if len(args) != 1:
        print('remove_all_jobs_by_client_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_all_jobs_by_client_ids(eval(args[0]),))

elif cmd == 'remove_all_jobs_by_vplatform_ids':
    if len(args) != 1:
        print('remove_all_jobs_by_vplatform_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_all_jobs_by_vplatform_ids(eval(args[0]),))

elif cmd == 'stop_backup_jobs_by_pool':
    if len(args) != 2:
        print('stop_backup_jobs_by_pool requires 2 args')
        sys.exit(1)
    pp.pprint(client.stop_backup_jobs_by_pool(args[0], args[1],))

elif cmd == 'getTaskCdmLuns':
    if len(args) != 1:
        print('getTaskCdmLuns requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTaskCdmLuns(args[0],))

elif cmd == 'createCdmLun':
    if len(args) != 2:
        print('createCdmLun requires 2 args')
        sys.exit(1)
    pp.pprint(client.createCdmLun(eval(args[0]), args[1],))

elif cmd == 'updateCdmLunInfo':
    if len(args) != 2:
        print('updateCdmLunInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateCdmLunInfo(eval(args[0]), args[1],))

elif cmd == 'createVmCdmLunInfo':
    if len(args) != 3:
        print('createVmCdmLunInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.createVmCdmLunInfo(eval(args[0]), args[1], args[2],))

elif cmd == 'getVmCdmLunInfo':
    if len(args) != 2:
        print('getVmCdmLunInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.getVmCdmLunInfo(args[0], eval(args[1]),))

elif cmd == 'createVmwareTimePoint':
    if len(args) != 3:
        print('createVmwareTimePoint requires 3 args')
        sys.exit(1)
    pp.pprint(client.createVmwareTimePoint(eval(args[0]), args[1], args[2],))

elif cmd == 'get_all_backup_jobs_historys_for_ams':
    if len(args) != 0:
        print('get_all_backup_jobs_historys_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_backup_jobs_historys_for_ams())

elif cmd == 'get_all_backup_jobs_for_ams':
    if len(args) != 0:
        print('get_all_backup_jobs_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_backup_jobs_for_ams())

elif cmd == 'get_all_mount_job_for_ams':
    if len(args) != 0:
        print('get_all_mount_job_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_mount_job_for_ams())

elif cmd == 'get_all_mount_jobInstance_for_ams':
    if len(args) != 0:
        print('get_all_mount_jobInstance_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_mount_jobInstance_for_ams())

elif cmd == 'get_data_for_ams':
    if len(args) != 1:
        print('get_data_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'do_operation_from_ams':
    if len(args) != 3:
        print('do_operation_from_ams requires 3 args')
        sys.exit(1)
    pp.pprint(client.do_operation_from_ams(args[0], args[1], args[2],))

elif cmd == 'is_exists_running_job_on_client':
    if len(args) != 1:
        print('is_exists_running_job_on_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_exists_running_job_on_client(args[0],))

elif cmd == 'is_exists_time_points_by_backup_job_id':
    if len(args) != 1:
        print('is_exists_time_points_by_backup_job_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_exists_time_points_by_backup_job_id(args[0],))

elif cmd == 'is_exists_base_volumes_by_backup_job_id':
    if len(args) != 1:
        print('is_exists_base_volumes_by_backup_job_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_exists_base_volumes_by_backup_job_id(args[0],))

elif cmd == 'get_origin_job_by_id':
    if len(args) != 1:
        print('get_origin_job_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_origin_job_by_id(args[0],))

elif cmd == 'get_time_points_by_origin_job_id':
    if len(args) != 1:
        print('get_time_points_by_origin_job_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_time_points_by_origin_job_id(eval(args[0]),))

elif cmd == 'create_sync_job':
    if len(args) != 1:
        print('create_sync_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_sync_job(eval(args[0]),))

elif cmd == 'get_can_sync_jobs':
    if len(args) != 1:
        print('get_can_sync_jobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_can_sync_jobs(eval(args[0]),))

elif cmd == 'create_sync_time_point':
    if len(args) != 1:
        print('create_sync_time_point requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_sync_time_point(eval(args[0]),))

elif cmd == 'is_exists_origin_job_by_id':
    if len(args) != 1:
        print('is_exists_origin_job_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_exists_origin_job_by_id(args[0],))

elif cmd == 'create_sync_time_point_on_sync_start':
    if len(args) != 1:
        print('create_sync_time_point_on_sync_start requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_sync_time_point_on_sync_start(eval(args[0]),))

elif cmd == 'update_sync_time_point_on_sync_finish':
    if len(args) != 1:
        print('update_sync_time_point_on_sync_finish requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_sync_time_point_on_sync_finish(eval(args[0]),))

elif cmd == 'update_sync_time_point_base_map_snap':
    if len(args) != 1:
        print('update_sync_time_point_base_map_snap requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_sync_time_point_base_map_snap(eval(args[0]),))

elif cmd == 'delete_sync_time_point_by_id':
    if len(args) != 1:
        print('delete_sync_time_point_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_sync_time_point_by_id(eval(args[0]),))

elif cmd == 'update_job_status_origin_job_by_id':
    if len(args) != 1:
        print('update_job_status_origin_job_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_job_status_origin_job_by_id(eval(args[0]),))

elif cmd == 'check_time_point_is_exist':
    if len(args) != 1:
        print('check_time_point_is_exist requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_time_point_is_exist(args[0],))

elif cmd == 'get_dict_export':
    if len(args) != 3:
        print('get_dict_export requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_dict_export(eval(args[0]), args[1], args[2],))

elif cmd == 'mount_get_dict_export':
    if len(args) != 3:
        print('mount_get_dict_export requires 3 args')
        sys.exit(1)
    pp.pprint(client.mount_get_dict_export(eval(args[0]), args[1], args[2],))

elif cmd == 'backup_get_dict_export':
    if len(args) != 3:
        print('backup_get_dict_export requires 3 args')
        sys.exit(1)
    pp.pprint(client.backup_get_dict_export(eval(args[0]), args[1], args[2],))

elif cmd == 'get_jobs_by_sourceId':
    if len(args) != 4:
        print('get_jobs_by_sourceId requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_by_sourceId(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'get_jobs_by_datasource':
    if len(args) != 3:
        print('get_jobs_by_datasource requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_by_datasource(args[0], args[1], args[2],))

elif cmd == 'get_sync_job_origin_job_by_id':
    if len(args) != 1:
        print('get_sync_job_origin_job_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sync_job_origin_job_by_id(args[0],))

elif cmd == 'check_user_has_data':
    if len(args) != 1:
        print('check_user_has_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_user_has_data(eval(args[0]),))

elif cmd == 'resolve_clean_job_time_points':
    if len(args) != 6:
        print('resolve_clean_job_time_points requires 6 args')
        sys.exit(1)
    pp.pprint(client.resolve_clean_job_time_points(args[0], args[1], eval(args[2]), eval(args[3]), args[4], args[5],))

elif cmd == 'get_job_count_info':
    if len(args) != 2:
        print('get_job_count_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_job_count_info(eval(args[0]), args[1],))

elif cmd == 'run_backup_job_handler':
    if len(args) != 2:
        print('run_backup_job_handler requires 2 args')
        sys.exit(1)
    pp.pprint(client.run_backup_job_handler(args[0], args[1],))

elif cmd == 'run_mount_job_handler':
    if len(args) != 2:
        print('run_mount_job_handler requires 2 args')
        sys.exit(1)
    pp.pprint(client.run_mount_job_handler(args[0], args[1],))

elif cmd == 'image_mount_handler':
    if len(args) != 2:
        print('image_mount_handler requires 2 args')
        sys.exit(1)
    pp.pprint(client.image_mount_handler(args[0], args[1],))

elif cmd == 'image_unmount_handler':
    if len(args) != 2:
        print('image_unmount_handler requires 2 args')
        sys.exit(1)
    pp.pprint(client.image_unmount_handler(args[0], args[1],))

elif cmd == 'delete_extra_resource_by_username':
    if len(args) != 1:
        print('delete_extra_resource_by_username requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_extra_resource_by_username(eval(args[0]),))

elif cmd == 'get_task_src_from_DB':
    if len(args) != 1:
        print('get_task_src_from_DB requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_task_src_from_DB(args[0],))

elif cmd == 'get_all_jobs_by_pages':
    if len(args) != 1:
        print('get_all_jobs_by_pages requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_jobs_by_pages(eval(args[0]),))

elif cmd == 'get_cdmdatasource_by_client':
    if len(args) != 2:
        print('get_cdmdatasource_by_client requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_cdmdatasource_by_client(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
