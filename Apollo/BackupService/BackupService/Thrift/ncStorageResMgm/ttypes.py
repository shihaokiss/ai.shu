# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncStorageResMgm_Var.ttypes
import ncCdmStoreMgmCommon.ttypes

from thrift.transport import TTransport
all_structs = []


class ncFileSystemInfo(object):
    """
    Attributes:
     - mount_path
     - dev_path
     - type

    """


    def __init__(self, mount_path=None, dev_path=None, type=None,):
        self.mount_path = mount_path
        self.dev_path = dev_path
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mount_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFileSystemInfo')
        if self.mount_path is not None:
            oprot.writeFieldBegin('mount_path', TType.STRING, 1)
            oprot.writeString(self.mount_path.encode('utf-8') if sys.version_info[0] == 2 else self.mount_path)
            oprot.writeFieldEnd()
        if self.dev_path is not None:
            oprot.writeFieldBegin('dev_path', TType.STRING, 2)
            oprot.writeString(self.dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.dev_path)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncApplicationVolume(object):
    """
    Attributes:
     - volume_id
     - volume_name
     - volume_type
     - volume_status
     - volume_size
     - used_size
     - free_size
     - quota_size
     - storage_type
     - dispatch
     - application_volume_id
     - application_volume_group_guid
     - node_id
     - node_ip
     - raid_name
     - pool_id
     - file_system
     - desc

    """


    def __init__(self, volume_id=None, volume_name=None, volume_type=None, volume_status=None, volume_size=None, used_size=None, free_size=None, quota_size=None, storage_type=None, dispatch=None, application_volume_id=None, application_volume_group_guid=None, node_id=None, node_ip=None, raid_name=None, pool_id=None, file_system=None, desc=None,):
        self.volume_id = volume_id
        self.volume_name = volume_name
        self.volume_type = volume_type
        self.volume_status = volume_status
        self.volume_size = volume_size
        self.used_size = used_size
        self.free_size = free_size
        self.quota_size = quota_size
        self.storage_type = storage_type
        self.dispatch = dispatch
        self.application_volume_id = application_volume_id
        self.application_volume_group_guid = application_volume_group_guid
        self.node_id = node_id
        self.node_ip = node_ip
        self.raid_name = raid_name
        self.pool_id = pool_id
        self.file_system = file_system
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volume_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.volume_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.used_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.free_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.quota_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.storage_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.dispatch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.application_volume_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.application_volume_group_guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.raid_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.file_system = ncFileSystemInfo()
                    self.file_system.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncApplicationVolume')
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 1)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        if self.volume_name is not None:
            oprot.writeFieldBegin('volume_name', TType.STRING, 2)
            oprot.writeString(self.volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.volume_name)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 3)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.volume_status is not None:
            oprot.writeFieldBegin('volume_status', TType.I32, 4)
            oprot.writeI32(self.volume_status)
            oprot.writeFieldEnd()
        if self.volume_size is not None:
            oprot.writeFieldBegin('volume_size', TType.I64, 5)
            oprot.writeI64(self.volume_size)
            oprot.writeFieldEnd()
        if self.used_size is not None:
            oprot.writeFieldBegin('used_size', TType.I64, 6)
            oprot.writeI64(self.used_size)
            oprot.writeFieldEnd()
        if self.free_size is not None:
            oprot.writeFieldBegin('free_size', TType.I64, 7)
            oprot.writeI64(self.free_size)
            oprot.writeFieldEnd()
        if self.quota_size is not None:
            oprot.writeFieldBegin('quota_size', TType.I64, 8)
            oprot.writeI64(self.quota_size)
            oprot.writeFieldEnd()
        if self.storage_type is not None:
            oprot.writeFieldBegin('storage_type', TType.I32, 9)
            oprot.writeI32(self.storage_type)
            oprot.writeFieldEnd()
        if self.dispatch is not None:
            oprot.writeFieldBegin('dispatch', TType.I32, 10)
            oprot.writeI32(self.dispatch)
            oprot.writeFieldEnd()
        if self.application_volume_id is not None:
            oprot.writeFieldBegin('application_volume_id', TType.I64, 11)
            oprot.writeI64(self.application_volume_id)
            oprot.writeFieldEnd()
        if self.application_volume_group_guid is not None:
            oprot.writeFieldBegin('application_volume_group_guid', TType.STRING, 12)
            oprot.writeString(self.application_volume_group_guid.encode('utf-8') if sys.version_info[0] == 2 else self.application_volume_group_guid)
            oprot.writeFieldEnd()
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 13)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 14)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.raid_name is not None:
            oprot.writeFieldBegin('raid_name', TType.STRING, 15)
            oprot.writeString(self.raid_name.encode('utf-8') if sys.version_info[0] == 2 else self.raid_name)
            oprot.writeFieldEnd()
        if self.pool_id is not None:
            oprot.writeFieldBegin('pool_id', TType.STRING, 16)
            oprot.writeString(self.pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.pool_id)
            oprot.writeFieldEnd()
        if self.file_system is not None:
            oprot.writeFieldBegin('file_system', TType.STRUCT, 17)
            self.file_system.write(oprot)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 18)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetApplicationVolumeRequest(object):
    """
    Attributes:
     - volume_id
     - volume_name
     - node_id
     - volume_type
     - volume_status

    """


    def __init__(self, volume_id=None, volume_name=None, node_id=None, volume_type=None, volume_status=None,):
        self.volume_id = volume_id
        self.volume_name = volume_name
        self.node_id = node_id
        self.volume_type = volume_type
        self.volume_status = volume_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.volume_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetApplicationVolumeRequest')
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 1)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        if self.volume_name is not None:
            oprot.writeFieldBegin('volume_name', TType.STRING, 2)
            oprot.writeString(self.volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.volume_name)
            oprot.writeFieldEnd()
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 3)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 4)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.volume_status is not None:
            oprot.writeFieldBegin('volume_status', TType.I32, 5)
            oprot.writeI32(self.volume_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetApplicationVolumesRequest(object):
    """
    Attributes:
     - index
     - count
     - node_id
     - volume_type
     - volume_status

    """


    def __init__(self, index=None, count=None, node_id=None, volume_type=None, volume_status=None,):
        self.index = index
        self.count = count
        self.node_id = node_id
        self.volume_type = volume_type
        self.volume_status = volume_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.volume_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetApplicationVolumesRequest')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 1)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 3)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 4)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.volume_status is not None:
            oprot.writeFieldBegin('volume_status', TType.I32, 5)
            oprot.writeI32(self.volume_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetApplicationVolumesResponse(object):
    """
    Attributes:
     - index
     - count
     - total_num
     - volumes

    """


    def __init__(self, index=None, count=None, total_num=None, volumes=None,):
        self.index = index
        self.count = count
        self.total_num = total_num
        self.volumes = volumes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.volumes = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncApplicationVolume()
                        _elem5.read(iprot)
                        self.volumes.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetApplicationVolumesResponse')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 1)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.total_num is not None:
            oprot.writeFieldBegin('total_num', TType.I32, 3)
            oprot.writeI32(self.total_num)
            oprot.writeFieldEnd()
        if self.volumes is not None:
            oprot.writeFieldBegin('volumes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.volumes))
            for iter6 in self.volumes:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateApplicationVolumeRequest(object):
    """
    Attributes:
     - application_volume
     - raid_usable
     - path_size
     - desc
     - task_id
     - user_name
     - login_ip

    """


    def __init__(self, application_volume=None, raid_usable=None, path_size=None, desc=None, task_id=None, user_name=None, login_ip=None,):
        self.application_volume = application_volume
        self.raid_usable = raid_usable
        self.path_size = path_size
        self.desc = desc
        self.task_id = task_id
        self.user_name = user_name
        self.login_ip = login_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.application_volume = ncApplicationVolume()
                    self.application_volume.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.raid_usable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.path_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.login_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateApplicationVolumeRequest')
        if self.application_volume is not None:
            oprot.writeFieldBegin('application_volume', TType.STRUCT, 1)
            self.application_volume.write(oprot)
            oprot.writeFieldEnd()
        if self.raid_usable is not None:
            oprot.writeFieldBegin('raid_usable', TType.I64, 2)
            oprot.writeI64(self.raid_usable)
            oprot.writeFieldEnd()
        if self.path_size is not None:
            oprot.writeFieldBegin('path_size', TType.I64, 3)
            oprot.writeI64(self.path_size)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 4)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 5)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 6)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.login_ip is not None:
            oprot.writeFieldBegin('login_ip', TType.STRING, 7)
            oprot.writeString(self.login_ip.encode('utf-8') if sys.version_info[0] == 2 else self.login_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteApplicationVolumeRequest(object):
    """
    Attributes:
     - application_volume
     - task_id
     - user_name
     - login_ip

    """


    def __init__(self, application_volume=None, task_id=None, user_name=None, login_ip=None,):
        self.application_volume = application_volume
        self.task_id = task_id
        self.user_name = user_name
        self.login_ip = login_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.application_volume = ncApplicationVolume()
                    self.application_volume.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.login_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteApplicationVolumeRequest')
        if self.application_volume is not None:
            oprot.writeFieldBegin('application_volume', TType.STRUCT, 1)
            self.application_volume.write(oprot)
            oprot.writeFieldEnd()
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 2)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 3)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.login_ip is not None:
            oprot.writeFieldBegin('login_ip', TType.STRING, 4)
            oprot.writeString(self.login_ip.encode('utf-8') if sys.version_info[0] == 2 else self.login_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEditApplicationVolumeRequest(object):
    """
    Attributes:
     - application_volume
     - edit_size
     - desc
     - task_id
     - user_name
     - login_ip

    """


    def __init__(self, application_volume=None, edit_size=None, desc=None, task_id=None, user_name=None, login_ip=None,):
        self.application_volume = application_volume
        self.edit_size = edit_size
        self.desc = desc
        self.task_id = task_id
        self.user_name = user_name
        self.login_ip = login_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.application_volume = ncApplicationVolume()
                    self.application_volume.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.edit_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.login_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEditApplicationVolumeRequest')
        if self.application_volume is not None:
            oprot.writeFieldBegin('application_volume', TType.STRUCT, 1)
            self.application_volume.write(oprot)
            oprot.writeFieldEnd()
        if self.edit_size is not None:
            oprot.writeFieldBegin('edit_size', TType.I64, 2)
            oprot.writeI64(self.edit_size)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 3)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 4)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 5)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.login_ip is not None:
            oprot.writeFieldBegin('login_ip', TType.STRING, 6)
            oprot.writeString(self.login_ip.encode('utf-8') if sys.version_info[0] == 2 else self.login_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolume(object):
    """
    Attributes:
     - id
     - name
     - wwn
     - type
     - total_size
     - used_size
     - pool_id
     - status
     - storage_type
     - father_name
     - third_party_pool_id
     - deduplication
     - compression

    """


    def __init__(self, id=None, name=None, wwn=None, type=None, total_size=None, used_size=None, pool_id=None, status=None, storage_type=None, father_name=None, third_party_pool_id=None, deduplication=None, compression=None,):
        self.id = id
        self.name = name
        self.wwn = wwn
        self.type = type
        self.total_size = total_size
        self.used_size = used_size
        self.pool_id = pool_id
        self.status = status
        self.storage_type = storage_type
        self.father_name = father_name
        self.third_party_pool_id = third_party_pool_id
        self.deduplication = deduplication
        self.compression = compression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.total_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.used_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.storage_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.father_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.third_party_pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.deduplication = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.compression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolume')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.wwn is not None:
            oprot.writeFieldBegin('wwn', TType.STRING, 3)
            oprot.writeString(self.wwn.encode('utf-8') if sys.version_info[0] == 2 else self.wwn)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.total_size is not None:
            oprot.writeFieldBegin('total_size', TType.I64, 5)
            oprot.writeI64(self.total_size)
            oprot.writeFieldEnd()
        if self.used_size is not None:
            oprot.writeFieldBegin('used_size', TType.I64, 6)
            oprot.writeI64(self.used_size)
            oprot.writeFieldEnd()
        if self.pool_id is not None:
            oprot.writeFieldBegin('pool_id', TType.STRING, 7)
            oprot.writeString(self.pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.pool_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.storage_type is not None:
            oprot.writeFieldBegin('storage_type', TType.I32, 9)
            oprot.writeI32(self.storage_type)
            oprot.writeFieldEnd()
        if self.father_name is not None:
            oprot.writeFieldBegin('father_name', TType.STRING, 10)
            oprot.writeString(self.father_name.encode('utf-8') if sys.version_info[0] == 2 else self.father_name)
            oprot.writeFieldEnd()
        if self.third_party_pool_id is not None:
            oprot.writeFieldBegin('third_party_pool_id', TType.STRING, 11)
            oprot.writeString(self.third_party_pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.third_party_pool_id)
            oprot.writeFieldEnd()
        if self.deduplication is not None:
            oprot.writeFieldBegin('deduplication', TType.BOOL, 12)
            oprot.writeBool(self.deduplication)
            oprot.writeFieldEnd()
        if self.compression is not None:
            oprot.writeFieldBegin('compression', TType.BOOL, 13)
            oprot.writeBool(self.compression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateVolumeRequest(object):
    """
    Attributes:
     - volume

    """


    def __init__(self, volume=None,):
        self.volume = volume

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volume = ncVolume()
                    self.volume.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateVolumeRequest')
        if self.volume is not None:
            oprot.writeFieldBegin('volume', TType.STRUCT, 1)
            self.volume.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteVolumeRequest(object):
    """
    Attributes:
     - pool_id
     - volume_names

    """


    def __init__(self, pool_id=None, volume_names=None,):
        self.pool_id = pool_id
        self.volume_names = volume_names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.volume_names = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.volume_names.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteVolumeRequest')
        if self.pool_id is not None:
            oprot.writeFieldBegin('pool_id', TType.STRING, 1)
            oprot.writeString(self.pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.pool_id)
            oprot.writeFieldEnd()
        if self.volume_names is not None:
            oprot.writeFieldBegin('volume_names', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.volume_names))
            for iter13 in self.volume_names:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetVolumeRequest(object):
    """
    Attributes:
     - volume

    """


    def __init__(self, volume=None,):
        self.volume = volume

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volume = ncVolume()
                    self.volume.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetVolumeRequest')
        if self.volume is not None:
            oprot.writeFieldBegin('volume', TType.STRUCT, 1)
            self.volume.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateBaseVolumeRequest(object):
    """
    Attributes:
     - poolId
     - volName
     - volSize

    """


    def __init__(self, poolId=None, volName=None, volSize=None,):
        self.poolId = poolId
        self.volName = volName
        self.volSize = volSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.volSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateBaseVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.volName is not None:
            oprot.writeFieldBegin('volName', TType.STRING, 2)
            oprot.writeString(self.volName.encode('utf-8') if sys.version_info[0] == 2 else self.volName)
            oprot.writeFieldEnd()
        if self.volSize is not None:
            oprot.writeFieldBegin('volSize', TType.I64, 3)
            oprot.writeI64(self.volSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFSVolumeMappingResponse(object):
    """
    Attributes:
     - dev_path
     - volume_name
     - ip

    """


    def __init__(self, dev_path=None, volume_name=None, ip=None,):
        self.dev_path = dev_path
        self.volume_name = volume_name
        self.ip = ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFSVolumeMappingResponse')
        if self.dev_path is not None:
            oprot.writeFieldBegin('dev_path', TType.STRING, 1)
            oprot.writeString(self.dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.dev_path)
            oprot.writeFieldEnd()
        if self.volume_name is not None:
            oprot.writeFieldBegin('volume_name', TType.STRING, 2)
            oprot.writeString(self.volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.volume_name)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTask(object):
    """
    Attributes:
     - id
     - status
     - type
     - error_info

    """


    def __init__(self, id=None, status=None, type=None, error_info=None,):
        self.id = id
        self.status = status
        self.type = type
        self.error_info = error_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTask')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.error_info is not None:
            oprot.writeFieldBegin('error_info', TType.STRING, 4)
            oprot.writeString(self.error_info.encode('utf-8') if sys.version_info[0] == 2 else self.error_info)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDisks(object):
    """
    Attributes:
     - adpId
     - array
     - arrayName
     - devId
     - devName
     - devModel
     - devType
     - devStatus
     - slot
     - devTotal
     - spareType
     - spareRaid
     - enclosureDeviceId
     - coercedSize
     - firmwareState

    """


    def __init__(self, adpId=None, array=None, arrayName=None, devId=None, devName=None, devModel=None, devType=None, devStatus=None, slot=None, devTotal=None, spareType=None, spareRaid=None, enclosureDeviceId=None, coercedSize=None, firmwareState=None,):
        self.adpId = adpId
        self.array = array
        self.arrayName = arrayName
        self.devId = devId
        self.devName = devName
        self.devModel = devModel
        self.devType = devType
        self.devStatus = devStatus
        self.slot = slot
        self.devTotal = devTotal
        self.spareType = spareType
        self.spareRaid = spareRaid
        self.enclosureDeviceId = enclosureDeviceId
        self.coercedSize = coercedSize
        self.firmwareState = firmwareState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.adpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.array = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.arrayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.devId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.devModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.devType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.slot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.spareType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.spareRaid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.enclosureDeviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.coercedSize = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.firmwareState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDisks')
        if self.adpId is not None:
            oprot.writeFieldBegin('adpId', TType.STRING, 1)
            oprot.writeString(self.adpId.encode('utf-8') if sys.version_info[0] == 2 else self.adpId)
            oprot.writeFieldEnd()
        if self.array is not None:
            oprot.writeFieldBegin('array', TType.I32, 2)
            oprot.writeI32(self.array)
            oprot.writeFieldEnd()
        if self.arrayName is not None:
            oprot.writeFieldBegin('arrayName', TType.STRING, 3)
            oprot.writeString(self.arrayName.encode('utf-8') if sys.version_info[0] == 2 else self.arrayName)
            oprot.writeFieldEnd()
        if self.devId is not None:
            oprot.writeFieldBegin('devId', TType.STRING, 4)
            oprot.writeString(self.devId.encode('utf-8') if sys.version_info[0] == 2 else self.devId)
            oprot.writeFieldEnd()
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 5)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devModel is not None:
            oprot.writeFieldBegin('devModel', TType.STRING, 6)
            oprot.writeString(self.devModel.encode('utf-8') if sys.version_info[0] == 2 else self.devModel)
            oprot.writeFieldEnd()
        if self.devType is not None:
            oprot.writeFieldBegin('devType', TType.STRING, 7)
            oprot.writeString(self.devType.encode('utf-8') if sys.version_info[0] == 2 else self.devType)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 8)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRING, 9)
            oprot.writeString(self.slot.encode('utf-8') if sys.version_info[0] == 2 else self.slot)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 10)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.spareType is not None:
            oprot.writeFieldBegin('spareType', TType.I32, 11)
            oprot.writeI32(self.spareType)
            oprot.writeFieldEnd()
        if self.spareRaid is not None:
            oprot.writeFieldBegin('spareRaid', TType.STRING, 12)
            oprot.writeString(self.spareRaid.encode('utf-8') if sys.version_info[0] == 2 else self.spareRaid)
            oprot.writeFieldEnd()
        if self.enclosureDeviceId is not None:
            oprot.writeFieldBegin('enclosureDeviceId', TType.STRING, 13)
            oprot.writeString(self.enclosureDeviceId.encode('utf-8') if sys.version_info[0] == 2 else self.enclosureDeviceId)
            oprot.writeFieldEnd()
        if self.coercedSize is not None:
            oprot.writeFieldBegin('coercedSize', TType.STRING, 14)
            oprot.writeString(self.coercedSize.encode('utf-8') if sys.version_info[0] == 2 else self.coercedSize)
            oprot.writeFieldEnd()
        if self.firmwareState is not None:
            oprot.writeFieldBegin('firmwareState', TType.STRING, 15)
            oprot.writeString(self.firmwareState.encode('utf-8') if sys.version_info[0] == 2 else self.firmwareState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeMappingRequest(object):
    """
    Attributes:
     - volume_uuid
     - volume_config
     - volume_wwn
     - volume_type
     - fabric_type
     - storage_object_name
     - target_wwn
     - host_wwn
     - device_ip
     - server_lun_index
     - host_lun_index
     - network_portal_ip
     - network_portal_port
     - volume_lun_id
     - volume_size
     - link_id
     - client_id
     - server_id
     - data_transfe_ip

    """


    def __init__(self, volume_uuid=None, volume_config=None, volume_wwn=None, volume_type=None, fabric_type=None, storage_object_name=None, target_wwn=None, host_wwn=None, device_ip=None, server_lun_index=None, host_lun_index=None, network_portal_ip=None, network_portal_port=None, volume_lun_id=None, volume_size=None, link_id=None, client_id=None, server_id=None, data_transfe_ip=None,):
        self.volume_uuid = volume_uuid
        self.volume_config = volume_config
        self.volume_wwn = volume_wwn
        self.volume_type = volume_type
        self.fabric_type = fabric_type
        self.storage_object_name = storage_object_name
        self.target_wwn = target_wwn
        self.host_wwn = host_wwn
        self.device_ip = device_ip
        self.server_lun_index = server_lun_index
        self.host_lun_index = host_lun_index
        self.network_portal_ip = network_portal_ip
        self.network_portal_port = network_portal_port
        self.volume_lun_id = volume_lun_id
        self.volume_size = volume_size
        self.link_id = link_id
        self.client_id = client_id
        self.server_id = server_id
        self.data_transfe_ip = data_transfe_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volume_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fabric_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.storage_object_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.target_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.host_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.device_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.server_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.host_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.network_portal_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.network_portal_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.volume_lun_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.volume_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.server_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.data_transfe_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeMappingRequest')
        if self.volume_uuid is not None:
            oprot.writeFieldBegin('volume_uuid', TType.STRING, 1)
            oprot.writeString(self.volume_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.volume_uuid)
            oprot.writeFieldEnd()
        if self.volume_config is not None:
            oprot.writeFieldBegin('volume_config', TType.STRING, 2)
            oprot.writeString(self.volume_config.encode('utf-8') if sys.version_info[0] == 2 else self.volume_config)
            oprot.writeFieldEnd()
        if self.volume_wwn is not None:
            oprot.writeFieldBegin('volume_wwn', TType.STRING, 3)
            oprot.writeString(self.volume_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.volume_wwn)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 4)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.fabric_type is not None:
            oprot.writeFieldBegin('fabric_type', TType.I32, 5)
            oprot.writeI32(self.fabric_type)
            oprot.writeFieldEnd()
        if self.storage_object_name is not None:
            oprot.writeFieldBegin('storage_object_name', TType.STRING, 6)
            oprot.writeString(self.storage_object_name.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_name)
            oprot.writeFieldEnd()
        if self.target_wwn is not None:
            oprot.writeFieldBegin('target_wwn', TType.STRING, 7)
            oprot.writeString(self.target_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.target_wwn)
            oprot.writeFieldEnd()
        if self.host_wwn is not None:
            oprot.writeFieldBegin('host_wwn', TType.STRING, 8)
            oprot.writeString(self.host_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.host_wwn)
            oprot.writeFieldEnd()
        if self.device_ip is not None:
            oprot.writeFieldBegin('device_ip', TType.STRING, 9)
            oprot.writeString(self.device_ip.encode('utf-8') if sys.version_info[0] == 2 else self.device_ip)
            oprot.writeFieldEnd()
        if self.server_lun_index is not None:
            oprot.writeFieldBegin('server_lun_index', TType.I32, 10)
            oprot.writeI32(self.server_lun_index)
            oprot.writeFieldEnd()
        if self.host_lun_index is not None:
            oprot.writeFieldBegin('host_lun_index', TType.I32, 11)
            oprot.writeI32(self.host_lun_index)
            oprot.writeFieldEnd()
        if self.network_portal_ip is not None:
            oprot.writeFieldBegin('network_portal_ip', TType.STRING, 12)
            oprot.writeString(self.network_portal_ip.encode('utf-8') if sys.version_info[0] == 2 else self.network_portal_ip)
            oprot.writeFieldEnd()
        if self.network_portal_port is not None:
            oprot.writeFieldBegin('network_portal_port', TType.I32, 13)
            oprot.writeI32(self.network_portal_port)
            oprot.writeFieldEnd()
        if self.volume_lun_id is not None:
            oprot.writeFieldBegin('volume_lun_id', TType.I64, 14)
            oprot.writeI64(self.volume_lun_id)
            oprot.writeFieldEnd()
        if self.volume_size is not None:
            oprot.writeFieldBegin('volume_size', TType.I64, 15)
            oprot.writeI64(self.volume_size)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 16)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 17)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.STRING, 18)
            oprot.writeString(self.server_id.encode('utf-8') if sys.version_info[0] == 2 else self.server_id)
            oprot.writeFieldEnd()
        if self.data_transfe_ip is not None:
            oprot.writeFieldBegin('data_transfe_ip', TType.STRING, 19)
            oprot.writeString(self.data_transfe_ip.encode('utf-8') if sys.version_info[0] == 2 else self.data_transfe_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeMappingReply(object):
    """
    Attributes:
     - storage_object_type
     - storage_object_config
     - storage_object_name
     - storage_object_wwn
     - fabric_type
     - target_wwn
     - host_wwn
     - server_lun_index
     - host_lun_index
     - network_portal_ip
     - network_portal_port
     - tpg_tag
     - link_id

    """


    def __init__(self, storage_object_type=None, storage_object_config=None, storage_object_name=None, storage_object_wwn=None, fabric_type=None, target_wwn=None, host_wwn=None, server_lun_index=None, host_lun_index=None, network_portal_ip=None, network_portal_port=None, tpg_tag=None, link_id=None,):
        self.storage_object_type = storage_object_type
        self.storage_object_config = storage_object_config
        self.storage_object_name = storage_object_name
        self.storage_object_wwn = storage_object_wwn
        self.fabric_type = fabric_type
        self.target_wwn = target_wwn
        self.host_wwn = host_wwn
        self.server_lun_index = server_lun_index
        self.host_lun_index = host_lun_index
        self.network_portal_ip = network_portal_ip
        self.network_portal_port = network_portal_port
        self.tpg_tag = tpg_tag
        self.link_id = link_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.storage_object_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.storage_object_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storage_object_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storage_object_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fabric_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.target_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.host_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.server_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.host_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.network_portal_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.network_portal_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.tpg_tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeMappingReply')
        if self.storage_object_type is not None:
            oprot.writeFieldBegin('storage_object_type', TType.I32, 1)
            oprot.writeI32(self.storage_object_type)
            oprot.writeFieldEnd()
        if self.storage_object_config is not None:
            oprot.writeFieldBegin('storage_object_config', TType.STRING, 2)
            oprot.writeString(self.storage_object_config.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_config)
            oprot.writeFieldEnd()
        if self.storage_object_name is not None:
            oprot.writeFieldBegin('storage_object_name', TType.STRING, 3)
            oprot.writeString(self.storage_object_name.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_name)
            oprot.writeFieldEnd()
        if self.storage_object_wwn is not None:
            oprot.writeFieldBegin('storage_object_wwn', TType.STRING, 4)
            oprot.writeString(self.storage_object_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_wwn)
            oprot.writeFieldEnd()
        if self.fabric_type is not None:
            oprot.writeFieldBegin('fabric_type', TType.I32, 5)
            oprot.writeI32(self.fabric_type)
            oprot.writeFieldEnd()
        if self.target_wwn is not None:
            oprot.writeFieldBegin('target_wwn', TType.STRING, 6)
            oprot.writeString(self.target_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.target_wwn)
            oprot.writeFieldEnd()
        if self.host_wwn is not None:
            oprot.writeFieldBegin('host_wwn', TType.STRING, 7)
            oprot.writeString(self.host_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.host_wwn)
            oprot.writeFieldEnd()
        if self.server_lun_index is not None:
            oprot.writeFieldBegin('server_lun_index', TType.I32, 8)
            oprot.writeI32(self.server_lun_index)
            oprot.writeFieldEnd()
        if self.host_lun_index is not None:
            oprot.writeFieldBegin('host_lun_index', TType.I32, 9)
            oprot.writeI32(self.host_lun_index)
            oprot.writeFieldEnd()
        if self.network_portal_ip is not None:
            oprot.writeFieldBegin('network_portal_ip', TType.STRING, 10)
            oprot.writeString(self.network_portal_ip.encode('utf-8') if sys.version_info[0] == 2 else self.network_portal_ip)
            oprot.writeFieldEnd()
        if self.network_portal_port is not None:
            oprot.writeFieldBegin('network_portal_port', TType.I32, 11)
            oprot.writeI32(self.network_portal_port)
            oprot.writeFieldEnd()
        if self.tpg_tag is not None:
            oprot.writeFieldBegin('tpg_tag', TType.I32, 12)
            oprot.writeI32(self.tpg_tag)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 13)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPartVolumeInfo(object):
    """
    Attributes:
     - volumeId
     - volumeType
     - volumeSize

    """


    def __init__(self, volumeId=None, volumeType=None, volumeSize=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.volumeSize = volumeSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.volumeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPartVolumeInfo')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.volumeSize is not None:
            oprot.writeFieldBegin('volumeSize', TType.I64, 3)
            oprot.writeI64(self.volumeSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFSVolumeMappingRequest(object):
    """
    Attributes:
     - poolId
     - hostName
     - portName
     - lunNames
     - volumeList
     - iscsiIp
     - fabricModule

    """


    def __init__(self, poolId=None, hostName=None, portName=None, lunNames=None, volumeList=None, iscsiIp=None, fabricModule=None,):
        self.poolId = poolId
        self.hostName = hostName
        self.portName = portName
        self.lunNames = lunNames
        self.volumeList = volumeList
        self.iscsiIp = iscsiIp
        self.fabricModule = fabricModule

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.portName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.lunNames = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.lunNames.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.volumeList = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = ncPartVolumeInfo()
                        _elem25.read(iprot)
                        self.volumeList.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.iscsiIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.fabricModule = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFSVolumeMappingRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.portName is not None:
            oprot.writeFieldBegin('portName', TType.STRING, 3)
            oprot.writeString(self.portName.encode('utf-8') if sys.version_info[0] == 2 else self.portName)
            oprot.writeFieldEnd()
        if self.lunNames is not None:
            oprot.writeFieldBegin('lunNames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.lunNames))
            for iter26 in self.lunNames:
                oprot.writeString(iter26.encode('utf-8') if sys.version_info[0] == 2 else iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.volumeList is not None:
            oprot.writeFieldBegin('volumeList', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeList))
            for iter27 in self.volumeList:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iscsiIp is not None:
            oprot.writeFieldBegin('iscsiIp', TType.STRING, 6)
            oprot.writeString(self.iscsiIp.encode('utf-8') if sys.version_info[0] == 2 else self.iscsiIp)
            oprot.writeFieldEnd()
        if self.fabricModule is not None:
            oprot.writeFieldBegin('fabricModule', TType.I32, 7)
            oprot.writeI32(self.fabricModule)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetIscsiPortalInfo(object):
    """
    Attributes:
     - nodeIp
     - targetName

    """


    def __init__(self, nodeIp=None, targetName=None,):
        self.nodeIp = nodeIp
        self.targetName = targetName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetIscsiPortalInfo')
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 1)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.targetName is not None:
            oprot.writeFieldBegin('targetName', TType.STRING, 2)
            oprot.writeString(self.targetName.encode('utf-8') if sys.version_info[0] == 2 else self.targetName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncThirdPartyStorage(object):
    """
    Attributes:
     - id
     - name
     - type
     - status
     - ip
     - port
     - user_name
     - password

    """


    def __init__(self, id=None, name=None, type=None, status=None, ip=None, port=None, user_name=None, password=None,):
        self.id = id
        self.name = name
        self.type = type
        self.status = status
        self.ip = ip
        self.port = port
        self.user_name = user_name
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncThirdPartyStorage')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 5)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 6)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 7)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 8)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPool(object):
    """
    Attributes:
     - id
     - name
     - type
     - status
     - total_size
     - used_size
     - free_size
     - redundancy_policy
     - security_level
     - replication_factor
     - num_data_units
     - num_parity_units
     - num_fault_tolerance
     - storage_media_type
     - cache_media_type
     - pool_id
     - third_party_storage

    """


    def __init__(self, id=None, name=None, type=None, status=None, total_size=None, used_size=None, free_size=None, redundancy_policy=None, security_level=None, replication_factor=None, num_data_units=None, num_parity_units=None, num_fault_tolerance=None, storage_media_type=None, cache_media_type=None, pool_id=None, third_party_storage=None,):
        self.id = id
        self.name = name
        self.type = type
        self.status = status
        self.total_size = total_size
        self.used_size = used_size
        self.free_size = free_size
        self.redundancy_policy = redundancy_policy
        self.security_level = security_level
        self.replication_factor = replication_factor
        self.num_data_units = num_data_units
        self.num_parity_units = num_parity_units
        self.num_fault_tolerance = num_fault_tolerance
        self.storage_media_type = storage_media_type
        self.cache_media_type = cache_media_type
        self.pool_id = pool_id
        self.third_party_storage = third_party_storage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.total_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.used_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.free_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.redundancy_policy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.security_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.replication_factor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.num_data_units = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.num_parity_units = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.num_fault_tolerance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.storage_media_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.cache_media_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.third_party_storage = ncThirdPartyStorage()
                    self.third_party_storage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPool')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.total_size is not None:
            oprot.writeFieldBegin('total_size', TType.I64, 5)
            oprot.writeI64(self.total_size)
            oprot.writeFieldEnd()
        if self.used_size is not None:
            oprot.writeFieldBegin('used_size', TType.I64, 6)
            oprot.writeI64(self.used_size)
            oprot.writeFieldEnd()
        if self.free_size is not None:
            oprot.writeFieldBegin('free_size', TType.I64, 7)
            oprot.writeI64(self.free_size)
            oprot.writeFieldEnd()
        if self.redundancy_policy is not None:
            oprot.writeFieldBegin('redundancy_policy', TType.I32, 8)
            oprot.writeI32(self.redundancy_policy)
            oprot.writeFieldEnd()
        if self.security_level is not None:
            oprot.writeFieldBegin('security_level', TType.I32, 9)
            oprot.writeI32(self.security_level)
            oprot.writeFieldEnd()
        if self.replication_factor is not None:
            oprot.writeFieldBegin('replication_factor', TType.I32, 10)
            oprot.writeI32(self.replication_factor)
            oprot.writeFieldEnd()
        if self.num_data_units is not None:
            oprot.writeFieldBegin('num_data_units', TType.I32, 11)
            oprot.writeI32(self.num_data_units)
            oprot.writeFieldEnd()
        if self.num_parity_units is not None:
            oprot.writeFieldBegin('num_parity_units', TType.I32, 12)
            oprot.writeI32(self.num_parity_units)
            oprot.writeFieldEnd()
        if self.num_fault_tolerance is not None:
            oprot.writeFieldBegin('num_fault_tolerance', TType.I32, 13)
            oprot.writeI32(self.num_fault_tolerance)
            oprot.writeFieldEnd()
        if self.storage_media_type is not None:
            oprot.writeFieldBegin('storage_media_type', TType.I32, 14)
            oprot.writeI32(self.storage_media_type)
            oprot.writeFieldEnd()
        if self.cache_media_type is not None:
            oprot.writeFieldBegin('cache_media_type', TType.I32, 15)
            oprot.writeI32(self.cache_media_type)
            oprot.writeFieldEnd()
        if self.pool_id is not None:
            oprot.writeFieldBegin('pool_id', TType.STRING, 16)
            oprot.writeString(self.pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.pool_id)
            oprot.writeFieldEnd()
        if self.third_party_storage is not None:
            oprot.writeFieldBegin('third_party_storage', TType.STRUCT, 17)
            self.third_party_storage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPoolNode(object):
    """
    Attributes:
     - node_ip
     - start_slot
     - end_slot
     - cache_num

    """


    def __init__(self, node_ip=None, start_slot=None, end_slot=None, cache_num=None,):
        self.node_ip = node_ip
        self.start_slot = start_slot
        self.end_slot = end_slot
        self.cache_num = cache_num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start_slot = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.end_slot = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cache_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPoolNode')
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 1)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.start_slot is not None:
            oprot.writeFieldBegin('start_slot', TType.I32, 2)
            oprot.writeI32(self.start_slot)
            oprot.writeFieldEnd()
        if self.end_slot is not None:
            oprot.writeFieldBegin('end_slot', TType.I32, 3)
            oprot.writeI32(self.end_slot)
            oprot.writeFieldEnd()
        if self.cache_num is not None:
            oprot.writeFieldBegin('cache_num', TType.I32, 4)
            oprot.writeI32(self.cache_num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreatePoolRequest(object):
    """
    Attributes:
     - pool
     - nodes

    """


    def __init__(self, pool=None, nodes=None,):
        self.pool = pool
        self.nodes = nodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pool = ncPool()
                    self.pool.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncPoolNode()
                        _elem33.read(iprot)
                        self.nodes.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreatePoolRequest')
        if self.pool is not None:
            oprot.writeFieldBegin('pool', TType.STRUCT, 1)
            self.pool.write(oprot)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter34 in self.nodes:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeletePoolRequest(object):
    """
    Attributes:
     - pool

    """


    def __init__(self, pool=None,):
        self.pool = pool

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pool = ncPool()
                    self.pool.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeletePoolRequest')
        if self.pool is not None:
            oprot.writeFieldBegin('pool', TType.STRUCT, 1)
            self.pool.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaidCard(object):
    """
    Attributes:
     - adpId
     - producer
     - model
     - memSize
     - batType
     - batStatus
     - chargStatus
     - temperature

    """


    def __init__(self, adpId=None, producer=None, model=None, memSize=None, batType=None, batStatus=None, chargStatus=None, temperature=None,):
        self.adpId = adpId
        self.producer = producer
        self.model = model
        self.memSize = memSize
        self.batType = batType
        self.batStatus = batStatus
        self.chargStatus = chargStatus
        self.temperature = temperature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.adpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.producer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.memSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.batType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.batStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.chargStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.temperature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaidCard')
        if self.adpId is not None:
            oprot.writeFieldBegin('adpId', TType.STRING, 1)
            oprot.writeString(self.adpId.encode('utf-8') if sys.version_info[0] == 2 else self.adpId)
            oprot.writeFieldEnd()
        if self.producer is not None:
            oprot.writeFieldBegin('producer', TType.STRING, 2)
            oprot.writeString(self.producer.encode('utf-8') if sys.version_info[0] == 2 else self.producer)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 3)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.memSize is not None:
            oprot.writeFieldBegin('memSize', TType.I64, 4)
            oprot.writeI64(self.memSize)
            oprot.writeFieldEnd()
        if self.batType is not None:
            oprot.writeFieldBegin('batType', TType.STRING, 5)
            oprot.writeString(self.batType.encode('utf-8') if sys.version_info[0] == 2 else self.batType)
            oprot.writeFieldEnd()
        if self.batStatus is not None:
            oprot.writeFieldBegin('batStatus', TType.STRING, 6)
            oprot.writeString(self.batStatus.encode('utf-8') if sys.version_info[0] == 2 else self.batStatus)
            oprot.writeFieldEnd()
        if self.chargStatus is not None:
            oprot.writeFieldBegin('chargStatus', TType.STRING, 7)
            oprot.writeString(self.chargStatus.encode('utf-8') if sys.version_info[0] == 2 else self.chargStatus)
            oprot.writeFieldEnd()
        if self.temperature is not None:
            oprot.writeFieldBegin('temperature', TType.STRING, 8)
            oprot.writeString(self.temperature.encode('utf-8') if sys.version_info[0] == 2 else self.temperature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class diskdata(object):
    """
    Attributes:
     - devName
     - devStatus

    """


    def __init__(self, devName=None, devStatus=None,):
        self.devName = devName
        self.devStatus = devStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('diskdata')
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 1)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 2)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sparedata(object):
    """
    Attributes:
     - devName
     - devStatus
     - devModel
     - devTotal
     - spareType

    """


    def __init__(self, devName=None, devStatus=None, devModel=None, devTotal=None, spareType=None,):
        self.devName = devName
        self.devStatus = devStatus
        self.devModel = devModel
        self.devTotal = devTotal
        self.spareType = spareType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.devModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.spareType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sparedata')
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 1)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 2)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        if self.devModel is not None:
            oprot.writeFieldBegin('devModel', TType.STRING, 3)
            oprot.writeString(self.devModel.encode('utf-8') if sys.version_info[0] == 2 else self.devModel)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 4)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.spareType is not None:
            oprot.writeFieldBegin('spareType', TType.I32, 5)
            oprot.writeI32(self.spareType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaids(object):
    """
    Attributes:
     - raidId
     - raidTotal
     - raidUsable
     - raidName
     - raidType
     - initOccupy
     - raidLevel
     - raidStatus
     - readCache
     - writeCache
     - stripSize
     - diskdatas
     - sparedatas
     - nodeId

    """


    def __init__(self, raidId=None, raidTotal=None, raidUsable=None, raidName=None, raidType=None, initOccupy=None, raidLevel=None, raidStatus=None, readCache=None, writeCache=None, stripSize=None, diskdatas=None, sparedatas=None, nodeId=None,):
        self.raidId = raidId
        self.raidTotal = raidTotal
        self.raidUsable = raidUsable
        self.raidName = raidName
        self.raidType = raidType
        self.initOccupy = initOccupy
        self.raidLevel = raidLevel
        self.raidStatus = raidStatus
        self.readCache = readCache
        self.writeCache = writeCache
        self.stripSize = stripSize
        self.diskdatas = diskdatas
        self.sparedatas = sparedatas
        self.nodeId = nodeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.raidId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.initOccupy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.raidLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.raidStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.readCache = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.writeCache = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.stripSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.diskdatas = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = diskdata()
                        _elem40.read(iprot)
                        self.diskdatas.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.sparedatas = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = sparedata()
                        _elem46.read(iprot)
                        self.sparedatas.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaids')
        if self.raidId is not None:
            oprot.writeFieldBegin('raidId', TType.STRING, 1)
            oprot.writeString(self.raidId.encode('utf-8') if sys.version_info[0] == 2 else self.raidId)
            oprot.writeFieldEnd()
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 2)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 3)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 4)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 5)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.initOccupy is not None:
            oprot.writeFieldBegin('initOccupy', TType.DOUBLE, 6)
            oprot.writeDouble(self.initOccupy)
            oprot.writeFieldEnd()
        if self.raidLevel is not None:
            oprot.writeFieldBegin('raidLevel', TType.I32, 7)
            oprot.writeI32(self.raidLevel)
            oprot.writeFieldEnd()
        if self.raidStatus is not None:
            oprot.writeFieldBegin('raidStatus', TType.I32, 8)
            oprot.writeI32(self.raidStatus)
            oprot.writeFieldEnd()
        if self.readCache is not None:
            oprot.writeFieldBegin('readCache', TType.I32, 9)
            oprot.writeI32(self.readCache)
            oprot.writeFieldEnd()
        if self.writeCache is not None:
            oprot.writeFieldBegin('writeCache', TType.I32, 10)
            oprot.writeI32(self.writeCache)
            oprot.writeFieldEnd()
        if self.stripSize is not None:
            oprot.writeFieldBegin('stripSize', TType.I64, 11)
            oprot.writeI64(self.stripSize)
            oprot.writeFieldEnd()
        if self.diskdatas is not None:
            oprot.writeFieldBegin('diskdatas', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.diskdatas))
            for iter47 in self.diskdatas:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sparedatas is not None:
            oprot.writeFieldBegin('sparedatas', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.sparedatas))
            for iter48 in self.sparedatas:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 14)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaidVolume(object):
    """
    Attributes:
     - raidTotal
     - raidUsable
     - raidName
     - raidType
     - raidStatus

    """


    def __init__(self, raidTotal=None, raidUsable=None, raidName=None, raidType=None, raidStatus=None,):
        self.raidTotal = raidTotal
        self.raidUsable = raidUsable
        self.raidName = raidName
        self.raidType = raidType
        self.raidStatus = raidStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.raidStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaidVolume')
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 1)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 2)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 3)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 4)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.raidStatus is not None:
            oprot.writeFieldBegin('raidStatus', TType.I32, 5)
            oprot.writeI32(self.raidStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHBAHost(object):
    """
    Attributes:
     - hostName
     - wwpn
     - wwnn
     - portId
     - maxNPIVCount
     - portState
     - supportSpeed
     - portSpeed
     - fabricName

    """


    def __init__(self, hostName=None, wwpn=None, wwnn=None, portId=None, maxNPIVCount=None, portState=None, supportSpeed=None, portSpeed=None, fabricName=None,):
        self.hostName = hostName
        self.wwpn = wwpn
        self.wwnn = wwnn
        self.portId = portId
        self.maxNPIVCount = maxNPIVCount
        self.portState = portState
        self.supportSpeed = supportSpeed
        self.portSpeed = portSpeed
        self.fabricName = fabricName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.wwpn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.wwnn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.portId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.maxNPIVCount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.portState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.supportSpeed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.portSpeed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.fabricName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHBAHost')
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 1)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.wwpn is not None:
            oprot.writeFieldBegin('wwpn', TType.STRING, 2)
            oprot.writeString(self.wwpn.encode('utf-8') if sys.version_info[0] == 2 else self.wwpn)
            oprot.writeFieldEnd()
        if self.wwnn is not None:
            oprot.writeFieldBegin('wwnn', TType.STRING, 3)
            oprot.writeString(self.wwnn.encode('utf-8') if sys.version_info[0] == 2 else self.wwnn)
            oprot.writeFieldEnd()
        if self.portId is not None:
            oprot.writeFieldBegin('portId', TType.STRING, 4)
            oprot.writeString(self.portId.encode('utf-8') if sys.version_info[0] == 2 else self.portId)
            oprot.writeFieldEnd()
        if self.maxNPIVCount is not None:
            oprot.writeFieldBegin('maxNPIVCount', TType.STRING, 5)
            oprot.writeString(self.maxNPIVCount.encode('utf-8') if sys.version_info[0] == 2 else self.maxNPIVCount)
            oprot.writeFieldEnd()
        if self.portState is not None:
            oprot.writeFieldBegin('portState', TType.STRING, 6)
            oprot.writeString(self.portState.encode('utf-8') if sys.version_info[0] == 2 else self.portState)
            oprot.writeFieldEnd()
        if self.supportSpeed is not None:
            oprot.writeFieldBegin('supportSpeed', TType.STRING, 7)
            oprot.writeString(self.supportSpeed.encode('utf-8') if sys.version_info[0] == 2 else self.supportSpeed)
            oprot.writeFieldEnd()
        if self.portSpeed is not None:
            oprot.writeFieldBegin('portSpeed', TType.STRING, 8)
            oprot.writeString(self.portSpeed.encode('utf-8') if sys.version_info[0] == 2 else self.portSpeed)
            oprot.writeFieldEnd()
        if self.fabricName is not None:
            oprot.writeFieldBegin('fabricName', TType.STRING, 9)
            oprot.writeString(self.fabricName.encode('utf-8') if sys.version_info[0] == 2 else self.fabricName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHBA(object):
    """
    Attributes:
     - HBAName
     - HBASlot
     - HBAType
     - HBAVersion
     - HBAMode
     - HBAHost

    """


    def __init__(self, HBAName=None, HBASlot=None, HBAType=None, HBAVersion=None, HBAMode=None, HBAHost=None,):
        self.HBAName = HBAName
        self.HBASlot = HBASlot
        self.HBAType = HBAType
        self.HBAVersion = HBAVersion
        self.HBAMode = HBAMode
        self.HBAHost = HBAHost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.HBAName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.HBASlot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.HBAType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.HBAVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.HBAMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.HBAHost = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = ncHBAHost()
                        _elem54.read(iprot)
                        self.HBAHost.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHBA')
        if self.HBAName is not None:
            oprot.writeFieldBegin('HBAName', TType.STRING, 1)
            oprot.writeString(self.HBAName.encode('utf-8') if sys.version_info[0] == 2 else self.HBAName)
            oprot.writeFieldEnd()
        if self.HBASlot is not None:
            oprot.writeFieldBegin('HBASlot', TType.STRING, 2)
            oprot.writeString(self.HBASlot.encode('utf-8') if sys.version_info[0] == 2 else self.HBASlot)
            oprot.writeFieldEnd()
        if self.HBAType is not None:
            oprot.writeFieldBegin('HBAType', TType.STRING, 3)
            oprot.writeString(self.HBAType.encode('utf-8') if sys.version_info[0] == 2 else self.HBAType)
            oprot.writeFieldEnd()
        if self.HBAVersion is not None:
            oprot.writeFieldBegin('HBAVersion', TType.STRING, 4)
            oprot.writeString(self.HBAVersion.encode('utf-8') if sys.version_info[0] == 2 else self.HBAVersion)
            oprot.writeFieldEnd()
        if self.HBAMode is not None:
            oprot.writeFieldBegin('HBAMode', TType.STRING, 5)
            oprot.writeString(self.HBAMode.encode('utf-8') if sys.version_info[0] == 2 else self.HBAMode)
            oprot.writeFieldEnd()
        if self.HBAHost is not None:
            oprot.writeFieldBegin('HBAHost', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.HBAHost))
            for iter55 in self.HBAHost:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPutDiskRequest(object):
    """
    Attributes:
     - diskId
     - raidType
     - nodeId
     - loginIp
     - userName

    """


    def __init__(self, diskId=None, raidType=None, nodeId=None, loginIp=None, userName=None,):
        self.diskId = diskId
        self.raidType = raidType
        self.nodeId = nodeId
        self.loginIp = loginIp
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.diskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.raidType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPutDiskRequest')
        if self.diskId is not None:
            oprot.writeFieldBegin('diskId', TType.STRING, 1)
            oprot.writeString(self.diskId.encode('utf-8') if sys.version_info[0] == 2 else self.diskId)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.STRING, 2)
            oprot.writeString(self.raidType.encode('utf-8') if sys.version_info[0] == 2 else self.raidType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 3)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 4)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 5)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPostSpareDiskRequest(object):
    """
    Attributes:
     - slot
     - raidName
     - raidType
     - nodeId
     - loginIp
     - userName

    """


    def __init__(self, slot=None, raidName=None, raidType=None, nodeId=None, loginIp=None, userName=None,):
        self.slot = slot
        self.raidName = raidName
        self.raidType = raidType
        self.nodeId = nodeId
        self.loginIp = loginIp
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.slot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.raidType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPostSpareDiskRequest')
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRING, 1)
            oprot.writeString(self.slot.encode('utf-8') if sys.version_info[0] == 2 else self.slot)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 2)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.STRING, 3)
            oprot.writeString(self.raidType.encode('utf-8') if sys.version_info[0] == 2 else self.raidType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 4)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 5)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 6)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteSpareDiskRequest(object):
    """
    Attributes:
     - slot
     - raidType
     - nodeId
     - loginIp
     - userName
     - systemLogType

    """


    def __init__(self, slot=None, raidType=None, nodeId=None, loginIp=None, userName=None, systemLogType=None,):
        self.slot = slot
        self.raidType = raidType
        self.nodeId = nodeId
        self.loginIp = loginIp
        self.userName = userName
        self.systemLogType = systemLogType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.slot = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.slot.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.raidType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.systemLogType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteSpareDiskRequest')
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.slot))
            for iter62 in self.slot:
                oprot.writeString(iter62.encode('utf-8') if sys.version_info[0] == 2 else iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.STRING, 2)
            oprot.writeString(self.raidType.encode('utf-8') if sys.version_info[0] == 2 else self.raidType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 3)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 4)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 5)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.systemLogType is not None:
            oprot.writeFieldBegin('systemLogType', TType.I32, 6)
            oprot.writeI32(self.systemLogType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNode(object):
    """
    Attributes:
     - id
     - manage_ip
     - storage_ip

    """


    def __init__(self, id=None, manage_ip=None, storage_ip=None,):
        self.id = id
        self.manage_ip = manage_ip
        self.storage_ip = storage_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.manage_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storage_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNode')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.manage_ip is not None:
            oprot.writeFieldBegin('manage_ip', TType.STRING, 2)
            oprot.writeString(self.manage_ip.encode('utf-8') if sys.version_info[0] == 2 else self.manage_ip)
            oprot.writeFieldEnd()
        if self.storage_ip is not None:
            oprot.writeFieldBegin('storage_ip', TType.STRING, 3)
            oprot.writeString(self.storage_ip.encode('utf-8') if sys.version_info[0] == 2 else self.storage_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRequestDiskLogInfoRequest(object):
    """
    Attributes:
     - slot
     - nodeId
     - raidType
     - loginIp
     - userName
     - logType

    """


    def __init__(self, slot=None, nodeId=None, raidType=None, loginIp=None, userName=None, logType=None,):
        self.slot = slot
        self.nodeId = nodeId
        self.raidType = raidType
        self.loginIp = loginIp
        self.userName = userName
        self.logType = logType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.slot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.raidType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.logType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRequestDiskLogInfoRequest')
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRING, 1)
            oprot.writeString(self.slot.encode('utf-8') if sys.version_info[0] == 2 else self.slot)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 2)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.STRING, 3)
            oprot.writeString(self.raidType.encode('utf-8') if sys.version_info[0] == 2 else self.raidType)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 4)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 5)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.logType is not None:
            oprot.writeFieldBegin('logType', TType.STRING, 6)
            oprot.writeString(self.logType.encode('utf-8') if sys.version_info[0] == 2 else self.logType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncMountPath(object):
    """
    Attributes:
     - name
     - path
     - total_size
     - free_size
     - used_size
     - dev_path

    """


    def __init__(self, name=None, path=None, total_size=None, free_size=None, used_size=None, dev_path=None,):
        self.name = name
        self.path = path
        self.total_size = total_size
        self.free_size = free_size
        self.used_size = used_size
        self.dev_path = dev_path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.total_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.free_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.used_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncMountPath')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 2)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.total_size is not None:
            oprot.writeFieldBegin('total_size', TType.I64, 3)
            oprot.writeI64(self.total_size)
            oprot.writeFieldEnd()
        if self.free_size is not None:
            oprot.writeFieldBegin('free_size', TType.I64, 4)
            oprot.writeI64(self.free_size)
            oprot.writeFieldEnd()
        if self.used_size is not None:
            oprot.writeFieldBegin('used_size', TType.I64, 5)
            oprot.writeI64(self.used_size)
            oprot.writeFieldEnd()
        if self.dev_path is not None:
            oprot.writeFieldBegin('dev_path', TType.STRING, 6)
            oprot.writeString(self.dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.dev_path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGuidInfo(object):
    """
    Attributes:
     - node_id
     - node_ip
     - guids

    """


    def __init__(self, node_id=None, node_ip=None, guids=None,):
        self.node_id = node_id
        self.node_ip = node_ip
        self.guids = guids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.guids = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.guids.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGuidInfo')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 2)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.guids is not None:
            oprot.writeFieldBegin('guids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.guids))
            for iter69 in self.guids:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBusinessInfo(object):
    """
    Attributes:
     - node_id
     - ips
     - ports

    """


    def __init__(self, node_id=None, ips=None, ports=None,):
        self.node_id = node_id
        self.ips = ips
        self.ports = ports

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ips = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ips.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.ports = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readI32()
                        self.ports.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBusinessInfo')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.ips is not None:
            oprot.writeFieldBegin('ips', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.ips))
            for iter82 in self.ips:
                oprot.writeString(iter82.encode('utf-8') if sys.version_info[0] == 2 else iter82)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ports is not None:
            oprot.writeFieldBegin('ports', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.ports))
            for iter83 in self.ports:
                oprot.writeI32(iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNASInfo(object):
    """
    Attributes:
     - node_id
     - type
     - source_ip
     - port
     - source_path
     - mount_path
     - domain_name

    """


    def __init__(self, node_id=None, type=None, source_ip=None, port=None, source_path=None, mount_path=None, domain_name=None,):
        self.node_id = node_id
        self.type = type
        self.source_ip = source_ip
        self.port = port
        self.source_path = source_path
        self.mount_path = mount_path
        self.domain_name = domain_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.source_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.source_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mount_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.domain_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNASInfo')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.source_ip is not None:
            oprot.writeFieldBegin('source_ip', TType.STRING, 3)
            oprot.writeString(self.source_ip.encode('utf-8') if sys.version_info[0] == 2 else self.source_ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 4)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.source_path is not None:
            oprot.writeFieldBegin('source_path', TType.STRING, 5)
            oprot.writeString(self.source_path.encode('utf-8') if sys.version_info[0] == 2 else self.source_path)
            oprot.writeFieldEnd()
        if self.mount_path is not None:
            oprot.writeFieldBegin('mount_path', TType.STRING, 6)
            oprot.writeString(self.mount_path.encode('utf-8') if sys.version_info[0] == 2 else self.mount_path)
            oprot.writeFieldEnd()
        if self.domain_name is not None:
            oprot.writeFieldBegin('domain_name', TType.STRING, 7)
            oprot.writeString(self.domain_name.encode('utf-8') if sys.version_info[0] == 2 else self.domain_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncLvm(object):
    """
    Attributes:
     - id
     - name
     - total_size
     - free_size
     - used_size
     - used_id
     - storage_type
     - raid_name
     - node_ip
     - node_id
     - dev_path

    """


    def __init__(self, id=None, name=None, total_size=None, free_size=None, used_size=None, used_id=None, storage_type=None, raid_name=None, node_ip=None, node_id=None, dev_path=None,):
        self.id = id
        self.name = name
        self.total_size = total_size
        self.free_size = free_size
        self.used_size = used_size
        self.used_id = used_id
        self.storage_type = storage_type
        self.raid_name = raid_name
        self.node_ip = node_ip
        self.node_id = node_id
        self.dev_path = dev_path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.total_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.free_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.used_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.used_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.storage_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.raid_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncLvm')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.total_size is not None:
            oprot.writeFieldBegin('total_size', TType.I64, 3)
            oprot.writeI64(self.total_size)
            oprot.writeFieldEnd()
        if self.free_size is not None:
            oprot.writeFieldBegin('free_size', TType.I64, 4)
            oprot.writeI64(self.free_size)
            oprot.writeFieldEnd()
        if self.used_size is not None:
            oprot.writeFieldBegin('used_size', TType.I64, 5)
            oprot.writeI64(self.used_size)
            oprot.writeFieldEnd()
        if self.used_id is not None:
            oprot.writeFieldBegin('used_id', TType.STRING, 6)
            oprot.writeString(self.used_id.encode('utf-8') if sys.version_info[0] == 2 else self.used_id)
            oprot.writeFieldEnd()
        if self.storage_type is not None:
            oprot.writeFieldBegin('storage_type', TType.I32, 7)
            oprot.writeI32(self.storage_type)
            oprot.writeFieldEnd()
        if self.raid_name is not None:
            oprot.writeFieldBegin('raid_name', TType.STRING, 8)
            oprot.writeString(self.raid_name.encode('utf-8') if sys.version_info[0] == 2 else self.raid_name)
            oprot.writeFieldEnd()
        if self.node_ip is not None:
            oprot.writeFieldBegin('node_ip', TType.STRING, 9)
            oprot.writeString(self.node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.node_ip)
            oprot.writeFieldEnd()
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 10)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.dev_path is not None:
            oprot.writeFieldBegin('dev_path', TType.STRING, 11)
            oprot.writeString(self.dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.dev_path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncFileSystemInfo)
ncFileSystemInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mount_path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dev_path', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
)
all_structs.append(ncApplicationVolume)
ncApplicationVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'volume_type', None, None, ),  # 3
    (4, TType.I32, 'volume_status', None, None, ),  # 4
    (5, TType.I64, 'volume_size', None, None, ),  # 5
    (6, TType.I64, 'used_size', None, None, ),  # 6
    (7, TType.I64, 'free_size', None, None, ),  # 7
    (8, TType.I64, 'quota_size', None, None, ),  # 8
    (9, TType.I32, 'storage_type', None, None, ),  # 9
    (10, TType.I32, 'dispatch', None, None, ),  # 10
    (11, TType.I64, 'application_volume_id', None, None, ),  # 11
    (12, TType.STRING, 'application_volume_group_guid', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'node_id', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'node_ip', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'raid_name', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'pool_id', 'UTF8', None, ),  # 16
    (17, TType.STRUCT, 'file_system', [ncFileSystemInfo, None], None, ),  # 17
    (18, TType.STRING, 'desc', 'UTF8', None, ),  # 18
)
all_structs.append(ncGetApplicationVolumeRequest)
ncGetApplicationVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'node_id', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volume_type', None, None, ),  # 4
    (5, TType.I32, 'volume_status', None, None, ),  # 5
)
all_structs.append(ncGetApplicationVolumesRequest)
ncGetApplicationVolumesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'index', None, None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.STRING, 'node_id', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volume_type', None, None, ),  # 4
    (5, TType.I32, 'volume_status', None, None, ),  # 5
)
all_structs.append(ncGetApplicationVolumesResponse)
ncGetApplicationVolumesResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'index', None, None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.I32, 'total_num', None, None, ),  # 3
    (4, TType.LIST, 'volumes', (TType.STRUCT, [ncApplicationVolume, None], False), None, ),  # 4
)
all_structs.append(ncCreateApplicationVolumeRequest)
ncCreateApplicationVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'application_volume', [ncApplicationVolume, None], None, ),  # 1
    (2, TType.I64, 'raid_usable', None, None, ),  # 2
    (3, TType.I64, 'path_size', None, None, ),  # 3
    (4, TType.STRING, 'desc', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'task_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'user_name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'login_ip', 'UTF8', None, ),  # 7
)
all_structs.append(ncDeleteApplicationVolumeRequest)
ncDeleteApplicationVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'application_volume', [ncApplicationVolume, None], None, ),  # 1
    (2, TType.STRING, 'task_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'user_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'login_ip', 'UTF8', None, ),  # 4
)
all_structs.append(ncEditApplicationVolumeRequest)
ncEditApplicationVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'application_volume', [ncApplicationVolume, None], None, ),  # 1
    (2, TType.I64, 'edit_size', None, None, ),  # 2
    (3, TType.STRING, 'desc', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'task_id', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'user_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'login_ip', 'UTF8', None, ),  # 6
)
all_structs.append(ncVolume)
ncVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'wwn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.I64, 'total_size', None, None, ),  # 5
    (6, TType.I64, 'used_size', None, None, ),  # 6
    (7, TType.STRING, 'pool_id', 'UTF8', None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.I32, 'storage_type', None, None, ),  # 9
    (10, TType.STRING, 'father_name', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'third_party_pool_id', 'UTF8', None, ),  # 11
    (12, TType.BOOL, 'deduplication', None, None, ),  # 12
    (13, TType.BOOL, 'compression', None, None, ),  # 13
)
all_structs.append(ncCreateVolumeRequest)
ncCreateVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volume', [ncVolume, None], None, ),  # 1
)
all_structs.append(ncDeleteVolumeRequest)
ncDeleteVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pool_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'volume_names', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncGetVolumeRequest)
ncGetVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volume', [ncVolume, None], None, ),  # 1
)
all_structs.append(ncCreateBaseVolumeRequest)
ncCreateBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'volSize', None, None, ),  # 3
)
all_structs.append(ncFSVolumeMappingResponse)
ncFSVolumeMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dev_path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
)
all_structs.append(ncTask)
ncTask.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.STRING, 'error_info', 'UTF8', None, ),  # 4
)
all_structs.append(ncDisks)
ncDisks.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'adpId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'array', None, None, ),  # 2
    (3, TType.STRING, 'arrayName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'devId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'devName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'devModel', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'devType', 'UTF8', None, ),  # 7
    (8, TType.I32, 'devStatus', None, None, ),  # 8
    (9, TType.STRING, 'slot', 'UTF8', None, ),  # 9
    (10, TType.I64, 'devTotal', None, None, ),  # 10
    (11, TType.I32, 'spareType', None, None, ),  # 11
    (12, TType.STRING, 'spareRaid', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'enclosureDeviceId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'coercedSize', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'firmwareState', 'UTF8', None, ),  # 15
)
all_structs.append(ncVolumeMappingRequest)
ncVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_config', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'volume_wwn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volume_type', None, None, ),  # 4
    (5, TType.I32, 'fabric_type', None, None, ),  # 5
    (6, TType.STRING, 'storage_object_name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'target_wwn', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'host_wwn', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'device_ip', 'UTF8', None, ),  # 9
    (10, TType.I32, 'server_lun_index', None, None, ),  # 10
    (11, TType.I32, 'host_lun_index', None, None, ),  # 11
    (12, TType.STRING, 'network_portal_ip', 'UTF8', None, ),  # 12
    (13, TType.I32, 'network_portal_port', None, None, ),  # 13
    (14, TType.I64, 'volume_lun_id', None, None, ),  # 14
    (15, TType.I64, 'volume_size', None, None, ),  # 15
    (16, TType.STRING, 'link_id', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'client_id', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'server_id', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'data_transfe_ip', 'UTF8', None, ),  # 19
)
all_structs.append(ncVolumeMappingReply)
ncVolumeMappingReply.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'storage_object_type', None, None, ),  # 1
    (2, TType.STRING, 'storage_object_config', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'storage_object_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storage_object_wwn', 'UTF8', None, ),  # 4
    (5, TType.I32, 'fabric_type', None, None, ),  # 5
    (6, TType.STRING, 'target_wwn', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'host_wwn', 'UTF8', None, ),  # 7
    (8, TType.I32, 'server_lun_index', None, None, ),  # 8
    (9, TType.I32, 'host_lun_index', None, None, ),  # 9
    (10, TType.STRING, 'network_portal_ip', 'UTF8', None, ),  # 10
    (11, TType.I32, 'network_portal_port', None, None, ),  # 11
    (12, TType.I32, 'tpg_tag', None, None, ),  # 12
    (13, TType.STRING, 'link_id', 'UTF8', None, ),  # 13
)
all_structs.append(ncPartVolumeInfo)
ncPartVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.I64, 'volumeSize', None, None, ),  # 3
)
all_structs.append(ncFSVolumeMappingRequest)
ncFSVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'portName', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'lunNames', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'volumeList', (TType.STRUCT, [ncPartVolumeInfo, None], False), None, ),  # 5
    (6, TType.STRING, 'iscsiIp', 'UTF8', None, ),  # 6
    (7, TType.I32, 'fabricModule', None, None, ),  # 7
)
all_structs.append(ncGetIscsiPortalInfo)
ncGetIscsiPortalInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'targetName', 'UTF8', None, ),  # 2
)
all_structs.append(ncThirdPartyStorage)
ncThirdPartyStorage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'ip', 'UTF8', None, ),  # 5
    (6, TType.I32, 'port', None, None, ),  # 6
    (7, TType.STRING, 'user_name', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'password', 'UTF8', None, ),  # 8
)
all_structs.append(ncPool)
ncPool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.I64, 'total_size', None, None, ),  # 5
    (6, TType.I64, 'used_size', None, None, ),  # 6
    (7, TType.I64, 'free_size', None, None, ),  # 7
    (8, TType.I32, 'redundancy_policy', None, None, ),  # 8
    (9, TType.I32, 'security_level', None, None, ),  # 9
    (10, TType.I32, 'replication_factor', None, None, ),  # 10
    (11, TType.I32, 'num_data_units', None, None, ),  # 11
    (12, TType.I32, 'num_parity_units', None, None, ),  # 12
    (13, TType.I32, 'num_fault_tolerance', None, None, ),  # 13
    (14, TType.I32, 'storage_media_type', None, None, ),  # 14
    (15, TType.I32, 'cache_media_type', None, None, ),  # 15
    (16, TType.STRING, 'pool_id', 'UTF8', None, ),  # 16
    (17, TType.STRUCT, 'third_party_storage', [ncThirdPartyStorage, None], None, ),  # 17
)
all_structs.append(ncPoolNode)
ncPoolNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'start_slot', None, None, ),  # 2
    (3, TType.I32, 'end_slot', None, None, ),  # 3
    (4, TType.I32, 'cache_num', None, None, ),  # 4
)
all_structs.append(ncCreatePoolRequest)
ncCreatePoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pool', [ncPool, None], None, ),  # 1
    (2, TType.LIST, 'nodes', (TType.STRUCT, [ncPoolNode, None], False), None, ),  # 2
)
all_structs.append(ncDeletePoolRequest)
ncDeletePoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pool', [ncPool, None], None, ),  # 1
)
all_structs.append(ncRaidCard)
ncRaidCard.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'adpId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'producer', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'model', 'UTF8', None, ),  # 3
    (4, TType.I64, 'memSize', None, None, ),  # 4
    (5, TType.STRING, 'batType', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'batStatus', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'chargStatus', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'temperature', 'UTF8', None, ),  # 8
)
all_structs.append(diskdata)
diskdata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'devStatus', None, None, ),  # 2
)
all_structs.append(sparedata)
sparedata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'devStatus', None, None, ),  # 2
    (3, TType.STRING, 'devModel', 'UTF8', None, ),  # 3
    (4, TType.I64, 'devTotal', None, None, ),  # 4
    (5, TType.I32, 'spareType', None, None, ),  # 5
)
all_structs.append(ncRaids)
ncRaids.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'raidId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'raidTotal', None, None, ),  # 2
    (3, TType.I64, 'raidUsable', None, None, ),  # 3
    (4, TType.STRING, 'raidName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'raidType', None, None, ),  # 5
    (6, TType.DOUBLE, 'initOccupy', None, None, ),  # 6
    (7, TType.I32, 'raidLevel', None, None, ),  # 7
    (8, TType.I32, 'raidStatus', None, None, ),  # 8
    (9, TType.I32, 'readCache', None, None, ),  # 9
    (10, TType.I32, 'writeCache', None, None, ),  # 10
    (11, TType.I64, 'stripSize', None, None, ),  # 11
    (12, TType.LIST, 'diskdatas', (TType.STRUCT, [diskdata, None], False), None, ),  # 12
    (13, TType.LIST, 'sparedatas', (TType.STRUCT, [sparedata, None], False), None, ),  # 13
    (14, TType.STRING, 'nodeId', 'UTF8', None, ),  # 14
)
all_structs.append(ncRaidVolume)
ncRaidVolume.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'raidTotal', None, None, ),  # 1
    (2, TType.I64, 'raidUsable', None, None, ),  # 2
    (3, TType.STRING, 'raidName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'raidType', None, None, ),  # 4
    (5, TType.I32, 'raidStatus', None, None, ),  # 5
)
all_structs.append(ncHBAHost)
ncHBAHost.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'wwpn', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'wwnn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'portId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'maxNPIVCount', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'portState', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'supportSpeed', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'portSpeed', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'fabricName', 'UTF8', None, ),  # 9
)
all_structs.append(ncHBA)
ncHBA.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'HBAName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'HBASlot', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'HBAType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'HBAVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'HBAMode', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'HBAHost', (TType.STRUCT, [ncHBAHost, None], False), None, ),  # 6
)
all_structs.append(ncPutDiskRequest)
ncPutDiskRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'diskId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'raidType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'nodeId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'loginIp', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userName', 'UTF8', None, ),  # 5
)
all_structs.append(ncPostSpareDiskRequest)
ncPostSpareDiskRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'slot', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'raidName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'raidType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'nodeId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'loginIp', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'userName', 'UTF8', None, ),  # 6
)
all_structs.append(ncDeleteSpareDiskRequest)
ncDeleteSpareDiskRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'slot', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'raidType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'nodeId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'loginIp', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userName', 'UTF8', None, ),  # 5
    (6, TType.I32, 'systemLogType', None, None, ),  # 6
)
all_structs.append(ncNode)
ncNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'manage_ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'storage_ip', 'UTF8', None, ),  # 3
)
all_structs.append(ncRequestDiskLogInfoRequest)
ncRequestDiskLogInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'slot', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodeId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'raidType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'loginIp', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'logType', 'UTF8', None, ),  # 6
)
all_structs.append(ncMountPath)
ncMountPath.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'path', 'UTF8', None, ),  # 2
    (3, TType.I64, 'total_size', None, None, ),  # 3
    (4, TType.I64, 'free_size', None, None, ),  # 4
    (5, TType.I64, 'used_size', None, None, ),  # 5
    (6, TType.STRING, 'dev_path', 'UTF8', None, ),  # 6
)
all_structs.append(ncGuidInfo)
ncGuidInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_ip', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'guids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncBusinessInfo)
ncBusinessInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ips', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'ports', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(ncNASInfo)
ncNASInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRING, 'source_ip', 'UTF8', None, ),  # 3
    (4, TType.I32, 'port', None, None, ),  # 4
    (5, TType.STRING, 'source_path', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'mount_path', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'domain_name', 'UTF8', None, ),  # 7
)
all_structs.append(ncLvm)
ncLvm.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'total_size', None, None, ),  # 3
    (4, TType.I64, 'free_size', None, None, ),  # 4
    (5, TType.I64, 'used_size', None, None, ),  # 5
    (6, TType.STRING, 'used_id', 'UTF8', None, ),  # 6
    (7, TType.I32, 'storage_type', None, None, ),  # 7
    (8, TType.STRING, 'raid_name', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'node_ip', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'node_id', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'dev_path', 'UTF8', None, ),  # 11
)
fix_spec(all_structs)
del all_structs
