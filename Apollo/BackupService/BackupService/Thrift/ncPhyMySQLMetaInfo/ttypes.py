# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncPhyMySQLInstanceMeta(object):
    """
    Attributes:
     - instancename
     - lineinfo
     - dblist
     - phydblist
     - attributes

    """


    def __init__(self, instancename=None, lineinfo=None, dblist=None, phydblist=None, attributes=None,):
        self.instancename = instancename
        self.lineinfo = lineinfo
        self.dblist = dblist
        self.phydblist = phydblist
        self.attributes = attributes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instancename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.lineinfo = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.lineinfo.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dblist = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.dblist.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.phydblist = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.phydblist.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.attributes = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.attributes[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPhyMySQLInstanceMeta')
        if self.instancename is not None:
            oprot.writeFieldBegin('instancename', TType.STRING, 1)
            oprot.writeString(self.instancename.encode('utf-8') if sys.version_info[0] == 2 else self.instancename)
            oprot.writeFieldEnd()
        if self.lineinfo is not None:
            oprot.writeFieldBegin('lineinfo', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.lineinfo))
            for iter25 in self.lineinfo:
                oprot.writeString(iter25.encode('utf-8') if sys.version_info[0] == 2 else iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dblist is not None:
            oprot.writeFieldBegin('dblist', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.dblist))
            for iter26 in self.dblist:
                oprot.writeString(iter26.encode('utf-8') if sys.version_info[0] == 2 else iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.phydblist is not None:
            oprot.writeFieldBegin('phydblist', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.phydblist))
            for iter27 in self.phydblist:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
            for kiter28, viter29 in self.attributes.items():
                oprot.writeString(kiter28.encode('utf-8') if sys.version_info[0] == 2 else kiter28)
                oprot.writeString(viter29.encode('utf-8') if sys.version_info[0] == 2 else viter29)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPhyMySQLMetaInfo(object):
    """
    Attributes:
     - version
     - clienttype
     - clientid
     - backuptype
     - vecinstance

    """


    def __init__(self, version=None, clienttype=None, clientid=None, backuptype=None, vecinstance=None,):
        self.version = version
        self.clienttype = clienttype
        self.clientid = clientid
        self.backuptype = backuptype
        self.vecinstance = vecinstance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.clienttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.backuptype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.vecinstance = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = ncPhyMySQLInstanceMeta()
                        _elem35.read(iprot)
                        self.vecinstance.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPhyMySQLMetaInfo')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.clienttype is not None:
            oprot.writeFieldBegin('clienttype', TType.I32, 2)
            oprot.writeI32(self.clienttype)
            oprot.writeFieldEnd()
        if self.clientid is not None:
            oprot.writeFieldBegin('clientid', TType.STRING, 3)
            oprot.writeString(self.clientid.encode('utf-8') if sys.version_info[0] == 2 else self.clientid)
            oprot.writeFieldEnd()
        if self.backuptype is not None:
            oprot.writeFieldBegin('backuptype', TType.I32, 4)
            oprot.writeI32(self.backuptype)
            oprot.writeFieldEnd()
        if self.vecinstance is not None:
            oprot.writeFieldBegin('vecinstance', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.vecinstance))
            for iter36 in self.vecinstance:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.clienttype is None:
            raise TProtocolException(message='Required field clienttype is unset!')
        if self.backuptype is None:
            raise TProtocolException(message='Required field backuptype is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncPhyMySQLInstanceMeta)
ncPhyMySQLInstanceMeta.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instancename', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'lineinfo', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'dblist', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'phydblist', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.MAP, 'attributes', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(ncPhyMySQLMetaInfo)
ncPhyMySQLMetaInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'version', None, None, ),  # 1
    (2, TType.I32, 'clienttype', None, None, ),  # 2
    (3, TType.STRING, 'clientid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'backuptype', None, None, ),  # 4
    (5, TType.LIST, 'vecinstance', (TType.STRUCT, [ncPhyMySQLInstanceMeta, None], False), None, ),  # 5
)
fix_spec(all_structs)
del all_structs
