# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCdmStoreMgmCommon.ttypes

from thrift.transport import TTransport
all_structs = []


class ncCNSTaskStatus(object):
    NOT_START = 0
    RUNNING = 1
    SUCCESS = 2
    FAILURE = 3

    _VALUES_TO_NAMES = {
        0: "NOT_START",
        1: "RUNNING",
        2: "SUCCESS",
        3: "FAILURE",
    }

    _NAMES_TO_VALUES = {
        "NOT_START": 0,
        "RUNNING": 1,
        "SUCCESS": 2,
        "FAILURE": 3,
    }


class ncCNSVolumeInfo(object):
    """
    Attributes:
     - volume_id
     - lunId
     - vm_uuid
     - wwn
     - volumeType
     - totalSize
     - usedSize
     - mountPoint
     - poolType
     - poolId
     - lunConfig

    """


    def __init__(self, volume_id=None, lunId=None, vm_uuid=None, wwn=None, volumeType=None, totalSize=None, usedSize=None, mountPoint=None, poolType=None, poolId=None, lunConfig=None,):
        self.volume_id = volume_id
        self.lunId = lunId
        self.vm_uuid = vm_uuid
        self.wwn = wwn
        self.volumeType = volumeType
        self.totalSize = totalSize
        self.usedSize = usedSize
        self.mountPoint = mountPoint
        self.poolType = poolType
        self.poolId = poolId
        self.lunConfig = lunConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.lunId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.lunConfig = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCNSVolumeInfo')
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 1)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        if self.lunId is not None:
            oprot.writeFieldBegin('lunId', TType.STRING, 2)
            oprot.writeString(self.lunId.encode('utf-8') if sys.version_info[0] == 2 else self.lunId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 3)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.wwn is not None:
            oprot.writeFieldBegin('wwn', TType.STRING, 4)
            oprot.writeString(self.wwn.encode('utf-8') if sys.version_info[0] == 2 else self.wwn)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 5)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 6)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 7)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.mountPoint is not None:
            oprot.writeFieldBegin('mountPoint', TType.STRING, 8)
            oprot.writeString(self.mountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.mountPoint)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 9)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 10)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.lunConfig is not None:
            oprot.writeFieldBegin('lunConfig', TType.STRING, 11)
            oprot.writeString(self.lunConfig.encode('utf-8') if sys.version_info[0] == 2 else self.lunConfig)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCNSLinkConfigInfo(object):
    """
    Attributes:
     - linkType
     - server_wwn
     - server_ip
     - server_port
     - client_wwn
     - client_ip
     - link_id

    """


    def __init__(self, linkType=None, server_wwn=None, server_ip=None, server_port=None, client_wwn=None, client_ip=None, link_id=None,):
        self.linkType = linkType
        self.server_wwn = server_wwn
        self.server_ip = server_ip
        self.server_port = server_port
        self.client_wwn = client_wwn
        self.client_ip = client_ip
        self.link_id = link_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.linkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.server_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.server_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.server_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.client_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.client_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCNSLinkConfigInfo')
        if self.linkType is not None:
            oprot.writeFieldBegin('linkType', TType.I32, 1)
            oprot.writeI32(self.linkType)
            oprot.writeFieldEnd()
        if self.server_wwn is not None:
            oprot.writeFieldBegin('server_wwn', TType.STRING, 2)
            oprot.writeString(self.server_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.server_wwn)
            oprot.writeFieldEnd()
        if self.server_ip is not None:
            oprot.writeFieldBegin('server_ip', TType.STRING, 3)
            oprot.writeString(self.server_ip.encode('utf-8') if sys.version_info[0] == 2 else self.server_ip)
            oprot.writeFieldEnd()
        if self.server_port is not None:
            oprot.writeFieldBegin('server_port', TType.I32, 4)
            oprot.writeI32(self.server_port)
            oprot.writeFieldEnd()
        if self.client_wwn is not None:
            oprot.writeFieldBegin('client_wwn', TType.STRING, 5)
            oprot.writeString(self.client_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.client_wwn)
            oprot.writeFieldEnd()
        if self.client_ip is not None:
            oprot.writeFieldBegin('client_ip', TType.STRING, 6)
            oprot.writeString(self.client_ip.encode('utf-8') if sys.version_info[0] == 2 else self.client_ip)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 7)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateBaseVolumeRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid
     - size
     - mountPoint

    """


    def __init__(self, jobId=None, vm_uuid=None, size=None, mountPoint=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid
        self.size = size
        self.mountPoint = mountPoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateBaseVolumeRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.mountPoint is not None:
            oprot.writeFieldBegin('mountPoint', TType.STRING, 4)
            oprot.writeString(self.mountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.mountPoint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateBaseVolumeResponse(object):
    """
    Attributes:
     - volumeinfo
     - isSuccess
     - errorMgm

    """


    def __init__(self, volumeinfo=None, isSuccess=None, errorMgm=None,):
        self.volumeinfo = volumeinfo
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volumeinfo = ncCNSVolumeInfo()
                    self.volumeinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateBaseVolumeResponse')
        if self.volumeinfo is not None:
            oprot.writeFieldBegin('volumeinfo', TType.STRUCT, 1)
            self.volumeinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 2)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateCloneVolumeRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid
     - timepoint
     - backup_jobId

    """


    def __init__(self, jobId=None, vm_uuid=None, timepoint=None, backup_jobId=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid
        self.timepoint = timepoint
        self.backup_jobId = backup_jobId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timepoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.backup_jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateCloneVolumeRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.I64, 3)
            oprot.writeI64(self.timepoint)
            oprot.writeFieldEnd()
        if self.backup_jobId is not None:
            oprot.writeFieldBegin('backup_jobId', TType.STRING, 4)
            oprot.writeString(self.backup_jobId.encode('utf-8') if sys.version_info[0] == 2 else self.backup_jobId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateCloneVolumeResponse(object):
    """
    Attributes:
     - volumeinfo
     - isSuccess
     - errorMgm

    """


    def __init__(self, volumeinfo=None, isSuccess=None, errorMgm=None,):
        self.volumeinfo = volumeinfo
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volumeinfo = ncCNSVolumeInfo()
                    self.volumeinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateCloneVolumeResponse')
        if self.volumeinfo is not None:
            oprot.writeFieldBegin('volumeinfo', TType.STRUCT, 1)
            self.volumeinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 2)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateSnapVolumeRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid
     - volume_id

    """


    def __init__(self, jobId=None, vm_uuid=None, volume_id=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateSnapVolumeRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 3)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateSnapVolumeResponse(object):
    """
    Attributes:
     - volumeinfo
     - isSuccess
     - errorMgm

    """


    def __init__(self, volumeinfo=None, isSuccess=None, errorMgm=None,):
        self.volumeinfo = volumeinfo
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volumeinfo = ncCNSVolumeInfo()
                    self.volumeinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateSnapVolumeResponse')
        if self.volumeinfo is not None:
            oprot.writeFieldBegin('volumeinfo', TType.STRUCT, 1)
            self.volumeinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 2)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateVolumeMappingRequest(object):
    """
    Attributes:
     - jobId
     - linkType
     - link_id
     - volumeType
     - vm_uuid
     - volume_id

    """


    def __init__(self, jobId=None, linkType=None, link_id=None, volumeType=None, vm_uuid=None, volume_id=None,):
        self.jobId = jobId
        self.linkType = linkType
        self.link_id = link_id
        self.volumeType = volumeType
        self.vm_uuid = vm_uuid
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.linkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateVolumeMappingRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.linkType is not None:
            oprot.writeFieldBegin('linkType', TType.I32, 2)
            oprot.writeI32(self.linkType)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 3)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 4)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 5)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 6)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateVolumeMappingResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateVolumeMappingResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_DeleteVolumeRequest(object):
    """
    Attributes:
     - jobId
     - volumeType
     - volumeId

    """


    def __init__(self, jobId=None, volumeType=None, volumeId=None,):
        self.jobId = jobId
        self.volumeType = volumeType
        self.volumeId = volumeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_DeleteVolumeRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 3)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_DeleteVolumeResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_DeleteVolumeResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_DeleteVolumeMappingRequest(object):
    """
    Attributes:
     - jobId
     - linkType
     - link_id
     - volumeType
     - vm_uuid
     - volume_id

    """


    def __init__(self, jobId=None, linkType=None, link_id=None, volumeType=None, vm_uuid=None, volume_id=None,):
        self.jobId = jobId
        self.linkType = linkType
        self.link_id = link_id
        self.volumeType = volumeType
        self.vm_uuid = vm_uuid
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.linkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_DeleteVolumeMappingRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.linkType is not None:
            oprot.writeFieldBegin('linkType', TType.I32, 2)
            oprot.writeI32(self.linkType)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 3)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 4)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 5)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 6)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_DeleteVolumeMapingResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_DeleteVolumeMapingResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_UpdateVolumeInfoRequest(object):
    """
    Attributes:
     - jobId
     - volumeinfo

    """


    def __init__(self, jobId=None, volumeinfo=None,):
        self.jobId = jobId
        self.volumeinfo = volumeinfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.volumeinfo = ncCNSVolumeInfo()
                    self.volumeinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_UpdateVolumeInfoRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.volumeinfo is not None:
            oprot.writeFieldBegin('volumeinfo', TType.STRUCT, 2)
            self.volumeinfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_UpdateVolumeInfoResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_UpdateVolumeInfoResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_GetVolumeInfoRequest(object):
    """
    Attributes:
     - jobId
     - volumeType
     - vm_uuid
     - volumeId

    """


    def __init__(self, jobId=None, volumeType=None, vm_uuid=None, volumeId=None,):
        self.jobId = jobId
        self.volumeType = volumeType
        self.vm_uuid = vm_uuid
        self.volumeId = volumeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_GetVolumeInfoRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 3)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 4)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_GetVolumeInfoResponse(object):
    """
    Attributes:
     - volumeinfoLists
     - isSuccess
     - errorMgm

    """


    def __init__(self, volumeinfoLists=None, isSuccess=None, errorMgm=None,):
        self.volumeinfoLists = volumeinfoLists
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.volumeinfoLists = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncCNSVolumeInfo()
                        _elem5.read(iprot)
                        self.volumeinfoLists.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_GetVolumeInfoResponse')
        if self.volumeinfoLists is not None:
            oprot.writeFieldBegin('volumeinfoLists', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeinfoLists))
            for iter6 in self.volumeinfoLists:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 2)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_GetSpecVolumeInfoRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid

    """


    def __init__(self, jobId=None, vm_uuid=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_GetSpecVolumeInfoRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_GetSpecVolumeInfoResponse(object):
    """
    Attributes:
     - volumeinfo
     - isSuccess
     - errorMgm

    """


    def __init__(self, volumeinfo=None, isSuccess=None, errorMgm=None,):
        self.volumeinfo = volumeinfo
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volumeinfo = ncCNSVolumeInfo()
                    self.volumeinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_GetSpecVolumeInfoResponse')
        if self.volumeinfo is not None:
            oprot.writeFieldBegin('volumeinfo', TType.STRUCT, 1)
            self.volumeinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 2)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_GetCreateVolumeMappingStatusRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid

    """


    def __init__(self, jobId=None, vm_uuid=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_GetCreateVolumeMappingStatusRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_GetCreateVolumeMappingStatusResponse(object):
    """
    Attributes:
     - volumeinfoLists
     - finished
     - errorMgm

    """


    def __init__(self, volumeinfoLists=None, finished=None, errorMgm=None,):
        self.volumeinfoLists = volumeinfoLists
        self.finished = finished
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.volumeinfoLists = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncCNSVolumeInfo()
                        _elem12.read(iprot)
                        self.volumeinfoLists.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.finished = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_GetCreateVolumeMappingStatusResponse')
        if self.volumeinfoLists is not None:
            oprot.writeFieldBegin('volumeinfoLists', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeinfoLists))
            for iter13 in self.volumeinfoLists:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.I32, 2)
            oprot.writeI32(self.finished)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_GetDeleteVolumeMappingStatusRequest(object):
    """
    Attributes:
     - jobId
     - vm_uuid

    """


    def __init__(self, jobId=None, vm_uuid=None,):
        self.jobId = jobId
        self.vm_uuid = vm_uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_GetDeleteVolumeMappingStatusRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 2)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_GetDeleteVolumeMappingStatusResponse(object):
    """
    Attributes:
     - finished
     - errorMgm

    """


    def __init__(self, finished=None, errorMgm=None,):
        self.finished = finished
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.finished = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_GetDeleteVolumeMappingStatusResponse')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.I32, 1)
            oprot.writeI32(self.finished)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateTimePointRequest(object):
    """
    Attributes:
     - jobId
     - execId
     - vm_uuid
     - vm_name
     - timepoint
     - volume_id
     - metadata
     - general_metadata
     - dataSize
     - capSize

    """


    def __init__(self, jobId=None, execId=None, vm_uuid=None, vm_name=None, timepoint=None, volume_id=None, metadata=None, general_metadata=None, dataSize=None, capSize=None,):
        self.jobId = jobId
        self.execId = execId
        self.vm_uuid = vm_uuid
        self.vm_name = vm_name
        self.timepoint = timepoint
        self.volume_id = volume_id
        self.metadata = metadata
        self.general_metadata = general_metadata
        self.dataSize = dataSize
        self.capSize = capSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.execId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vm_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.vm_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timepoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.general_metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.dataSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.capSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateTimePointRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.execId is not None:
            oprot.writeFieldBegin('execId', TType.STRING, 2)
            oprot.writeString(self.execId.encode('utf-8') if sys.version_info[0] == 2 else self.execId)
            oprot.writeFieldEnd()
        if self.vm_uuid is not None:
            oprot.writeFieldBegin('vm_uuid', TType.STRING, 3)
            oprot.writeString(self.vm_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.vm_uuid)
            oprot.writeFieldEnd()
        if self.vm_name is not None:
            oprot.writeFieldBegin('vm_name', TType.STRING, 4)
            oprot.writeString(self.vm_name.encode('utf-8') if sys.version_info[0] == 2 else self.vm_name)
            oprot.writeFieldEnd()
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.I64, 5)
            oprot.writeI64(self.timepoint)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 6)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 7)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        if self.general_metadata is not None:
            oprot.writeFieldBegin('general_metadata', TType.STRING, 8)
            oprot.writeString(self.general_metadata.encode('utf-8') if sys.version_info[0] == 2 else self.general_metadata)
            oprot.writeFieldEnd()
        if self.dataSize is not None:
            oprot.writeFieldBegin('dataSize', TType.I64, 9)
            oprot.writeI64(self.dataSize)
            oprot.writeFieldEnd()
        if self.capSize is not None:
            oprot.writeFieldBegin('capSize', TType.I64, 10)
            oprot.writeI64(self.capSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateTimePointResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateTimePointResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_CreateLinkConfigRequest(object):
    """
    Attributes:
     - jobId
     - linkType
     - host_wwn
     - host_ip
     - pool_ip

    """


    def __init__(self, jobId=None, linkType=None, host_wwn=None, host_ip=None, pool_ip=None,):
        self.jobId = jobId
        self.linkType = linkType
        self.host_wwn = host_wwn
        self.host_ip = host_ip
        self.pool_ip = pool_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.linkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.host_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.host_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.pool_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_CreateLinkConfigRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.linkType is not None:
            oprot.writeFieldBegin('linkType', TType.I32, 2)
            oprot.writeI32(self.linkType)
            oprot.writeFieldEnd()
        if self.host_wwn is not None:
            oprot.writeFieldBegin('host_wwn', TType.STRING, 3)
            oprot.writeString(self.host_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.host_wwn)
            oprot.writeFieldEnd()
        if self.host_ip is not None:
            oprot.writeFieldBegin('host_ip', TType.STRING, 4)
            oprot.writeString(self.host_ip.encode('utf-8') if sys.version_info[0] == 2 else self.host_ip)
            oprot.writeFieldEnd()
        if self.pool_ip is not None:
            oprot.writeFieldBegin('pool_ip', TType.STRING, 5)
            oprot.writeString(self.pool_ip.encode('utf-8') if sys.version_info[0] == 2 else self.pool_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_CreateLinkConfigResponse(object):
    """
    Attributes:
     - isSuccess
     - targetinfoList
     - errorMgm

    """


    def __init__(self, isSuccess=None, targetinfoList=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.targetinfoList = targetinfoList
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.targetinfoList = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncCNSLinkConfigInfo()
                        _elem19.read(iprot)
                        self.targetinfoList.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_CreateLinkConfigResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.targetinfoList is not None:
            oprot.writeFieldBegin('targetinfoList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.targetinfoList))
            for iter20 in self.targetinfoList:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 3)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cns_EndTaskRequest(object):
    """
    Attributes:
     - jobId
     - execId
     - totalSize
     - startTime
     - endTime

    """


    def __init__(self, jobId=None, execId=None, totalSize=None, startTime=None, endTime=None,):
        self.jobId = jobId
        self.execId = execId
        self.totalSize = totalSize
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.execId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cns_EndTaskRequest')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.execId is not None:
            oprot.writeFieldBegin('execId', TType.STRING, 2)
            oprot.writeString(self.execId.encode('utf-8') if sys.version_info[0] == 2 else self.execId)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 3)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 4)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 5)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _cns_EndTaskResponse(object):
    """
    Attributes:
     - isSuccess
     - errorMgm

    """


    def __init__(self, isSuccess=None, errorMgm=None,):
        self.isSuccess = isSuccess
        self.errorMgm = errorMgm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMgm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('_cns_EndTaskResponse')
        if self.isSuccess is not None:
            oprot.writeFieldBegin('isSuccess', TType.BOOL, 1)
            oprot.writeBool(self.isSuccess)
            oprot.writeFieldEnd()
        if self.errorMgm is not None:
            oprot.writeFieldBegin('errorMgm', TType.STRING, 2)
            oprot.writeString(self.errorMgm.encode('utf-8') if sys.version_info[0] == 2 else self.errorMgm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncCNSVolumeInfo)
ncCNSVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'lunId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'wwn', 'UTF8', None, ),  # 4
    (5, TType.I32, 'volumeType', None, None, ),  # 5
    (6, TType.I64, 'totalSize', None, None, ),  # 6
    (7, TType.I64, 'usedSize', None, None, ),  # 7
    (8, TType.STRING, 'mountPoint', 'UTF8', None, ),  # 8
    (9, TType.I32, 'poolType', None, None, ),  # 9
    (10, TType.STRING, 'poolId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'lunConfig', 'UTF8', None, ),  # 11
)
all_structs.append(ncCNSLinkConfigInfo)
ncCNSLinkConfigInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'linkType', None, None, ),  # 1
    (2, TType.STRING, 'server_wwn', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'server_ip', 'UTF8', None, ),  # 3
    (4, TType.I32, 'server_port', None, None, ),  # 4
    (5, TType.STRING, 'client_wwn', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'client_ip', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'link_id', 'UTF8', None, ),  # 7
)
all_structs.append(cns_CreateBaseVolumeRequest)
cns_CreateBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.STRING, 'mountPoint', 'UTF8', None, ),  # 4
)
all_structs.append(_cns_CreateBaseVolumeResponse)
_cns_CreateBaseVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volumeinfo', [ncCNSVolumeInfo, None], None, ),  # 1
    (2, TType.BOOL, 'isSuccess', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_CreateCloneVolumeRequest)
cns_CreateCloneVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timepoint', None, None, ),  # 3
    (4, TType.STRING, 'backup_jobId', 'UTF8', None, ),  # 4
)
all_structs.append(_cns_CreateCloneVolumeResponse)
_cns_CreateCloneVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volumeinfo', [ncCNSVolumeInfo, None], None, ),  # 1
    (2, TType.BOOL, 'isSuccess', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_CreateSnapVolumeRequest)
cns_CreateSnapVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'volume_id', 'UTF8', None, ),  # 3
)
all_structs.append(_cns_CreateSnapVolumeResponse)
_cns_CreateSnapVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volumeinfo', [ncCNSVolumeInfo, None], None, ),  # 1
    (2, TType.BOOL, 'isSuccess', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_CreateVolumeMappingRequest)
cns_CreateVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'linkType', None, None, ),  # 2
    (3, TType.STRING, 'link_id', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volumeType', None, None, ),  # 4
    (5, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'volume_id', 'UTF8', None, ),  # 6
)
all_structs.append(_cns_CreateVolumeMappingResponse)
_cns_CreateVolumeMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_DeleteVolumeRequest)
cns_DeleteVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.STRING, 'volumeId', 'UTF8', None, ),  # 3
)
all_structs.append(_cns_DeleteVolumeResponse)
_cns_DeleteVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_DeleteVolumeMappingRequest)
cns_DeleteVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'linkType', None, None, ),  # 2
    (3, TType.STRING, 'link_id', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volumeType', None, None, ),  # 4
    (5, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'volume_id', 'UTF8', None, ),  # 6
)
all_structs.append(_cns_DeleteVolumeMapingResponse)
_cns_DeleteVolumeMapingResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_UpdateVolumeInfoRequest)
cns_UpdateVolumeInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'volumeinfo', [ncCNSVolumeInfo, None], None, ),  # 2
)
all_structs.append(_cns_UpdateVolumeInfoResponse)
_cns_UpdateVolumeInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_GetVolumeInfoRequest)
cns_GetVolumeInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'volumeId', 'UTF8', None, ),  # 4
)
all_structs.append(_cns_GetVolumeInfoResponse)
_cns_GetVolumeInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'volumeinfoLists', (TType.STRUCT, [ncCNSVolumeInfo, None], False), None, ),  # 1
    (2, TType.BOOL, 'isSuccess', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_GetSpecVolumeInfoRequest)
cns_GetSpecVolumeInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
)
all_structs.append(_cns_GetSpecVolumeInfoResponse)
_cns_GetSpecVolumeInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volumeinfo', [ncCNSVolumeInfo, None], None, ),  # 1
    (2, TType.BOOL, 'isSuccess', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_GetCreateVolumeMappingStatusRequest)
cns_GetCreateVolumeMappingStatusRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
)
all_structs.append(_cns_GetCreateVolumeMappingStatusResponse)
_cns_GetCreateVolumeMappingStatusResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'volumeinfoLists', (TType.STRUCT, [ncCNSVolumeInfo, None], False), None, ),  # 1
    (2, TType.I32, 'finished', None, None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_GetDeleteVolumeMappingStatusRequest)
cns_GetDeleteVolumeMappingStatusRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 2
)
all_structs.append(_cns_GetDeleteVolumeMappingStatusResponse)
_cns_GetDeleteVolumeMappingStatusResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'finished', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_CreateTimePointRequest)
cns_CreateTimePointRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'execId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vm_uuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'vm_name', 'UTF8', None, ),  # 4
    (5, TType.I64, 'timepoint', None, None, ),  # 5
    (6, TType.STRING, 'volume_id', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'metadata', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'general_metadata', 'UTF8', None, ),  # 8
    (9, TType.I64, 'dataSize', None, None, ),  # 9
    (10, TType.I64, 'capSize', None, None, ),  # 10
)
all_structs.append(_cns_CreateTimePointResponse)
_cns_CreateTimePointResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
all_structs.append(cns_CreateLinkConfigRequest)
cns_CreateLinkConfigRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'linkType', None, None, ),  # 2
    (3, TType.STRING, 'host_wwn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'host_ip', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'pool_ip', 'UTF8', None, ),  # 5
)
all_structs.append(_cns_CreateLinkConfigResponse)
_cns_CreateLinkConfigResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.LIST, 'targetinfoList', (TType.STRUCT, [ncCNSLinkConfigInfo, None], False), None, ),  # 2
    (3, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 3
)
all_structs.append(cns_EndTaskRequest)
cns_EndTaskRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'execId', 'UTF8', None, ),  # 2
    (3, TType.I64, 'totalSize', None, None, ),  # 3
    (4, TType.I64, 'startTime', None, None, ),  # 4
    (5, TType.I64, 'endTime', None, None, ),  # 5
)
all_structs.append(_cns_EndTaskResponse)
_cns_EndTaskResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSuccess', None, None, ),  # 1
    (2, TType.STRING, 'errorMgm', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
