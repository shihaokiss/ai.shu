# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncPublicCloud.ttypes

from thrift.transport import TTransport
all_structs = []


class RequestType(object):
    GET_ENTERPRISE_PROJECTS = 1
    GET_REGIONS = 2
    GET_IMAGES = 3
    GET_FLAVORS = 4
    GET_VPCS = 5
    GET_SUBNETS = 6
    GET_SECURITY_GROUPS = 7
    GET_ZONES = 8

    _VALUES_TO_NAMES = {
        1: "GET_ENTERPRISE_PROJECTS",
        2: "GET_REGIONS",
        3: "GET_IMAGES",
        4: "GET_FLAVORS",
        5: "GET_VPCS",
        6: "GET_SUBNETS",
        7: "GET_SECURITY_GROUPS",
        8: "GET_ZONES",
    }

    _NAMES_TO_VALUES = {
        "GET_ENTERPRISE_PROJECTS": 1,
        "GET_REGIONS": 2,
        "GET_IMAGES": 3,
        "GET_FLAVORS": 4,
        "GET_VPCS": 5,
        "GET_SUBNETS": 6,
        "GET_SECURITY_GROUPS": 7,
        "GET_ZONES": 8,
    }


class ncGetCloudResRequest(object):
    """
    Attributes:
     - requestType
     - clientId
     - publicCloudId
     - param
     - pcloud

    """


    def __init__(self, requestType=None, clientId=None, publicCloudId=None, param=None, pcloud=None,):
        self.requestType = requestType
        self.clientId = clientId
        self.publicCloudId = publicCloudId
        self.param = param
        self.pcloud = pcloud

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.publicCloudId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.param = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.pcloud = ncPublicCloud.ttypes.ncPublicCloudResource()
                    self.pcloud.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetCloudResRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.I32, 1)
            oprot.writeI32(self.requestType)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.publicCloudId is not None:
            oprot.writeFieldBegin('publicCloudId', TType.STRING, 3)
            oprot.writeString(self.publicCloudId.encode('utf-8') if sys.version_info[0] == 2 else self.publicCloudId)
            oprot.writeFieldEnd()
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 4)
            oprot.writeString(self.param.encode('utf-8') if sys.version_info[0] == 2 else self.param)
            oprot.writeFieldEnd()
        if self.pcloud is not None:
            oprot.writeFieldBegin('pcloud', TType.STRUCT, 5)
            self.pcloud.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetCloudResResult(object):
    """
    Attributes:
     - result

    """


    def __init__(self, result=None,):
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.result = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetCloudResResult')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 1)
            oprot.writeString(self.result.encode('utf-8') if sys.version_info[0] == 2 else self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncGetCloudResRequest)
ncGetCloudResRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestType', None, None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'publicCloudId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'param', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'pcloud', [ncPublicCloud.ttypes.ncPublicCloudResource, None], None, ),  # 5
)
all_structs.append(ncGetCloudResResult)
ncGetCloudResResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'result', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
