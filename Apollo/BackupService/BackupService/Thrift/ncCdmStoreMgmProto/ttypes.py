# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCdmStoreMgmCommon.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTPool(object):
    """
    Attributes:
     - PoolId
     - PoolType
     - PoolName
     - PoolUsedSize
     - PoolTotalSize
     - WarnThreshold
     - SafeThreshold
     - DeviceIp
     - PoolUuid
     - PoolStatus
     - BaseVolumeCount
     - SnapVolumeCount
     - CloneVolumeCount
     - ExtentSize
     - PreallocSize

    """


    def __init__(self, PoolId=None, PoolType=None, PoolName=None, PoolUsedSize=None, PoolTotalSize=None, WarnThreshold=None, SafeThreshold=None, DeviceIp=None, PoolUuid=None, PoolStatus=None, BaseVolumeCount=None, SnapVolumeCount=None, CloneVolumeCount=None, ExtentSize=None, PreallocSize=None,):
        self.PoolId = PoolId
        self.PoolType = PoolType
        self.PoolName = PoolName
        self.PoolUsedSize = PoolUsedSize
        self.PoolTotalSize = PoolTotalSize
        self.WarnThreshold = WarnThreshold
        self.SafeThreshold = SafeThreshold
        self.DeviceIp = DeviceIp
        self.PoolUuid = PoolUuid
        self.PoolStatus = PoolStatus
        self.BaseVolumeCount = BaseVolumeCount
        self.SnapVolumeCount = SnapVolumeCount
        self.CloneVolumeCount = CloneVolumeCount
        self.ExtentSize = ExtentSize
        self.PreallocSize = PreallocSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.PoolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.PoolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.PoolName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.PoolUsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.PoolTotalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.WarnThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.SafeThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.DeviceIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.PoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.PoolStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.BaseVolumeCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.SnapVolumeCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.CloneVolumeCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.ExtentSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.PreallocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTPool')
        if self.PoolId is not None:
            oprot.writeFieldBegin('PoolId', TType.STRING, 1)
            oprot.writeString(self.PoolId.encode('utf-8') if sys.version_info[0] == 2 else self.PoolId)
            oprot.writeFieldEnd()
        if self.PoolType is not None:
            oprot.writeFieldBegin('PoolType', TType.I32, 2)
            oprot.writeI32(self.PoolType)
            oprot.writeFieldEnd()
        if self.PoolName is not None:
            oprot.writeFieldBegin('PoolName', TType.STRING, 3)
            oprot.writeString(self.PoolName.encode('utf-8') if sys.version_info[0] == 2 else self.PoolName)
            oprot.writeFieldEnd()
        if self.PoolUsedSize is not None:
            oprot.writeFieldBegin('PoolUsedSize', TType.I64, 4)
            oprot.writeI64(self.PoolUsedSize)
            oprot.writeFieldEnd()
        if self.PoolTotalSize is not None:
            oprot.writeFieldBegin('PoolTotalSize', TType.I64, 5)
            oprot.writeI64(self.PoolTotalSize)
            oprot.writeFieldEnd()
        if self.WarnThreshold is not None:
            oprot.writeFieldBegin('WarnThreshold', TType.I64, 6)
            oprot.writeI64(self.WarnThreshold)
            oprot.writeFieldEnd()
        if self.SafeThreshold is not None:
            oprot.writeFieldBegin('SafeThreshold', TType.I64, 7)
            oprot.writeI64(self.SafeThreshold)
            oprot.writeFieldEnd()
        if self.DeviceIp is not None:
            oprot.writeFieldBegin('DeviceIp', TType.STRING, 8)
            oprot.writeString(self.DeviceIp.encode('utf-8') if sys.version_info[0] == 2 else self.DeviceIp)
            oprot.writeFieldEnd()
        if self.PoolUuid is not None:
            oprot.writeFieldBegin('PoolUuid', TType.STRING, 9)
            oprot.writeString(self.PoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.PoolUuid)
            oprot.writeFieldEnd()
        if self.PoolStatus is not None:
            oprot.writeFieldBegin('PoolStatus', TType.I32, 10)
            oprot.writeI32(self.PoolStatus)
            oprot.writeFieldEnd()
        if self.BaseVolumeCount is not None:
            oprot.writeFieldBegin('BaseVolumeCount', TType.I32, 11)
            oprot.writeI32(self.BaseVolumeCount)
            oprot.writeFieldEnd()
        if self.SnapVolumeCount is not None:
            oprot.writeFieldBegin('SnapVolumeCount', TType.I32, 12)
            oprot.writeI32(self.SnapVolumeCount)
            oprot.writeFieldEnd()
        if self.CloneVolumeCount is not None:
            oprot.writeFieldBegin('CloneVolumeCount', TType.I32, 13)
            oprot.writeI32(self.CloneVolumeCount)
            oprot.writeFieldEnd()
        if self.ExtentSize is not None:
            oprot.writeFieldBegin('ExtentSize', TType.I64, 14)
            oprot.writeI64(self.ExtentSize)
            oprot.writeFieldEnd()
        if self.PreallocSize is not None:
            oprot.writeFieldBegin('PreallocSize', TType.I64, 15)
            oprot.writeI64(self.PreallocSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPoolRequest(object):
    """
    Attributes:
     - poolId
     - nodeIp
     - poolType
     - isNautilus
     - poolUuid
     - snapMetaVolumeId
     - PoolStatus
     - mdiskInfos

    """


    def __init__(self, poolId=None, nodeIp=None, poolType=None, isNautilus=None, poolUuid=None, snapMetaVolumeId=None, PoolStatus=None, mdiskInfos=None,):
        self.poolId = poolId
        self.nodeIp = nodeIp
        self.poolType = poolType
        self.isNautilus = isNautilus
        self.poolUuid = poolUuid
        self.snapMetaVolumeId = snapMetaVolumeId
        self.PoolStatus = PoolStatus
        self.mdiskInfos = mdiskInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.isNautilus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.poolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.snapMetaVolumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.PoolStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
                    self.mdiskInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPoolRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 3)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.isNautilus is not None:
            oprot.writeFieldBegin('isNautilus', TType.I32, 4)
            oprot.writeI32(self.isNautilus)
            oprot.writeFieldEnd()
        if self.poolUuid is not None:
            oprot.writeFieldBegin('poolUuid', TType.STRING, 5)
            oprot.writeString(self.poolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.poolUuid)
            oprot.writeFieldEnd()
        if self.snapMetaVolumeId is not None:
            oprot.writeFieldBegin('snapMetaVolumeId', TType.STRING, 6)
            oprot.writeString(self.snapMetaVolumeId.encode('utf-8') if sys.version_info[0] == 2 else self.snapMetaVolumeId)
            oprot.writeFieldEnd()
        if self.PoolStatus is not None:
            oprot.writeFieldBegin('PoolStatus', TType.I32, 7)
            oprot.writeI32(self.PoolStatus)
            oprot.writeFieldEnd()
        if self.mdiskInfos is not None:
            oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 8)
            self.mdiskInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeSpace(object):
    """
    Volume 空间使用信息

    Attributes:
     - volumeSize
     - allocSize
     - shareSize
     - realSize

    """


    def __init__(self, volumeSize=None, allocSize=None, shareSize=None, realSize=None,):
        self.volumeSize = volumeSize
        self.allocSize = allocSize
        self.shareSize = shareSize
        self.realSize = realSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.volumeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.allocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.shareSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.realSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeSpace')
        if self.volumeSize is not None:
            oprot.writeFieldBegin('volumeSize', TType.I64, 1)
            oprot.writeI64(self.volumeSize)
            oprot.writeFieldEnd()
        if self.allocSize is not None:
            oprot.writeFieldBegin('allocSize', TType.I64, 2)
            oprot.writeI64(self.allocSize)
            oprot.writeFieldEnd()
        if self.shareSize is not None:
            oprot.writeFieldBegin('shareSize', TType.I64, 3)
            oprot.writeI64(self.shareSize)
            oprot.writeFieldEnd()
        if self.realSize is not None:
            oprot.writeFieldBegin('realSize', TType.I64, 4)
            oprot.writeI64(self.realSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeInfo(object):
    """
    Attributes:
     - id
     - uuid
     - poolType
     - wwn
     - poolId
     - space
     - snapUuid

    """


    def __init__(self, id=None, uuid=None, poolType=None, wwn=None, poolId=None, space=None, snapUuid=None,):
        self.id = id
        self.uuid = uuid
        self.poolType = poolType
        self.wwn = wwn
        self.poolId = poolId
        self.space = space
        self.snapUuid = snapUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.space = ncVolumeSpace()
                    self.space.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.snapUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 3)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.wwn is not None:
            oprot.writeFieldBegin('wwn', TType.STRING, 4)
            oprot.writeString(self.wwn.encode('utf-8') if sys.version_info[0] == 2 else self.wwn)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 5)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.space is not None:
            oprot.writeFieldBegin('space', TType.STRUCT, 6)
            self.space.write(oprot)
            oprot.writeFieldEnd()
        if self.snapUuid is not None:
            oprot.writeFieldBegin('snapUuid', TType.STRING, 7)
            oprot.writeString(self.snapUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBaseVolumeInfo(object):
    """
    BaseVolume信息（BaseVolume是SnapPool空间分配的基本单元）

    Attributes:
     - type
     - spaceInfo
     - name
     - poolType
     - uuid

    """


    def __init__(self, type=None, spaceInfo=None, name=None, poolType=None, uuid=None,):
        self.type = type
        self.spaceInfo = spaceInfo
        self.name = name
        self.poolType = poolType
        self.uuid = uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.spaceInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBaseVolumeInfo')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.spaceInfo is not None:
            oprot.writeFieldBegin('spaceInfo', TType.I64, 2)
            oprot.writeI64(self.spaceInfo)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 4)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 5)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeMapInfo(object):
    """
    Lun信息


    Attributes:
     - wwn
     - ip
     - port
     - uuid
     - config
     - poolType
     - volumeWwn
     - linkId
     - volumeId

    """


    def __init__(self, wwn=None, ip=None, port=None, uuid=None, config=None, poolType=None, volumeWwn=None, linkId=None, volumeId=None,):
        self.wwn = wwn
        self.ip = ip
        self.port = port
        self.uuid = uuid
        self.config = config
        self.poolType = poolType
        self.volumeWwn = volumeWwn
        self.linkId = linkId
        self.volumeId = volumeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.port = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.volumeWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.linkId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeMapInfo')
        if self.wwn is not None:
            oprot.writeFieldBegin('wwn', TType.STRING, 1)
            oprot.writeString(self.wwn.encode('utf-8') if sys.version_info[0] == 2 else self.wwn)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I64, 3)
            oprot.writeI64(self.port)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 4)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 5)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 6)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.volumeWwn is not None:
            oprot.writeFieldBegin('volumeWwn', TType.STRING, 7)
            oprot.writeString(self.volumeWwn.encode('utf-8') if sys.version_info[0] == 2 else self.volumeWwn)
            oprot.writeFieldEnd()
        if self.linkId is not None:
            oprot.writeFieldBegin('linkId', TType.STRING, 8)
            oprot.writeString(self.linkId.encode('utf-8') if sys.version_info[0] == 2 else self.linkId)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 9)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBaseVolumeInfoList(object):
    """
    BaseVolume列表

    Attributes:
     - baseVolInfoList

    """


    def __init__(self, baseVolInfoList=None,):
        self.baseVolInfoList = baseVolInfoList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.baseVolInfoList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncBaseVolumeInfo()
                        _elem5.read(iprot)
                        self.baseVolInfoList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBaseVolumeInfoList')
        if self.baseVolInfoList is not None:
            oprot.writeFieldBegin('baseVolInfoList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.baseVolInfoList))
            for iter6 in self.baseVolInfoList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateBaseVolumeRequest(object):
    """
    CreateBaseVolume请求包

    Attributes:
     - poolId
     - baseVolmeInfo
     - poolType
     - poolUuid

    """


    def __init__(self, poolId=None, baseVolmeInfo=None, poolType=None, poolUuid=None,):
        self.poolId = poolId
        self.baseVolmeInfo = baseVolmeInfo
        self.poolType = poolType
        self.poolUuid = poolUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.baseVolmeInfo = ncBaseVolumeInfo()
                    self.baseVolmeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.poolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateBaseVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.baseVolmeInfo is not None:
            oprot.writeFieldBegin('baseVolmeInfo', TType.STRUCT, 2)
            self.baseVolmeInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 3)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.poolUuid is not None:
            oprot.writeFieldBegin('poolUuid', TType.STRING, 4)
            oprot.writeString(self.poolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.poolUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateVolumeMappingRequest(object):
    """
    CreateVolumeMapping 请求包


    Attributes:
     - volumeId
     - volumeType
     - size
     - fabricModule
     - hostWwn
     - iscsiIp
     - poolType
     - linkId
     - clientId

    """


    def __init__(self, volumeId=None, volumeType=None, size=None, fabricModule=None, hostWwn=None, iscsiIp=None, poolType=None, linkId=None, clientId=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.size = size
        self.fabricModule = fabricModule
        self.hostWwn = hostWwn
        self.iscsiIp = iscsiIp
        self.poolType = poolType
        self.linkId = linkId
        self.clientId = clientId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.fabricModule = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hostWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.iscsiIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.linkId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateVolumeMappingRequest')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.fabricModule is not None:
            oprot.writeFieldBegin('fabricModule', TType.I32, 4)
            oprot.writeI32(self.fabricModule)
            oprot.writeFieldEnd()
        if self.hostWwn is not None:
            oprot.writeFieldBegin('hostWwn', TType.STRING, 5)
            oprot.writeString(self.hostWwn.encode('utf-8') if sys.version_info[0] == 2 else self.hostWwn)
            oprot.writeFieldEnd()
        if self.iscsiIp is not None:
            oprot.writeFieldBegin('iscsiIp', TType.STRING, 6)
            oprot.writeString(self.iscsiIp.encode('utf-8') if sys.version_info[0] == 2 else self.iscsiIp)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 7)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.linkId is not None:
            oprot.writeFieldBegin('linkId', TType.STRING, 8)
            oprot.writeString(self.linkId.encode('utf-8') if sys.version_info[0] == 2 else self.linkId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 9)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncQueryMappingRequest(object):
    """
    查询异步批量创建和删除卷映射 请求包


    Attributes:
     - poolType
     - jobId

    """


    def __init__(self, poolType=None, jobId=None,):
        self.poolType = poolType
        self.jobId = jobId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncQueryMappingRequest')
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 1)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncQueryCreateMappingResponse(object):
    """
    查询异步批量创建卷映射 返回结构体


    Attributes:
     - finished
     - errstr
     - lstMapInfos

    """


    def __init__(self, finished=None, errstr=None, lstMapInfos=None,):
        self.finished = finished
        self.errstr = errstr
        self.lstMapInfos = lstMapInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.finished = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errstr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.lstMapInfos = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncVolumeMapInfo()
                        _elem12.read(iprot)
                        self.lstMapInfos.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncQueryCreateMappingResponse')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.I32, 1)
            oprot.writeI32(self.finished)
            oprot.writeFieldEnd()
        if self.errstr is not None:
            oprot.writeFieldBegin('errstr', TType.STRING, 2)
            oprot.writeString(self.errstr.encode('utf-8') if sys.version_info[0] == 2 else self.errstr)
            oprot.writeFieldEnd()
        if self.lstMapInfos is not None:
            oprot.writeFieldBegin('lstMapInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.lstMapInfos))
            for iter13 in self.lstMapInfos:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDelMappingErrorInfo(object):
    """
    卷映射删除失败信息结构体


    Attributes:
     - volumeId
     - volumeType
     - errstr

    """


    def __init__(self, volumeId=None, volumeType=None, errstr=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.errstr = errstr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errstr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDelMappingErrorInfo')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.errstr is not None:
            oprot.writeFieldBegin('errstr', TType.STRING, 3)
            oprot.writeString(self.errstr.encode('utf-8') if sys.version_info[0] == 2 else self.errstr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncQueryDelMappingResponse(object):
    """
    查询异步批量删除卷映射 返回结构体


    Attributes:
     - finished
     - lstMapInfos

    """


    def __init__(self, finished=None, lstMapInfos=None,):
        self.finished = finished
        self.lstMapInfos = lstMapInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.finished = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.lstMapInfos = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncDelMappingErrorInfo()
                        _elem19.read(iprot)
                        self.lstMapInfos.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncQueryDelMappingResponse')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.I32, 1)
            oprot.writeI32(self.finished)
            oprot.writeFieldEnd()
        if self.lstMapInfos is not None:
            oprot.writeFieldBegin('lstMapInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.lstMapInfos))
            for iter20 in self.lstMapInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetVolumeMappingRequest(object):
    """
    GetVolumeMapping 请求包


    Attributes:
     - volumeId
     - volumeType
     - hostWwn
     - poolType

    """


    def __init__(self, volumeId=None, volumeType=None, hostWwn=None, poolType=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.hostWwn = hostWwn
        self.poolType = poolType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetVolumeMappingRequest')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.hostWwn is not None:
            oprot.writeFieldBegin('hostWwn', TType.STRING, 3)
            oprot.writeString(self.hostWwn.encode('utf-8') if sys.version_info[0] == 2 else self.hostWwn)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 4)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteVolumeMappingRequest(object):
    """
    删除卷映射请求体

    Attributes:
     - volumeId
     - volumeType
     - hostWwn
     - poolType
     - fabricModule
     - iscsiIp
     - linkId

    """


    def __init__(self, volumeId=None, volumeType=None, hostWwn=None, poolType=None, fabricModule=None, iscsiIp=None, linkId=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.hostWwn = hostWwn
        self.poolType = poolType
        self.fabricModule = fabricModule
        self.iscsiIp = iscsiIp
        self.linkId = linkId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fabricModule = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.iscsiIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.linkId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteVolumeMappingRequest')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.hostWwn is not None:
            oprot.writeFieldBegin('hostWwn', TType.STRING, 3)
            oprot.writeString(self.hostWwn.encode('utf-8') if sys.version_info[0] == 2 else self.hostWwn)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 4)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.fabricModule is not None:
            oprot.writeFieldBegin('fabricModule', TType.I32, 5)
            oprot.writeI32(self.fabricModule)
            oprot.writeFieldEnd()
        if self.iscsiIp is not None:
            oprot.writeFieldBegin('iscsiIp', TType.STRING, 6)
            oprot.writeString(self.iscsiIp.encode('utf-8') if sys.version_info[0] == 2 else self.iscsiIp)
            oprot.writeFieldEnd()
        if self.linkId is not None:
            oprot.writeFieldBegin('linkId', TType.STRING, 7)
            oprot.writeString(self.linkId.encode('utf-8') if sys.version_info[0] == 2 else self.linkId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapVolumeDetail(object):
    """
    SnapVolume详细信息  暂时只有创建快照卷返回这个结构体

    Attributes:
     - timestamp
     - id
     - uuid
     - name
     - baseVolId
     - baseVolUuid
     - poolId
     - poolUuid
     - wwn

    """


    def __init__(self, timestamp=None, id=None, uuid=None, name=None, baseVolId=None, baseVolUuid=None, poolId=None, poolUuid=None, wwn=None,):
        self.timestamp = timestamp
        self.id = id
        self.uuid = uuid
        self.name = name
        self.baseVolId = baseVolId
        self.baseVolUuid = baseVolUuid
        self.poolId = poolId
        self.poolUuid = poolUuid
        self.wwn = wwn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.baseVolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.baseVolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.poolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapVolumeDetail')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 1)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 3)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.baseVolId is not None:
            oprot.writeFieldBegin('baseVolId', TType.STRING, 5)
            oprot.writeString(self.baseVolId.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolId)
            oprot.writeFieldEnd()
        if self.baseVolUuid is not None:
            oprot.writeFieldBegin('baseVolUuid', TType.STRING, 6)
            oprot.writeString(self.baseVolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolUuid)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 7)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.poolUuid is not None:
            oprot.writeFieldBegin('poolUuid', TType.STRING, 8)
            oprot.writeString(self.poolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.poolUuid)
            oprot.writeFieldEnd()
        if self.wwn is not None:
            oprot.writeFieldBegin('wwn', TType.STRING, 9)
            oprot.writeString(self.wwn.encode('utf-8') if sys.version_info[0] == 2 else self.wwn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDelVolumeRequest(object):
    """
    删除卷结构体


    Attributes:
     - poolType
     - VolumeIds
     - VolumeUuids

    """


    def __init__(self, poolType=None, VolumeIds=None, VolumeUuids=None,):
        self.poolType = poolType
        self.VolumeIds = VolumeIds
        self.VolumeUuids = VolumeUuids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.VolumeIds = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.VolumeIds.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.VolumeUuids = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.VolumeUuids.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDelVolumeRequest')
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 1)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.VolumeIds is not None:
            oprot.writeFieldBegin('VolumeIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.VolumeIds))
            for iter33 in self.VolumeIds:
                oprot.writeString(iter33.encode('utf-8') if sys.version_info[0] == 2 else iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.VolumeUuids is not None:
            oprot.writeFieldBegin('VolumeUuids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.VolumeUuids))
            for iter34 in self.VolumeUuids:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetVolumeRequest(object):
    """
    请求卷结构体


    Attributes:
     - poolType
     - VolumeIds
     - VolumeUuids

    """


    def __init__(self, poolType=None, VolumeIds=None, VolumeUuids=None,):
        self.poolType = poolType
        self.VolumeIds = VolumeIds
        self.VolumeUuids = VolumeUuids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.VolumeIds = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.VolumeIds.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.VolumeUuids = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.VolumeUuids.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetVolumeRequest')
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 1)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.VolumeIds is not None:
            oprot.writeFieldBegin('VolumeIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.VolumeIds))
            for iter47 in self.VolumeIds:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.VolumeUuids is not None:
            oprot.writeFieldBegin('VolumeUuids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.VolumeUuids))
            for iter48 in self.VolumeUuids:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncJobVolumeRequest(object):
    """
    任务对应的卷

    Attributes:
     - volumeId
     - volumeType

    """


    def __init__(self, volumeId=None, volumeType=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncJobVolumeRequest')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetVolumeInfo(object):
    """
    有卷名卷类型获取卷信息


    Attributes:
     - pool_id
     - fs_pool_id

    """


    def __init__(self, pool_id=None, fs_pool_id=None,):
        self.pool_id = pool_id
        self.fs_pool_id = fs_pool_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pool_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.fs_pool_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetVolumeInfo')
        if self.pool_id is not None:
            oprot.writeFieldBegin('pool_id', TType.STRING, 1)
            oprot.writeString(self.pool_id.encode('utf-8') if sys.version_info[0] == 2 else self.pool_id)
            oprot.writeFieldEnd()
        if self.fs_pool_id is not None:
            oprot.writeFieldBegin('fs_pool_id', TType.I32, 2)
            oprot.writeI32(self.fs_pool_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapshotVolumeSyncRequest(object):
    """
    快照同步请求包


    Attributes:
     - srcSnapshotPoolId
     - dstSnapshotPoolId
     - dstVip
     - snapshotVolumeId
     - proxyIp
     - proxyPort
     - proxyPlanarNetName

    """


    def __init__(self, srcSnapshotPoolId=None, dstSnapshotPoolId=None, dstVip=None, snapshotVolumeId=None, proxyIp=None, proxyPort=None, proxyPlanarNetName=None,):
        self.srcSnapshotPoolId = srcSnapshotPoolId
        self.dstSnapshotPoolId = dstSnapshotPoolId
        self.dstVip = dstVip
        self.snapshotVolumeId = snapshotVolumeId
        self.proxyIp = proxyIp
        self.proxyPort = proxyPort
        self.proxyPlanarNetName = proxyPlanarNetName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.srcSnapshotPoolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dstSnapshotPoolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dstVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.snapshotVolumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.proxyIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.proxyPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.proxyPlanarNetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapshotVolumeSyncRequest')
        if self.srcSnapshotPoolId is not None:
            oprot.writeFieldBegin('srcSnapshotPoolId', TType.STRING, 1)
            oprot.writeString(self.srcSnapshotPoolId.encode('utf-8') if sys.version_info[0] == 2 else self.srcSnapshotPoolId)
            oprot.writeFieldEnd()
        if self.dstSnapshotPoolId is not None:
            oprot.writeFieldBegin('dstSnapshotPoolId', TType.STRING, 2)
            oprot.writeString(self.dstSnapshotPoolId.encode('utf-8') if sys.version_info[0] == 2 else self.dstSnapshotPoolId)
            oprot.writeFieldEnd()
        if self.dstVip is not None:
            oprot.writeFieldBegin('dstVip', TType.STRING, 3)
            oprot.writeString(self.dstVip.encode('utf-8') if sys.version_info[0] == 2 else self.dstVip)
            oprot.writeFieldEnd()
        if self.snapshotVolumeId is not None:
            oprot.writeFieldBegin('snapshotVolumeId', TType.STRING, 4)
            oprot.writeString(self.snapshotVolumeId.encode('utf-8') if sys.version_info[0] == 2 else self.snapshotVolumeId)
            oprot.writeFieldEnd()
        if self.proxyIp is not None:
            oprot.writeFieldBegin('proxyIp', TType.STRING, 5)
            oprot.writeString(self.proxyIp.encode('utf-8') if sys.version_info[0] == 2 else self.proxyIp)
            oprot.writeFieldEnd()
        if self.proxyPort is not None:
            oprot.writeFieldBegin('proxyPort', TType.I64, 6)
            oprot.writeI64(self.proxyPort)
            oprot.writeFieldEnd()
        if self.proxyPlanarNetName is not None:
            oprot.writeFieldBegin('proxyPlanarNetName', TType.STRING, 7)
            oprot.writeString(self.proxyPlanarNetName.encode('utf-8') if sys.version_info[0] == 2 else self.proxyPlanarNetName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetTargetWwnInfo(object):
    """
    节点ip和iqn信息


    Attributes:
     - nodeIp
     - targetName
     - port

    """


    def __init__(self, nodeIp=None, targetName=None, port=None,):
        self.nodeIp = nodeIp
        self.targetName = targetName
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetTargetWwnInfo')
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 1)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.targetName is not None:
            oprot.writeFieldBegin('targetName', TType.STRING, 2)
            oprot.writeString(self.targetName.encode('utf-8') if sys.version_info[0] == 2 else self.targetName)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapshotVolumeSyncReply(object):
    """
    快照同步返回信息


    Attributes:
     - snapshotVolumeSyncId
     - snapshotVolumeId

    """


    def __init__(self, snapshotVolumeSyncId=None, snapshotVolumeId=None,):
        self.snapshotVolumeSyncId = snapshotVolumeSyncId
        self.snapshotVolumeId = snapshotVolumeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapshotVolumeSyncId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.snapshotVolumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapshotVolumeSyncReply')
        if self.snapshotVolumeSyncId is not None:
            oprot.writeFieldBegin('snapshotVolumeSyncId', TType.STRING, 1)
            oprot.writeString(self.snapshotVolumeSyncId.encode('utf-8') if sys.version_info[0] == 2 else self.snapshotVolumeSyncId)
            oprot.writeFieldEnd()
        if self.snapshotVolumeId is not None:
            oprot.writeFieldBegin('snapshotVolumeId', TType.STRING, 2)
            oprot.writeString(self.snapshotVolumeId.encode('utf-8') if sys.version_info[0] == 2 else self.snapshotVolumeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSelectLinkRequest(object):
    """
    选择链路信息


    Attributes:
     - poolId
     - clientId
     - fabric_type
     - poolType

    """


    def __init__(self, poolId=None, clientId=None, fabric_type=None, poolType=None,):
        self.poolId = poolId
        self.clientId = clientId
        self.fabric_type = fabric_type
        self.poolType = poolType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fabric_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSelectLinkRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.fabric_type is not None:
            oprot.writeFieldBegin('fabric_type', TType.I32, 3)
            oprot.writeI32(self.fabric_type)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 4)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTPool)
ncTPool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'PoolId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'PoolType', None, None, ),  # 2
    (3, TType.STRING, 'PoolName', 'UTF8', None, ),  # 3
    (4, TType.I64, 'PoolUsedSize', None, None, ),  # 4
    (5, TType.I64, 'PoolTotalSize', None, None, ),  # 5
    (6, TType.I64, 'WarnThreshold', None, None, ),  # 6
    (7, TType.I64, 'SafeThreshold', None, None, ),  # 7
    (8, TType.STRING, 'DeviceIp', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'PoolUuid', 'UTF8', None, ),  # 9
    (10, TType.I32, 'PoolStatus', None, None, ),  # 10
    (11, TType.I32, 'BaseVolumeCount', None, None, ),  # 11
    (12, TType.I32, 'SnapVolumeCount', None, None, ),  # 12
    (13, TType.I32, 'CloneVolumeCount', None, None, ),  # 13
    (14, TType.I64, 'ExtentSize', None, None, ),  # 14
    (15, TType.I64, 'PreallocSize', None, None, ),  # 15
)
all_structs.append(ncPoolRequest)
ncPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'poolType', None, None, ),  # 3
    (4, TType.I32, 'isNautilus', None, None, ),  # 4
    (5, TType.STRING, 'poolUuid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'snapMetaVolumeId', 'UTF8', None, ),  # 6
    (7, TType.I32, 'PoolStatus', None, None, ),  # 7
    (8, TType.STRUCT, 'mdiskInfos', [ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, None], None, ),  # 8
)
all_structs.append(ncVolumeSpace)
ncVolumeSpace.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'volumeSize', None, None, ),  # 1
    (2, TType.I64, 'allocSize', None, None, ),  # 2
    (3, TType.I64, 'shareSize', None, None, ),  # 3
    (4, TType.I64, 'realSize', None, None, ),  # 4
)
all_structs.append(ncVolumeInfo)
ncVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I32, 'poolType', None, None, ),  # 3
    (4, TType.STRING, 'wwn', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'poolId', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'space', [ncVolumeSpace, None], None, ),  # 6
    (7, TType.STRING, 'snapUuid', 'UTF8', None, ),  # 7
)
all_structs.append(ncBaseVolumeInfo)
ncBaseVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I64, 'spaceInfo', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.I32, 'poolType', None, None, ),  # 4
    (5, TType.STRING, 'uuid', 'UTF8', None, ),  # 5
)
all_structs.append(ncVolumeMapInfo)
ncVolumeMapInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'wwn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.I64, 'port', None, None, ),  # 3
    (4, TType.STRING, 'uuid', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'config', 'UTF8', None, ),  # 5
    (6, TType.I32, 'poolType', None, None, ),  # 6
    (7, TType.STRING, 'volumeWwn', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'linkId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'volumeId', 'UTF8', None, ),  # 9
)
all_structs.append(ncBaseVolumeInfoList)
ncBaseVolumeInfoList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'baseVolInfoList', (TType.STRUCT, [ncBaseVolumeInfo, None], False), None, ),  # 1
)
all_structs.append(ncCreateBaseVolumeRequest)
ncCreateBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'baseVolmeInfo', [ncBaseVolumeInfo, None], None, ),  # 2
    (3, TType.I32, 'poolType', None, None, ),  # 3
    (4, TType.STRING, 'poolUuid', 'UTF8', None, ),  # 4
)
all_structs.append(ncCreateVolumeMappingRequest)
ncCreateVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.I32, 'fabricModule', None, None, ),  # 4
    (5, TType.STRING, 'hostWwn', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'iscsiIp', 'UTF8', None, ),  # 6
    (7, TType.I32, 'poolType', None, None, ),  # 7
    (8, TType.STRING, 'linkId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'clientId', 'UTF8', None, ),  # 9
)
all_structs.append(ncQueryMappingRequest)
ncQueryMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'poolType', None, None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
)
all_structs.append(ncQueryCreateMappingResponse)
ncQueryCreateMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'finished', None, None, ),  # 1
    (2, TType.STRING, 'errstr', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'lstMapInfos', (TType.STRUCT, [ncVolumeMapInfo, None], False), None, ),  # 3
)
all_structs.append(ncDelMappingErrorInfo)
ncDelMappingErrorInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.STRING, 'errstr', 'UTF8', None, ),  # 3
)
all_structs.append(ncQueryDelMappingResponse)
ncQueryDelMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'finished', None, None, ),  # 1
    (2, TType.LIST, 'lstMapInfos', (TType.STRUCT, [ncDelMappingErrorInfo, None], False), None, ),  # 2
)
all_structs.append(ncGetVolumeMappingRequest)
ncGetVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.STRING, 'hostWwn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'poolType', None, None, ),  # 4
)
all_structs.append(ncDeleteVolumeMappingRequest)
ncDeleteVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.STRING, 'hostWwn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'poolType', None, None, ),  # 4
    (5, TType.I32, 'fabricModule', None, None, ),  # 5
    (6, TType.STRING, 'iscsiIp', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'linkId', 'UTF8', None, ),  # 7
)
all_structs.append(ncSnapVolumeDetail)
ncSnapVolumeDetail.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timestamp', None, None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'uuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'baseVolId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'baseVolUuid', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'poolId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'poolUuid', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'wwn', 'UTF8', None, ),  # 9
)
all_structs.append(ncDelVolumeRequest)
ncDelVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'poolType', None, None, ),  # 1
    (2, TType.LIST, 'VolumeIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'VolumeUuids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncGetVolumeRequest)
ncGetVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'poolType', None, None, ),  # 1
    (2, TType.LIST, 'VolumeIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'VolumeUuids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncJobVolumeRequest)
ncJobVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
)
all_structs.append(ncGetVolumeInfo)
ncGetVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pool_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'fs_pool_id', None, None, ),  # 2
)
all_structs.append(ncSnapshotVolumeSyncRequest)
ncSnapshotVolumeSyncRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'srcSnapshotPoolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dstSnapshotPoolId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'dstVip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'snapshotVolumeId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'proxyIp', 'UTF8', None, ),  # 5
    (6, TType.I64, 'proxyPort', None, None, ),  # 6
    (7, TType.STRING, 'proxyPlanarNetName', 'UTF8', None, ),  # 7
)
all_structs.append(ncGetTargetWwnInfo)
ncGetTargetWwnInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'targetName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
)
all_structs.append(ncSnapshotVolumeSyncReply)
ncSnapshotVolumeSyncReply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapshotVolumeSyncId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'snapshotVolumeId', 'UTF8', None, ),  # 2
)
all_structs.append(ncSelectLinkRequest)
ncSelectLinkRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'fabric_type', None, None, ),  # 3
    (4, TType.I32, 'poolType', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
