# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncStoreType(object):
    NC_TREE_STORE = 0
    NC_FILE_STORE = 1
    NC_CONTENT_STORE = 2

    _VALUES_TO_NAMES = {
        0: "NC_TREE_STORE",
        1: "NC_FILE_STORE",
        2: "NC_CONTENT_STORE",
    }

    _NAMES_TO_VALUES = {
        "NC_TREE_STORE": 0,
        "NC_FILE_STORE": 1,
        "NC_CONTENT_STORE": 2,
    }


class ncNodeInfo(object):
    """
    Attributes:
     - ID
     - ManageIP
     - StorageIP
     - DataIP

    """


    def __init__(self, ID=None, ManageIP=None, StorageIP=None, DataIP=None,):
        self.ID = ID
        self.ManageIP = ManageIP
        self.StorageIP = StorageIP
        self.DataIP = DataIP

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ManageIP = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ManageIP.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.StorageIP = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.StorageIP.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.DataIP = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.DataIP.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeInfo')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.ManageIP is not None:
            oprot.writeFieldBegin('ManageIP', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.ManageIP))
            for iter18 in self.ManageIP:
                oprot.writeString(iter18.encode('utf-8') if sys.version_info[0] == 2 else iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.StorageIP is not None:
            oprot.writeFieldBegin('StorageIP', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.StorageIP))
            for iter19 in self.StorageIP:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.DataIP is not None:
            oprot.writeFieldBegin('DataIP', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.DataIP))
            for iter20 in self.DataIP:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeviceInfo(object):
    """
    Attributes:
     - PoolUuid
     - DeviceUuid

    """


    def __init__(self, PoolUuid=None, DeviceUuid=None,):
        self.PoolUuid = PoolUuid
        self.DeviceUuid = DeviceUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.PoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.DeviceUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeviceInfo')
        if self.PoolUuid is not None:
            oprot.writeFieldBegin('PoolUuid', TType.STRING, 1)
            oprot.writeString(self.PoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.PoolUuid)
            oprot.writeFieldEnd()
        if self.DeviceUuid is not None:
            oprot.writeFieldBegin('DeviceUuid', TType.STRING, 2)
            oprot.writeString(self.DeviceUuid.encode('utf-8') if sys.version_info[0] == 2 else self.DeviceUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPoolInfo(object):
    """
    Attributes:
     - Uuid
     - TotalSize
     - UsedSize
     - Count
     - IP

    """


    def __init__(self, Uuid=None, TotalSize=None, UsedSize=None, Count=None, IP=None,):
        self.Uuid = Uuid
        self.TotalSize = TotalSize
        self.UsedSize = UsedSize
        self.Count = Count
        self.IP = IP

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.TotalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.UsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.Count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.IP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPoolInfo')
        if self.Uuid is not None:
            oprot.writeFieldBegin('Uuid', TType.STRING, 1)
            oprot.writeString(self.Uuid.encode('utf-8') if sys.version_info[0] == 2 else self.Uuid)
            oprot.writeFieldEnd()
        if self.TotalSize is not None:
            oprot.writeFieldBegin('TotalSize', TType.I64, 2)
            oprot.writeI64(self.TotalSize)
            oprot.writeFieldEnd()
        if self.UsedSize is not None:
            oprot.writeFieldBegin('UsedSize', TType.I64, 3)
            oprot.writeI64(self.UsedSize)
            oprot.writeFieldEnd()
        if self.Count is not None:
            oprot.writeFieldBegin('Count', TType.I32, 4)
            oprot.writeI32(self.Count)
            oprot.writeFieldEnd()
        if self.IP is not None:
            oprot.writeFieldBegin('IP', TType.STRING, 5)
            oprot.writeString(self.IP.encode('utf-8') if sys.version_info[0] == 2 else self.IP)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTaskInfo(object):
    """
    Attributes:
     - taskUser
     - taskUuid
     - taskName
     - taskMeta
     - timepointCount
     - taskVersion

    """


    def __init__(self, taskUser=None, taskUuid=None, taskName=None, taskMeta=None, timepointCount=None, taskVersion=None,):
        self.taskUser = taskUser
        self.taskUuid = taskUuid
        self.taskName = taskName
        self.taskMeta = taskMeta
        self.timepointCount = timepointCount
        self.taskVersion = taskVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.taskUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.taskMeta = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.timepointCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.taskVersion = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTaskInfo')
        if self.taskUser is not None:
            oprot.writeFieldBegin('taskUser', TType.STRING, 1)
            oprot.writeString(self.taskUser.encode('utf-8') if sys.version_info[0] == 2 else self.taskUser)
            oprot.writeFieldEnd()
        if self.taskUuid is not None:
            oprot.writeFieldBegin('taskUuid', TType.STRING, 2)
            oprot.writeString(self.taskUuid.encode('utf-8') if sys.version_info[0] == 2 else self.taskUuid)
            oprot.writeFieldEnd()
        if self.taskName is not None:
            oprot.writeFieldBegin('taskName', TType.STRING, 3)
            oprot.writeString(self.taskName.encode('utf-8') if sys.version_info[0] == 2 else self.taskName)
            oprot.writeFieldEnd()
        if self.taskMeta is not None:
            oprot.writeFieldBegin('taskMeta', TType.STRING, 4)
            oprot.writeString(self.taskMeta.encode('utf-8') if sys.version_info[0] == 2 else self.taskMeta)
            oprot.writeFieldEnd()
        if self.timepointCount is not None:
            oprot.writeFieldBegin('timepointCount', TType.I32, 5)
            oprot.writeI32(self.timepointCount)
            oprot.writeFieldEnd()
        if self.taskVersion is not None:
            oprot.writeFieldBegin('taskVersion', TType.I64, 6)
            oprot.writeI64(self.taskVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStoreInfo(object):
    """
    Attributes:
     - uuid
     - poolUuid
     - lunUuid
     - type

    """


    def __init__(self, uuid=None, poolUuid=None, lunUuid=None, type=None,):
        self.uuid = uuid
        self.poolUuid = poolUuid
        self.lunUuid = lunUuid
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.poolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lunUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStoreInfo')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.poolUuid is not None:
            oprot.writeFieldBegin('poolUuid', TType.STRING, 2)
            oprot.writeString(self.poolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.poolUuid)
            oprot.writeFieldEnd()
        if self.lunUuid is not None:
            oprot.writeFieldBegin('lunUuid', TType.STRING, 3)
            oprot.writeString(self.lunUuid.encode('utf-8') if sys.version_info[0] == 2 else self.lunUuid)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointInfo(object):
    """
    Attributes:
     - taskUser
     - taskUuid
     - timepoint
     - status
     - metadata
     - treeStore
     - fileStores
     - contentStores

    """


    def __init__(self, taskUser=None, taskUuid=None, timepoint=None, status=None, metadata=None, treeStore=None, fileStores=None, contentStores=None,):
        self.taskUser = taskUser
        self.taskUuid = taskUuid
        self.timepoint = timepoint
        self.status = status
        self.metadata = metadata
        self.treeStore = treeStore
        self.fileStores = fileStores
        self.contentStores = contentStores

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.taskUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timepoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.treeStore = ncStoreInfo()
                    self.treeStore.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.fileStores = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncStoreInfo()
                        _elem26.read(iprot)
                        self.fileStores.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.contentStores = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = ncStoreInfo()
                        _elem32.read(iprot)
                        self.contentStores.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointInfo')
        if self.taskUser is not None:
            oprot.writeFieldBegin('taskUser', TType.STRING, 1)
            oprot.writeString(self.taskUser.encode('utf-8') if sys.version_info[0] == 2 else self.taskUser)
            oprot.writeFieldEnd()
        if self.taskUuid is not None:
            oprot.writeFieldBegin('taskUuid', TType.STRING, 2)
            oprot.writeString(self.taskUuid.encode('utf-8') if sys.version_info[0] == 2 else self.taskUuid)
            oprot.writeFieldEnd()
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.I64, 3)
            oprot.writeI64(self.timepoint)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 5)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        if self.treeStore is not None:
            oprot.writeFieldBegin('treeStore', TType.STRUCT, 6)
            self.treeStore.write(oprot)
            oprot.writeFieldEnd()
        if self.fileStores is not None:
            oprot.writeFieldBegin('fileStores', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.fileStores))
            for iter33 in self.fileStores:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contentStores is not None:
            oprot.writeFieldBegin('contentStores', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.contentStores))
            for iter34 in self.contentStores:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTreeInfo(object):
    """
    Attributes:
     - treeName
     - parentTreeId
     - treeId
     - treeAttr
     - treeMeta
     - treeStore

    """


    def __init__(self, treeName=None, parentTreeId=None, treeId=None, treeAttr=None, treeMeta=None, treeStore=None,):
        self.treeName = treeName
        self.parentTreeId = parentTreeId
        self.treeId = treeId
        self.treeAttr = treeAttr
        self.treeMeta = treeMeta
        self.treeStore = treeStore

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.treeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.parentTreeId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.treeId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.treeAttr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.treeMeta = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.treeStore = ncDeviceInfo()
                    self.treeStore.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTreeInfo')
        if self.treeName is not None:
            oprot.writeFieldBegin('treeName', TType.STRING, 1)
            oprot.writeString(self.treeName.encode('utf-8') if sys.version_info[0] == 2 else self.treeName)
            oprot.writeFieldEnd()
        if self.parentTreeId is not None:
            oprot.writeFieldBegin('parentTreeId', TType.I64, 2)
            oprot.writeI64(self.parentTreeId)
            oprot.writeFieldEnd()
        if self.treeId is not None:
            oprot.writeFieldBegin('treeId', TType.I64, 3)
            oprot.writeI64(self.treeId)
            oprot.writeFieldEnd()
        if self.treeAttr is not None:
            oprot.writeFieldBegin('treeAttr', TType.I32, 4)
            oprot.writeI32(self.treeAttr)
            oprot.writeFieldEnd()
        if self.treeMeta is not None:
            oprot.writeFieldBegin('treeMeta', TType.STRING, 5)
            oprot.writeString(self.treeMeta.encode('utf-8') if sys.version_info[0] == 2 else self.treeMeta)
            oprot.writeFieldEnd()
        if self.treeStore is not None:
            oprot.writeFieldBegin('treeStore', TType.STRUCT, 6)
            self.treeStore.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFileInfo(object):
    """
    Attributes:
     - treeId
     - fileId
     - fileSize
     - fileAttr
     - fileName
     - fileMeta
     - fileStore

    """


    def __init__(self, treeId=None, fileId=None, fileSize=None, fileAttr=None, fileName=None, fileMeta=None, fileStore=None,):
        self.treeId = treeId
        self.fileId = fileId
        self.fileSize = fileSize
        self.fileAttr = fileAttr
        self.fileName = fileName
        self.fileMeta = fileMeta
        self.fileStore = fileStore

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.treeId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fileId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fileSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.fileAttr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fileMeta = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.fileStore = ncDeviceInfo()
                    self.fileStore.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFileInfo')
        if self.treeId is not None:
            oprot.writeFieldBegin('treeId', TType.I64, 1)
            oprot.writeI64(self.treeId)
            oprot.writeFieldEnd()
        if self.fileId is not None:
            oprot.writeFieldBegin('fileId', TType.I64, 2)
            oprot.writeI64(self.fileId)
            oprot.writeFieldEnd()
        if self.fileSize is not None:
            oprot.writeFieldBegin('fileSize', TType.I32, 3)
            oprot.writeI32(self.fileSize)
            oprot.writeFieldEnd()
        if self.fileAttr is not None:
            oprot.writeFieldBegin('fileAttr', TType.I32, 4)
            oprot.writeI32(self.fileAttr)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 5)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.fileMeta is not None:
            oprot.writeFieldBegin('fileMeta', TType.STRING, 6)
            oprot.writeString(self.fileMeta.encode('utf-8') if sys.version_info[0] == 2 else self.fileMeta)
            oprot.writeFieldEnd()
        if self.fileStore is not None:
            oprot.writeFieldBegin('fileStore', TType.STRUCT, 7)
            self.fileStore.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBlockInfo(object):
    """
    Attributes:
     - fileId
     - blockId
     - blockLength
     - blockOffset
     - chunkID

    """


    def __init__(self, fileId=None, blockId=None, blockLength=None, blockOffset=None, chunkID=None,):
        self.fileId = fileId
        self.blockId = blockId
        self.blockLength = blockLength
        self.blockOffset = blockOffset
        self.chunkID = chunkID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fileId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.blockLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.blockOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.chunkID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBlockInfo')
        if self.fileId is not None:
            oprot.writeFieldBegin('fileId', TType.I64, 1)
            oprot.writeI64(self.fileId)
            oprot.writeFieldEnd()
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 2)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        if self.blockLength is not None:
            oprot.writeFieldBegin('blockLength', TType.I32, 3)
            oprot.writeI32(self.blockLength)
            oprot.writeFieldEnd()
        if self.blockOffset is not None:
            oprot.writeFieldBegin('blockOffset', TType.I64, 4)
            oprot.writeI64(self.blockOffset)
            oprot.writeFieldEnd()
        if self.chunkID is not None:
            oprot.writeFieldBegin('chunkID', TType.I64, 5)
            oprot.writeI64(self.chunkID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncIdInfo(object):
    """
    Attributes:
     - nextId

    """


    def __init__(self, nextId=None,):
        self.nextId = nextId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nextId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncIdInfo')
        if self.nextId is not None:
            oprot.writeFieldBegin('nextId', TType.I64, 1)
            oprot.writeI64(self.nextId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTaskInfoRequest(object):
    """
    任务信息请求信息

    Attributes:
     - requestId
     - uuid
     - index
     - limit
     - needMetadata
     - hasTimepoint
     - sort

    """


    def __init__(self, requestId=None, uuid=None, index=0, limit=100, needMetadata=False, hasTimepoint=False, sort=0,):
        self.requestId = requestId
        self.uuid = uuid
        self.index = index
        self.limit = limit
        self.needMetadata = needMetadata
        self.hasTimepoint = hasTimepoint
        self.sort = sort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.hasTimepoint = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTaskInfoRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 3)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 5)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.hasTimepoint is not None:
            oprot.writeFieldBegin('hasTimepoint', TType.BOOL, 6)
            oprot.writeBool(self.hasTimepoint)
            oprot.writeFieldEnd()
        if self.sort is not None:
            oprot.writeFieldBegin('sort', TType.I32, 7)
            oprot.writeI32(self.sort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTaskInfoSet(object):
    """
    任务信息返回包

    Attributes:
     - finished
     - requestId
     - data
     - totalNum

    """


    def __init__(self, finished=None, requestId=None, data=None, totalNum=None,):
        self.finished = finished
        self.requestId = requestId
        self.data = data
        self.totalNum = totalNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = ncTaskInfo()
                        _elem40.read(iprot)
                        self.data.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTaskInfoSet')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 1)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter41 in self.data:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 4)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointRequest(object):
    """
    任务信息请求信息

    Attributes:
     - requestId
     - uuid
     - cid
     - index
     - limit
     - needMetadata
     - sort

    """


    def __init__(self, requestId=None, uuid=None, cid=None, index=0, limit=100, needMetadata=False, sort=0,):
        self.requestId = requestId
        self.uuid = uuid
        self.cid = cid
        self.index = index
        self.limit = limit
        self.needMetadata = needMetadata
        self.sort = sort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 4)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 5)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 6)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.sort is not None:
            oprot.writeFieldBegin('sort', TType.I32, 7)
            oprot.writeI32(self.sort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimepointInfoSet(object):
    """
    时间点信息返回包

    Attributes:
     - finished
     - requestId
     - data
     - totalNum

    """


    def __init__(self, finished=None, requestId=None, data=None, totalNum=None,):
        self.finished = finished
        self.requestId = requestId
        self.data = data
        self.totalNum = totalNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = ncTimepointInfo()
                        _elem47.read(iprot)
                        self.data.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimepointInfoSet')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 1)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter48 in self.data:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 4)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNTCapacityInfo(object):
    """
    Attributes:
     - user
     - uuid
     - capacity

    """


    def __init__(self, user=None, uuid=None, capacity=None,):
        self.user = user
        self.uuid = uuid
        self.capacity = capacity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNTCapacityInfo')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 1)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 3)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNTCapacityInfoSet(object):
    """
    容量信息返回包

    Attributes:
     - finished
     - requestId
     - data

    """


    def __init__(self, finished=None, requestId=None, data=None,):
        self.finished = finished
        self.requestId = requestId
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = ncNTCapacityInfo()
                        _elem54.read(iprot)
                        self.data.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNTCapacityInfoSet')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 1)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter55 in self.data:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncNodeInfo)
ncNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ManageIP', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'StorageIP', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'DataIP', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(ncDeviceInfo)
ncDeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'PoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'DeviceUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncPoolInfo)
ncPoolInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Uuid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'TotalSize', None, None, ),  # 2
    (3, TType.I64, 'UsedSize', None, None, ),  # 3
    (4, TType.I32, 'Count', None, None, ),  # 4
    (5, TType.STRING, 'IP', 'UTF8', None, ),  # 5
)
all_structs.append(ncTaskInfo)
ncTaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskUser', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'taskUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'taskName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'taskMeta', 'UTF8', None, ),  # 4
    (5, TType.I32, 'timepointCount', None, None, ),  # 5
    (6, TType.I64, 'taskVersion', None, None, ),  # 6
)
all_structs.append(ncStoreInfo)
ncStoreInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'poolUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'lunUuid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
)
all_structs.append(ncTimepointInfo)
ncTimepointInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskUser', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'taskUuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timepoint', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'metadata', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'treeStore', [ncStoreInfo, None], None, ),  # 6
    (7, TType.LIST, 'fileStores', (TType.STRUCT, [ncStoreInfo, None], False), None, ),  # 7
    (8, TType.LIST, 'contentStores', (TType.STRUCT, [ncStoreInfo, None], False), None, ),  # 8
)
all_structs.append(ncTreeInfo)
ncTreeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'treeName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'parentTreeId', None, None, ),  # 2
    (3, TType.I64, 'treeId', None, None, ),  # 3
    (4, TType.I32, 'treeAttr', None, None, ),  # 4
    (5, TType.STRING, 'treeMeta', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'treeStore', [ncDeviceInfo, None], None, ),  # 6
)
all_structs.append(ncFileInfo)
ncFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'treeId', None, None, ),  # 1
    (2, TType.I64, 'fileId', None, None, ),  # 2
    (3, TType.I32, 'fileSize', None, None, ),  # 3
    (4, TType.I32, 'fileAttr', None, None, ),  # 4
    (5, TType.STRING, 'fileName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'fileMeta', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'fileStore', [ncDeviceInfo, None], None, ),  # 7
)
all_structs.append(ncBlockInfo)
ncBlockInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fileId', None, None, ),  # 1
    (2, TType.I64, 'blockId', None, None, ),  # 2
    (3, TType.I32, 'blockLength', None, None, ),  # 3
    (4, TType.I64, 'blockOffset', None, None, ),  # 4
    (5, TType.I64, 'chunkID', None, None, ),  # 5
)
all_structs.append(ncIdInfo)
ncIdInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nextId', None, None, ),  # 1
)
all_structs.append(ncTaskInfoRequest)
ncTaskInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'index', None, 0, ),  # 3
    (4, TType.I32, 'limit', None, 100, ),  # 4
    (5, TType.BOOL, 'needMetadata', None, False, ),  # 5
    (6, TType.BOOL, 'hasTimepoint', None, False, ),  # 6
    (7, TType.I32, 'sort', None, 0, ),  # 7
)
all_structs.append(ncTaskInfoSet)
ncTaskInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'finished', None, None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'data', (TType.STRUCT, [ncTaskInfo, None], False), None, ),  # 3
    (4, TType.I64, 'totalNum', None, None, ),  # 4
)
all_structs.append(ncTimepointRequest)
ncTimepointRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
    (4, TType.I64, 'index', None, 0, ),  # 4
    (5, TType.I32, 'limit', None, 100, ),  # 5
    (6, TType.BOOL, 'needMetadata', None, False, ),  # 6
    (7, TType.I32, 'sort', None, 0, ),  # 7
)
all_structs.append(ncTimepointInfoSet)
ncTimepointInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'finished', None, None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'data', (TType.STRUCT, [ncTimepointInfo, None], False), None, ),  # 3
    (4, TType.I32, 'totalNum', None, None, ),  # 4
)
all_structs.append(ncNTCapacityInfo)
ncNTCapacityInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'capacity', None, None, ),  # 3
)
all_structs.append(ncNTCapacityInfoSet)
ncNTCapacityInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'finished', None, None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'data', (TType.STRUCT, [ncNTCapacityInfo, None], False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
