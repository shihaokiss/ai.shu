# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncEEFComm_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncJobStatus(object):
    NOT_RUNNING = 1
    RUNNING = 4
    STOPPED = 16
    SUCCEED = 32
    FAILED = 64
    STOPPING = 512

    _VALUES_TO_NAMES = {
        1: "NOT_RUNNING",
        4: "RUNNING",
        16: "STOPPED",
        32: "SUCCEED",
        64: "FAILED",
        512: "STOPPING",
    }

    _NAMES_TO_VALUES = {
        "NOT_RUNNING": 1,
        "RUNNING": 4,
        "STOPPED": 16,
        "SUCCEED": 32,
        "FAILED": 64,
        "STOPPING": 512,
    }


class ncTJob(object):
    """
    BS通用的对外返回的任务信息(如果需要对外返回一个任务, 返回这个即可)

    按理来说, 取名为 ncJobResponse 比较合适, 但这是历史原因了, 不深究.


    Attributes:
     - jobId
     - jobName
     - type
     - isBackup
     - isDeleted
     - status
     - destClientId
     - completedData
     - userId
     - clientId
     - createTime
     - updateTime
     - engineType
     - storageId
     - databaseRunUsername
     - lstartTime
     - nstartTime
     - nextBackupType
     - relatedId
     - platformId
     - auther
     - planId
     - backupMedia
     - contentcloud_resource_id
     - cloudStorageName

    """


    def __init__(self, jobId=None, jobName=None, type=None, isBackup=1, isDeleted=0, status=None, destClientId=None, completedData=None, userId=None, clientId=None, createTime=None, updateTime=None, engineType=None, storageId=None, databaseRunUsername=None, lstartTime=None, nstartTime=None, nextBackupType=None, relatedId=None, platformId=None, auther=None, planId=None, backupMedia=None, contentcloud_resource_id=None, cloudStorageName=None,):
        self.jobId = jobId
        self.jobName = jobName
        self.type = type
        self.isBackup = isBackup
        self.isDeleted = isDeleted
        self.status = status
        self.destClientId = destClientId
        self.completedData = completedData
        self.userId = userId
        self.clientId = clientId
        self.createTime = createTime
        self.updateTime = updateTime
        self.engineType = engineType
        self.storageId = storageId
        self.databaseRunUsername = databaseRunUsername
        self.lstartTime = lstartTime
        self.nstartTime = nstartTime
        self.nextBackupType = nextBackupType
        self.relatedId = relatedId
        self.platformId = platformId
        self.auther = auther
        self.planId = planId
        self.backupMedia = backupMedia
        self.contentcloud_resource_id = contentcloud_resource_id
        self.cloudStorageName = cloudStorageName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.isBackup = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.isDeleted = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.destClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.completedData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.updateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.storageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.databaseRunUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.lstartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.nstartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.nextBackupType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.relatedId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.auther = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.planId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.backupMedia = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.contentcloud_resource_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.cloudStorageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTJob')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 2)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.isBackup is not None:
            oprot.writeFieldBegin('isBackup', TType.I32, 4)
            oprot.writeI32(self.isBackup)
            oprot.writeFieldEnd()
        if self.isDeleted is not None:
            oprot.writeFieldBegin('isDeleted', TType.I32, 5)
            oprot.writeI32(self.isDeleted)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.destClientId is not None:
            oprot.writeFieldBegin('destClientId', TType.STRING, 7)
            oprot.writeString(self.destClientId.encode('utf-8') if sys.version_info[0] == 2 else self.destClientId)
            oprot.writeFieldEnd()
        if self.completedData is not None:
            oprot.writeFieldBegin('completedData', TType.STRING, 8)
            oprot.writeString(self.completedData.encode('utf-8') if sys.version_info[0] == 2 else self.completedData)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 9)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 10)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 11)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.I64, 12)
            oprot.writeI64(self.updateTime)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 13)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.storageId is not None:
            oprot.writeFieldBegin('storageId', TType.STRING, 14)
            oprot.writeString(self.storageId.encode('utf-8') if sys.version_info[0] == 2 else self.storageId)
            oprot.writeFieldEnd()
        if self.databaseRunUsername is not None:
            oprot.writeFieldBegin('databaseRunUsername', TType.STRING, 15)
            oprot.writeString(self.databaseRunUsername.encode('utf-8') if sys.version_info[0] == 2 else self.databaseRunUsername)
            oprot.writeFieldEnd()
        if self.lstartTime is not None:
            oprot.writeFieldBegin('lstartTime', TType.I64, 16)
            oprot.writeI64(self.lstartTime)
            oprot.writeFieldEnd()
        if self.nstartTime is not None:
            oprot.writeFieldBegin('nstartTime', TType.I64, 17)
            oprot.writeI64(self.nstartTime)
            oprot.writeFieldEnd()
        if self.nextBackupType is not None:
            oprot.writeFieldBegin('nextBackupType', TType.I32, 18)
            oprot.writeI32(self.nextBackupType)
            oprot.writeFieldEnd()
        if self.relatedId is not None:
            oprot.writeFieldBegin('relatedId', TType.STRING, 19)
            oprot.writeString(self.relatedId.encode('utf-8') if sys.version_info[0] == 2 else self.relatedId)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 20)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.auther is not None:
            oprot.writeFieldBegin('auther', TType.STRING, 21)
            oprot.writeString(self.auther.encode('utf-8') if sys.version_info[0] == 2 else self.auther)
            oprot.writeFieldEnd()
        if self.planId is not None:
            oprot.writeFieldBegin('planId', TType.STRING, 22)
            oprot.writeString(self.planId.encode('utf-8') if sys.version_info[0] == 2 else self.planId)
            oprot.writeFieldEnd()
        if self.backupMedia is not None:
            oprot.writeFieldBegin('backupMedia', TType.STRING, 23)
            oprot.writeString(self.backupMedia.encode('utf-8') if sys.version_info[0] == 2 else self.backupMedia)
            oprot.writeFieldEnd()
        if self.contentcloud_resource_id is not None:
            oprot.writeFieldBegin('contentcloud_resource_id', TType.STRING, 24)
            oprot.writeString(self.contentcloud_resource_id.encode('utf-8') if sys.version_info[0] == 2 else self.contentcloud_resource_id)
            oprot.writeFieldEnd()
        if self.cloudStorageName is not None:
            oprot.writeFieldBegin('cloudStorageName', TType.STRING, 25)
            oprot.writeString(self.cloudStorageName.encode('utf-8') if sys.version_info[0] == 2 else self.cloudStorageName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jobId is None:
            raise TProtocolException(message='Required field jobId is unset!')
        if self.jobName is None:
            raise TProtocolException(message='Required field jobName is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.isBackup is None:
            raise TProtocolException(message='Required field isBackup is unset!')
        if self.isDeleted is None:
            raise TProtocolException(message='Required field isDeleted is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.createTime is None:
            raise TProtocolException(message='Required field createTime is unset!')
        if self.updateTime is None:
            raise TProtocolException(message='Required field updateTime is unset!')
        if self.engineType is None:
            raise TProtocolException(message='Required field engineType is unset!')
        if self.storageId is None:
            raise TProtocolException(message='Required field storageId is unset!')
        if self.databaseRunUsername is None:
            raise TProtocolException(message='Required field databaseRunUsername is unset!')
        if self.lstartTime is None:
            raise TProtocolException(message='Required field lstartTime is unset!')
        if self.nstartTime is None:
            raise TProtocolException(message='Required field nstartTime is unset!')
        if self.nextBackupType is None:
            raise TProtocolException(message='Required field nextBackupType is unset!')
        if self.relatedId is None:
            raise TProtocolException(message='Required field relatedId is unset!')
        if self.platformId is None:
            raise TProtocolException(message='Required field platformId is unset!')
        if self.auther is None:
            raise TProtocolException(message='Required field auther is unset!')
        if self.planId is None:
            raise TProtocolException(message='Required field planId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDBJobInstanceRequest(object):
    """
    Attributes:
     - client_id
     - instance_name

    """


    def __init__(self, client_id=None, instance_name=None,):
        self.client_id = client_id
        self.instance_name = instance_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.instance_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBJobInstanceRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.instance_name is not None:
            oprot.writeFieldBegin('instance_name', TType.STRING, 2)
            oprot.writeString(self.instance_name.encode('utf-8') if sys.version_info[0] == 2 else self.instance_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_id is None:
            raise TProtocolException(message='Required field client_id is unset!')
        if self.instance_name is None:
            raise TProtocolException(message='Required field instance_name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDBJobInstance(object):
    """
    Attributes:
     - job_id
     - job_name
     - instance_name

    """


    def __init__(self, job_id=None, job_name=None, instance_name=None,):
        self.job_id = job_id
        self.job_name = job_name
        self.instance_name = instance_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.instance_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBJobInstance')
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 1)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.job_name is not None:
            oprot.writeFieldBegin('job_name', TType.STRING, 2)
            oprot.writeString(self.job_name.encode('utf-8') if sys.version_info[0] == 2 else self.job_name)
            oprot.writeFieldEnd()
        if self.instance_name is not None:
            oprot.writeFieldBegin('instance_name', TType.STRING, 3)
            oprot.writeString(self.instance_name.encode('utf-8') if sys.version_info[0] == 2 else self.instance_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.job_id is None:
            raise TProtocolException(message='Required field job_id is unset!')
        if self.job_name is None:
            raise TProtocolException(message='Required field job_name is unset!')
        if self.instance_name is None:
            raise TProtocolException(message='Required field instance_name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncASDatasourceMappingRequest(object):
    """
    见表ASJobDatasourceMapping

    Attributes:
     - client_id
     - datasource
     - exclude_job_ids

    """


    def __init__(self, client_id=None, datasource=None, exclude_job_ids=None,):
        self.client_id = client_id
        self.datasource = datasource
        self.exclude_job_ids = exclude_job_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.datasource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.exclude_job_ids = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exclude_job_ids.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncASDatasourceMappingRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.datasource is not None:
            oprot.writeFieldBegin('datasource', TType.STRING, 2)
            oprot.writeString(self.datasource.encode('utf-8') if sys.version_info[0] == 2 else self.datasource)
            oprot.writeFieldEnd()
        if self.exclude_job_ids is not None:
            oprot.writeFieldBegin('exclude_job_ids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.exclude_job_ids))
            for iter6 in self.exclude_job_ids:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_id is None:
            raise TProtocolException(message='Required field client_id is unset!')
        if self.datasource is None:
            raise TProtocolException(message='Required field datasource is unset!')
        if self.exclude_job_ids is None:
            raise TProtocolException(message='Required field exclude_job_ids is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncASDatasourceMappingResponse(object):
    """
    见表ASJobDatasourceMapping

    Attributes:
     - job_name

    """


    def __init__(self, job_name=None,):
        self.job_name = job_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.job_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncASDatasourceMappingResponse')
        if self.job_name is not None:
            oprot.writeFieldBegin('job_name', TType.STRING, 1)
            oprot.writeString(self.job_name.encode('utf-8') if sys.version_info[0] == 2 else self.job_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.job_name is None:
            raise TProtocolException(message='Required field job_name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRelatedJob(object):
    """
    Attributes:
     - jobId
     - jobName
     - type
     - userId

    """


    def __init__(self, jobId=None, jobName=None, type=None, userId=None,):
        self.jobId = jobId
        self.jobName = jobName
        self.type = type
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRelatedJob')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 2)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 4)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jobId is None:
            raise TProtocolException(message='Required field jobId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncJobFilterRequest(object):
    """
    向BS获取任务(根据一组特定的筛选参数)

    Attributes:
     - client_id
     - type
     - user_id
     - job_id
     - src_client_ids
     - v_platform_ids
     - storage_id
     - ccloud_ids
     - app_sys_ids
     - index
     - count

    """


    def __init__(self, client_id=None, type=None, user_id=None, job_id=None, src_client_ids=None, v_platform_ids=None, storage_id=None, ccloud_ids=None, app_sys_ids=None, index=0, count=15,):
        self.client_id = client_id
        self.type = type
        self.user_id = user_id
        self.job_id = job_id
        self.src_client_ids = src_client_ids
        self.v_platform_ids = v_platform_ids
        self.storage_id = storage_id
        self.ccloud_ids = ccloud_ids
        self.app_sys_ids = app_sys_ids
        self.index = index
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.user_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.src_client_ids = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.src_client_ids.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.v_platform_ids = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.v_platform_ids.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.storage_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ccloud_ids = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ccloud_ids.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.app_sys_ids = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.app_sys_ids.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.index = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncJobFilterRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.STRING, 3)
            oprot.writeString(self.user_id.encode('utf-8') if sys.version_info[0] == 2 else self.user_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 4)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.src_client_ids is not None:
            oprot.writeFieldBegin('src_client_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.src_client_ids))
            for iter31 in self.src_client_ids:
                oprot.writeString(iter31.encode('utf-8') if sys.version_info[0] == 2 else iter31)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.v_platform_ids is not None:
            oprot.writeFieldBegin('v_platform_ids', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.v_platform_ids))
            for iter32 in self.v_platform_ids:
                oprot.writeString(iter32.encode('utf-8') if sys.version_info[0] == 2 else iter32)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.storage_id is not None:
            oprot.writeFieldBegin('storage_id', TType.STRING, 7)
            oprot.writeString(self.storage_id.encode('utf-8') if sys.version_info[0] == 2 else self.storage_id)
            oprot.writeFieldEnd()
        if self.ccloud_ids is not None:
            oprot.writeFieldBegin('ccloud_ids', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.ccloud_ids))
            for iter33 in self.ccloud_ids:
                oprot.writeString(iter33.encode('utf-8') if sys.version_info[0] == 2 else iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.app_sys_ids is not None:
            oprot.writeFieldBegin('app_sys_ids', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.app_sys_ids))
            for iter34 in self.app_sys_ids:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I16, 10)
            oprot.writeI16(self.index)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I16, 11)
            oprot.writeI16(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncUpdateJobRequest(object):
    """
    Attributes:
     - plan_id
     - lstart_time
     - nstart_time
     - next_backup_type
     - client_id
     - src_client_ip
     - dest_client_ip
     - virtual_platform_ip

    """


    def __init__(self, plan_id=None, lstart_time=None, nstart_time=None, next_backup_type=None, client_id=None, src_client_ip=None, dest_client_ip=None, virtual_platform_ip=None,):
        self.plan_id = plan_id
        self.lstart_time = lstart_time
        self.nstart_time = nstart_time
        self.next_backup_type = next_backup_type
        self.client_id = client_id
        self.src_client_ip = src_client_ip
        self.dest_client_ip = dest_client_ip
        self.virtual_platform_ip = virtual_platform_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.plan_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lstart_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.nstart_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.next_backup_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.src_client_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.dest_client_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.virtual_platform_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUpdateJobRequest')
        if self.plan_id is not None:
            oprot.writeFieldBegin('plan_id', TType.STRING, 1)
            oprot.writeString(self.plan_id.encode('utf-8') if sys.version_info[0] == 2 else self.plan_id)
            oprot.writeFieldEnd()
        if self.lstart_time is not None:
            oprot.writeFieldBegin('lstart_time', TType.I64, 2)
            oprot.writeI64(self.lstart_time)
            oprot.writeFieldEnd()
        if self.nstart_time is not None:
            oprot.writeFieldBegin('nstart_time', TType.I64, 3)
            oprot.writeI64(self.nstart_time)
            oprot.writeFieldEnd()
        if self.next_backup_type is not None:
            oprot.writeFieldBegin('next_backup_type', TType.I32, 4)
            oprot.writeI32(self.next_backup_type)
            oprot.writeFieldEnd()
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 5)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.src_client_ip is not None:
            oprot.writeFieldBegin('src_client_ip', TType.STRING, 6)
            oprot.writeString(self.src_client_ip.encode('utf-8') if sys.version_info[0] == 2 else self.src_client_ip)
            oprot.writeFieldEnd()
        if self.dest_client_ip is not None:
            oprot.writeFieldBegin('dest_client_ip', TType.STRING, 7)
            oprot.writeString(self.dest_client_ip.encode('utf-8') if sys.version_info[0] == 2 else self.dest_client_ip)
            oprot.writeFieldEnd()
        if self.virtual_platform_ip is not None:
            oprot.writeFieldBegin('virtual_platform_ip', TType.STRING, 8)
            oprot.writeString(self.virtual_platform_ip.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_platform_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFilterUpdateRequest(object):
    """
    Attributes:
     - filter_obj
     - update_obj

    """


    def __init__(self, filter_obj=None, update_obj=None,):
        self.filter_obj = filter_obj
        self.update_obj = update_obj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.filter_obj = ncJobFilterRequest()
                    self.filter_obj.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.update_obj = ncUpdateJobRequest()
                    self.update_obj.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFilterUpdateRequest')
        if self.filter_obj is not None:
            oprot.writeFieldBegin('filter_obj', TType.STRUCT, 1)
            self.filter_obj.write(oprot)
            oprot.writeFieldEnd()
        if self.update_obj is not None:
            oprot.writeFieldBegin('update_obj', TType.STRUCT, 2)
            self.update_obj.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.filter_obj is None:
            raise TProtocolException(message='Required field filter_obj is unset!')
        if self.update_obj is None:
            raise TProtocolException(message='Required field update_obj is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncUpdateDatasourceRequest(object):
    """
    Attributes:
     - client_id
     - job_type
     - is_deleted
     - is_backup
     - new_client_name

    """


    def __init__(self, client_id=None, job_type=None, is_deleted=False, is_backup=True, new_client_name=None,):
        self.client_id = client_id
        self.job_type = job_type
        self.is_deleted = is_deleted
        self.is_backup = is_backup
        self.new_client_name = new_client_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_deleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_backup = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.new_client_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUpdateDatasourceRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.job_type is not None:
            oprot.writeFieldBegin('job_type', TType.STRING, 2)
            oprot.writeString(self.job_type.encode('utf-8') if sys.version_info[0] == 2 else self.job_type)
            oprot.writeFieldEnd()
        if self.is_deleted is not None:
            oprot.writeFieldBegin('is_deleted', TType.BOOL, 3)
            oprot.writeBool(self.is_deleted)
            oprot.writeFieldEnd()
        if self.is_backup is not None:
            oprot.writeFieldBegin('is_backup', TType.BOOL, 4)
            oprot.writeBool(self.is_backup)
            oprot.writeFieldEnd()
        if self.new_client_name is not None:
            oprot.writeFieldBegin('new_client_name', TType.STRING, 5)
            oprot.writeString(self.new_client_name.encode('utf-8') if sys.version_info[0] == 2 else self.new_client_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_id is None:
            raise TProtocolException(message='Required field client_id is unset!')
        if self.job_type is None:
            raise TProtocolException(message='Required field job_type is unset!')
        if self.is_deleted is None:
            raise TProtocolException(message='Required field is_deleted is unset!')
        if self.is_backup is None:
            raise TProtocolException(message='Required field is_backup is unset!')
        if self.new_client_name is None:
            raise TProtocolException(message='Required field new_client_name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBackupSvcDataSourceRequest(object):
    """
    Attributes:
     - client_id
     - is_backup
     - pure_full_paths
     - job_type
     - is_deleted
     - use_contains
     - use_startswith
     - database_run_username
     - fuzzy_full_paths

    """


    def __init__(self, client_id=None, is_backup=True, pure_full_paths=None, job_type=None, is_deleted=False, use_contains=False, use_startswith=False, database_run_username=None, fuzzy_full_paths=None,):
        self.client_id = client_id
        self.is_backup = is_backup
        self.pure_full_paths = pure_full_paths
        self.job_type = job_type
        self.is_deleted = is_deleted
        self.use_contains = use_contains
        self.use_startswith = use_startswith
        self.database_run_username = database_run_username
        self.fuzzy_full_paths = fuzzy_full_paths

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_backup = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.pure_full_paths = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.pure_full_paths.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.job_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_deleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.use_contains = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.use_startswith = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.database_run_username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.fuzzy_full_paths = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.fuzzy_full_paths.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBackupSvcDataSourceRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.is_backup is not None:
            oprot.writeFieldBegin('is_backup', TType.BOOL, 2)
            oprot.writeBool(self.is_backup)
            oprot.writeFieldEnd()
        if self.pure_full_paths is not None:
            oprot.writeFieldBegin('pure_full_paths', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.pure_full_paths))
            for iter47 in self.pure_full_paths:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.job_type is not None:
            oprot.writeFieldBegin('job_type', TType.STRING, 4)
            oprot.writeString(self.job_type.encode('utf-8') if sys.version_info[0] == 2 else self.job_type)
            oprot.writeFieldEnd()
        if self.is_deleted is not None:
            oprot.writeFieldBegin('is_deleted', TType.BOOL, 5)
            oprot.writeBool(self.is_deleted)
            oprot.writeFieldEnd()
        if self.use_contains is not None:
            oprot.writeFieldBegin('use_contains', TType.BOOL, 6)
            oprot.writeBool(self.use_contains)
            oprot.writeFieldEnd()
        if self.use_startswith is not None:
            oprot.writeFieldBegin('use_startswith', TType.BOOL, 7)
            oprot.writeBool(self.use_startswith)
            oprot.writeFieldEnd()
        if self.database_run_username is not None:
            oprot.writeFieldBegin('database_run_username', TType.STRING, 8)
            oprot.writeString(self.database_run_username.encode('utf-8') if sys.version_info[0] == 2 else self.database_run_username)
            oprot.writeFieldEnd()
        if self.fuzzy_full_paths is not None:
            oprot.writeFieldBegin('fuzzy_full_paths', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.fuzzy_full_paths))
            for iter48 in self.fuzzy_full_paths:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_id is None:
            raise TProtocolException(message='Required field client_id is unset!')
        if self.is_backup is None:
            raise TProtocolException(message='Required field is_backup is unset!')
        if self.pure_full_paths is None:
            raise TProtocolException(message='Required field pure_full_paths is unset!')
        if self.job_type is None:
            raise TProtocolException(message='Required field job_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncKmsKeyMaterial(object):
    """
    Attributes:
     - length
     - KeyMaterial

    """


    def __init__(self, length=None, KeyMaterial=None,):
        self.length = length
        self.KeyMaterial = KeyMaterial

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.KeyMaterial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncKmsKeyMaterial')
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 1)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.KeyMaterial is not None:
            oprot.writeFieldBegin('KeyMaterial', TType.STRING, 2)
            oprot.writeString(self.KeyMaterial.encode('utf-8') if sys.version_info[0] == 2 else self.KeyMaterial)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBackupJob(object):
    """
    Attributes:
     - jobVplatformId
     - jobPlanId
     - jobDesc
     - hasSches
     - jobSrcClient
     - jobId
     - jobDestClientId
     - jobType
     - jobUsername
     - jobDatabaseRunUsername
     - jobStatus
     - jobNextStartTime
     - jobCreatedTime
     - jobUserId
     - jobEngineType
     - jobNextBackupType
     - jobStorageType
     - jobDestClient
     - jobLastStartTime
     - jobName
     - jobClientId
     - jobUpdateTime

    """


    def __init__(self, jobVplatformId=None, jobPlanId=None, jobDesc=None, hasSches=None, jobSrcClient=None, jobId=None, jobDestClientId=None, jobType=None, jobUsername=None, jobDatabaseRunUsername=None, jobStatus=None, jobNextStartTime=None, jobCreatedTime=None, jobUserId=None, jobEngineType=None, jobNextBackupType=None, jobStorageType=None, jobDestClient=None, jobLastStartTime=None, jobName=None, jobClientId=None, jobUpdateTime=None,):
        self.jobVplatformId = jobVplatformId
        self.jobPlanId = jobPlanId
        self.jobDesc = jobDesc
        self.hasSches = hasSches
        self.jobSrcClient = jobSrcClient
        self.jobId = jobId
        self.jobDestClientId = jobDestClientId
        self.jobType = jobType
        self.jobUsername = jobUsername
        self.jobDatabaseRunUsername = jobDatabaseRunUsername
        self.jobStatus = jobStatus
        self.jobNextStartTime = jobNextStartTime
        self.jobCreatedTime = jobCreatedTime
        self.jobUserId = jobUserId
        self.jobEngineType = jobEngineType
        self.jobNextBackupType = jobNextBackupType
        self.jobStorageType = jobStorageType
        self.jobDestClient = jobDestClient
        self.jobLastStartTime = jobLastStartTime
        self.jobName = jobName
        self.jobClientId = jobClientId
        self.jobUpdateTime = jobUpdateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobVplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobPlanId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hasSches = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.jobSrcClient = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.jobDestClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.jobUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.jobDatabaseRunUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.jobStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.jobNextStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.jobCreatedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.jobUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.jobEngineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.jobNextBackupType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.jobStorageType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.jobDestClient = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.jobLastStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.jobClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I64:
                    self.jobUpdateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBackupJob')
        if self.jobVplatformId is not None:
            oprot.writeFieldBegin('jobVplatformId', TType.STRING, 1)
            oprot.writeString(self.jobVplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.jobVplatformId)
            oprot.writeFieldEnd()
        if self.jobPlanId is not None:
            oprot.writeFieldBegin('jobPlanId', TType.STRING, 2)
            oprot.writeString(self.jobPlanId.encode('utf-8') if sys.version_info[0] == 2 else self.jobPlanId)
            oprot.writeFieldEnd()
        if self.jobDesc is not None:
            oprot.writeFieldBegin('jobDesc', TType.STRING, 3)
            oprot.writeString(self.jobDesc.encode('utf-8') if sys.version_info[0] == 2 else self.jobDesc)
            oprot.writeFieldEnd()
        if self.hasSches is not None:
            oprot.writeFieldBegin('hasSches', TType.BOOL, 4)
            oprot.writeBool(self.hasSches)
            oprot.writeFieldEnd()
        if self.jobSrcClient is not None:
            oprot.writeFieldBegin('jobSrcClient', TType.STRING, 5)
            oprot.writeString(self.jobSrcClient.encode('utf-8') if sys.version_info[0] == 2 else self.jobSrcClient)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 6)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobDestClientId is not None:
            oprot.writeFieldBegin('jobDestClientId', TType.STRING, 7)
            oprot.writeString(self.jobDestClientId.encode('utf-8') if sys.version_info[0] == 2 else self.jobDestClientId)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 8)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.jobUsername is not None:
            oprot.writeFieldBegin('jobUsername', TType.STRING, 9)
            oprot.writeString(self.jobUsername.encode('utf-8') if sys.version_info[0] == 2 else self.jobUsername)
            oprot.writeFieldEnd()
        if self.jobDatabaseRunUsername is not None:
            oprot.writeFieldBegin('jobDatabaseRunUsername', TType.STRING, 10)
            oprot.writeString(self.jobDatabaseRunUsername.encode('utf-8') if sys.version_info[0] == 2 else self.jobDatabaseRunUsername)
            oprot.writeFieldEnd()
        if self.jobStatus is not None:
            oprot.writeFieldBegin('jobStatus', TType.I32, 11)
            oprot.writeI32(self.jobStatus)
            oprot.writeFieldEnd()
        if self.jobNextStartTime is not None:
            oprot.writeFieldBegin('jobNextStartTime', TType.I64, 12)
            oprot.writeI64(self.jobNextStartTime)
            oprot.writeFieldEnd()
        if self.jobCreatedTime is not None:
            oprot.writeFieldBegin('jobCreatedTime', TType.I64, 13)
            oprot.writeI64(self.jobCreatedTime)
            oprot.writeFieldEnd()
        if self.jobUserId is not None:
            oprot.writeFieldBegin('jobUserId', TType.STRING, 14)
            oprot.writeString(self.jobUserId.encode('utf-8') if sys.version_info[0] == 2 else self.jobUserId)
            oprot.writeFieldEnd()
        if self.jobEngineType is not None:
            oprot.writeFieldBegin('jobEngineType', TType.I32, 15)
            oprot.writeI32(self.jobEngineType)
            oprot.writeFieldEnd()
        if self.jobNextBackupType is not None:
            oprot.writeFieldBegin('jobNextBackupType', TType.I32, 16)
            oprot.writeI32(self.jobNextBackupType)
            oprot.writeFieldEnd()
        if self.jobStorageType is not None:
            oprot.writeFieldBegin('jobStorageType', TType.I32, 17)
            oprot.writeI32(self.jobStorageType)
            oprot.writeFieldEnd()
        if self.jobDestClient is not None:
            oprot.writeFieldBegin('jobDestClient', TType.STRING, 18)
            oprot.writeString(self.jobDestClient.encode('utf-8') if sys.version_info[0] == 2 else self.jobDestClient)
            oprot.writeFieldEnd()
        if self.jobLastStartTime is not None:
            oprot.writeFieldBegin('jobLastStartTime', TType.I64, 19)
            oprot.writeI64(self.jobLastStartTime)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 20)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.jobClientId is not None:
            oprot.writeFieldBegin('jobClientId', TType.STRING, 21)
            oprot.writeString(self.jobClientId.encode('utf-8') if sys.version_info[0] == 2 else self.jobClientId)
            oprot.writeFieldEnd()
        if self.jobUpdateTime is not None:
            oprot.writeFieldBegin('jobUpdateTime', TType.I64, 22)
            oprot.writeI64(self.jobUpdateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBackupJobCountInfo(object):
    """
    Attributes:
     - failed
     - success
     - running

    """


    def __init__(self, failed=None, success=None, running=None,):
        self.failed = failed
        self.success = success
        self.running = running

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.failed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.running = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBackupJobCountInfo')
        if self.failed is not None:
            oprot.writeFieldBegin('failed', TType.I32, 1)
            oprot.writeI32(self.failed)
            oprot.writeFieldEnd()
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 2)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.running is not None:
            oprot.writeFieldBegin('running', TType.I32, 3)
            oprot.writeI32(self.running)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRemoteJobReq(object):
    """
    Attributes:
     - localClusterVip
     - localClusterId
     - jobIds
     - username

    """


    def __init__(self, localClusterVip=None, localClusterId=None, jobIds=None, username=None,):
        self.localClusterVip = localClusterVip
        self.localClusterId = localClusterId
        self.jobIds = jobIds
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.localClusterVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.localClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.jobIds = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.jobIds.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRemoteJobReq')
        if self.localClusterVip is not None:
            oprot.writeFieldBegin('localClusterVip', TType.STRING, 1)
            oprot.writeString(self.localClusterVip.encode('utf-8') if sys.version_info[0] == 2 else self.localClusterVip)
            oprot.writeFieldEnd()
        if self.localClusterId is not None:
            oprot.writeFieldBegin('localClusterId', TType.STRING, 2)
            oprot.writeString(self.localClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.localClusterId)
            oprot.writeFieldEnd()
        if self.jobIds is not None:
            oprot.writeFieldBegin('jobIds', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.jobIds))
            for iter55 in self.jobIds:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRemoteJobRes(object):
    """
    Attributes:
     - remoteJobId
     - remoteDatasourceId
     - destClusterId
     - destClusterVip
     - is_ceritify

    """


    def __init__(self, remoteJobId=None, remoteDatasourceId=None, destClusterId=None, destClusterVip=None, is_ceritify=None,):
        self.remoteJobId = remoteJobId
        self.remoteDatasourceId = remoteDatasourceId
        self.destClusterId = destClusterId
        self.destClusterVip = destClusterVip
        self.is_ceritify = is_ceritify

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.remoteJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.remoteDatasourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.destClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.destClusterVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_ceritify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRemoteJobRes')
        if self.remoteJobId is not None:
            oprot.writeFieldBegin('remoteJobId', TType.STRING, 1)
            oprot.writeString(self.remoteJobId.encode('utf-8') if sys.version_info[0] == 2 else self.remoteJobId)
            oprot.writeFieldEnd()
        if self.remoteDatasourceId is not None:
            oprot.writeFieldBegin('remoteDatasourceId', TType.STRING, 2)
            oprot.writeString(self.remoteDatasourceId.encode('utf-8') if sys.version_info[0] == 2 else self.remoteDatasourceId)
            oprot.writeFieldEnd()
        if self.destClusterId is not None:
            oprot.writeFieldBegin('destClusterId', TType.STRING, 3)
            oprot.writeString(self.destClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.destClusterId)
            oprot.writeFieldEnd()
        if self.destClusterVip is not None:
            oprot.writeFieldBegin('destClusterVip', TType.STRING, 4)
            oprot.writeString(self.destClusterVip.encode('utf-8') if sys.version_info[0] == 2 else self.destClusterVip)
            oprot.writeFieldEnd()
        if self.is_ceritify is not None:
            oprot.writeFieldBegin('is_ceritify', TType.BOOL, 5)
            oprot.writeBool(self.is_ceritify)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTJob)
ncTJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'isBackup', None, 1, ),  # 4
    (5, TType.I32, 'isDeleted', None, 0, ),  # 5
    (6, TType.I32, 'status', None, None, ),  # 6
    (7, TType.STRING, 'destClientId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'completedData', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'userId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'clientId', 'UTF8', None, ),  # 10
    (11, TType.I64, 'createTime', None, None, ),  # 11
    (12, TType.I64, 'updateTime', None, None, ),  # 12
    (13, TType.I32, 'engineType', None, None, ),  # 13
    (14, TType.STRING, 'storageId', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'databaseRunUsername', 'UTF8', None, ),  # 15
    (16, TType.I64, 'lstartTime', None, None, ),  # 16
    (17, TType.I64, 'nstartTime', None, None, ),  # 17
    (18, TType.I32, 'nextBackupType', None, None, ),  # 18
    (19, TType.STRING, 'relatedId', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'platformId', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'auther', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'planId', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'backupMedia', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'contentcloud_resource_id', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'cloudStorageName', 'UTF8', None, ),  # 25
)
all_structs.append(ncDBJobInstanceRequest)
ncDBJobInstanceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'instance_name', 'UTF8', None, ),  # 2
)
all_structs.append(ncDBJobInstance)
ncDBJobInstance.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'job_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'job_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'instance_name', 'UTF8', None, ),  # 3
)
all_structs.append(ncASDatasourceMappingRequest)
ncASDatasourceMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'datasource', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'exclude_job_ids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncASDatasourceMappingResponse)
ncASDatasourceMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'job_name', 'UTF8', None, ),  # 1
)
all_structs.append(ncRelatedJob)
ncRelatedJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userId', 'UTF8', None, ),  # 4
)
all_structs.append(ncJobFilterRequest)
ncJobFilterRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'user_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'job_id', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'src_client_ids', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'v_platform_ids', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'storage_id', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'ccloud_ids', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'app_sys_ids', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.I16, 'index', None, 0, ),  # 10
    (11, TType.I16, 'count', None, 15, ),  # 11
)
all_structs.append(ncUpdateJobRequest)
ncUpdateJobRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'plan_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'lstart_time', None, None, ),  # 2
    (3, TType.I64, 'nstart_time', None, None, ),  # 3
    (4, TType.I32, 'next_backup_type', None, None, ),  # 4
    (5, TType.STRING, 'client_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'src_client_ip', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'dest_client_ip', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'virtual_platform_ip', 'UTF8', None, ),  # 8
)
all_structs.append(ncFilterUpdateRequest)
ncFilterUpdateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'filter_obj', [ncJobFilterRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'update_obj', [ncUpdateJobRequest, None], None, ),  # 2
)
all_structs.append(ncUpdateDatasourceRequest)
ncUpdateDatasourceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'job_type', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'is_deleted', None, False, ),  # 3
    (4, TType.BOOL, 'is_backup', None, True, ),  # 4
    (5, TType.STRING, 'new_client_name', 'UTF8', None, ),  # 5
)
all_structs.append(ncBackupSvcDataSourceRequest)
ncBackupSvcDataSourceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'is_backup', None, True, ),  # 2
    (3, TType.LIST, 'pure_full_paths', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'job_type', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'is_deleted', None, False, ),  # 5
    (6, TType.BOOL, 'use_contains', None, False, ),  # 6
    (7, TType.BOOL, 'use_startswith', None, False, ),  # 7
    (8, TType.STRING, 'database_run_username', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'fuzzy_full_paths', (TType.STRING, 'UTF8', False), None, ),  # 9
)
all_structs.append(ncKmsKeyMaterial)
ncKmsKeyMaterial.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'length', None, None, ),  # 1
    (2, TType.STRING, 'KeyMaterial', 'UTF8', None, ),  # 2
)
all_structs.append(ncBackupJob)
ncBackupJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobVplatformId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobPlanId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobDesc', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'hasSches', None, None, ),  # 4
    (5, TType.STRING, 'jobSrcClient', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'jobId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'jobDestClientId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'jobType', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'jobUsername', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'jobDatabaseRunUsername', 'UTF8', None, ),  # 10
    (11, TType.I32, 'jobStatus', None, None, ),  # 11
    (12, TType.I64, 'jobNextStartTime', None, None, ),  # 12
    (13, TType.I64, 'jobCreatedTime', None, None, ),  # 13
    (14, TType.STRING, 'jobUserId', 'UTF8', None, ),  # 14
    (15, TType.I32, 'jobEngineType', None, None, ),  # 15
    (16, TType.I32, 'jobNextBackupType', None, None, ),  # 16
    (17, TType.I32, 'jobStorageType', None, None, ),  # 17
    (18, TType.STRING, 'jobDestClient', 'UTF8', None, ),  # 18
    (19, TType.I64, 'jobLastStartTime', None, None, ),  # 19
    (20, TType.STRING, 'jobName', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'jobClientId', 'UTF8', None, ),  # 21
    (22, TType.I64, 'jobUpdateTime', None, None, ),  # 22
)
all_structs.append(ncBackupJobCountInfo)
ncBackupJobCountInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'failed', None, None, ),  # 1
    (2, TType.I32, 'success', None, None, ),  # 2
    (3, TType.I32, 'running', None, None, ),  # 3
)
all_structs.append(ncRemoteJobReq)
ncRemoteJobReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'localClusterVip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'localClusterId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'jobIds', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'username', 'UTF8', None, ),  # 4
)
all_structs.append(ncRemoteJobRes)
ncRemoteJobRes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'remoteJobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'remoteDatasourceId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'destClusterId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'destClusterVip', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'is_ceritify', None, None, ),  # 5
)
fix_spec(all_structs)
del all_structs
