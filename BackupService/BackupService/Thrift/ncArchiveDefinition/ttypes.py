# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncObjectInfo.ttypes

from thrift.transport import TTransport
all_structs = []


class ncArchiveTaskType(object):
    PROTECT = 1
    RECOVERY = 2

    _VALUES_TO_NAMES = {
        1: "PROTECT",
        2: "RECOVERY",
    }

    _NAMES_TO_VALUES = {
        "PROTECT": 1,
        "RECOVERY": 2,
    }


class ncArchiveDeviceType(object):
    BLUE = 1
    TAPE = 2
    CLOUD = 3

    _VALUES_TO_NAMES = {
        1: "BLUE",
        2: "TAPE",
        3: "CLOUD",
    }

    _NAMES_TO_VALUES = {
        "BLUE": 1,
        "TAPE": 2,
        "CLOUD": 3,
    }


class ncArchiveJob(object):
    """
    Attributes:
     - jobName
     - jobId
     - userName
     - userId
     - storageName
     - auther
     - backupMedia
     - status
     - taskType
     - deviceType

    """


    def __init__(self, jobName=None, jobId=None, userName=None, userId=None, storageName=None, auther=None, backupMedia=None, status=None, taskType=None, deviceType=None,):
        self.jobName = jobName
        self.jobId = jobId
        self.userName = userName
        self.userId = userId
        self.storageName = storageName
        self.auther = auther
        self.backupMedia = backupMedia
        self.status = status
        self.taskType = taskType
        self.deviceType = deviceType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.storageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.auther = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.backupMedia = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.taskType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.deviceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncArchiveJob')
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 1)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 3)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 4)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.storageName is not None:
            oprot.writeFieldBegin('storageName', TType.STRING, 5)
            oprot.writeString(self.storageName.encode('utf-8') if sys.version_info[0] == 2 else self.storageName)
            oprot.writeFieldEnd()
        if self.auther is not None:
            oprot.writeFieldBegin('auther', TType.STRING, 6)
            oprot.writeString(self.auther.encode('utf-8') if sys.version_info[0] == 2 else self.auther)
            oprot.writeFieldEnd()
        if self.backupMedia is not None:
            oprot.writeFieldBegin('backupMedia', TType.STRING, 7)
            oprot.writeString(self.backupMedia.encode('utf-8') if sys.version_info[0] == 2 else self.backupMedia)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.taskType is not None:
            oprot.writeFieldBegin('taskType', TType.I32, 9)
            oprot.writeI32(self.taskType)
            oprot.writeFieldEnd()
        if self.deviceType is not None:
            oprot.writeFieldBegin('deviceType', TType.I32, 10)
            oprot.writeI32(self.deviceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTaskSubmitReq(object):
    """
    Attributes:
     - taskId
     - destClientId
     - isAutoTask
     - loginUser
     - loginIp
     - deviceType
     - desc

    """


    def __init__(self, taskId=None, destClientId=None, isAutoTask=None, loginUser=None, loginIp=None, deviceType=None, desc=None,):
        self.taskId = taskId
        self.destClientId = destClientId
        self.isAutoTask = isAutoTask
        self.loginUser = loginUser
        self.loginIp = loginIp
        self.deviceType = deviceType
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.destClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isAutoTask = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.loginUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.deviceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTaskSubmitReq')
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 1)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        if self.destClientId is not None:
            oprot.writeFieldBegin('destClientId', TType.STRING, 2)
            oprot.writeString(self.destClientId.encode('utf-8') if sys.version_info[0] == 2 else self.destClientId)
            oprot.writeFieldEnd()
        if self.isAutoTask is not None:
            oprot.writeFieldBegin('isAutoTask', TType.BOOL, 3)
            oprot.writeBool(self.isAutoTask)
            oprot.writeFieldEnd()
        if self.loginUser is not None:
            oprot.writeFieldBegin('loginUser', TType.STRING, 4)
            oprot.writeString(self.loginUser.encode('utf-8') if sys.version_info[0] == 2 else self.loginUser)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 5)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.deviceType is not None:
            oprot.writeFieldBegin('deviceType', TType.I32, 6)
            oprot.writeI32(self.deviceType)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 7)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncArchiveJob)
ncArchiveJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'userName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'storageName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'auther', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'backupMedia', 'UTF8', None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.I32, 'taskType', None, None, ),  # 9
    (10, TType.I32, 'deviceType', None, None, ),  # 10
)
all_structs.append(ncTaskSubmitReq)
ncTaskSubmitReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'destClientId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isAutoTask', None, None, ),  # 3
    (4, TType.STRING, 'loginUser', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'loginIp', 'UTF8', None, ),  # 5
    (6, TType.I32, 'deviceType', None, None, ),  # 6
    (7, TType.STRING, 'desc', 'UTF8', None, ),  # 7
)
fix_spec(all_structs)
del all_structs
