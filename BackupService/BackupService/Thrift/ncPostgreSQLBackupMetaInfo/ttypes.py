# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncPostgreSQLClientType(object):
    UNDEFINED = 0
    STAND_ALONE = 1
    RAC = 2
    COUPLE = 3

    _VALUES_TO_NAMES = {
        0: "UNDEFINED",
        1: "STAND_ALONE",
        2: "RAC",
        3: "COUPLE",
    }

    _NAMES_TO_VALUES = {
        "UNDEFINED": 0,
        "STAND_ALONE": 1,
        "RAC": 2,
        "COUPLE": 3,
    }


class ncRestoreObjectEnum(object):
    POSTGRESQL_INSTANCE = 0
    POSTGRESQL_TABLE_SPACE = 1
    POSTGRESQL_DATA_FILE = 2
    POSTGRESQL_LOG_FILE = 3
    POSTGRESQL_CONTROL_FILE = 4
    POSTGRESQL_SPFILE = 5
    POSTGRESQL_TABLE = 6

    _VALUES_TO_NAMES = {
        0: "POSTGRESQL_INSTANCE",
        1: "POSTGRESQL_TABLE_SPACE",
        2: "POSTGRESQL_DATA_FILE",
        3: "POSTGRESQL_LOG_FILE",
        4: "POSTGRESQL_CONTROL_FILE",
        5: "POSTGRESQL_SPFILE",
        6: "POSTGRESQL_TABLE",
    }

    _NAMES_TO_VALUES = {
        "POSTGRESQL_INSTANCE": 0,
        "POSTGRESQL_TABLE_SPACE": 1,
        "POSTGRESQL_DATA_FILE": 2,
        "POSTGRESQL_LOG_FILE": 3,
        "POSTGRESQL_CONTROL_FILE": 4,
        "POSTGRESQL_SPFILE": 5,
        "POSTGRESQL_TABLE": 6,
    }


class ncPostgreSQLClientMetaInfo(object):
    """
    Attributes:
     - attributes

    """


    def __init__(self, attributes=None,):
        self.attributes = attributes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.attributes = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.attributes[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPostgreSQLClientMetaInfo')
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
            for kiter7, viter8 in self.attributes.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPostgreSQLBackupMetaInfo(object):
    """
    Attributes:
     - version
     - clienttype
     - metas

    """


    def __init__(self, version=None, clienttype=None, metas=None,):
        self.version = version
        self.clienttype = clienttype
        self.metas = metas

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.clienttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.metas = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = ncPostgreSQLClientMetaInfo()
                        _elem14.read(iprot)
                        self.metas.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPostgreSQLBackupMetaInfo')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.clienttype is not None:
            oprot.writeFieldBegin('clienttype', TType.I32, 2)
            oprot.writeI32(self.clienttype)
            oprot.writeFieldEnd()
        if self.metas is not None:
            oprot.writeFieldBegin('metas', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.metas))
            for iter15 in self.metas:
                iter15.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.clienttype is None:
            raise TProtocolException(message='Required field clienttype is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncPostgreSQLClientMetaInfo)
ncPostgreSQLClientMetaInfo.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'attributes', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncPostgreSQLBackupMetaInfo)
ncPostgreSQLBackupMetaInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'version', None, None, ),  # 1
    (2, TType.I32, 'clienttype', None, None, ),  # 2
    (3, TType.LIST, 'metas', (TType.STRUCT, [ncPostgreSQLClientMetaInfo, None], False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
