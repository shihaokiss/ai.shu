#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncCDPSvc import ncCDPSvc
from ncCDPSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void microprobe()')
    print('   get_all_jobs()')
    print('  ncTwoStringList remove_all_jobs_by_vplatform_ids( vplatformIds)')
    print('  ncTwoStringList remove_all_jobs_by_client_ids( clientIds)')
    print('   get_all_cdp_job_for_ams()')
    print('   get_all_cdp_jobInstance_for_ams()')
    print('  string get_data_for_ams(string kwargs)')
    print('  bool has_running_job_on_client(string clientId)')
    print('  bool is_exists_running_job_on_client(string clientId)')
    print('  string cdp_backup_init_volumes(string request_json)')
    print('  bool cdp_backup_on_log_volume_formatted(string jobId)')
    print('  string cdp_backup_mount_log_volume(string jobId)')
    print('  i32 cdp_backup_clean_base_volumes(string jobId)')
    print('  i32 cdp_backup_on_reboot_recheck(string jobId)')
    print('  i32 cdp_backup_update_devs(string jobId)')
    print('  bool cdp_backup_create_snapshot(i64 timeStamp, string jobId)')
    print('  void create_new_vm(ncVMConfig vmConfig)')
    print('  void vm_power_control(string vmName, ncVMPowerControl vmControlStatus)')
    print('  string get_vm_console_url(string vmName)')
    print('  void delete_vm(string vmName)')
    print('  ncVMConfig get_vm_config(string vmName)')
    print('  ncVMStatus get_vm_status(string vmName)')
    print('  void edit_vm_hardware(string vmName, i32 slots, i32 cores, i64 mem_size)')
    print('  ncCDMVolume create_vm_disk(string poolId, i64 diskSize)')
    print('  string get_disk_dev_by_cfgstr(string cfgstring)')
    print('  ncVMDisk add_vm_disk(string vmName, ncCDMVolume new_cdm_disk)')
    print('  void delete_vm_disk(string vmName, i32 disk_solt)')
    print('  void add_vm_new_net(string vmName, ncVMNetWork net_config)')
    print('  void edit_vm_net(string vmName, ncVMNetWork net_config)')
    print('  void delete_vm_net(string vmName, ncVMNetWork net_config)')
    print('  void add_vm_new_iso(string vmName, ncVMISO iso_config)')
    print('  void delete_vm_iso(string vmName, ncVMISO iso_config)')
    print('  string get_dev_name(string cfgstring)')
    print('  string get_dev_name_by_scan(string request_json)')
    print('  string get_node_iscsi_iqn()')
    print('   get_filter_jobs(ncGetJobsReq get_req)')
    print('   backup_export_log( body, string jobInstanceId, string userId)')
    print('   drill_job_logs_export( body, string jobInstanceId, string userId)')
    print('   mount_job_logs_export( body, string jobInstanceId, string userId)')
    print('  bool check_cdp_driver_used(string clientId, string jobType, string serviceType)')
    print('  bool check_client_protected(string clientId)')
    print('   get_jobs_by_sourceId(ncSourceType sourceType, ncServiceType svcType, string sourceId, ncRelationStatus relation)')
    print('  bool add_disk_to_repair_vm( disk_list, i32 os_type)')
    print('  bool delete_disk_from_repair_vm( disk_list, i32 os_type)')
    print('   get_jobs_by_datasource(string datasource, string clientId, string dbRunUserName)')
    print('   check_user_has_data( user_list)')
    print('  ncCDPJobCountInfo get_jobs_count_info(i64 startTime, i32 isBackup, string userId)')
    print('  ncCDPJobRunningUserInfo has_realtimejob_run_users( user_ids, i32 job_type)')
    print('  bool client_exsit_job(string clientId)')
    print('  void delete_extra_resource_by_username( user_names)')
    print('   get_sub_using_num( type)')
    print('   add_new_cdm_disk(string jobId,  volumeInfo)')
    print('   get_bridge_counts()')
    print('  void add_new_bridge(ncBridge infos)')
    print('  void edit_old_bridge(ncBridge infos)')
    print('  void delete_old_bridge(ncBridge infos)')
    print('   get_iso_counts()')
    print('  void delete_iso_img(string kwargs)')
    print('   get_net_card()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncCDPSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
    if len(args) != 0:
        print('microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.microprobe())

elif cmd == 'get_all_jobs':
    if len(args) != 0:
        print('get_all_jobs requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_jobs())

elif cmd == 'remove_all_jobs_by_vplatform_ids':
    if len(args) != 1:
        print('remove_all_jobs_by_vplatform_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_all_jobs_by_vplatform_ids(eval(args[0]),))

elif cmd == 'remove_all_jobs_by_client_ids':
    if len(args) != 1:
        print('remove_all_jobs_by_client_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_all_jobs_by_client_ids(eval(args[0]),))

elif cmd == 'get_all_cdp_job_for_ams':
    if len(args) != 0:
        print('get_all_cdp_job_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_cdp_job_for_ams())

elif cmd == 'get_all_cdp_jobInstance_for_ams':
    if len(args) != 0:
        print('get_all_cdp_jobInstance_for_ams requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_all_cdp_jobInstance_for_ams())

elif cmd == 'get_data_for_ams':
    if len(args) != 1:
        print('get_data_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'has_running_job_on_client':
    if len(args) != 1:
        print('has_running_job_on_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.has_running_job_on_client(args[0],))

elif cmd == 'is_exists_running_job_on_client':
    if len(args) != 1:
        print('is_exists_running_job_on_client requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_exists_running_job_on_client(args[0],))

elif cmd == 'cdp_backup_init_volumes':
    if len(args) != 1:
        print('cdp_backup_init_volumes requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_init_volumes(args[0],))

elif cmd == 'cdp_backup_on_log_volume_formatted':
    if len(args) != 1:
        print('cdp_backup_on_log_volume_formatted requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_on_log_volume_formatted(args[0],))

elif cmd == 'cdp_backup_mount_log_volume':
    if len(args) != 1:
        print('cdp_backup_mount_log_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_mount_log_volume(args[0],))

elif cmd == 'cdp_backup_clean_base_volumes':
    if len(args) != 1:
        print('cdp_backup_clean_base_volumes requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_clean_base_volumes(args[0],))

elif cmd == 'cdp_backup_on_reboot_recheck':
    if len(args) != 1:
        print('cdp_backup_on_reboot_recheck requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_on_reboot_recheck(args[0],))

elif cmd == 'cdp_backup_update_devs':
    if len(args) != 1:
        print('cdp_backup_update_devs requires 1 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_update_devs(args[0],))

elif cmd == 'cdp_backup_create_snapshot':
    if len(args) != 2:
        print('cdp_backup_create_snapshot requires 2 args')
        sys.exit(1)
    pp.pprint(client.cdp_backup_create_snapshot(eval(args[0]), args[1],))

elif cmd == 'create_new_vm':
    if len(args) != 1:
        print('create_new_vm requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_new_vm(eval(args[0]),))

elif cmd == 'vm_power_control':
    if len(args) != 2:
        print('vm_power_control requires 2 args')
        sys.exit(1)
    pp.pprint(client.vm_power_control(args[0], eval(args[1]),))

elif cmd == 'get_vm_console_url':
    if len(args) != 1:
        print('get_vm_console_url requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vm_console_url(args[0],))

elif cmd == 'delete_vm':
    if len(args) != 1:
        print('delete_vm requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_vm(args[0],))

elif cmd == 'get_vm_config':
    if len(args) != 1:
        print('get_vm_config requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vm_config(args[0],))

elif cmd == 'get_vm_status':
    if len(args) != 1:
        print('get_vm_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vm_status(args[0],))

elif cmd == 'edit_vm_hardware':
    if len(args) != 4:
        print('edit_vm_hardware requires 4 args')
        sys.exit(1)
    pp.pprint(client.edit_vm_hardware(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'create_vm_disk':
    if len(args) != 2:
        print('create_vm_disk requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_vm_disk(args[0], eval(args[1]),))

elif cmd == 'get_disk_dev_by_cfgstr':
    if len(args) != 1:
        print('get_disk_dev_by_cfgstr requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_disk_dev_by_cfgstr(args[0],))

elif cmd == 'add_vm_disk':
    if len(args) != 2:
        print('add_vm_disk requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_vm_disk(args[0], eval(args[1]),))

elif cmd == 'delete_vm_disk':
    if len(args) != 2:
        print('delete_vm_disk requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_vm_disk(args[0], eval(args[1]),))

elif cmd == 'add_vm_new_net':
    if len(args) != 2:
        print('add_vm_new_net requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_vm_new_net(args[0], eval(args[1]),))

elif cmd == 'edit_vm_net':
    if len(args) != 2:
        print('edit_vm_net requires 2 args')
        sys.exit(1)
    pp.pprint(client.edit_vm_net(args[0], eval(args[1]),))

elif cmd == 'delete_vm_net':
    if len(args) != 2:
        print('delete_vm_net requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_vm_net(args[0], eval(args[1]),))

elif cmd == 'add_vm_new_iso':
    if len(args) != 2:
        print('add_vm_new_iso requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_vm_new_iso(args[0], eval(args[1]),))

elif cmd == 'delete_vm_iso':
    if len(args) != 2:
        print('delete_vm_iso requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_vm_iso(args[0], eval(args[1]),))

elif cmd == 'get_dev_name':
    if len(args) != 1:
        print('get_dev_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_dev_name(args[0],))

elif cmd == 'get_dev_name_by_scan':
    if len(args) != 1:
        print('get_dev_name_by_scan requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_dev_name_by_scan(args[0],))

elif cmd == 'get_node_iscsi_iqn':
    if len(args) != 0:
        print('get_node_iscsi_iqn requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_iscsi_iqn())

elif cmd == 'get_filter_jobs':
    if len(args) != 1:
        print('get_filter_jobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_filter_jobs(eval(args[0]),))

elif cmd == 'backup_export_log':
    if len(args) != 3:
        print('backup_export_log requires 3 args')
        sys.exit(1)
    pp.pprint(client.backup_export_log(eval(args[0]), args[1], args[2],))

elif cmd == 'drill_job_logs_export':
    if len(args) != 3:
        print('drill_job_logs_export requires 3 args')
        sys.exit(1)
    pp.pprint(client.drill_job_logs_export(eval(args[0]), args[1], args[2],))

elif cmd == 'mount_job_logs_export':
    if len(args) != 3:
        print('mount_job_logs_export requires 3 args')
        sys.exit(1)
    pp.pprint(client.mount_job_logs_export(eval(args[0]), args[1], args[2],))

elif cmd == 'check_cdp_driver_used':
    if len(args) != 3:
        print('check_cdp_driver_used requires 3 args')
        sys.exit(1)
    pp.pprint(client.check_cdp_driver_used(args[0], args[1], args[2],))

elif cmd == 'check_client_protected':
    if len(args) != 1:
        print('check_client_protected requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_client_protected(args[0],))

elif cmd == 'get_jobs_by_sourceId':
    if len(args) != 4:
        print('get_jobs_by_sourceId requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_by_sourceId(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'add_disk_to_repair_vm':
    if len(args) != 2:
        print('add_disk_to_repair_vm requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_disk_to_repair_vm(eval(args[0]), eval(args[1]),))

elif cmd == 'delete_disk_from_repair_vm':
    if len(args) != 2:
        print('delete_disk_from_repair_vm requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_disk_from_repair_vm(eval(args[0]), eval(args[1]),))

elif cmd == 'get_jobs_by_datasource':
    if len(args) != 3:
        print('get_jobs_by_datasource requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_by_datasource(args[0], args[1], args[2],))

elif cmd == 'check_user_has_data':
    if len(args) != 1:
        print('check_user_has_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_user_has_data(eval(args[0]),))

elif cmd == 'get_jobs_count_info':
    if len(args) != 3:
        print('get_jobs_count_info requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_count_info(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'has_realtimejob_run_users':
    if len(args) != 2:
        print('has_realtimejob_run_users requires 2 args')
        sys.exit(1)
    pp.pprint(client.has_realtimejob_run_users(eval(args[0]), eval(args[1]),))

elif cmd == 'client_exsit_job':
    if len(args) != 1:
        print('client_exsit_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.client_exsit_job(args[0],))

elif cmd == 'delete_extra_resource_by_username':
    if len(args) != 1:
        print('delete_extra_resource_by_username requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_extra_resource_by_username(eval(args[0]),))

elif cmd == 'get_sub_using_num':
    if len(args) != 1:
        print('get_sub_using_num requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sub_using_num(eval(args[0]),))

elif cmd == 'add_new_cdm_disk':
    if len(args) != 2:
        print('add_new_cdm_disk requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_new_cdm_disk(args[0], eval(args[1]),))

elif cmd == 'get_bridge_counts':
    if len(args) != 0:
        print('get_bridge_counts requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_bridge_counts())

elif cmd == 'add_new_bridge':
    if len(args) != 1:
        print('add_new_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_new_bridge(eval(args[0]),))

elif cmd == 'edit_old_bridge':
    if len(args) != 1:
        print('edit_old_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.edit_old_bridge(eval(args[0]),))

elif cmd == 'delete_old_bridge':
    if len(args) != 1:
        print('delete_old_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_old_bridge(eval(args[0]),))

elif cmd == 'get_iso_counts':
    if len(args) != 0:
        print('get_iso_counts requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_iso_counts())

elif cmd == 'delete_iso_img':
    if len(args) != 1:
        print('delete_iso_img requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_iso_img(args[0],))

elif cmd == 'get_net_card':
    if len(args) != 0:
        print('get_net_card requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_net_card())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
