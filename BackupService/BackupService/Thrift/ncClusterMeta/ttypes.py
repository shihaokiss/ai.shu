# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes
import ncCdmStoreMgmCommon.ttypes
import ncClusterMeta_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncServiceInfo(object):
    """
    Attributes:
     - serviceName
     - status

    """


    def __init__(self, serviceName=None, status=None,):
        self.serviceName = serviceName
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServiceInfo')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncServiceStu(object):
    """
    Attributes:
     - serviceType
     - status

    """


    def __init__(self, serviceType=None, status=None,):
        self.serviceType = serviceType
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServiceStu')
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I32, 1)
            oprot.writeI32(self.serviceType)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNodeDetailInfo(object):
    """
    Attributes:
     - cpuOccupy
     - memTotal
     - memFree
     - network
     - diskIO
     - volumeTotal
     - volumeUsed
     - machineCode
     - calulateTime
     - id

    """


    def __init__(self, cpuOccupy=None, memTotal=None, memFree=None, network=None, diskIO=None, volumeTotal=None, volumeUsed=None, machineCode=None, calulateTime=None, id=None,):
        self.cpuOccupy = cpuOccupy
        self.memTotal = memTotal
        self.memFree = memFree
        self.network = network
        self.diskIO = diskIO
        self.volumeTotal = volumeTotal
        self.volumeUsed = volumeUsed
        self.machineCode = machineCode
        self.calulateTime = calulateTime
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.cpuOccupy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.memTotal = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.memFree = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.network = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.diskIO = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.volumeTotal = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.volumeUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.calulateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeDetailInfo')
        if self.cpuOccupy is not None:
            oprot.writeFieldBegin('cpuOccupy', TType.DOUBLE, 1)
            oprot.writeDouble(self.cpuOccupy)
            oprot.writeFieldEnd()
        if self.memTotal is not None:
            oprot.writeFieldBegin('memTotal', TType.DOUBLE, 2)
            oprot.writeDouble(self.memTotal)
            oprot.writeFieldEnd()
        if self.memFree is not None:
            oprot.writeFieldBegin('memFree', TType.DOUBLE, 3)
            oprot.writeDouble(self.memFree)
            oprot.writeFieldEnd()
        if self.network is not None:
            oprot.writeFieldBegin('network', TType.DOUBLE, 4)
            oprot.writeDouble(self.network)
            oprot.writeFieldEnd()
        if self.diskIO is not None:
            oprot.writeFieldBegin('diskIO', TType.DOUBLE, 5)
            oprot.writeDouble(self.diskIO)
            oprot.writeFieldEnd()
        if self.volumeTotal is not None:
            oprot.writeFieldBegin('volumeTotal', TType.DOUBLE, 6)
            oprot.writeDouble(self.volumeTotal)
            oprot.writeFieldEnd()
        if self.volumeUsed is not None:
            oprot.writeFieldBegin('volumeUsed', TType.DOUBLE, 7)
            oprot.writeDouble(self.volumeUsed)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 8)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.calulateTime is not None:
            oprot.writeFieldBegin('calulateTime', TType.I64, 9)
            oprot.writeI64(self.calulateTime)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 10)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNodeInfo(object):
    """
    Attributes:
     - nodeName
     - hostName
     - machineCode
     - nodeIp
     - version
     - os
     - status
     - description
     - errorMsg
     - productType
     - productVersion
     - product_name
     - osType
     - id
     - nodeIpEx

    """


    def __init__(self, nodeName=None, hostName=None, machineCode=None, nodeIp=None, version=None, os=None, status=None, description=None, errorMsg=None, productType=None, productVersion=None, product_name=None, osType=None, id=None, nodeIpEx=None,):
        self.nodeName = nodeName
        self.hostName = hostName
        self.machineCode = machineCode
        self.nodeIp = nodeIp
        self.version = version
        self.os = os
        self.status = status
        self.description = description
        self.errorMsg = errorMsg
        self.productType = productType
        self.productVersion = productVersion
        self.product_name = product_name
        self.osType = osType
        self.id = id
        self.nodeIpEx = nodeIpEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.os = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.errorMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.productType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.productVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.product_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.osType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.nodeIpEx = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeInfo')
        if self.nodeName is not None:
            oprot.writeFieldBegin('nodeName', TType.STRING, 1)
            oprot.writeString(self.nodeName.encode('utf-8') if sys.version_info[0] == 2 else self.nodeName)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 3)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 4)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 5)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.os is not None:
            oprot.writeFieldBegin('os', TType.STRING, 6)
            oprot.writeString(self.os.encode('utf-8') if sys.version_info[0] == 2 else self.os)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 8)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.errorMsg is not None:
            oprot.writeFieldBegin('errorMsg', TType.STRING, 9)
            oprot.writeString(self.errorMsg.encode('utf-8') if sys.version_info[0] == 2 else self.errorMsg)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 10)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.productVersion is not None:
            oprot.writeFieldBegin('productVersion', TType.STRING, 11)
            oprot.writeString(self.productVersion.encode('utf-8') if sys.version_info[0] == 2 else self.productVersion)
            oprot.writeFieldEnd()
        if self.product_name is not None:
            oprot.writeFieldBegin('product_name', TType.STRING, 12)
            oprot.writeString(self.product_name.encode('utf-8') if sys.version_info[0] == 2 else self.product_name)
            oprot.writeFieldEnd()
        if self.osType is not None:
            oprot.writeFieldBegin('osType', TType.I32, 13)
            oprot.writeI32(self.osType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 14)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.nodeIpEx is not None:
            oprot.writeFieldBegin('nodeIpEx', TType.STRING, 15)
            oprot.writeString(self.nodeIpEx.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIpEx)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStoragePath(object):
    """
    Attributes:
     - name
     - path
     - freeSize
     - expandedFlag

    """


    def __init__(self, name=None, path=None, freeSize=None, expandedFlag=None,):
        self.name = name
        self.path = path
        self.freeSize = freeSize
        self.expandedFlag = expandedFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.freeSize = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.expandedFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStoragePath')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 2)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.DOUBLE, 3)
            oprot.writeDouble(self.freeSize)
            oprot.writeFieldEnd()
        if self.expandedFlag is not None:
            oprot.writeFieldBegin('expandedFlag', TType.BOOL, 4)
            oprot.writeBool(self.expandedFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeviceInfo(object):
    """
    Attributes:
     - id
     - nodeName
     - hostName
     - machineCode
     - nodeIp
     - version
     - os

    """


    def __init__(self, id=None, nodeName=None, hostName=None, machineCode=None, nodeIp=None, version=None, os=None,):
        self.id = id
        self.nodeName = nodeName
        self.hostName = hostName
        self.machineCode = machineCode
        self.nodeIp = nodeIp
        self.version = version
        self.os = os

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.os = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeviceInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.nodeName is not None:
            oprot.writeFieldBegin('nodeName', TType.STRING, 2)
            oprot.writeString(self.nodeName.encode('utf-8') if sys.version_info[0] == 2 else self.nodeName)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 3)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 4)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 5)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 6)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.os is not None:
            oprot.writeFieldBegin('os', TType.STRING, 7)
            oprot.writeString(self.os.encode('utf-8') if sys.version_info[0] == 2 else self.os)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCKNode(object):
    """
    Attributes:
     - serviceType
     - ip
     - machineCode
     - value
     - status
     - sipex

    """


    def __init__(self, serviceType=None, ip=None, machineCode=None, value=None, status=None, sipex=None,):
        self.serviceType = serviceType
        self.ip = ip
        self.machineCode = machineCode
        self.value = value
        self.status = status
        self.sipex = sipex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sipex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCKNode')
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I32, 1)
            oprot.writeI32(self.serviceType)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 3)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 4)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.sipex is not None:
            oprot.writeFieldBegin('sipex', TType.STRING, 6)
            oprot.writeString(self.sipex.encode('utf-8') if sys.version_info[0] == 2 else self.sipex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCKNodeList(object):
    """
    Attributes:
     - nodeList

    """


    def __init__(self, nodeList=None,):
        self.nodeList = nodeList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nodeList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncCKNode()
                        _elem5.read(iprot)
                        self.nodeList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCKNodeList')
        if self.nodeList is not None:
            oprot.writeFieldBegin('nodeList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nodeList))
            for iter6 in self.nodeList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCKNodeListRequest(object):
    """
    Attributes:
     - serviceType

    """


    def __init__(self, serviceType=None,):
        self.serviceType = serviceType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCKNodeListRequest')
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I32, 1)
            oprot.writeI32(self.serviceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCKNodeListReply(object):
    """
    Attributes:
     - nodeList

    """


    def __init__(self, nodeList=None,):
        self.nodeList = nodeList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nodeList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncCKNode()
                        _elem12.read(iprot)
                        self.nodeList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCKNodeListReply')
        if self.nodeList is not None:
            oprot.writeFieldBegin('nodeList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nodeList))
            for iter13 in self.nodeList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClusterInfo(object):
    """
    Attributes:
     - cluster_id
     - vip
     - vip_ex
     - type
     - customer
     - proxySet
     - sourceProxyIp
     - sourceProxyPort
     - sourcePlanarNetName
     - link_id
     - state

    """


    def __init__(self, cluster_id=None, vip=None, vip_ex=None, type=-1, customer=None, proxySet=None, sourceProxyIp=None, sourceProxyPort=None, sourcePlanarNetName=None, link_id=None, state=None,):
        self.cluster_id = cluster_id
        self.vip = vip
        self.vip_ex = vip_ex
        self.type = type
        self.customer = customer
        self.proxySet = proxySet
        self.sourceProxyIp = sourceProxyIp
        self.sourceProxyPort = sourceProxyPort
        self.sourcePlanarNetName = sourcePlanarNetName
        self.link_id = link_id
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vip_ex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.proxySet = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sourceProxyIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.sourceProxyPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.sourcePlanarNetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClusterInfo')
        if self.cluster_id is not None:
            oprot.writeFieldBegin('cluster_id', TType.STRING, 1)
            oprot.writeString(self.cluster_id.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_id)
            oprot.writeFieldEnd()
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRING, 2)
            oprot.writeString(self.vip.encode('utf-8') if sys.version_info[0] == 2 else self.vip)
            oprot.writeFieldEnd()
        if self.vip_ex is not None:
            oprot.writeFieldBegin('vip_ex', TType.STRING, 3)
            oprot.writeString(self.vip_ex.encode('utf-8') if sys.version_info[0] == 2 else self.vip_ex)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 5)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.proxySet is not None:
            oprot.writeFieldBegin('proxySet', TType.I32, 6)
            oprot.writeI32(self.proxySet)
            oprot.writeFieldEnd()
        if self.sourceProxyIp is not None:
            oprot.writeFieldBegin('sourceProxyIp', TType.STRING, 7)
            oprot.writeString(self.sourceProxyIp.encode('utf-8') if sys.version_info[0] == 2 else self.sourceProxyIp)
            oprot.writeFieldEnd()
        if self.sourceProxyPort is not None:
            oprot.writeFieldBegin('sourceProxyPort', TType.I64, 8)
            oprot.writeI64(self.sourceProxyPort)
            oprot.writeFieldEnd()
        if self.sourcePlanarNetName is not None:
            oprot.writeFieldBegin('sourcePlanarNetName', TType.STRING, 9)
            oprot.writeString(self.sourcePlanarNetName.encode('utf-8') if sys.version_info[0] == 2 else self.sourcePlanarNetName)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 10)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 11)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaidCard(object):
    """
    Attributes:
     - adpId
     - producer
     - model
     - memSize
     - batType
     - batStatus
     - chargStatus
     - temperature

    """


    def __init__(self, adpId=None, producer=None, model=None, memSize=None, batType=None, batStatus=None, chargStatus=None, temperature=None,):
        self.adpId = adpId
        self.producer = producer
        self.model = model
        self.memSize = memSize
        self.batType = batType
        self.batStatus = batStatus
        self.chargStatus = chargStatus
        self.temperature = temperature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.adpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.producer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.memSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.batType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.batStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.chargStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.temperature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaidCard')
        if self.adpId is not None:
            oprot.writeFieldBegin('adpId', TType.STRING, 1)
            oprot.writeString(self.adpId.encode('utf-8') if sys.version_info[0] == 2 else self.adpId)
            oprot.writeFieldEnd()
        if self.producer is not None:
            oprot.writeFieldBegin('producer', TType.STRING, 2)
            oprot.writeString(self.producer.encode('utf-8') if sys.version_info[0] == 2 else self.producer)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 3)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.memSize is not None:
            oprot.writeFieldBegin('memSize', TType.I64, 4)
            oprot.writeI64(self.memSize)
            oprot.writeFieldEnd()
        if self.batType is not None:
            oprot.writeFieldBegin('batType', TType.STRING, 5)
            oprot.writeString(self.batType.encode('utf-8') if sys.version_info[0] == 2 else self.batType)
            oprot.writeFieldEnd()
        if self.batStatus is not None:
            oprot.writeFieldBegin('batStatus', TType.STRING, 6)
            oprot.writeString(self.batStatus.encode('utf-8') if sys.version_info[0] == 2 else self.batStatus)
            oprot.writeFieldEnd()
        if self.chargStatus is not None:
            oprot.writeFieldBegin('chargStatus', TType.STRING, 7)
            oprot.writeString(self.chargStatus.encode('utf-8') if sys.version_info[0] == 2 else self.chargStatus)
            oprot.writeFieldEnd()
        if self.temperature is not None:
            oprot.writeFieldBegin('temperature', TType.STRING, 8)
            oprot.writeString(self.temperature.encode('utf-8') if sys.version_info[0] == 2 else self.temperature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class diskdata(object):
    """
    Attributes:
     - devName
     - devStatus

    """


    def __init__(self, devName=None, devStatus=None,):
        self.devName = devName
        self.devStatus = devStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('diskdata')
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 1)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 2)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sparedata(object):
    """
    Attributes:
     - devName
     - devStatus
     - devModel
     - devTotal
     - spareType

    """


    def __init__(self, devName=None, devStatus=None, devModel=None, devTotal=None, spareType=None,):
        self.devName = devName
        self.devStatus = devStatus
        self.devModel = devModel
        self.devTotal = devTotal
        self.spareType = spareType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.devModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.spareType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sparedata')
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 1)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 2)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        if self.devModel is not None:
            oprot.writeFieldBegin('devModel', TType.STRING, 3)
            oprot.writeString(self.devModel.encode('utf-8') if sys.version_info[0] == 2 else self.devModel)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 4)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.spareType is not None:
            oprot.writeFieldBegin('spareType', TType.I32, 5)
            oprot.writeI32(self.spareType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaids(object):
    """
    Attributes:
     - raidId
     - raidTotal
     - raidUsable
     - raidName
     - raidType
     - initOccupy
     - raidLevel
     - raidStatus
     - readCache
     - writeCache
     - stripSize
     - diskdatas
     - sparedatas

    """


    def __init__(self, raidId=None, raidTotal=None, raidUsable=None, raidName=None, raidType=None, initOccupy=None, raidLevel=None, raidStatus=None, readCache=None, writeCache=None, stripSize=None, diskdatas=None, sparedatas=None,):
        self.raidId = raidId
        self.raidTotal = raidTotal
        self.raidUsable = raidUsable
        self.raidName = raidName
        self.raidType = raidType
        self.initOccupy = initOccupy
        self.raidLevel = raidLevel
        self.raidStatus = raidStatus
        self.readCache = readCache
        self.writeCache = writeCache
        self.stripSize = stripSize
        self.diskdatas = diskdatas
        self.sparedatas = sparedatas

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.raidId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.initOccupy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.raidLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.raidStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.readCache = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.writeCache = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.stripSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.diskdatas = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = diskdata()
                        _elem19.read(iprot)
                        self.diskdatas.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.sparedatas = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = sparedata()
                        _elem25.read(iprot)
                        self.sparedatas.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaids')
        if self.raidId is not None:
            oprot.writeFieldBegin('raidId', TType.STRING, 1)
            oprot.writeString(self.raidId.encode('utf-8') if sys.version_info[0] == 2 else self.raidId)
            oprot.writeFieldEnd()
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 2)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 3)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 4)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 5)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.initOccupy is not None:
            oprot.writeFieldBegin('initOccupy', TType.DOUBLE, 6)
            oprot.writeDouble(self.initOccupy)
            oprot.writeFieldEnd()
        if self.raidLevel is not None:
            oprot.writeFieldBegin('raidLevel', TType.I32, 7)
            oprot.writeI32(self.raidLevel)
            oprot.writeFieldEnd()
        if self.raidStatus is not None:
            oprot.writeFieldBegin('raidStatus', TType.I32, 8)
            oprot.writeI32(self.raidStatus)
            oprot.writeFieldEnd()
        if self.readCache is not None:
            oprot.writeFieldBegin('readCache', TType.I32, 9)
            oprot.writeI32(self.readCache)
            oprot.writeFieldEnd()
        if self.writeCache is not None:
            oprot.writeFieldBegin('writeCache', TType.I32, 10)
            oprot.writeI32(self.writeCache)
            oprot.writeFieldEnd()
        if self.stripSize is not None:
            oprot.writeFieldBegin('stripSize', TType.I64, 11)
            oprot.writeI64(self.stripSize)
            oprot.writeFieldEnd()
        if self.diskdatas is not None:
            oprot.writeFieldBegin('diskdatas', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.diskdatas))
            for iter26 in self.diskdatas:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sparedatas is not None:
            oprot.writeFieldBegin('sparedatas', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.sparedatas))
            for iter27 in self.sparedatas:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDisks(object):
    """
    Attributes:
     - adpId
     - array
     - arrayName
     - devId
     - devName
     - devModel
     - devType
     - devStatus
     - slot
     - devTotal
     - spareType
     - spareRaid

    """


    def __init__(self, adpId=None, array=None, arrayName=None, devId=None, devName=None, devModel=None, devType=None, devStatus=None, slot=None, devTotal=None, spareType=None, spareRaid=None,):
        self.adpId = adpId
        self.array = array
        self.arrayName = arrayName
        self.devId = devId
        self.devName = devName
        self.devModel = devModel
        self.devType = devType
        self.devStatus = devStatus
        self.slot = slot
        self.devTotal = devTotal
        self.spareType = spareType
        self.spareRaid = spareRaid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.adpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.array = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.arrayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.devId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.devModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.devType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.devStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.slot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.spareType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.spareRaid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDisks')
        if self.adpId is not None:
            oprot.writeFieldBegin('adpId', TType.STRING, 1)
            oprot.writeString(self.adpId.encode('utf-8') if sys.version_info[0] == 2 else self.adpId)
            oprot.writeFieldEnd()
        if self.array is not None:
            oprot.writeFieldBegin('array', TType.I32, 2)
            oprot.writeI32(self.array)
            oprot.writeFieldEnd()
        if self.arrayName is not None:
            oprot.writeFieldBegin('arrayName', TType.STRING, 3)
            oprot.writeString(self.arrayName.encode('utf-8') if sys.version_info[0] == 2 else self.arrayName)
            oprot.writeFieldEnd()
        if self.devId is not None:
            oprot.writeFieldBegin('devId', TType.STRING, 4)
            oprot.writeString(self.devId.encode('utf-8') if sys.version_info[0] == 2 else self.devId)
            oprot.writeFieldEnd()
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 5)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devModel is not None:
            oprot.writeFieldBegin('devModel', TType.STRING, 6)
            oprot.writeString(self.devModel.encode('utf-8') if sys.version_info[0] == 2 else self.devModel)
            oprot.writeFieldEnd()
        if self.devType is not None:
            oprot.writeFieldBegin('devType', TType.STRING, 7)
            oprot.writeString(self.devType.encode('utf-8') if sys.version_info[0] == 2 else self.devType)
            oprot.writeFieldEnd()
        if self.devStatus is not None:
            oprot.writeFieldBegin('devStatus', TType.I32, 8)
            oprot.writeI32(self.devStatus)
            oprot.writeFieldEnd()
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRING, 9)
            oprot.writeString(self.slot.encode('utf-8') if sys.version_info[0] == 2 else self.slot)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 10)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.spareType is not None:
            oprot.writeFieldBegin('spareType', TType.I32, 11)
            oprot.writeI32(self.spareType)
            oprot.writeFieldEnd()
        if self.spareRaid is not None:
            oprot.writeFieldBegin('spareRaid', TType.STRING, 12)
            oprot.writeString(self.spareRaid.encode('utf-8') if sys.version_info[0] == 2 else self.spareRaid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncIdelDisks(object):
    """
    Attributes:
     - devId
     - devName
     - devModel
     - slot
     - devTotal
     - devType

    """


    def __init__(self, devId=None, devName=None, devModel=None, slot=None, devTotal=None, devType=None,):
        self.devId = devId
        self.devName = devName
        self.devModel = devModel
        self.slot = slot
        self.devTotal = devTotal
        self.devType = devType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.devModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.slot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.devType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncIdelDisks')
        if self.devId is not None:
            oprot.writeFieldBegin('devId', TType.STRING, 1)
            oprot.writeString(self.devId.encode('utf-8') if sys.version_info[0] == 2 else self.devId)
            oprot.writeFieldEnd()
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 2)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devModel is not None:
            oprot.writeFieldBegin('devModel', TType.STRING, 3)
            oprot.writeString(self.devModel.encode('utf-8') if sys.version_info[0] == 2 else self.devModel)
            oprot.writeFieldEnd()
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRING, 4)
            oprot.writeString(self.slot.encode('utf-8') if sys.version_info[0] == 2 else self.slot)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 5)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.devType is not None:
            oprot.writeFieldBegin('devType', TType.STRING, 6)
            oprot.writeString(self.devType.encode('utf-8') if sys.version_info[0] == 2 else self.devType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRaidVolume(object):
    """
    Attributes:
     - raidTotal
     - raidUsable
     - raidName
     - raidType
     - raidStatus

    """


    def __init__(self, raidTotal=None, raidUsable=None, raidName=None, raidType=None, raidStatus=None,):
        self.raidTotal = raidTotal
        self.raidUsable = raidUsable
        self.raidName = raidName
        self.raidType = raidType
        self.raidStatus = raidStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.raidStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRaidVolume')
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 1)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 2)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 3)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 4)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.raidStatus is not None:
            oprot.writeFieldBegin('raidStatus', TType.I32, 5)
            oprot.writeI32(self.raidStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolume(object):
    """
    Attributes:
     - raidName
     - volumeName
     - raidTotal
     - volumeType
     - nodeId
     - raidUsable
     - raidType
     - pathSize
     - mountPoint
     - path
     - desc
     - storageType
     - cloudBlockName

    """


    def __init__(self, raidName=None, volumeName=None, raidTotal=None, volumeType=None, nodeId=None, raidUsable=None, raidType=None, pathSize=None, mountPoint=None, path=None, desc=None, storageType=0, cloudBlockName=None,):
        self.raidName = raidName
        self.volumeName = volumeName
        self.raidTotal = raidTotal
        self.volumeType = volumeType
        self.nodeId = nodeId
        self.raidUsable = raidUsable
        self.raidType = raidType
        self.pathSize = pathSize
        self.mountPoint = mountPoint
        self.path = path
        self.desc = desc
        self.storageType = storageType
        self.cloudBlockName = cloudBlockName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volumeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.pathSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.storageType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.cloudBlockName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolume')
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 1)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.volumeName is not None:
            oprot.writeFieldBegin('volumeName', TType.STRING, 2)
            oprot.writeString(self.volumeName.encode('utf-8') if sys.version_info[0] == 2 else self.volumeName)
            oprot.writeFieldEnd()
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 3)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 4)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 5)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 6)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 7)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.pathSize is not None:
            oprot.writeFieldBegin('pathSize', TType.I64, 8)
            oprot.writeI64(self.pathSize)
            oprot.writeFieldEnd()
        if self.mountPoint is not None:
            oprot.writeFieldBegin('mountPoint', TType.STRING, 9)
            oprot.writeString(self.mountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.mountPoint)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 10)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 11)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.storageType is not None:
            oprot.writeFieldBegin('storageType', TType.I32, 12)
            oprot.writeI32(self.storageType)
            oprot.writeFieldEnd()
        if self.cloudBlockName is not None:
            oprot.writeFieldBegin('cloudBlockName', TType.STRING, 13)
            oprot.writeString(self.cloudBlockName.encode('utf-8') if sys.version_info[0] == 2 else self.cloudBlockName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHBAHost(object):
    """
    Attributes:
     - hostName
     - wwpn
     - wwnn
     - portId
     - maxNPIVCount
     - portState
     - supportSpeed
     - portSpeed
     - fabricName

    """


    def __init__(self, hostName=None, wwpn=None, wwnn=None, portId=None, maxNPIVCount=None, portState=None, supportSpeed=None, portSpeed=None, fabricName=None,):
        self.hostName = hostName
        self.wwpn = wwpn
        self.wwnn = wwnn
        self.portId = portId
        self.maxNPIVCount = maxNPIVCount
        self.portState = portState
        self.supportSpeed = supportSpeed
        self.portSpeed = portSpeed
        self.fabricName = fabricName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.wwpn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.wwnn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.portId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.maxNPIVCount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.portState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.supportSpeed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.portSpeed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.fabricName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHBAHost')
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 1)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.wwpn is not None:
            oprot.writeFieldBegin('wwpn', TType.STRING, 2)
            oprot.writeString(self.wwpn.encode('utf-8') if sys.version_info[0] == 2 else self.wwpn)
            oprot.writeFieldEnd()
        if self.wwnn is not None:
            oprot.writeFieldBegin('wwnn', TType.STRING, 3)
            oprot.writeString(self.wwnn.encode('utf-8') if sys.version_info[0] == 2 else self.wwnn)
            oprot.writeFieldEnd()
        if self.portId is not None:
            oprot.writeFieldBegin('portId', TType.STRING, 4)
            oprot.writeString(self.portId.encode('utf-8') if sys.version_info[0] == 2 else self.portId)
            oprot.writeFieldEnd()
        if self.maxNPIVCount is not None:
            oprot.writeFieldBegin('maxNPIVCount', TType.STRING, 5)
            oprot.writeString(self.maxNPIVCount.encode('utf-8') if sys.version_info[0] == 2 else self.maxNPIVCount)
            oprot.writeFieldEnd()
        if self.portState is not None:
            oprot.writeFieldBegin('portState', TType.STRING, 6)
            oprot.writeString(self.portState.encode('utf-8') if sys.version_info[0] == 2 else self.portState)
            oprot.writeFieldEnd()
        if self.supportSpeed is not None:
            oprot.writeFieldBegin('supportSpeed', TType.STRING, 7)
            oprot.writeString(self.supportSpeed.encode('utf-8') if sys.version_info[0] == 2 else self.supportSpeed)
            oprot.writeFieldEnd()
        if self.portSpeed is not None:
            oprot.writeFieldBegin('portSpeed', TType.STRING, 8)
            oprot.writeString(self.portSpeed.encode('utf-8') if sys.version_info[0] == 2 else self.portSpeed)
            oprot.writeFieldEnd()
        if self.fabricName is not None:
            oprot.writeFieldBegin('fabricName', TType.STRING, 9)
            oprot.writeString(self.fabricName.encode('utf-8') if sys.version_info[0] == 2 else self.fabricName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHBA(object):
    """
    Attributes:
     - HBAName
     - HBASlot
     - HBAType
     - HBAVersion
     - HBAMode
     - HBAHost

    """


    def __init__(self, HBAName=None, HBASlot=None, HBAType=None, HBAVersion=None, HBAMode=None, HBAHost=None,):
        self.HBAName = HBAName
        self.HBASlot = HBASlot
        self.HBAType = HBAType
        self.HBAVersion = HBAVersion
        self.HBAMode = HBAMode
        self.HBAHost = HBAHost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.HBAName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.HBASlot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.HBAType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.HBAVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.HBAMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.HBAHost = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncHBAHost()
                        _elem33.read(iprot)
                        self.HBAHost.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHBA')
        if self.HBAName is not None:
            oprot.writeFieldBegin('HBAName', TType.STRING, 1)
            oprot.writeString(self.HBAName.encode('utf-8') if sys.version_info[0] == 2 else self.HBAName)
            oprot.writeFieldEnd()
        if self.HBASlot is not None:
            oprot.writeFieldBegin('HBASlot', TType.STRING, 2)
            oprot.writeString(self.HBASlot.encode('utf-8') if sys.version_info[0] == 2 else self.HBASlot)
            oprot.writeFieldEnd()
        if self.HBAType is not None:
            oprot.writeFieldBegin('HBAType', TType.STRING, 3)
            oprot.writeString(self.HBAType.encode('utf-8') if sys.version_info[0] == 2 else self.HBAType)
            oprot.writeFieldEnd()
        if self.HBAVersion is not None:
            oprot.writeFieldBegin('HBAVersion', TType.STRING, 4)
            oprot.writeString(self.HBAVersion.encode('utf-8') if sys.version_info[0] == 2 else self.HBAVersion)
            oprot.writeFieldEnd()
        if self.HBAMode is not None:
            oprot.writeFieldBegin('HBAMode', TType.STRING, 5)
            oprot.writeString(self.HBAMode.encode('utf-8') if sys.version_info[0] == 2 else self.HBAMode)
            oprot.writeFieldEnd()
        if self.HBAHost is not None:
            oprot.writeFieldBegin('HBAHost', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.HBAHost))
            for iter34 in self.HBAHost:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeCaption(object):
    """
    Attributes:
     - totalSize
     - freeSize
     - usedSize
     - status

    """


    def __init__(self, totalSize=None, freeSize=None, usedSize=None, status=None,):
        self.totalSize = totalSize
        self.freeSize = freeSize
        self.usedSize = usedSize
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeCaption')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 2)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 3)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDevice(object):
    """
    Attributes:
     - devName
     - totalSize
     - freeSize
     - usedSize

    """


    def __init__(self, devName=None, totalSize=None, freeSize=None, usedSize=None,):
        self.devName = devName
        self.totalSize = totalSize
        self.freeSize = freeSize
        self.usedSize = usedSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDevice')
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 1)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 2)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 3)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 4)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncBridge(object):
    """
    Attributes:
     - bridgeName
     - device
     - type
     - vlanId

    """


    def __init__(self, bridgeName=None, device=None, type=None, vlanId=None,):
        self.bridgeName = bridgeName
        self.device = device
        self.type = type
        self.vlanId = vlanId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.bridgeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.device = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.vlanId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncBridge')
        if self.bridgeName is not None:
            oprot.writeFieldBegin('bridgeName', TType.STRING, 1)
            oprot.writeString(self.bridgeName.encode('utf-8') if sys.version_info[0] == 2 else self.bridgeName)
            oprot.writeFieldEnd()
        if self.device is not None:
            oprot.writeFieldBegin('device', TType.STRING, 2)
            oprot.writeString(self.device.encode('utf-8') if sys.version_info[0] == 2 else self.device)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.vlanId is not None:
            oprot.writeFieldBegin('vlanId', TType.I32, 4)
            oprot.writeI32(self.vlanId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncISO(object):
    """
    Attributes:
     - ISOname
     - size
     - path

    """


    def __init__(self, ISOname=None, size=None, path=None,):
        self.ISOname = ISOname
        self.size = size
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ISOname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncISO')
        if self.ISOname is not None:
            oprot.writeFieldBegin('ISOname', TType.STRING, 1)
            oprot.writeString(self.ISOname.encode('utf-8') if sys.version_info[0] == 2 else self.ISOname)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 2)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 3)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNetWork(object):
    """
    Attributes:
     - netName
     - macAddress
     - ip
     - netmask

    """


    def __init__(self, netName=None, macAddress=None, ip=None, netmask=None,):
        self.netName = netName
        self.macAddress = macAddress
        self.ip = ip
        self.netmask = netmask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.netName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.macAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.netmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNetWork')
        if self.netName is not None:
            oprot.writeFieldBegin('netName', TType.STRING, 1)
            oprot.writeString(self.netName.encode('utf-8') if sys.version_info[0] == 2 else self.netName)
            oprot.writeFieldEnd()
        if self.macAddress is not None:
            oprot.writeFieldBegin('macAddress', TType.STRING, 2)
            oprot.writeString(self.macAddress.encode('utf-8') if sys.version_info[0] == 2 else self.macAddress)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.netmask is not None:
            oprot.writeFieldBegin('netmask', TType.STRING, 4)
            oprot.writeString(self.netmask.encode('utf-8') if sys.version_info[0] == 2 else self.netmask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateLvmReq(object):
    """
    Attributes:
     - requestId
     - raidPath
     - raidName
     - raidTotal
     - raidUsable
     - raidType
     - volumeName
     - size
     - nodeId
     - desc
     - userName
     - volumeType
     - volumeId
     - volumePath
     - devName
     - devTotal
     - method
     - loginIp

    """


    def __init__(self, requestId=None, raidPath=None, raidName=None, raidTotal=None, raidUsable=None, raidType=None, volumeName=None, size=None, nodeId=None, desc=None, userName=None, volumeType=None, volumeId=None, volumePath=None, devName=None, devTotal=None, method=None, loginIp=None,):
        self.requestId = requestId
        self.raidPath = raidPath
        self.raidName = raidName
        self.raidTotal = raidTotal
        self.raidUsable = raidUsable
        self.raidType = raidType
        self.volumeName = volumeName
        self.size = size
        self.nodeId = nodeId
        self.desc = desc
        self.userName = userName
        self.volumeType = volumeType
        self.volumeId = volumeId
        self.volumePath = volumePath
        self.devName = devName
        self.devTotal = devTotal
        self.method = method
        self.loginIp = loginIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.raidPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.raidName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.raidTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.raidUsable = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.raidType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.volumeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.volumeId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.volumePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.devTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.method = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateLvmReq')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.raidPath is not None:
            oprot.writeFieldBegin('raidPath', TType.STRING, 2)
            oprot.writeString(self.raidPath.encode('utf-8') if sys.version_info[0] == 2 else self.raidPath)
            oprot.writeFieldEnd()
        if self.raidName is not None:
            oprot.writeFieldBegin('raidName', TType.STRING, 3)
            oprot.writeString(self.raidName.encode('utf-8') if sys.version_info[0] == 2 else self.raidName)
            oprot.writeFieldEnd()
        if self.raidTotal is not None:
            oprot.writeFieldBegin('raidTotal', TType.I64, 4)
            oprot.writeI64(self.raidTotal)
            oprot.writeFieldEnd()
        if self.raidUsable is not None:
            oprot.writeFieldBegin('raidUsable', TType.I64, 5)
            oprot.writeI64(self.raidUsable)
            oprot.writeFieldEnd()
        if self.raidType is not None:
            oprot.writeFieldBegin('raidType', TType.I32, 6)
            oprot.writeI32(self.raidType)
            oprot.writeFieldEnd()
        if self.volumeName is not None:
            oprot.writeFieldBegin('volumeName', TType.STRING, 7)
            oprot.writeString(self.volumeName.encode('utf-8') if sys.version_info[0] == 2 else self.volumeName)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 8)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 9)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 10)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 11)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 12)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.I64, 13)
            oprot.writeI64(self.volumeId)
            oprot.writeFieldEnd()
        if self.volumePath is not None:
            oprot.writeFieldBegin('volumePath', TType.STRING, 14)
            oprot.writeString(self.volumePath.encode('utf-8') if sys.version_info[0] == 2 else self.volumePath)
            oprot.writeFieldEnd()
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 15)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.devTotal is not None:
            oprot.writeFieldBegin('devTotal', TType.I64, 16)
            oprot.writeI64(self.devTotal)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 17)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 18)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateLvmRes(object):
    """
    Attributes:
     - requestId
     - isFinished
     - isErr
     - errs
     - nodeId

    """


    def __init__(self, requestId=None, isFinished=None, isErr=None, errs=None, nodeId=None,):
        self.requestId = requestId
        self.isFinished = isFinished
        self.isErr = isErr
        self.errs = errs
        self.nodeId = nodeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.errs = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.errs.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateLvmRes')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 2)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.isErr is not None:
            oprot.writeFieldBegin('isErr', TType.BOOL, 3)
            oprot.writeBool(self.isErr)
            oprot.writeFieldEnd()
        if self.errs is not None:
            oprot.writeFieldBegin('errs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.errs))
            for iter41 in self.errs:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 5)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCloudPool(object):
    """
    Attributes:
     - PoolId
     - PoolType
     - PoolName
     - PoolUsedSize
     - PoolTotalSize
     - PoolAllocSize

    """


    def __init__(self, PoolId=None, PoolType=None, PoolName=None, PoolUsedSize=None, PoolTotalSize=None, PoolAllocSize=None,):
        self.PoolId = PoolId
        self.PoolType = PoolType
        self.PoolName = PoolName
        self.PoolUsedSize = PoolUsedSize
        self.PoolTotalSize = PoolTotalSize
        self.PoolAllocSize = PoolAllocSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.PoolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.PoolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.PoolName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.PoolUsedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.PoolTotalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.PoolAllocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloudPool')
        if self.PoolId is not None:
            oprot.writeFieldBegin('PoolId', TType.STRING, 1)
            oprot.writeString(self.PoolId.encode('utf-8') if sys.version_info[0] == 2 else self.PoolId)
            oprot.writeFieldEnd()
        if self.PoolType is not None:
            oprot.writeFieldBegin('PoolType', TType.I32, 2)
            oprot.writeI32(self.PoolType)
            oprot.writeFieldEnd()
        if self.PoolName is not None:
            oprot.writeFieldBegin('PoolName', TType.STRING, 3)
            oprot.writeString(self.PoolName.encode('utf-8') if sys.version_info[0] == 2 else self.PoolName)
            oprot.writeFieldEnd()
        if self.PoolUsedSize is not None:
            oprot.writeFieldBegin('PoolUsedSize', TType.I64, 4)
            oprot.writeI64(self.PoolUsedSize)
            oprot.writeFieldEnd()
        if self.PoolTotalSize is not None:
            oprot.writeFieldBegin('PoolTotalSize', TType.I64, 5)
            oprot.writeI64(self.PoolTotalSize)
            oprot.writeFieldEnd()
        if self.PoolAllocSize is not None:
            oprot.writeFieldBegin('PoolAllocSize', TType.I64, 6)
            oprot.writeI64(self.PoolAllocSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCloudPoolList(object):
    """
    Attributes:
     - cloudPoolList

    """


    def __init__(self, cloudPoolList=None,):
        self.cloudPoolList = cloudPoolList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cloudPoolList = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = ncCloudPool()
                        _elem47.read(iprot)
                        self.cloudPoolList.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloudPoolList')
        if self.cloudPoolList is not None:
            oprot.writeFieldBegin('cloudPoolList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.cloudPoolList))
            for iter48 in self.cloudPoolList:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeInfo(object):
    """
    Attributes:
     - name
     - uuid
     - size
     - realSize
     - volumeId
     - poolId
     - fatherName
     - createTime
     - status

    """


    def __init__(self, name=None, uuid=None, size=None, realSize=None, volumeId=None, poolId=None, fatherName=None, createTime=None, status=None,):
        self.name = name
        self.uuid = uuid
        self.size = size
        self.realSize = realSize
        self.volumeId = volumeId
        self.poolId = poolId
        self.fatherName = fatherName
        self.createTime = createTime
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.realSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.volumeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.poolId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.fatherName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.realSize is not None:
            oprot.writeFieldBegin('realSize', TType.I64, 4)
            oprot.writeI64(self.realSize)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.I32, 5)
            oprot.writeI32(self.volumeId)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.I32, 6)
            oprot.writeI32(self.poolId)
            oprot.writeFieldEnd()
        if self.fatherName is not None:
            oprot.writeFieldBegin('fatherName', TType.STRING, 7)
            oprot.writeString(self.fatherName.encode('utf-8') if sys.version_info[0] == 2 else self.fatherName)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 8)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 9)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapVolumeInfo(object):
    """
    Attributes:
     - name
     - uuid
     - size
     - realSize
     - volumeId
     - poolId
     - fatherName
     - createTime

    """


    def __init__(self, name=None, uuid=None, size=None, realSize=None, volumeId=None, poolId=None, fatherName=None, createTime=None,):
        self.name = name
        self.uuid = uuid
        self.size = size
        self.realSize = realSize
        self.volumeId = volumeId
        self.poolId = poolId
        self.fatherName = fatherName
        self.createTime = createTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.realSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.volumeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.poolId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.fatherName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapVolumeInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.realSize is not None:
            oprot.writeFieldBegin('realSize', TType.I64, 4)
            oprot.writeI64(self.realSize)
            oprot.writeFieldEnd()
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.I32, 5)
            oprot.writeI32(self.volumeId)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.I32, 6)
            oprot.writeI32(self.poolId)
            oprot.writeFieldEnd()
        if self.fatherName is not None:
            oprot.writeFieldBegin('fatherName', TType.STRING, 7)
            oprot.writeString(self.fatherName.encode('utf-8') if sys.version_info[0] == 2 else self.fatherName)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 8)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateBaseVolumeRequest(object):
    """
    Attributes:
     - poolId
     - volName
     - volSize

    """


    def __init__(self, poolId=None, volName=None, volSize=None,):
        self.poolId = poolId
        self.volName = volName
        self.volSize = volSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.volSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateBaseVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.volName is not None:
            oprot.writeFieldBegin('volName', TType.STRING, 2)
            oprot.writeString(self.volName.encode('utf-8') if sys.version_info[0] == 2 else self.volName)
            oprot.writeFieldEnd()
        if self.volSize is not None:
            oprot.writeFieldBegin('volSize', TType.I64, 3)
            oprot.writeI64(self.volSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapVolumeRequest(object):
    """
    Attributes:
     - poolId
     - snapshotName
     - volName

    """


    def __init__(self, poolId=None, snapshotName=None, volName=None,):
        self.poolId = poolId
        self.snapshotName = snapshotName
        self.volName = volName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.snapshotName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.snapshotName is not None:
            oprot.writeFieldBegin('snapshotName', TType.STRING, 2)
            oprot.writeString(self.snapshotName.encode('utf-8') if sys.version_info[0] == 2 else self.snapshotName)
            oprot.writeFieldEnd()
        if self.volName is not None:
            oprot.writeFieldBegin('volName', TType.STRING, 3)
            oprot.writeString(self.volName.encode('utf-8') if sys.version_info[0] == 2 else self.volName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCloneVolumeRequest(object):
    """
    Attributes:
     - poolId
     - src
     - volName
     - volSize

    """


    def __init__(self, poolId=None, src=None, volName=None, volSize=None,):
        self.poolId = poolId
        self.src = src
        self.volName = volName
        self.volSize = volSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.src = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.volSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloneVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.src is not None:
            oprot.writeFieldBegin('src', TType.STRING, 2)
            oprot.writeString(self.src.encode('utf-8') if sys.version_info[0] == 2 else self.src)
            oprot.writeFieldEnd()
        if self.volName is not None:
            oprot.writeFieldBegin('volName', TType.STRING, 3)
            oprot.writeString(self.volName.encode('utf-8') if sys.version_info[0] == 2 else self.volName)
            oprot.writeFieldEnd()
        if self.volSize is not None:
            oprot.writeFieldBegin('volSize', TType.I64, 4)
            oprot.writeI64(self.volSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeName(object):
    """
    Attributes:
     - volumeName

    """


    def __init__(self, volumeName=None,):
        self.volumeName = volumeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeName')
        if self.volumeName is not None:
            oprot.writeFieldBegin('volumeName', TType.STRING, 1)
            oprot.writeString(self.volumeName.encode('utf-8') if sys.version_info[0] == 2 else self.volumeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDeleteVolumeRequest(object):
    """
    Attributes:
     - poolId
     - volumeNameList

    """


    def __init__(self, poolId=None, volumeNameList=None,):
        self.poolId = poolId
        self.volumeNameList = volumeNameList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.volumeNameList = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.volumeNameList.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDeleteVolumeRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.volumeNameList is not None:
            oprot.writeFieldBegin('volumeNameList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.volumeNameList))
            for iter55 in self.volumeNameList:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPartVolumeInfo(object):
    """
    Attributes:
     - volumeId
     - volumeType
     - volumeSize

    """


    def __init__(self, volumeId=None, volumeType=None, volumeSize=None,):
        self.volumeId = volumeId
        self.volumeType = volumeType
        self.volumeSize = volumeSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volumeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volumeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.volumeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPartVolumeInfo')
        if self.volumeId is not None:
            oprot.writeFieldBegin('volumeId', TType.STRING, 1)
            oprot.writeString(self.volumeId.encode('utf-8') if sys.version_info[0] == 2 else self.volumeId)
            oprot.writeFieldEnd()
        if self.volumeType is not None:
            oprot.writeFieldBegin('volumeType', TType.I32, 2)
            oprot.writeI32(self.volumeType)
            oprot.writeFieldEnd()
        if self.volumeSize is not None:
            oprot.writeFieldBegin('volumeSize', TType.I64, 3)
            oprot.writeI64(self.volumeSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetHostRequest(object):
    """
    Attributes:
     - volumeList
     - hostName

    """


    def __init__(self, volumeList=None, hostName=None,):
        self.volumeList = volumeList
        self.hostName = hostName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.volumeList = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = ncPartVolumeInfo()
                        _elem61.read(iprot)
                        self.volumeList.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetHostRequest')
        if self.volumeList is not None:
            oprot.writeFieldBegin('volumeList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeList))
            for iter62 in self.volumeList:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHost(object):
    """
    Attributes:
     - hostName
     - hostId

    """


    def __init__(self, hostName=None, hostId=None,):
        self.hostName = hostName
        self.hostId = hostId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.hostId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHost')
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 1)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.hostId is not None:
            oprot.writeFieldBegin('hostId', TType.I64, 2)
            oprot.writeI64(self.hostId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetDriverRequest(object):
    """
    Attributes:
     - volumeList
     - hostWwn

    """


    def __init__(self, volumeList=None, hostWwn=None,):
        self.volumeList = volumeList
        self.hostWwn = hostWwn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.volumeList = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = ncPartVolumeInfo()
                        _elem68.read(iprot)
                        self.volumeList.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostWwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetDriverRequest')
        if self.volumeList is not None:
            oprot.writeFieldBegin('volumeList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeList))
            for iter69 in self.volumeList:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hostWwn is not None:
            oprot.writeFieldBegin('hostWwn', TType.STRING, 2)
            oprot.writeString(self.hostWwn.encode('utf-8') if sys.version_info[0] == 2 else self.hostWwn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPort(object):
    """
    Attributes:
     - portName

    """


    def __init__(self, portName=None,):
        self.portName = portName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.portName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPort')
        if self.portName is not None:
            oprot.writeFieldBegin('portName', TType.STRING, 1)
            oprot.writeString(self.portName.encode('utf-8') if sys.version_info[0] == 2 else self.portName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHostName(object):
    """
    Attributes:
     - hostName

    """


    def __init__(self, hostName=None,):
        self.hostName = hostName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHostName')
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 1)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncHostMapping(object):
    """
    Attributes:
     - hostNameList

    """


    def __init__(self, hostNameList=None,):
        self.hostNameList = hostNameList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.hostNameList = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = ncHostName()
                        _elem75.read(iprot)
                        self.hostNameList.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncHostMapping')
        if self.hostNameList is not None:
            oprot.writeFieldBegin('hostNameList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.hostNameList))
            for iter76 in self.hostNameList:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateDriverMappingRequest(object):
    """
    Attributes:
     - hostName
     - portName
     - volumeList

    """


    def __init__(self, hostName=None, portName=None, volumeList=None,):
        self.hostName = hostName
        self.portName = portName
        self.volumeList = volumeList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.portName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.volumeList = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = ncPartVolumeInfo()
                        _elem82.read(iprot)
                        self.volumeList.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateDriverMappingRequest')
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 1)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.portName is not None:
            oprot.writeFieldBegin('portName', TType.STRING, 2)
            oprot.writeString(self.portName.encode('utf-8') if sys.version_info[0] == 2 else self.portName)
            oprot.writeFieldEnd()
        if self.volumeList is not None:
            oprot.writeFieldBegin('volumeList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeList))
            for iter83 in self.volumeList:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFSVolumeMappingRequest(object):
    """
    Attributes:
     - poolId
     - hostName
     - portName
     - lunNames
     - volumeList
     - iscsiIp
     - fabricModule

    """


    def __init__(self, poolId=None, hostName=None, portName=None, lunNames=None, volumeList=None, iscsiIp=None, fabricModule=None,):
        self.poolId = poolId
        self.hostName = hostName
        self.portName = portName
        self.lunNames = lunNames
        self.volumeList = volumeList
        self.iscsiIp = iscsiIp
        self.fabricModule = fabricModule

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.portName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.lunNames = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.lunNames.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.volumeList = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = ncPartVolumeInfo()
                        _elem95.read(iprot)
                        self.volumeList.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.iscsiIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.fabricModule = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFSVolumeMappingRequest')
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 1)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.portName is not None:
            oprot.writeFieldBegin('portName', TType.STRING, 3)
            oprot.writeString(self.portName.encode('utf-8') if sys.version_info[0] == 2 else self.portName)
            oprot.writeFieldEnd()
        if self.lunNames is not None:
            oprot.writeFieldBegin('lunNames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.lunNames))
            for iter96 in self.lunNames:
                oprot.writeString(iter96.encode('utf-8') if sys.version_info[0] == 2 else iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.volumeList is not None:
            oprot.writeFieldBegin('volumeList', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeList))
            for iter97 in self.volumeList:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iscsiIp is not None:
            oprot.writeFieldBegin('iscsiIp', TType.STRING, 6)
            oprot.writeString(self.iscsiIp.encode('utf-8') if sys.version_info[0] == 2 else self.iscsiIp)
            oprot.writeFieldEnd()
        if self.fabricModule is not None:
            oprot.writeFieldBegin('fabricModule', TType.I32, 7)
            oprot.writeI32(self.fabricModule)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFSVolumeMappingResponse(object):
    """
    Attributes:
     - dev_path
     - volume_name
     - ip

    """


    def __init__(self, dev_path=None, volume_name=None, ip=None,):
        self.dev_path = dev_path
        self.volume_name = volume_name
        self.ip = ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dev_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFSVolumeMappingResponse')
        if self.dev_path is not None:
            oprot.writeFieldBegin('dev_path', TType.STRING, 1)
            oprot.writeString(self.dev_path.encode('utf-8') if sys.version_info[0] == 2 else self.dev_path)
            oprot.writeFieldEnd()
        if self.volume_name is not None:
            oprot.writeFieldBegin('volume_name', TType.STRING, 2)
            oprot.writeString(self.volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.volume_name)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncISCSIPortal(object):
    """
    Attributes:
     - ip
     - port
     - status

    """


    def __init__(self, ip=None, port=None, status=None,):
        self.ip = ip
        self.port = port
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncISCSIPortal')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 3)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNodeInfoRequest(object):
    """
    Attributes:
     - nodeId

    """


    def __init__(self, nodeId=None,):
        self.nodeId = nodeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeInfoRequest')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 1)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNodeInfoReply(object):
    """
    Attributes:
     - exist
     - nodeInfo

    """


    def __init__(self, exist=None, nodeInfo=None,):
        self.exist = exist
        self.nodeInfo = nodeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.nodeInfo = ncNodeInfo()
                    self.nodeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeInfoReply')
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 1)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        if self.nodeInfo is not None:
            oprot.writeFieldBegin('nodeInfo', TType.STRUCT, 2)
            self.nodeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeMappingRequest(object):
    """
    Attributes:
     - volume_uuid
     - volume_config
     - volume_wwn
     - volume_type
     - fabric_type
     - storage_object_name
     - target_wwn
     - host_wwn
     - device_ip
     - server_lun_index
     - host_lun_index
     - network_portal_ip
     - network_portal_port
     - volume_lun_id
     - volume_size
     - link_id
     - client_id
     - server_id
     - data_transfe_ip

    """


    def __init__(self, volume_uuid=None, volume_config=None, volume_wwn=None, volume_type=None, fabric_type=None, storage_object_name=None, target_wwn=None, host_wwn=None, device_ip=None, server_lun_index=None, host_lun_index=None, network_portal_ip=None, network_portal_port=None, volume_lun_id=None, volume_size=None, link_id=None, client_id=None, server_id=None, data_transfe_ip=None,):
        self.volume_uuid = volume_uuid
        self.volume_config = volume_config
        self.volume_wwn = volume_wwn
        self.volume_type = volume_type
        self.fabric_type = fabric_type
        self.storage_object_name = storage_object_name
        self.target_wwn = target_wwn
        self.host_wwn = host_wwn
        self.device_ip = device_ip
        self.server_lun_index = server_lun_index
        self.host_lun_index = host_lun_index
        self.network_portal_ip = network_portal_ip
        self.network_portal_port = network_portal_port
        self.volume_lun_id = volume_lun_id
        self.volume_size = volume_size
        self.link_id = link_id
        self.client_id = client_id
        self.server_id = server_id
        self.data_transfe_ip = data_transfe_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volume_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fabric_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.storage_object_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.target_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.host_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.device_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.server_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.host_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.network_portal_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.network_portal_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.volume_lun_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.volume_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.server_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.data_transfe_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeMappingRequest')
        if self.volume_uuid is not None:
            oprot.writeFieldBegin('volume_uuid', TType.STRING, 1)
            oprot.writeString(self.volume_uuid.encode('utf-8') if sys.version_info[0] == 2 else self.volume_uuid)
            oprot.writeFieldEnd()
        if self.volume_config is not None:
            oprot.writeFieldBegin('volume_config', TType.STRING, 2)
            oprot.writeString(self.volume_config.encode('utf-8') if sys.version_info[0] == 2 else self.volume_config)
            oprot.writeFieldEnd()
        if self.volume_wwn is not None:
            oprot.writeFieldBegin('volume_wwn', TType.STRING, 3)
            oprot.writeString(self.volume_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.volume_wwn)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 4)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.fabric_type is not None:
            oprot.writeFieldBegin('fabric_type', TType.I32, 5)
            oprot.writeI32(self.fabric_type)
            oprot.writeFieldEnd()
        if self.storage_object_name is not None:
            oprot.writeFieldBegin('storage_object_name', TType.STRING, 6)
            oprot.writeString(self.storage_object_name.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_name)
            oprot.writeFieldEnd()
        if self.target_wwn is not None:
            oprot.writeFieldBegin('target_wwn', TType.STRING, 7)
            oprot.writeString(self.target_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.target_wwn)
            oprot.writeFieldEnd()
        if self.host_wwn is not None:
            oprot.writeFieldBegin('host_wwn', TType.STRING, 8)
            oprot.writeString(self.host_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.host_wwn)
            oprot.writeFieldEnd()
        if self.device_ip is not None:
            oprot.writeFieldBegin('device_ip', TType.STRING, 9)
            oprot.writeString(self.device_ip.encode('utf-8') if sys.version_info[0] == 2 else self.device_ip)
            oprot.writeFieldEnd()
        if self.server_lun_index is not None:
            oprot.writeFieldBegin('server_lun_index', TType.I32, 10)
            oprot.writeI32(self.server_lun_index)
            oprot.writeFieldEnd()
        if self.host_lun_index is not None:
            oprot.writeFieldBegin('host_lun_index', TType.I32, 11)
            oprot.writeI32(self.host_lun_index)
            oprot.writeFieldEnd()
        if self.network_portal_ip is not None:
            oprot.writeFieldBegin('network_portal_ip', TType.STRING, 12)
            oprot.writeString(self.network_portal_ip.encode('utf-8') if sys.version_info[0] == 2 else self.network_portal_ip)
            oprot.writeFieldEnd()
        if self.network_portal_port is not None:
            oprot.writeFieldBegin('network_portal_port', TType.I32, 13)
            oprot.writeI32(self.network_portal_port)
            oprot.writeFieldEnd()
        if self.volume_lun_id is not None:
            oprot.writeFieldBegin('volume_lun_id', TType.I64, 14)
            oprot.writeI64(self.volume_lun_id)
            oprot.writeFieldEnd()
        if self.volume_size is not None:
            oprot.writeFieldBegin('volume_size', TType.I64, 15)
            oprot.writeI64(self.volume_size)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 16)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 17)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.STRING, 18)
            oprot.writeString(self.server_id.encode('utf-8') if sys.version_info[0] == 2 else self.server_id)
            oprot.writeFieldEnd()
        if self.data_transfe_ip is not None:
            oprot.writeFieldBegin('data_transfe_ip', TType.STRING, 19)
            oprot.writeString(self.data_transfe_ip.encode('utf-8') if sys.version_info[0] == 2 else self.data_transfe_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVolumeMappingReply(object):
    """
    Attributes:
     - storage_object_type
     - storage_object_config
     - storage_object_name
     - storage_object_wwn
     - fabric_type
     - target_wwn
     - host_wwn
     - server_lun_index
     - host_lun_index
     - network_portal_ip
     - network_portal_port
     - tpg_tag
     - link_id

    """


    def __init__(self, storage_object_type=None, storage_object_config=None, storage_object_name=None, storage_object_wwn=None, fabric_type=None, target_wwn=None, host_wwn=None, server_lun_index=None, host_lun_index=None, network_portal_ip=None, network_portal_port=None, tpg_tag=None, link_id=None,):
        self.storage_object_type = storage_object_type
        self.storage_object_config = storage_object_config
        self.storage_object_name = storage_object_name
        self.storage_object_wwn = storage_object_wwn
        self.fabric_type = fabric_type
        self.target_wwn = target_wwn
        self.host_wwn = host_wwn
        self.server_lun_index = server_lun_index
        self.host_lun_index = host_lun_index
        self.network_portal_ip = network_portal_ip
        self.network_portal_port = network_portal_port
        self.tpg_tag = tpg_tag
        self.link_id = link_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.storage_object_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.storage_object_config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storage_object_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storage_object_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fabric_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.target_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.host_wwn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.server_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.host_lun_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.network_portal_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.network_portal_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.tpg_tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVolumeMappingReply')
        if self.storage_object_type is not None:
            oprot.writeFieldBegin('storage_object_type', TType.I32, 1)
            oprot.writeI32(self.storage_object_type)
            oprot.writeFieldEnd()
        if self.storage_object_config is not None:
            oprot.writeFieldBegin('storage_object_config', TType.STRING, 2)
            oprot.writeString(self.storage_object_config.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_config)
            oprot.writeFieldEnd()
        if self.storage_object_name is not None:
            oprot.writeFieldBegin('storage_object_name', TType.STRING, 3)
            oprot.writeString(self.storage_object_name.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_name)
            oprot.writeFieldEnd()
        if self.storage_object_wwn is not None:
            oprot.writeFieldBegin('storage_object_wwn', TType.STRING, 4)
            oprot.writeString(self.storage_object_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.storage_object_wwn)
            oprot.writeFieldEnd()
        if self.fabric_type is not None:
            oprot.writeFieldBegin('fabric_type', TType.I32, 5)
            oprot.writeI32(self.fabric_type)
            oprot.writeFieldEnd()
        if self.target_wwn is not None:
            oprot.writeFieldBegin('target_wwn', TType.STRING, 6)
            oprot.writeString(self.target_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.target_wwn)
            oprot.writeFieldEnd()
        if self.host_wwn is not None:
            oprot.writeFieldBegin('host_wwn', TType.STRING, 7)
            oprot.writeString(self.host_wwn.encode('utf-8') if sys.version_info[0] == 2 else self.host_wwn)
            oprot.writeFieldEnd()
        if self.server_lun_index is not None:
            oprot.writeFieldBegin('server_lun_index', TType.I32, 8)
            oprot.writeI32(self.server_lun_index)
            oprot.writeFieldEnd()
        if self.host_lun_index is not None:
            oprot.writeFieldBegin('host_lun_index', TType.I32, 9)
            oprot.writeI32(self.host_lun_index)
            oprot.writeFieldEnd()
        if self.network_portal_ip is not None:
            oprot.writeFieldBegin('network_portal_ip', TType.STRING, 10)
            oprot.writeString(self.network_portal_ip.encode('utf-8') if sys.version_info[0] == 2 else self.network_portal_ip)
            oprot.writeFieldEnd()
        if self.network_portal_port is not None:
            oprot.writeFieldBegin('network_portal_port', TType.I32, 11)
            oprot.writeI32(self.network_portal_port)
            oprot.writeFieldEnd()
        if self.tpg_tag is not None:
            oprot.writeFieldBegin('tpg_tag', TType.I32, 12)
            oprot.writeI32(self.tpg_tag)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 13)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetIscsiPortalInfo(object):
    """
    Attributes:
     - nodeIp
     - targetName

    """


    def __init__(self, nodeIp=None, targetName=None,):
        self.nodeIp = nodeIp
        self.targetName = targetName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetIscsiPortalInfo')
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 1)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.targetName is not None:
            oprot.writeFieldBegin('targetName', TType.STRING, 2)
            oprot.writeString(self.targetName.encode('utf-8') if sys.version_info[0] == 2 else self.targetName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncMigrationRequest(object):
    """
    Attributes:
     - src_node_id
     - dst_node_id
     - volume_type
     - flag

    """


    def __init__(self, src_node_id=None, dst_node_id=None, volume_type=None, flag=None,):
        self.src_node_id = src_node_id
        self.dst_node_id = dst_node_id
        self.volume_type = volume_type
        self.flag = flag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.src_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dst_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.flag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncMigrationRequest')
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.STRING, 1)
            oprot.writeString(self.src_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.src_node_id)
            oprot.writeFieldEnd()
        if self.dst_node_id is not None:
            oprot.writeFieldBegin('dst_node_id', TType.STRING, 2)
            oprot.writeString(self.dst_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.dst_node_id)
            oprot.writeFieldEnd()
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 3)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I32, 4)
            oprot.writeI32(self.flag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSftpReply(object):
    """
    Attributes:
     - result

    """


    def __init__(self, result=None,):
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSftpReply')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSftpVolUserRequest(object):
    """
    Attributes:
     - users

    """


    def __init__(self, users=None,):
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSftpVolUserRequest')
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.users))
            for iter104 in self.users:
                oprot.writeString(iter104.encode('utf-8') if sys.version_info[0] == 2 else iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSftpVolUserReponse(object):
    """
    Attributes:
     - users

    """


    def __init__(self, users=None,):
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSftpVolUserReponse')
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.users))
            for iter111 in self.users:
                oprot.writeString(iter111.encode('utf-8') if sys.version_info[0] == 2 else iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNodeMonitorInfo(object):
    """
    Attributes:
     - type
     - count

    """


    def __init__(self, type=None, count=None,):
        self.type = type
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNodeMonitorInfo')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCheckVolumeStatusRequest(object):
    """
    Attributes:
     - volume_type

    """


    def __init__(self, volume_type=None,):
        self.volume_type = volume_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.volume_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCheckVolumeStatusRequest')
        if self.volume_type is not None:
            oprot.writeFieldBegin('volume_type', TType.I32, 1)
            oprot.writeI32(self.volume_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFSNodeInfo(object):
    """
    Attributes:
     - id
     - manageIp
     - storageIp

    """


    def __init__(self, id=None, manageIp=None, storageIp=None,):
        self.id = id
        self.manageIp = manageIp
        self.storageIp = storageIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.manageIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storageIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFSNodeInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.manageIp is not None:
            oprot.writeFieldBegin('manageIp', TType.STRING, 2)
            oprot.writeString(self.manageIp.encode('utf-8') if sys.version_info[0] == 2 else self.manageIp)
            oprot.writeFieldEnd()
        if self.storageIp is not None:
            oprot.writeFieldBegin('storageIp', TType.STRING, 3)
            oprot.writeString(self.storageIp.encode('utf-8') if sys.version_info[0] == 2 else self.storageIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClusterLinkInfo(object):
    """
    Attributes:
     - cluster_id
     - vip
     - vip_ex
     - link_id

    """


    def __init__(self, cluster_id=None, vip=None, vip_ex=None, link_id=None,):
        self.cluster_id = cluster_id
        self.vip = vip
        self.vip_ex = vip_ex
        self.link_id = link_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vip_ex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.link_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClusterLinkInfo')
        if self.cluster_id is not None:
            oprot.writeFieldBegin('cluster_id', TType.STRING, 1)
            oprot.writeString(self.cluster_id.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_id)
            oprot.writeFieldEnd()
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRING, 2)
            oprot.writeString(self.vip.encode('utf-8') if sys.version_info[0] == 2 else self.vip)
            oprot.writeFieldEnd()
        if self.vip_ex is not None:
            oprot.writeFieldBegin('vip_ex', TType.STRING, 3)
            oprot.writeString(self.vip_ex.encode('utf-8') if sys.version_info[0] == 2 else self.vip_ex)
            oprot.writeFieldEnd()
        if self.link_id is not None:
            oprot.writeFieldBegin('link_id', TType.STRING, 4)
            oprot.writeString(self.link_id.encode('utf-8') if sys.version_info[0] == 2 else self.link_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClusterDetailInfo(object):
    """
    Attributes:
     - vip
     - vip_ex

    """


    def __init__(self, vip=None, vip_ex=None,):
        self.vip = vip
        self.vip_ex = vip_ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vip_ex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClusterDetailInfo')
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRING, 1)
            oprot.writeString(self.vip.encode('utf-8') if sys.version_info[0] == 2 else self.vip)
            oprot.writeFieldEnd()
        if self.vip_ex is not None:
            oprot.writeFieldBegin('vip_ex', TType.STRING, 2)
            oprot.writeString(self.vip_ex.encode('utf-8') if sys.version_info[0] == 2 else self.vip_ex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncProxyWhite(object):
    """
    Attributes:
     - ip
     - ip_ex
     - tcp_ports
     - udp_ports

    """


    def __init__(self, ip=None, ip_ex=None, tcp_ports=None, udp_ports=None,):
        self.ip = ip
        self.ip_ex = ip_ex
        self.tcp_ports = tcp_ports
        self.udp_ports = udp_ports

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip_ex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tcp_ports = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readI64()
                        self.tcp_ports.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.udp_ports = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = iprot.readI64()
                        self.udp_ports.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncProxyWhite')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.ip_ex is not None:
            oprot.writeFieldBegin('ip_ex', TType.STRING, 2)
            oprot.writeString(self.ip_ex.encode('utf-8') if sys.version_info[0] == 2 else self.ip_ex)
            oprot.writeFieldEnd()
        if self.tcp_ports is not None:
            oprot.writeFieldBegin('tcp_ports', TType.LIST, 3)
            oprot.writeListBegin(TType.I64, len(self.tcp_ports))
            for iter124 in self.tcp_ports:
                oprot.writeI64(iter124)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.udp_ports is not None:
            oprot.writeFieldBegin('udp_ports', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.udp_ports))
            for iter125 in self.udp_ports:
                oprot.writeI64(iter125)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClusterLinkResponse(object):
    """
    Attributes:
     - proxySet
     - destVip
     - destProxyIp
     - destProxyPort
     - destPlanarNetName
     - sourceVip
     - sourceProxyIp
     - sourceProxyPort
     - sourcePlanarNetName
     - state
     - destIntranetVip

    """


    def __init__(self, proxySet=None, destVip=None, destProxyIp=None, destProxyPort=None, destPlanarNetName=None, sourceVip=None, sourceProxyIp=None, sourceProxyPort=None, sourcePlanarNetName=None, state=None, destIntranetVip=None,):
        self.proxySet = proxySet
        self.destVip = destVip
        self.destProxyIp = destProxyIp
        self.destProxyPort = destProxyPort
        self.destPlanarNetName = destPlanarNetName
        self.sourceVip = sourceVip
        self.sourceProxyIp = sourceProxyIp
        self.sourceProxyPort = sourceProxyPort
        self.sourcePlanarNetName = sourcePlanarNetName
        self.state = state
        self.destIntranetVip = destIntranetVip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.proxySet = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.destVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.destProxyIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.destProxyPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.destPlanarNetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sourceVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sourceProxyIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.sourceProxyPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.sourcePlanarNetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.destIntranetVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClusterLinkResponse')
        if self.proxySet is not None:
            oprot.writeFieldBegin('proxySet', TType.I32, 1)
            oprot.writeI32(self.proxySet)
            oprot.writeFieldEnd()
        if self.destVip is not None:
            oprot.writeFieldBegin('destVip', TType.STRING, 2)
            oprot.writeString(self.destVip.encode('utf-8') if sys.version_info[0] == 2 else self.destVip)
            oprot.writeFieldEnd()
        if self.destProxyIp is not None:
            oprot.writeFieldBegin('destProxyIp', TType.STRING, 3)
            oprot.writeString(self.destProxyIp.encode('utf-8') if sys.version_info[0] == 2 else self.destProxyIp)
            oprot.writeFieldEnd()
        if self.destProxyPort is not None:
            oprot.writeFieldBegin('destProxyPort', TType.I64, 4)
            oprot.writeI64(self.destProxyPort)
            oprot.writeFieldEnd()
        if self.destPlanarNetName is not None:
            oprot.writeFieldBegin('destPlanarNetName', TType.STRING, 5)
            oprot.writeString(self.destPlanarNetName.encode('utf-8') if sys.version_info[0] == 2 else self.destPlanarNetName)
            oprot.writeFieldEnd()
        if self.sourceVip is not None:
            oprot.writeFieldBegin('sourceVip', TType.STRING, 6)
            oprot.writeString(self.sourceVip.encode('utf-8') if sys.version_info[0] == 2 else self.sourceVip)
            oprot.writeFieldEnd()
        if self.sourceProxyIp is not None:
            oprot.writeFieldBegin('sourceProxyIp', TType.STRING, 7)
            oprot.writeString(self.sourceProxyIp.encode('utf-8') if sys.version_info[0] == 2 else self.sourceProxyIp)
            oprot.writeFieldEnd()
        if self.sourceProxyPort is not None:
            oprot.writeFieldBegin('sourceProxyPort', TType.I64, 8)
            oprot.writeI64(self.sourceProxyPort)
            oprot.writeFieldEnd()
        if self.sourcePlanarNetName is not None:
            oprot.writeFieldBegin('sourcePlanarNetName', TType.STRING, 9)
            oprot.writeString(self.sourcePlanarNetName.encode('utf-8') if sys.version_info[0] == 2 else self.sourcePlanarNetName)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 10)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.destIntranetVip is not None:
            oprot.writeFieldBegin('destIntranetVip', TType.STRING, 11)
            oprot.writeString(self.destIntranetVip.encode('utf-8') if sys.version_info[0] == 2 else self.destIntranetVip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncResult(object):
    """
    Attributes:
     - result
     - error_msg

    """


    def __init__(self, result=None, error_msg=None,):
        self.result = result
        self.error_msg = error_msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncResult')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 1)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncServiceReload(object):
    """
    Attributes:
     - ServiceName
     - ReloadMode

    """


    def __init__(self, ServiceName=None, ReloadMode=None,):
        self.ServiceName = ServiceName
        self.ReloadMode = ReloadMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ServiceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ReloadMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServiceReload')
        if self.ServiceName is not None:
            oprot.writeFieldBegin('ServiceName', TType.STRING, 1)
            oprot.writeString(self.ServiceName.encode('utf-8') if sys.version_info[0] == 2 else self.ServiceName)
            oprot.writeFieldEnd()
        if self.ReloadMode is not None:
            oprot.writeFieldBegin('ReloadMode', TType.STRING, 2)
            oprot.writeString(self.ReloadMode.encode('utf-8') if sys.version_info[0] == 2 else self.ReloadMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDBConfigInfo(object):
    """
    Attributes:
     - version
     - update
     - isMaster

    """


    def __init__(self, version=None, update=None, isMaster=None,):
        self.version = version
        self.update = update
        self.isMaster = isMaster

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.update = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isMaster = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBConfigInfo')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.update is not None:
            oprot.writeFieldBegin('update', TType.STRING, 2)
            oprot.writeString(self.update.encode('utf-8') if sys.version_info[0] == 2 else self.update)
            oprot.writeFieldEnd()
        if self.isMaster is not None:
            oprot.writeFieldBegin('isMaster', TType.BOOL, 3)
            oprot.writeBool(self.isMaster)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncServiceInfo)
ncServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ncServiceStu)
ncServiceStu.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'serviceType', None, None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ncNodeDetailInfo)
ncNodeDetailInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'cpuOccupy', None, None, ),  # 1
    (2, TType.DOUBLE, 'memTotal', None, None, ),  # 2
    (3, TType.DOUBLE, 'memFree', None, None, ),  # 3
    (4, TType.DOUBLE, 'network', None, None, ),  # 4
    (5, TType.DOUBLE, 'diskIO', None, None, ),  # 5
    (6, TType.DOUBLE, 'volumeTotal', None, None, ),  # 6
    (7, TType.DOUBLE, 'volumeUsed', None, None, ),  # 7
    (8, TType.STRING, 'machineCode', 'UTF8', None, ),  # 8
    (9, TType.I64, 'calulateTime', None, None, ),  # 9
    (10, TType.STRING, 'id', 'UTF8', None, ),  # 10
)
all_structs.append(ncNodeInfo)
ncNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'machineCode', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'version', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'os', 'UTF8', None, ),  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    (8, TType.STRING, 'description', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'errorMsg', 'UTF8', None, ),  # 9
    (10, TType.I32, 'productType', None, None, ),  # 10
    (11, TType.STRING, 'productVersion', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'product_name', 'UTF8', None, ),  # 12
    (13, TType.I32, 'osType', None, None, ),  # 13
    (14, TType.STRING, 'id', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'nodeIpEx', 'UTF8', None, ),  # 15
)
all_structs.append(ncStoragePath)
ncStoragePath.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'path', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'freeSize', None, None, ),  # 3
    (4, TType.BOOL, 'expandedFlag', None, None, ),  # 4
)
all_structs.append(ncDeviceInfo)
ncDeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodeName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hostName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'machineCode', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'version', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'os', 'UTF8', None, ),  # 7
)
all_structs.append(ncCKNode)
ncCKNode.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'serviceType', None, None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'machineCode', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'value', 'UTF8', None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
    (6, TType.STRING, 'sipex', 'UTF8', None, ),  # 6
)
all_structs.append(ncCKNodeList)
ncCKNodeList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nodeList', (TType.STRUCT, [ncCKNode, None], False), None, ),  # 1
)
all_structs.append(ncCKNodeListRequest)
ncCKNodeListRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'serviceType', None, None, ),  # 1
)
all_structs.append(ncCKNodeListReply)
ncCKNodeListReply.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nodeList', (TType.STRUCT, [ncCKNode, None], False), None, ),  # 1
)
all_structs.append(ncClusterInfo)
ncClusterInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cluster_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vip_ex', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, -1, ),  # 4
    (5, TType.STRING, 'customer', 'UTF8', None, ),  # 5
    (6, TType.I32, 'proxySet', None, None, ),  # 6
    (7, TType.STRING, 'sourceProxyIp', 'UTF8', None, ),  # 7
    (8, TType.I64, 'sourceProxyPort', None, None, ),  # 8
    (9, TType.STRING, 'sourcePlanarNetName', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'link_id', 'UTF8', None, ),  # 10
    (11, TType.I32, 'state', None, None, ),  # 11
)
all_structs.append(ncRaidCard)
ncRaidCard.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'adpId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'producer', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'model', 'UTF8', None, ),  # 3
    (4, TType.I64, 'memSize', None, None, ),  # 4
    (5, TType.STRING, 'batType', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'batStatus', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'chargStatus', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'temperature', 'UTF8', None, ),  # 8
)
all_structs.append(diskdata)
diskdata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'devStatus', None, None, ),  # 2
)
all_structs.append(sparedata)
sparedata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'devStatus', None, None, ),  # 2
    (3, TType.STRING, 'devModel', 'UTF8', None, ),  # 3
    (4, TType.I64, 'devTotal', None, None, ),  # 4
    (5, TType.I32, 'spareType', None, None, ),  # 5
)
all_structs.append(ncRaids)
ncRaids.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'raidId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'raidTotal', None, None, ),  # 2
    (3, TType.I64, 'raidUsable', None, None, ),  # 3
    (4, TType.STRING, 'raidName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'raidType', None, None, ),  # 5
    (6, TType.DOUBLE, 'initOccupy', None, None, ),  # 6
    (7, TType.I32, 'raidLevel', None, None, ),  # 7
    (8, TType.I32, 'raidStatus', None, None, ),  # 8
    (9, TType.I32, 'readCache', None, None, ),  # 9
    (10, TType.I32, 'writeCache', None, None, ),  # 10
    (11, TType.I64, 'stripSize', None, None, ),  # 11
    (12, TType.LIST, 'diskdatas', (TType.STRUCT, [diskdata, None], False), None, ),  # 12
    (13, TType.LIST, 'sparedatas', (TType.STRUCT, [sparedata, None], False), None, ),  # 13
)
all_structs.append(ncDisks)
ncDisks.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'adpId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'array', None, None, ),  # 2
    (3, TType.STRING, 'arrayName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'devId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'devName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'devModel', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'devType', 'UTF8', None, ),  # 7
    (8, TType.I32, 'devStatus', None, None, ),  # 8
    (9, TType.STRING, 'slot', 'UTF8', None, ),  # 9
    (10, TType.I64, 'devTotal', None, None, ),  # 10
    (11, TType.I32, 'spareType', None, None, ),  # 11
    (12, TType.STRING, 'spareRaid', 'UTF8', None, ),  # 12
)
all_structs.append(ncIdelDisks)
ncIdelDisks.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'devName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'devModel', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'slot', 'UTF8', None, ),  # 4
    (5, TType.I64, 'devTotal', None, None, ),  # 5
    (6, TType.STRING, 'devType', 'UTF8', None, ),  # 6
)
all_structs.append(ncRaidVolume)
ncRaidVolume.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'raidTotal', None, None, ),  # 1
    (2, TType.I64, 'raidUsable', None, None, ),  # 2
    (3, TType.STRING, 'raidName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'raidType', None, None, ),  # 4
    (5, TType.I32, 'raidStatus', None, None, ),  # 5
)
all_structs.append(ncVolume)
ncVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'raidName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volumeName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'raidTotal', None, None, ),  # 3
    (4, TType.I32, 'volumeType', None, None, ),  # 4
    (5, TType.STRING, 'nodeId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'raidUsable', None, None, ),  # 6
    (7, TType.I32, 'raidType', None, None, ),  # 7
    (8, TType.I64, 'pathSize', None, None, ),  # 8
    (9, TType.STRING, 'mountPoint', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'path', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'desc', 'UTF8', None, ),  # 11
    (12, TType.I32, 'storageType', None, 0, ),  # 12
    (13, TType.STRING, 'cloudBlockName', 'UTF8', None, ),  # 13
)
all_structs.append(ncHBAHost)
ncHBAHost.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'wwpn', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'wwnn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'portId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'maxNPIVCount', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'portState', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'supportSpeed', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'portSpeed', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'fabricName', 'UTF8', None, ),  # 9
)
all_structs.append(ncHBA)
ncHBA.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'HBAName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'HBASlot', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'HBAType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'HBAVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'HBAMode', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'HBAHost', (TType.STRUCT, [ncHBAHost, None], False), None, ),  # 6
)
all_structs.append(ncVolumeCaption)
ncVolumeCaption.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.I64, 'freeSize', None, None, ),  # 2
    (3, TType.I64, 'usedSize', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
)
all_structs.append(ncDevice)
ncDevice.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'devName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'totalSize', None, None, ),  # 2
    (3, TType.I64, 'freeSize', None, None, ),  # 3
    (4, TType.I64, 'usedSize', None, None, ),  # 4
)
all_structs.append(ncBridge)
ncBridge.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'bridgeName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'device', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'vlanId', None, None, ),  # 4
)
all_structs.append(ncISO)
ncISO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ISOname', 'UTF8', None, ),  # 1
    (2, TType.I64, 'size', None, None, ),  # 2
    (3, TType.STRING, 'path', 'UTF8', None, ),  # 3
)
all_structs.append(ncNetWork)
ncNetWork.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'netName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'macAddress', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'netmask', 'UTF8', None, ),  # 4
)
all_structs.append(ncCreateLvmReq)
ncCreateLvmReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'raidPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'raidName', 'UTF8', None, ),  # 3
    (4, TType.I64, 'raidTotal', None, None, ),  # 4
    (5, TType.I64, 'raidUsable', None, None, ),  # 5
    (6, TType.I32, 'raidType', None, None, ),  # 6
    (7, TType.STRING, 'volumeName', 'UTF8', None, ),  # 7
    (8, TType.I64, 'size', None, None, ),  # 8
    (9, TType.STRING, 'nodeId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'desc', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'userName', 'UTF8', None, ),  # 11
    (12, TType.I32, 'volumeType', None, None, ),  # 12
    (13, TType.I64, 'volumeId', None, None, ),  # 13
    (14, TType.STRING, 'volumePath', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'devName', 'UTF8', None, ),  # 15
    (16, TType.I64, 'devTotal', None, None, ),  # 16
    (17, TType.I32, 'method', None, None, ),  # 17
    (18, TType.STRING, 'loginIp', 'UTF8', None, ),  # 18
)
all_structs.append(ncCreateLvmRes)
ncCreateLvmRes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isFinished', None, None, ),  # 2
    (3, TType.BOOL, 'isErr', None, None, ),  # 3
    (4, TType.LIST, 'errs', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'nodeId', 'UTF8', None, ),  # 5
)
all_structs.append(ncCloudPool)
ncCloudPool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'PoolId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'PoolType', None, None, ),  # 2
    (3, TType.STRING, 'PoolName', 'UTF8', None, ),  # 3
    (4, TType.I64, 'PoolUsedSize', None, None, ),  # 4
    (5, TType.I64, 'PoolTotalSize', None, None, ),  # 5
    (6, TType.I64, 'PoolAllocSize', None, None, ),  # 6
)
all_structs.append(ncCloudPoolList)
ncCloudPoolList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cloudPoolList', (TType.STRUCT, [ncCloudPool, None], False), None, ),  # 1
)
all_structs.append(ncVolumeInfo)
ncVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.I64, 'realSize', None, None, ),  # 4
    (5, TType.I32, 'volumeId', None, None, ),  # 5
    (6, TType.I32, 'poolId', None, None, ),  # 6
    (7, TType.STRING, 'fatherName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'createTime', 'UTF8', None, ),  # 8
    (9, TType.I32, 'status', None, None, ),  # 9
)
all_structs.append(ncSnapVolumeInfo)
ncSnapVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.I64, 'realSize', None, None, ),  # 4
    (5, TType.I32, 'volumeId', None, None, ),  # 5
    (6, TType.I32, 'poolId', None, None, ),  # 6
    (7, TType.STRING, 'fatherName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'createTime', 'UTF8', None, ),  # 8
)
all_structs.append(ncCreateBaseVolumeRequest)
ncCreateBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'volSize', None, None, ),  # 3
)
all_structs.append(ncSnapVolumeRequest)
ncSnapVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'snapshotName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'volName', 'UTF8', None, ),  # 3
)
all_structs.append(ncCloneVolumeRequest)
ncCloneVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'src', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'volName', 'UTF8', None, ),  # 3
    (4, TType.I64, 'volSize', None, None, ),  # 4
)
all_structs.append(ncVolumeName)
ncVolumeName.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeName', 'UTF8', None, ),  # 1
)
all_structs.append(ncDeleteVolumeRequest)
ncDeleteVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'volumeNameList', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncPartVolumeInfo)
ncPartVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volumeId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'volumeType', None, None, ),  # 2
    (3, TType.I64, 'volumeSize', None, None, ),  # 3
)
all_structs.append(ncGetHostRequest)
ncGetHostRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'volumeList', (TType.STRUCT, [ncPartVolumeInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
)
all_structs.append(ncHost)
ncHost.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'hostId', None, None, ),  # 2
)
all_structs.append(ncGetDriverRequest)
ncGetDriverRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'volumeList', (TType.STRUCT, [ncPartVolumeInfo, None], False), None, ),  # 1
    (2, TType.STRING, 'hostWwn', 'UTF8', None, ),  # 2
)
all_structs.append(ncPort)
ncPort.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'portName', 'UTF8', None, ),  # 1
)
all_structs.append(ncHostName)
ncHostName.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostName', 'UTF8', None, ),  # 1
)
all_structs.append(ncHostMapping)
ncHostMapping.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'hostNameList', (TType.STRUCT, [ncHostName, None], False), None, ),  # 1
)
all_structs.append(ncCreateDriverMappingRequest)
ncCreateDriverMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'portName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'volumeList', (TType.STRUCT, [ncPartVolumeInfo, None], False), None, ),  # 3
)
all_structs.append(ncFSVolumeMappingRequest)
ncFSVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'portName', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'lunNames', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'volumeList', (TType.STRUCT, [ncPartVolumeInfo, None], False), None, ),  # 5
    (6, TType.STRING, 'iscsiIp', 'UTF8', None, ),  # 6
    (7, TType.I32, 'fabricModule', None, None, ),  # 7
)
all_structs.append(ncFSVolumeMappingResponse)
ncFSVolumeMappingResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dev_path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
)
all_structs.append(ncISCSIPortal)
ncISCSIPortal.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.STRING, 'status', 'UTF8', None, ),  # 3
)
all_structs.append(ncNodeInfoRequest)
ncNodeInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeId', 'UTF8', None, ),  # 1
)
all_structs.append(ncNodeInfoReply)
ncNodeInfoReply.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'exist', None, None, ),  # 1
    (2, TType.STRUCT, 'nodeInfo', [ncNodeInfo, None], None, ),  # 2
)
all_structs.append(ncVolumeMappingRequest)
ncVolumeMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_config', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'volume_wwn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'volume_type', None, None, ),  # 4
    (5, TType.I32, 'fabric_type', None, None, ),  # 5
    (6, TType.STRING, 'storage_object_name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'target_wwn', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'host_wwn', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'device_ip', 'UTF8', None, ),  # 9
    (10, TType.I32, 'server_lun_index', None, None, ),  # 10
    (11, TType.I32, 'host_lun_index', None, None, ),  # 11
    (12, TType.STRING, 'network_portal_ip', 'UTF8', None, ),  # 12
    (13, TType.I32, 'network_portal_port', None, None, ),  # 13
    (14, TType.I64, 'volume_lun_id', None, None, ),  # 14
    (15, TType.I64, 'volume_size', None, None, ),  # 15
    (16, TType.STRING, 'link_id', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'client_id', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'server_id', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'data_transfe_ip', 'UTF8', None, ),  # 19
)
all_structs.append(ncVolumeMappingReply)
ncVolumeMappingReply.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'storage_object_type', None, None, ),  # 1
    (2, TType.STRING, 'storage_object_config', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'storage_object_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storage_object_wwn', 'UTF8', None, ),  # 4
    (5, TType.I32, 'fabric_type', None, None, ),  # 5
    (6, TType.STRING, 'target_wwn', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'host_wwn', 'UTF8', None, ),  # 7
    (8, TType.I32, 'server_lun_index', None, None, ),  # 8
    (9, TType.I32, 'host_lun_index', None, None, ),  # 9
    (10, TType.STRING, 'network_portal_ip', 'UTF8', None, ),  # 10
    (11, TType.I32, 'network_portal_port', None, None, ),  # 11
    (12, TType.I32, 'tpg_tag', None, None, ),  # 12
    (13, TType.STRING, 'link_id', 'UTF8', None, ),  # 13
)
all_structs.append(ncGetIscsiPortalInfo)
ncGetIscsiPortalInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'targetName', 'UTF8', None, ),  # 2
)
all_structs.append(ncMigrationRequest)
ncMigrationRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'src_node_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dst_node_id', 'UTF8', None, ),  # 2
    (3, TType.I32, 'volume_type', None, None, ),  # 3
    (4, TType.I32, 'flag', None, None, ),  # 4
)
all_structs.append(ncSftpReply)
ncSftpReply.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
)
all_structs.append(ncSftpVolUserRequest)
ncSftpVolUserRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'users', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncSftpVolUserReponse)
ncSftpVolUserReponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'users', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncNodeMonitorInfo)
ncNodeMonitorInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
)
all_structs.append(ncCheckVolumeStatusRequest)
ncCheckVolumeStatusRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'volume_type', None, None, ),  # 1
)
all_structs.append(ncFSNodeInfo)
ncFSNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'manageIp', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'storageIp', 'UTF8', None, ),  # 3
)
all_structs.append(ncClusterLinkInfo)
ncClusterLinkInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cluster_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vip_ex', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'link_id', 'UTF8', None, ),  # 4
)
all_structs.append(ncClusterDetailInfo)
ncClusterDetailInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vip_ex', 'UTF8', None, ),  # 2
)
all_structs.append(ncProxyWhite)
ncProxyWhite.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip_ex', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'tcp_ports', (TType.I64, None, False), None, ),  # 3
    (4, TType.LIST, 'udp_ports', (TType.I64, None, False), None, ),  # 4
)
all_structs.append(ncClusterLinkResponse)
ncClusterLinkResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'proxySet', None, None, ),  # 1
    (2, TType.STRING, 'destVip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'destProxyIp', 'UTF8', None, ),  # 3
    (4, TType.I64, 'destProxyPort', None, None, ),  # 4
    (5, TType.STRING, 'destPlanarNetName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'sourceVip', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'sourceProxyIp', 'UTF8', None, ),  # 7
    (8, TType.I64, 'sourceProxyPort', None, None, ),  # 8
    (9, TType.STRING, 'sourcePlanarNetName', 'UTF8', None, ),  # 9
    (10, TType.I32, 'state', None, None, ),  # 10
    (11, TType.STRING, 'destIntranetVip', 'UTF8', None, ),  # 11
)
all_structs.append(ncResult)
ncResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'result', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
)
all_structs.append(ncServiceReload)
ncServiceReload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ServiceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ReloadMode', 'UTF8', None, ),  # 2
)
all_structs.append(ncDBConfigInfo)
ncDBConfigInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'version', None, None, ),  # 1
    (2, TType.STRING, 'update', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isMaster', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
