# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncEPMSMsgType(object):
    """
    消息类型


    """
    NC_EPMS_SEND_MSG = 0
    NC_EPMS_REPLY_MSG = 1
    NC_EPMS_SEND_SUCCESS = 2
    NC_EPMS_SEND_FAILED = 3
    NC_EPMS_NO_SUBSCRIBER = 4
    NC_EPMS_CONNECT = 5
    NC_EPMS_DISCONNECT = 6
    NC_EPMS_HEARTBEAT = 7

    _VALUES_TO_NAMES = {
        0: "NC_EPMS_SEND_MSG",
        1: "NC_EPMS_REPLY_MSG",
        2: "NC_EPMS_SEND_SUCCESS",
        3: "NC_EPMS_SEND_FAILED",
        4: "NC_EPMS_NO_SUBSCRIBER",
        5: "NC_EPMS_CONNECT",
        6: "NC_EPMS_DISCONNECT",
        7: "NC_EPMS_HEARTBEAT",
    }

    _NAMES_TO_VALUES = {
        "NC_EPMS_SEND_MSG": 0,
        "NC_EPMS_REPLY_MSG": 1,
        "NC_EPMS_SEND_SUCCESS": 2,
        "NC_EPMS_SEND_FAILED": 3,
        "NC_EPMS_NO_SUBSCRIBER": 4,
        "NC_EPMS_CONNECT": 5,
        "NC_EPMS_DISCONNECT": 6,
        "NC_EPMS_HEARTBEAT": 7,
    }


class ncEPMSMsgOpt(object):
    """
    消息配置选项


    """
    NC_EPMS_ENABLE_COMPRESS = 1
    NC_EPMS_ENABLE_ENCRYPT = 2

    _VALUES_TO_NAMES = {
        1: "NC_EPMS_ENABLE_COMPRESS",
        2: "NC_EPMS_ENABLE_ENCRYPT",
    }

    _NAMES_TO_VALUES = {
        "NC_EPMS_ENABLE_COMPRESS": 1,
        "NC_EPMS_ENABLE_ENCRYPT": 2,
    }


class ncEPMSExceptionType(object):
    """
    异常类型


    """
    NC_ROOT_EXCEPTION = 0
    NC_ABORT_EXCEPTION = 1
    NC_WARN_EXCEPTION = 2
    NC_INFO_EXCEPTION = 3
    NC_IGNORE_EXCEPTION = 4
    NC_NON_CORE_EXCEPTION = 5

    _VALUES_TO_NAMES = {
        0: "NC_ROOT_EXCEPTION",
        1: "NC_ABORT_EXCEPTION",
        2: "NC_WARN_EXCEPTION",
        3: "NC_INFO_EXCEPTION",
        4: "NC_IGNORE_EXCEPTION",
        5: "NC_NON_CORE_EXCEPTION",
    }

    _NAMES_TO_VALUES = {
        "NC_ROOT_EXCEPTION": 0,
        "NC_ABORT_EXCEPTION": 1,
        "NC_WARN_EXCEPTION": 2,
        "NC_INFO_EXCEPTION": 3,
        "NC_IGNORE_EXCEPTION": 4,
        "NC_NON_CORE_EXCEPTION": 5,
    }


class ncConnectionInfo(object):
    """
    连接消息（IP, PORT 直接从连接状态中获取）


    Attributes:
     - osVersion
     - hostName
     - processName
     - machineCode
     - ipAddr

    """


    def __init__(self, osVersion=None, hostName=None, processName=None, machineCode=None, ipAddr=None,):
        self.osVersion = osVersion
        self.hostName = hostName
        self.processName = processName
        self.machineCode = machineCode
        self.ipAddr = ipAddr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.osVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.processName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ipAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncConnectionInfo')
        if self.osVersion is not None:
            oprot.writeFieldBegin('osVersion', TType.I32, 1)
            oprot.writeI32(self.osVersion)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.processName is not None:
            oprot.writeFieldBegin('processName', TType.STRING, 3)
            oprot.writeString(self.processName.encode('utf-8') if sys.version_info[0] == 2 else self.processName)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 4)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.ipAddr is not None:
            oprot.writeFieldBegin('ipAddr', TType.STRING, 5)
            oprot.writeString(self.ipAddr.encode('utf-8') if sys.version_info[0] == 2 else self.ipAddr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncConnectRequest(object):
    """
    连接请求


    Attributes:
     - connInfo
     - connectType
     - detecttime
     - reconnectId
     - guid

    """


    def __init__(self, connInfo=None, connectType=None, detecttime=None, reconnectId=-1, guid="",):
        self.connInfo = connInfo
        self.connectType = connectType
        self.detecttime = detecttime
        self.reconnectId = reconnectId
        self.guid = guid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.connInfo = ncConnectionInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.connectType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.detecttime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.reconnectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncConnectRequest')
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.connectType is not None:
            oprot.writeFieldBegin('connectType', TType.I32, 2)
            oprot.writeI32(self.connectType)
            oprot.writeFieldEnd()
        if self.detecttime is not None:
            oprot.writeFieldBegin('detecttime', TType.I32, 3)
            oprot.writeI32(self.detecttime)
            oprot.writeFieldEnd()
        if self.reconnectId is not None:
            oprot.writeFieldBegin('reconnectId', TType.I64, 4)
            oprot.writeI64(self.reconnectId)
            oprot.writeFieldEnd()
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 5)
            oprot.writeString(self.guid.encode('utf-8') if sys.version_info[0] == 2 else self.guid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncConnectReply(object):
    """
    连接请求回复


    Attributes:
     - connInfo
     - reconnectId
     - guid

    """


    def __init__(self, connInfo=None, reconnectId=None, guid=None,):
        self.connInfo = connInfo
        self.reconnectId = reconnectId
        self.guid = guid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.connInfo = ncConnectionInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.reconnectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncConnectReply')
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.reconnectId is not None:
            oprot.writeFieldBegin('reconnectId', TType.I64, 2)
            oprot.writeI64(self.reconnectId)
            oprot.writeFieldEnd()
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 3)
            oprot.writeString(self.guid.encode('utf-8') if sys.version_info[0] == 2 else self.guid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEPMSMsgHeader(object):
    """
    EPMS 消息头

    EPMS 根据  【type + msgName】 判断接收到的消息是哪种类型
               【bufLength + buffer】 为消息的实际内容，将 proto 对象转换为二进制数据块后得出

        1. NC_EPMS_SEND_MSG + msgName：     由发送端发送过来的消息，EPMS 接收到后将消息通知给订阅函数
        2. NC_EPMS_REPLY_MSG + msgName：    由发送端发送过来的回复消息，EPMS 接收到后将消息通知给发送结果回调函数
        3. NC_EPMS_SEND_SUCCESS + msgName： 由发送端发送过来的发送成功，EPMS 接收到后将成功结果通知给发送结果回调函数
        4. NC_EPMS_SEND_FAILED + msgName：  由发送端发送过来的发送失败，EPMS 接收到后将失败结果及错误内容通知给发送结果回调函数

    Attributes:
     - msgType
     - msgName
     - sourceId
     - protoName
     - bufLength
     - buffer
     - option

    """


    def __init__(self, msgType=None, msgName=None, sourceId=None, protoName=None, bufLength=None, buffer=None, option=0,):
        self.msgType = msgType
        self.msgName = msgName
        self.sourceId = sourceId
        self.protoName = protoName
        self.bufLength = bufLength
        self.buffer = buffer
        self.option = option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.msgType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sourceId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.protoName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.bufLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.buffer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.option = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEPMSMsgHeader')
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.I32, 1)
            oprot.writeI32(self.msgType)
            oprot.writeFieldEnd()
        if self.msgName is not None:
            oprot.writeFieldBegin('msgName', TType.STRING, 2)
            oprot.writeString(self.msgName.encode('utf-8') if sys.version_info[0] == 2 else self.msgName)
            oprot.writeFieldEnd()
        if self.sourceId is not None:
            oprot.writeFieldBegin('sourceId', TType.I64, 3)
            oprot.writeI64(self.sourceId)
            oprot.writeFieldEnd()
        if self.protoName is not None:
            oprot.writeFieldBegin('protoName', TType.STRING, 4)
            oprot.writeString(self.protoName.encode('utf-8') if sys.version_info[0] == 2 else self.protoName)
            oprot.writeFieldEnd()
        if self.bufLength is not None:
            oprot.writeFieldBegin('bufLength', TType.I32, 5)
            oprot.writeI32(self.bufLength)
            oprot.writeFieldEnd()
        if self.buffer is not None:
            oprot.writeFieldBegin('buffer', TType.STRING, 6)
            oprot.writeBinary(self.buffer)
            oprot.writeFieldEnd()
        if self.option is not None:
            oprot.writeFieldBegin('option', TType.I32, 7)
            oprot.writeI32(self.option)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEPMSException(object):
    """
    系统异常协议


    Attributes:
     - expType
     - codeLine
     - errID
     - fileName
     - errmsg
     - errProvider
     - stackInfo

    """


    def __init__(self, expType=None, codeLine=None, errID=None, fileName=None, errmsg=None, errProvider=None, stackInfo=None,):
        self.expType = expType
        self.codeLine = codeLine
        self.errID = errID
        self.fileName = fileName
        self.errmsg = errmsg
        self.errProvider = errProvider
        self.stackInfo = stackInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.expType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.codeLine = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.errID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.errmsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.errProvider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.stackInfo = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.stackInfo.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEPMSException')
        if self.expType is not None:
            oprot.writeFieldBegin('expType', TType.I32, 1)
            oprot.writeI32(self.expType)
            oprot.writeFieldEnd()
        if self.codeLine is not None:
            oprot.writeFieldBegin('codeLine', TType.I32, 2)
            oprot.writeI32(self.codeLine)
            oprot.writeFieldEnd()
        if self.errID is not None:
            oprot.writeFieldBegin('errID', TType.I32, 3)
            oprot.writeI32(self.errID)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 4)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.errmsg is not None:
            oprot.writeFieldBegin('errmsg', TType.STRING, 5)
            oprot.writeString(self.errmsg.encode('utf-8') if sys.version_info[0] == 2 else self.errmsg)
            oprot.writeFieldEnd()
        if self.errProvider is not None:
            oprot.writeFieldBegin('errProvider', TType.STRING, 6)
            oprot.writeString(self.errProvider.encode('utf-8') if sys.version_info[0] == 2 else self.errProvider)
            oprot.writeFieldEnd()
        if self.stackInfo is not None:
            oprot.writeFieldBegin('stackInfo', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.stackInfo))
            for iter6 in self.stackInfo:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEPMSExceptionTProto(object):
    """
    系统异常协议(链式)


    Attributes:
     - excp
     - nextexcp

    """


    def __init__(self, excp=None, nextexcp=None,):
        self.excp = excp
        self.nextexcp = nextexcp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ncEPMSException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nextexcp = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncEPMSException()
                        _elem12.read(iprot)
                        self.nextexcp.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEPMSExceptionTProto')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        if self.nextexcp is not None:
            oprot.writeFieldBegin('nextexcp', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nextexcp))
            for iter13 in self.nextexcp:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncConnectionInfo)
ncConnectionInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'osVersion', None, None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'processName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'machineCode', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ipAddr', 'UTF8', None, ),  # 5
)
all_structs.append(ncConnectRequest)
ncConnectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'connInfo', [ncConnectionInfo, None], None, ),  # 1
    (2, TType.I32, 'connectType', None, None, ),  # 2
    (3, TType.I32, 'detecttime', None, None, ),  # 3
    (4, TType.I64, 'reconnectId', None, -1, ),  # 4
    (5, TType.STRING, 'guid', 'UTF8', "", ),  # 5
)
all_structs.append(ncConnectReply)
ncConnectReply.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'connInfo', [ncConnectionInfo, None], None, ),  # 1
    (2, TType.I64, 'reconnectId', None, None, ),  # 2
    (3, TType.STRING, 'guid', 'UTF8', None, ),  # 3
)
all_structs.append(ncEPMSMsgHeader)
ncEPMSMsgHeader.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'msgType', None, None, ),  # 1
    (2, TType.STRING, 'msgName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'sourceId', None, None, ),  # 3
    (4, TType.STRING, 'protoName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'bufLength', None, None, ),  # 5
    (6, TType.STRING, 'buffer', 'BINARY', None, ),  # 6
    (7, TType.I32, 'option', None, 0, ),  # 7
)
all_structs.append(ncEPMSException)
ncEPMSException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'expType', None, None, ),  # 1
    (2, TType.I32, 'codeLine', None, None, ),  # 2
    (3, TType.I32, 'errID', None, None, ),  # 3
    (4, TType.STRING, 'fileName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'errmsg', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'errProvider', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'stackInfo', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(ncEPMSExceptionTProto)
ncEPMSExceptionTProto.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ncEPMSException, None], None, ),  # 1
    (2, TType.LIST, 'nextexcp', (TType.STRUCT, [ncEPMSException, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
