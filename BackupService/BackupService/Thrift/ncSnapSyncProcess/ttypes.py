# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes
import ncEEFComm_Var.ttypes
import ncClusterMeta_Var.ttypes
import ncCdmStoreMgmCommon.ttypes

from thrift.transport import TTransport
all_structs = []


class ncCertifiedStatus(object):
    NOTACCEPTED = 0
    ACCEPTED = 1
    UNKNOWN = -1

    _VALUES_TO_NAMES = {
        0: "NOTACCEPTED",
        1: "ACCEPTED",
        -1: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "NOTACCEPTED": 0,
        "ACCEPTED": 1,
        "UNKNOWN": -1,
    }


class ncSnapSyncCertifyRequest(object):
    """
    Attributes:
     - sourceClusterIp
     - sourceClusterId
     - sourceJobId
     - sourceJobName
     - sourceUserName
     - destRecvUserName
     - poolType
     - customer

    """


    def __init__(self, sourceClusterIp=None, sourceClusterId=None, sourceJobId=None, sourceJobName=None, sourceUserName=None, destRecvUserName=None, poolType=1, customer=None,):
        self.sourceClusterIp = sourceClusterIp
        self.sourceClusterId = sourceClusterId
        self.sourceJobId = sourceJobId
        self.sourceJobName = sourceJobName
        self.sourceUserName = sourceUserName
        self.destRecvUserName = destRecvUserName
        self.poolType = poolType
        self.customer = customer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceClusterIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sourceClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sourceJobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sourceUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.destRecvUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.poolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncCertifyRequest')
        if self.sourceClusterIp is not None:
            oprot.writeFieldBegin('sourceClusterIp', TType.STRING, 1)
            oprot.writeString(self.sourceClusterIp.encode('utf-8') if sys.version_info[0] == 2 else self.sourceClusterIp)
            oprot.writeFieldEnd()
        if self.sourceClusterId is not None:
            oprot.writeFieldBegin('sourceClusterId', TType.STRING, 2)
            oprot.writeString(self.sourceClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceClusterId)
            oprot.writeFieldEnd()
        if self.sourceJobId is not None:
            oprot.writeFieldBegin('sourceJobId', TType.STRING, 3)
            oprot.writeString(self.sourceJobId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceJobId)
            oprot.writeFieldEnd()
        if self.sourceJobName is not None:
            oprot.writeFieldBegin('sourceJobName', TType.STRING, 4)
            oprot.writeString(self.sourceJobName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceJobName)
            oprot.writeFieldEnd()
        if self.sourceUserName is not None:
            oprot.writeFieldBegin('sourceUserName', TType.STRING, 5)
            oprot.writeString(self.sourceUserName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceUserName)
            oprot.writeFieldEnd()
        if self.destRecvUserName is not None:
            oprot.writeFieldBegin('destRecvUserName', TType.STRING, 6)
            oprot.writeString(self.destRecvUserName.encode('utf-8') if sys.version_info[0] == 2 else self.destRecvUserName)
            oprot.writeFieldEnd()
        if self.poolType is not None:
            oprot.writeFieldBegin('poolType', TType.I32, 7)
            oprot.writeI32(self.poolType)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 8)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapSyncSourceToDest(object):
    """
    Attributes:
     - sourceVip
     - sourceClusterId
     - sourceSyncJobId
     - sourceSyncJobName
     - sourceSyncJobAuthUser
     - customer
     - recAuthUser
     - isDedup

    """


    def __init__(self, sourceVip=None, sourceClusterId=None, sourceSyncJobId=None, sourceSyncJobName=None, sourceSyncJobAuthUser=None, customer=None, recAuthUser=None, isDedup=None,):
        self.sourceVip = sourceVip
        self.sourceClusterId = sourceClusterId
        self.sourceSyncJobId = sourceSyncJobId
        self.sourceSyncJobName = sourceSyncJobName
        self.sourceSyncJobAuthUser = sourceSyncJobAuthUser
        self.customer = customer
        self.recAuthUser = recAuthUser
        self.isDedup = isDedup

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceVip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sourceClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceSyncJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sourceSyncJobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sourceSyncJobAuthUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.recAuthUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.isDedup = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncSourceToDest')
        if self.sourceVip is not None:
            oprot.writeFieldBegin('sourceVip', TType.STRING, 1)
            oprot.writeString(self.sourceVip.encode('utf-8') if sys.version_info[0] == 2 else self.sourceVip)
            oprot.writeFieldEnd()
        if self.sourceClusterId is not None:
            oprot.writeFieldBegin('sourceClusterId', TType.STRING, 2)
            oprot.writeString(self.sourceClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceClusterId)
            oprot.writeFieldEnd()
        if self.sourceSyncJobId is not None:
            oprot.writeFieldBegin('sourceSyncJobId', TType.STRING, 3)
            oprot.writeString(self.sourceSyncJobId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobId)
            oprot.writeFieldEnd()
        if self.sourceSyncJobName is not None:
            oprot.writeFieldBegin('sourceSyncJobName', TType.STRING, 4)
            oprot.writeString(self.sourceSyncJobName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobName)
            oprot.writeFieldEnd()
        if self.sourceSyncJobAuthUser is not None:
            oprot.writeFieldBegin('sourceSyncJobAuthUser', TType.STRING, 5)
            oprot.writeString(self.sourceSyncJobAuthUser.encode('utf-8') if sys.version_info[0] == 2 else self.sourceSyncJobAuthUser)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 6)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.recAuthUser is not None:
            oprot.writeFieldBegin('recAuthUser', TType.STRING, 7)
            oprot.writeString(self.recAuthUser.encode('utf-8') if sys.version_info[0] == 2 else self.recAuthUser)
            oprot.writeFieldEnd()
        if self.isDedup is not None:
            oprot.writeFieldBegin('isDedup', TType.I32, 8)
            oprot.writeI32(self.isDedup)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapSyncJobStatusInfo(object):
    """
    Attributes:
     - jobId
     - status

    """


    def __init__(self, jobId=None, status=None,):
        self.jobId = jobId
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncJobStatusInfo')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapSyncCertifyResult(object):
    """
    Attributes:
     - certifyId
     - status
     - poolId

    """


    def __init__(self, certifyId=None, status=None, poolId=None,):
        self.certifyId = certifyId
        self.status = status
        self.poolId = poolId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.certifyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncCertifyResult')
        if self.certifyId is not None:
            oprot.writeFieldBegin('certifyId', TType.STRING, 1)
            oprot.writeString(self.certifyId.encode('utf-8') if sys.version_info[0] == 2 else self.certifyId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 3)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAppJobReportInfo(object):
    """
    Attributes:
     - user
     - jobId
     - jobClusterId
     - jobAppType

    """


    def __init__(self, user=None, jobId=None, jobClusterId=None, jobAppType=None,):
        self.user = user
        self.jobId = jobId
        self.jobClusterId = jobClusterId
        self.jobAppType = jobAppType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobClusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.jobAppType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAppJobReportInfo')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 1)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobClusterId is not None:
            oprot.writeFieldBegin('jobClusterId', TType.STRING, 3)
            oprot.writeString(self.jobClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.jobClusterId)
            oprot.writeFieldEnd()
        if self.jobAppType is not None:
            oprot.writeFieldBegin('jobAppType', TType.I32, 4)
            oprot.writeI32(self.jobAppType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapSyncAppJobReverseExtra(object):
    """
    Attributes:
     - appJobId
     - appJobReverseId

    """


    def __init__(self, appJobId=None, appJobReverseId=None,):
        self.appJobId = appJobId
        self.appJobReverseId = appJobReverseId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.appJobReverseId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncAppJobReverseExtra')
        if self.appJobId is not None:
            oprot.writeFieldBegin('appJobId', TType.STRING, 1)
            oprot.writeString(self.appJobId.encode('utf-8') if sys.version_info[0] == 2 else self.appJobId)
            oprot.writeFieldEnd()
        if self.appJobReverseId is not None:
            oprot.writeFieldBegin('appJobReverseId', TType.STRING, 2)
            oprot.writeString(self.appJobReverseId.encode('utf-8') if sys.version_info[0] == 2 else self.appJobReverseId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapSyncJobCountInfo(object):
    """
    Attributes:
     - stopped
     - abnormal
     - running

    """


    def __init__(self, stopped=None, abnormal=None, running=None,):
        self.stopped = stopped
        self.abnormal = abnormal
        self.running = running

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stopped = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.abnormal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.running = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapSyncJobCountInfo')
        if self.stopped is not None:
            oprot.writeFieldBegin('stopped', TType.I32, 1)
            oprot.writeI32(self.stopped)
            oprot.writeFieldEnd()
        if self.abnormal is not None:
            oprot.writeFieldBegin('abnormal', TType.I32, 2)
            oprot.writeI32(self.abnormal)
            oprot.writeFieldEnd()
        if self.running is not None:
            oprot.writeFieldBegin('running', TType.I32, 3)
            oprot.writeI32(self.running)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncSnapSyncCertifyRequest)
ncSnapSyncCertifyRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceClusterIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sourceClusterId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sourceJobId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sourceJobName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sourceUserName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'destRecvUserName', 'UTF8', None, ),  # 6
    (7, TType.I32, 'poolType', None, 1, ),  # 7
    (8, TType.STRING, 'customer', 'UTF8', None, ),  # 8
)
all_structs.append(ncSnapSyncSourceToDest)
ncSnapSyncSourceToDest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceVip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sourceClusterId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sourceSyncJobId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sourceSyncJobName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sourceSyncJobAuthUser', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'customer', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'recAuthUser', 'UTF8', None, ),  # 7
    (8, TType.I32, 'isDedup', None, None, ),  # 8
)
all_structs.append(ncSnapSyncJobStatusInfo)
ncSnapSyncJobStatusInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ncSnapSyncCertifyResult)
ncSnapSyncCertifyResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'certifyId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'poolId', 'UTF8', None, ),  # 3
)
all_structs.append(ncAppJobReportInfo)
ncAppJobReportInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobClusterId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'jobAppType', None, None, ),  # 4
)
all_structs.append(ncSnapSyncAppJobReverseExtra)
ncSnapSyncAppJobReverseExtra.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appJobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'appJobReverseId', 'UTF8', None, ),  # 2
)
all_structs.append(ncSnapSyncJobCountInfo)
ncSnapSyncJobCountInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'stopped', None, None, ),  # 1
    (2, TType.I32, 'abnormal', None, None, ),  # 2
    (3, TType.I32, 'running', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
