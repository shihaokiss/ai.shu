# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncPushSnapShot(object):
    """
    Attributes:
     - snapshotId
     - name
     - gns
     - time
     - type
     - diskSnapshotList

    """


    def __init__(self, snapshotId=None, name=None, gns=None, time=None, type=None, diskSnapshotList=None,):
        self.snapshotId = snapshotId
        self.name = name
        self.gns = gns
        self.time = time
        self.type = type
        self.diskSnapshotList = diskSnapshotList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapshotId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.diskSnapshotList = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPushSnapShot')
        if self.snapshotId is not None:
            oprot.writeFieldBegin('snapshotId', TType.STRING, 1)
            oprot.writeString(self.snapshotId.encode('utf-8') if sys.version_info[0] == 2 else self.snapshotId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 3)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 4)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.diskSnapshotList is not None:
            oprot.writeFieldBegin('diskSnapshotList', TType.STRING, 6)
            oprot.writeString(self.diskSnapshotList.encode('utf-8') if sys.version_info[0] == 2 else self.diskSnapshotList)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncC2SJob(object):
    """
    Attributes:
     - jobId
     - machinecode
     - jobInstanceId

    """


    def __init__(self, jobId=None, machinecode=None, jobInstanceId=None,):
        self.jobId = jobId
        self.machinecode = machinecode
        self.jobInstanceId = jobInstanceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.machinecode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.jobInstanceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncC2SJob')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.machinecode is not None:
            oprot.writeFieldBegin('machinecode', TType.STRING, 2)
            oprot.writeString(self.machinecode.encode('utf-8') if sys.version_info[0] == 2 else self.machinecode)
            oprot.writeFieldEnd()
        if self.jobInstanceId is not None:
            oprot.writeFieldBegin('jobInstanceId', TType.STRING, 3)
            oprot.writeString(self.jobInstanceId.encode('utf-8') if sys.version_info[0] == 2 else self.jobInstanceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncC2SPushSnapShotRequest(object):
    """
    Attributes:
     - jobinfo
     - snapshots

    """


    def __init__(self, jobinfo=None, snapshots=None,):
        self.jobinfo = jobinfo
        self.snapshots = snapshots

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.jobinfo = ncC2SJob()
                    self.jobinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.snapshots = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncPushSnapShot()
                        _elem5.read(iprot)
                        self.snapshots.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncC2SPushSnapShotRequest')
        if self.jobinfo is not None:
            oprot.writeFieldBegin('jobinfo', TType.STRUCT, 1)
            self.jobinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.snapshots is not None:
            oprot.writeFieldBegin('snapshots', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.snapshots))
            for iter6 in self.snapshots:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDestHostVolume(object):
    """
    Attributes:
     - diskDevName
     - diskId
     - diskType
     - storageType

    """


    def __init__(self, diskDevName=None, diskId=None, diskType=None, storageType=None,):
        self.diskDevName = diskDevName
        self.diskId = diskId
        self.diskType = diskType
        self.storageType = storageType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.diskDevName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.diskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.diskType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDestHostVolume')
        if self.diskDevName is not None:
            oprot.writeFieldBegin('diskDevName', TType.STRING, 1)
            oprot.writeString(self.diskDevName.encode('utf-8') if sys.version_info[0] == 2 else self.diskDevName)
            oprot.writeFieldEnd()
        if self.diskId is not None:
            oprot.writeFieldBegin('diskId', TType.STRING, 2)
            oprot.writeString(self.diskId.encode('utf-8') if sys.version_info[0] == 2 else self.diskId)
            oprot.writeFieldEnd()
        if self.diskType is not None:
            oprot.writeFieldBegin('diskType', TType.STRING, 3)
            oprot.writeString(self.diskType.encode('utf-8') if sys.version_info[0] == 2 else self.diskType)
            oprot.writeFieldEnd()
        if self.storageType is not None:
            oprot.writeFieldBegin('storageType', TType.STRING, 4)
            oprot.writeString(self.storageType.encode('utf-8') if sys.version_info[0] == 2 else self.storageType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDestHostNic(object):
    """
    Attributes:
     - id
     - port
     - vswitch

    """


    def __init__(self, id=None, port=None, vswitch=None,):
        self.id = id
        self.port = port
        self.vswitch = vswitch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vswitch = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDestHostNic')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 2)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.vswitch is not None:
            oprot.writeFieldBegin('vswitch', TType.STRING, 3)
            oprot.writeString(self.vswitch.encode('utf-8') if sys.version_info[0] == 2 else self.vswitch)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncC2SPushDestHostRequest(object):
    """
    Attributes:
     - jobinfo
     - hostIdentify
     - volumes
     - takeoverNics

    """


    def __init__(self, jobinfo=None, hostIdentify=None, volumes=None, takeoverNics=None,):
        self.jobinfo = jobinfo
        self.hostIdentify = hostIdentify
        self.volumes = volumes
        self.takeoverNics = takeoverNics

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.jobinfo = ncC2SJob()
                    self.jobinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostIdentify = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.volumes = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncDestHostVolume()
                        _elem12.read(iprot)
                        self.volumes.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.takeoverNics = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = ncDestHostNic()
                        _elem18.read(iprot)
                        self.takeoverNics.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncC2SPushDestHostRequest')
        if self.jobinfo is not None:
            oprot.writeFieldBegin('jobinfo', TType.STRUCT, 1)
            self.jobinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.hostIdentify is not None:
            oprot.writeFieldBegin('hostIdentify', TType.STRING, 2)
            oprot.writeString(self.hostIdentify.encode('utf-8') if sys.version_info[0] == 2 else self.hostIdentify)
            oprot.writeFieldEnd()
        if self.volumes is not None:
            oprot.writeFieldBegin('volumes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.volumes))
            for iter19 in self.volumes:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.takeoverNics is not None:
            oprot.writeFieldBegin('takeoverNics', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.takeoverNics))
            for iter20 in self.takeoverNics:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncC2SPushJobBreakPoint(object):
    """
    Attributes:
     - jobinfo
     - breakpoint
     - status

    """


    def __init__(self, jobinfo=None, breakpoint=None, status=None,):
        self.jobinfo = jobinfo
        self.breakpoint = breakpoint
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.jobinfo = ncC2SJob()
                    self.jobinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.breakpoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncC2SPushJobBreakPoint')
        if self.jobinfo is not None:
            oprot.writeFieldBegin('jobinfo', TType.STRUCT, 1)
            self.jobinfo.write(oprot)
            oprot.writeFieldEnd()
        if self.breakpoint is not None:
            oprot.writeFieldBegin('breakpoint', TType.STRING, 2)
            oprot.writeString(self.breakpoint.encode('utf-8') if sys.version_info[0] == 2 else self.breakpoint)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 3)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncPushSnapShot)
ncPushSnapShot.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapshotId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'gns', 'UTF8', None, ),  # 3
    (4, TType.I64, 'time', None, None, ),  # 4
    (5, TType.I32, 'type', None, None, ),  # 5
    (6, TType.STRING, 'diskSnapshotList', 'UTF8', None, ),  # 6
)
all_structs.append(ncC2SJob)
ncC2SJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'machinecode', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'jobInstanceId', 'UTF8', None, ),  # 3
)
all_structs.append(ncC2SPushSnapShotRequest)
ncC2SPushSnapShotRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'jobinfo', [ncC2SJob, None], None, ),  # 1
    (2, TType.LIST, 'snapshots', (TType.STRUCT, [ncPushSnapShot, None], False), None, ),  # 2
)
all_structs.append(ncDestHostVolume)
ncDestHostVolume.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'diskDevName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'diskId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'diskType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storageType', 'UTF8', None, ),  # 4
)
all_structs.append(ncDestHostNic)
ncDestHostNic.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'port', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vswitch', 'UTF8', None, ),  # 3
)
all_structs.append(ncC2SPushDestHostRequest)
ncC2SPushDestHostRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'jobinfo', [ncC2SJob, None], None, ),  # 1
    (2, TType.STRING, 'hostIdentify', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'volumes', (TType.STRUCT, [ncDestHostVolume, None], False), None, ),  # 3
    (4, TType.LIST, 'takeoverNics', (TType.STRUCT, [ncDestHostNic, None], False), None, ),  # 4
)
all_structs.append(ncC2SPushJobBreakPoint)
ncC2SPushJobBreakPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'jobinfo', [ncC2SJob, None], None, ),  # 1
    (2, TType.STRING, 'breakpoint', 'UTF8', None, ),  # 2
    (3, TType.I16, 'status', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
