# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    卷数据浏览接口

    """
    def get_snapshot_end_tp(self, logMountPoint, snapshotTp):
        """
           获取某个快照的开始时间点和结束时间点
        *

        Parameters:
         - logMountPoint
         - snapshotTp

        """
        pass

    def get_one_minute_ios(self, logMountPoint, snapshotTp, iotimestamp):
        """
           获取某个时间点之后1分钟内的IO信息（每秒以及对应的IO数目）
        *

        Parameters:
         - logMountPoint
         - snapshotTp
         - iotimestamp

        """
        pass

    def system_boot_is_gpt_disk(self, logMountPoint):
        """
           获取容灾机器引导分区所在磁盘是否是GPT磁盘
           0:不是GPT磁盘   1:GPT磁盘
        *

        Parameters:
         - logMountPoint

        """
        pass

    def delete_snapshot_io_log(self, logMountPoint, snapTimePoints):
        """
           删除快照相关的任意IO日志数据
           logMountPoint: 日志卷路径
           snapTimePoints: 时间点列表
        *

        Parameters:
         - logMountPoint
         - snapTimePoints

        """
        pass

    def get_data_source(self, logMountPoint, snapshotTp):
        """
           获取挂载恢复源端的数据源
           logMountPoint: 日志卷路径
           snapshotTp: 快照时间戳
        返回值：数据源<->分区编号,文件系统类型的列表
        *

        Parameters:
         - logMountPoint
         - snapshotTp

        """
        pass


class Client(Iface):
    """
    卷数据浏览接口

    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def get_snapshot_end_tp(self, logMountPoint, snapshotTp):
        """
           获取某个快照的开始时间点和结束时间点
        *

        Parameters:
         - logMountPoint
         - snapshotTp

        """
        self.send_get_snapshot_end_tp(logMountPoint, snapshotTp)
        return self.recv_get_snapshot_end_tp()

    def send_get_snapshot_end_tp(self, logMountPoint, snapshotTp):
        self._oprot.writeMessageBegin('get_snapshot_end_tp', TMessageType.CALL, self._seqid)
        args = get_snapshot_end_tp_args()
        args.logMountPoint = logMountPoint
        args.snapshotTp = snapshotTp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_snapshot_end_tp(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_snapshot_end_tp_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_snapshot_end_tp failed: unknown result")

    def get_one_minute_ios(self, logMountPoint, snapshotTp, iotimestamp):
        """
           获取某个时间点之后1分钟内的IO信息（每秒以及对应的IO数目）
        *

        Parameters:
         - logMountPoint
         - snapshotTp
         - iotimestamp

        """
        self.send_get_one_minute_ios(logMountPoint, snapshotTp, iotimestamp)
        return self.recv_get_one_minute_ios()

    def send_get_one_minute_ios(self, logMountPoint, snapshotTp, iotimestamp):
        self._oprot.writeMessageBegin('get_one_minute_ios', TMessageType.CALL, self._seqid)
        args = get_one_minute_ios_args()
        args.logMountPoint = logMountPoint
        args.snapshotTp = snapshotTp
        args.iotimestamp = iotimestamp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_one_minute_ios(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_one_minute_ios_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_one_minute_ios failed: unknown result")

    def system_boot_is_gpt_disk(self, logMountPoint):
        """
           获取容灾机器引导分区所在磁盘是否是GPT磁盘
           0:不是GPT磁盘   1:GPT磁盘
        *

        Parameters:
         - logMountPoint

        """
        self.send_system_boot_is_gpt_disk(logMountPoint)
        return self.recv_system_boot_is_gpt_disk()

    def send_system_boot_is_gpt_disk(self, logMountPoint):
        self._oprot.writeMessageBegin('system_boot_is_gpt_disk', TMessageType.CALL, self._seqid)
        args = system_boot_is_gpt_disk_args()
        args.logMountPoint = logMountPoint
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_system_boot_is_gpt_disk(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = system_boot_is_gpt_disk_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "system_boot_is_gpt_disk failed: unknown result")

    def delete_snapshot_io_log(self, logMountPoint, snapTimePoints):
        """
           删除快照相关的任意IO日志数据
           logMountPoint: 日志卷路径
           snapTimePoints: 时间点列表
        *

        Parameters:
         - logMountPoint
         - snapTimePoints

        """
        self.send_delete_snapshot_io_log(logMountPoint, snapTimePoints)
        self.recv_delete_snapshot_io_log()

    def send_delete_snapshot_io_log(self, logMountPoint, snapTimePoints):
        self._oprot.writeMessageBegin('delete_snapshot_io_log', TMessageType.CALL, self._seqid)
        args = delete_snapshot_io_log_args()
        args.logMountPoint = logMountPoint
        args.snapTimePoints = snapTimePoints
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_snapshot_io_log(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_snapshot_io_log_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.error is not None:
            raise result.error
        return

    def get_data_source(self, logMountPoint, snapshotTp):
        """
           获取挂载恢复源端的数据源
           logMountPoint: 日志卷路径
           snapshotTp: 快照时间戳
        返回值：数据源<->分区编号,文件系统类型的列表
        *

        Parameters:
         - logMountPoint
         - snapshotTp

        """
        self.send_get_data_source(logMountPoint, snapshotTp)
        return self.recv_get_data_source()

    def send_get_data_source(self, logMountPoint, snapshotTp):
        self._oprot.writeMessageBegin('get_data_source', TMessageType.CALL, self._seqid)
        args = get_data_source_args()
        args.logMountPoint = logMountPoint
        args.snapshotTp = snapshotTp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_data_source(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_data_source_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_data_source failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["get_snapshot_end_tp"] = Processor.process_get_snapshot_end_tp
        self._processMap["get_one_minute_ios"] = Processor.process_get_one_minute_ios
        self._processMap["system_boot_is_gpt_disk"] = Processor.process_system_boot_is_gpt_disk
        self._processMap["delete_snapshot_io_log"] = Processor.process_delete_snapshot_io_log
        self._processMap["get_data_source"] = Processor.process_get_data_source
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_get_snapshot_end_tp(self, seqid, iprot, oprot):
        args = get_snapshot_end_tp_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_snapshot_end_tp_result()
        try:
            result.success = self._handler.get_snapshot_end_tp(args.logMountPoint, args.snapshotTp)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_snapshot_end_tp", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_one_minute_ios(self, seqid, iprot, oprot):
        args = get_one_minute_ios_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_one_minute_ios_result()
        try:
            result.success = self._handler.get_one_minute_ios(args.logMountPoint, args.snapshotTp, args.iotimestamp)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_one_minute_ios", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_system_boot_is_gpt_disk(self, seqid, iprot, oprot):
        args = system_boot_is_gpt_disk_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = system_boot_is_gpt_disk_result()
        try:
            result.success = self._handler.system_boot_is_gpt_disk(args.logMountPoint)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("system_boot_is_gpt_disk", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_snapshot_io_log(self, seqid, iprot, oprot):
        args = delete_snapshot_io_log_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_snapshot_io_log_result()
        try:
            self._handler.delete_snapshot_io_log(args.logMountPoint, args.snapTimePoints)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_snapshot_io_log", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_data_source(self, seqid, iprot, oprot):
        args = get_data_source_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_data_source_result()
        try:
            result.success = self._handler.get_data_source(args.logMountPoint, args.snapshotTp)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_data_source", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class get_snapshot_end_tp_args(object):
    """
    Attributes:
     - logMountPoint
     - snapshotTp

    """


    def __init__(self, logMountPoint=None, snapshotTp=None,):
        self.logMountPoint = logMountPoint
        self.snapshotTp = snapshotTp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.logMountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.snapshotTp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_snapshot_end_tp_args')
        if self.logMountPoint is not None:
            oprot.writeFieldBegin('logMountPoint', TType.STRING, 1)
            oprot.writeString(self.logMountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.logMountPoint)
            oprot.writeFieldEnd()
        if self.snapshotTp is not None:
            oprot.writeFieldBegin('snapshotTp', TType.I64, 2)
            oprot.writeI64(self.snapshotTp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_snapshot_end_tp_args)
get_snapshot_end_tp_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'logMountPoint', 'UTF8', None, ),  # 1
    (2, TType.I64, 'snapshotTp', None, None, ),  # 2
)


class get_snapshot_end_tp_result(object):
    """
    Attributes:
     - success
     - error

    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = ncException.ttypes.ncException()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_snapshot_end_tp_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_snapshot_end_tp_result)
get_snapshot_end_tp_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'error', [ncException.ttypes.ncException, None], None, ),  # 1
)


class get_one_minute_ios_args(object):
    """
    Attributes:
     - logMountPoint
     - snapshotTp
     - iotimestamp

    """


    def __init__(self, logMountPoint=None, snapshotTp=None, iotimestamp=None,):
        self.logMountPoint = logMountPoint
        self.snapshotTp = snapshotTp
        self.iotimestamp = iotimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.logMountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.snapshotTp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.iotimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_one_minute_ios_args')
        if self.logMountPoint is not None:
            oprot.writeFieldBegin('logMountPoint', TType.STRING, 1)
            oprot.writeString(self.logMountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.logMountPoint)
            oprot.writeFieldEnd()
        if self.snapshotTp is not None:
            oprot.writeFieldBegin('snapshotTp', TType.I64, 2)
            oprot.writeI64(self.snapshotTp)
            oprot.writeFieldEnd()
        if self.iotimestamp is not None:
            oprot.writeFieldBegin('iotimestamp', TType.I64, 3)
            oprot.writeI64(self.iotimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_one_minute_ios_args)
get_one_minute_ios_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'logMountPoint', 'UTF8', None, ),  # 1
    (2, TType.I64, 'snapshotTp', None, None, ),  # 2
    (3, TType.I64, 'iotimestamp', None, None, ),  # 3
)


class get_one_minute_ios_result(object):
    """
    Attributes:
     - success
     - error

    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncCdpCommon.ttypes.ncIoInfo()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = ncException.ttypes.ncException()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_one_minute_ios_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_one_minute_ios_result)
get_one_minute_ios_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ncCdpCommon.ttypes.ncIoInfo, None], False), None, ),  # 0
    (1, TType.STRUCT, 'error', [ncException.ttypes.ncException, None], None, ),  # 1
)


class system_boot_is_gpt_disk_args(object):
    """
    Attributes:
     - logMountPoint

    """


    def __init__(self, logMountPoint=None,):
        self.logMountPoint = logMountPoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.logMountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('system_boot_is_gpt_disk_args')
        if self.logMountPoint is not None:
            oprot.writeFieldBegin('logMountPoint', TType.STRING, 1)
            oprot.writeString(self.logMountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.logMountPoint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(system_boot_is_gpt_disk_args)
system_boot_is_gpt_disk_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'logMountPoint', 'UTF8', None, ),  # 1
)


class system_boot_is_gpt_disk_result(object):
    """
    Attributes:
     - success
     - error

    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = ncException.ttypes.ncException()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('system_boot_is_gpt_disk_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(system_boot_is_gpt_disk_result)
system_boot_is_gpt_disk_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'error', [ncException.ttypes.ncException, None], None, ),  # 1
)


class delete_snapshot_io_log_args(object):
    """
    Attributes:
     - logMountPoint
     - snapTimePoints

    """


    def __init__(self, logMountPoint=None, snapTimePoints=None,):
        self.logMountPoint = logMountPoint
        self.snapTimePoints = snapTimePoints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.logMountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.snapTimePoints = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI64()
                        self.snapTimePoints.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_snapshot_io_log_args')
        if self.logMountPoint is not None:
            oprot.writeFieldBegin('logMountPoint', TType.STRING, 1)
            oprot.writeString(self.logMountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.logMountPoint)
            oprot.writeFieldEnd()
        if self.snapTimePoints is not None:
            oprot.writeFieldBegin('snapTimePoints', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.snapTimePoints))
            for iter13 in self.snapTimePoints:
                oprot.writeI64(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_snapshot_io_log_args)
delete_snapshot_io_log_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'logMountPoint', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'snapTimePoints', (TType.I64, None, False), None, ),  # 2
)


class delete_snapshot_io_log_result(object):
    """
    Attributes:
     - error

    """


    def __init__(self, error=None,):
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.error = ncException.ttypes.ncException()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_snapshot_io_log_result')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_snapshot_io_log_result)
delete_snapshot_io_log_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'error', [ncException.ttypes.ncException, None], None, ),  # 1
)


class get_data_source_args(object):
    """
    Attributes:
     - logMountPoint
     - snapshotTp

    """


    def __init__(self, logMountPoint=None, snapshotTp=None,):
        self.logMountPoint = logMountPoint
        self.snapshotTp = snapshotTp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.logMountPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.snapshotTp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_data_source_args')
        if self.logMountPoint is not None:
            oprot.writeFieldBegin('logMountPoint', TType.STRING, 1)
            oprot.writeString(self.logMountPoint.encode('utf-8') if sys.version_info[0] == 2 else self.logMountPoint)
            oprot.writeFieldEnd()
        if self.snapshotTp is not None:
            oprot.writeFieldBegin('snapshotTp', TType.I64, 2)
            oprot.writeI64(self.snapshotTp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_data_source_args)
get_data_source_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'logMountPoint', 'UTF8', None, ),  # 1
    (2, TType.I64, 'snapshotTp', None, None, ),  # 2
)


class get_data_source_result(object):
    """
    Attributes:
     - success
     - error

    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncCdpCommon.ttypes.ncPartInfo()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = ncException.ttypes.ncException()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_data_source_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_data_source_result)
get_data_source_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ncCdpCommon.ttypes.ncPartInfo, None], False), None, ),  # 0
    (1, TType.STRUCT, 'error', [ncException.ttypes.ncException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

