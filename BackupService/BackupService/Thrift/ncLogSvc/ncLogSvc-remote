#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncLogSvc import ncLogSvc
from ncLogSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void insert_system_log(ncSystemLog message)')
    print('  void insert_user_log(ncUserLog message)')
    print('  void insert_schedule_log(ncScheduleLog message)')
    print('  ncImportLogRes export_in_log_func(ncImportLogReq importLogReq)')
    print('  string get_is_email_by_job_rule(ncDataType dataType, ncScheduleEventType eventType, ncLogLevel level, ncProtectType protectType, string userId, ncLogResult result)')
    print('  void send_email(string to_addr, string subject, string mail_content)')
    print('  bool get_log_percent(double threshold)')
    print('  void insert_user_info(ncUserLog message)')
    print('  ncExportLogRes export_log_func(ncExportLogReq exportLogReq)')
    print('  ncExportOverviewRes export_overview(ncExportOverviewRequest request)')
    print('   get_system_rule_param( param_list)')
    print('  ncUserWarnRuleSettingsRes get_user_warn_rule_settings( rule_list, i64 index, i64 count)')
    print('  void insert_user_warn(ncUserWarn message)')
    print('  ncAllWarnModifyRes all_warn_modify_status(ncAllWarnModify request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncLogSvc.Client(protocol)
transport.open()

if cmd == 'insert_system_log':
    if len(args) != 1:
        print('insert_system_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert_system_log(eval(args[0]),))

elif cmd == 'insert_user_log':
    if len(args) != 1:
        print('insert_user_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert_user_log(eval(args[0]),))

elif cmd == 'insert_schedule_log':
    if len(args) != 1:
        print('insert_schedule_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert_schedule_log(eval(args[0]),))

elif cmd == 'export_in_log_func':
    if len(args) != 1:
        print('export_in_log_func requires 1 args')
        sys.exit(1)
    pp.pprint(client.export_in_log_func(eval(args[0]),))

elif cmd == 'get_is_email_by_job_rule':
    if len(args) != 6:
        print('get_is_email_by_job_rule requires 6 args')
        sys.exit(1)
    pp.pprint(client.get_is_email_by_job_rule(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], eval(args[5]),))

elif cmd == 'send_email':
    if len(args) != 3:
        print('send_email requires 3 args')
        sys.exit(1)
    pp.pprint(client.send_email(args[0], args[1], args[2],))

elif cmd == 'get_log_percent':
    if len(args) != 1:
        print('get_log_percent requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_log_percent(eval(args[0]),))

elif cmd == 'insert_user_info':
    if len(args) != 1:
        print('insert_user_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert_user_info(eval(args[0]),))

elif cmd == 'export_log_func':
    if len(args) != 1:
        print('export_log_func requires 1 args')
        sys.exit(1)
    pp.pprint(client.export_log_func(eval(args[0]),))

elif cmd == 'export_overview':
    if len(args) != 1:
        print('export_overview requires 1 args')
        sys.exit(1)
    pp.pprint(client.export_overview(eval(args[0]),))

elif cmd == 'get_system_rule_param':
    if len(args) != 1:
        print('get_system_rule_param requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_rule_param(eval(args[0]),))

elif cmd == 'get_user_warn_rule_settings':
    if len(args) != 3:
        print('get_user_warn_rule_settings requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_user_warn_rule_settings(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'insert_user_warn':
    if len(args) != 1:
        print('insert_user_warn requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert_user_warn(eval(args[0]),))

elif cmd == 'all_warn_modify_status':
    if len(args) != 1:
        print('all_warn_modify_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.all_warn_modify_status(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
