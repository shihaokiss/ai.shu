# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncErrorType(object):
    ABORT = 0
    WARN = 1

    _VALUES_TO_NAMES = {
        0: "ABORT",
        1: "WARN",
    }

    _NAMES_TO_VALUES = {
        "ABORT": 0,
        "WARN": 1,
    }


class ncException(TException):
    """
    Attributes:
     - errType
     - provider
     - errId
     - errMsg
     - detail
     - reserved

    """


    def __init__(self, errType=None, provider=None, errId=None, errMsg=None, detail=None, reserved=None,):
        self.errType = errType
        self.provider = provider
        self.errId = errId
        self.errMsg = errMsg
        self.detail = detail
        self.reserved = reserved

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.provider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.errId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.errMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.detail = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.detail.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.reserved = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncException')
        if self.errType is not None:
            oprot.writeFieldBegin('errType', TType.I32, 1)
            oprot.writeI32(self.errType)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRING, 2)
            oprot.writeString(self.provider.encode('utf-8') if sys.version_info[0] == 2 else self.provider)
            oprot.writeFieldEnd()
        if self.errId is not None:
            oprot.writeFieldBegin('errId', TType.I32, 3)
            oprot.writeI32(self.errId)
            oprot.writeFieldEnd()
        if self.errMsg is not None:
            oprot.writeFieldBegin('errMsg', TType.STRING, 4)
            oprot.writeString(self.errMsg.encode('utf-8') if sys.version_info[0] == 2 else self.errMsg)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.detail))
            for iter6 in self.detail:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.reserved is not None:
            oprot.writeFieldBegin('reserved', TType.STRING, 6)
            oprot.writeString(self.reserved.encode('utf-8') if sys.version_info[0] == 2 else self.reserved)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.errType is None:
            raise TProtocolException(message='Required field errType is unset!')
        if self.provider is None:
            raise TProtocolException(message='Required field provider is unset!')
        if self.errId is None:
            raise TProtocolException(message='Required field errId is unset!')
        if self.errMsg is None:
            raise TProtocolException(message='Required field errMsg is unset!')
        if self.detail is None:
            raise TProtocolException(message='Required field detail is unset!')
        if self.reserved is None:
            raise TProtocolException(message='Required field reserved is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncException)
ncException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errType', None, None, ),  # 1
    (2, TType.STRING, 'provider', 'UTF8', None, ),  # 2
    (3, TType.I32, 'errId', None, None, ),  # 3
    (4, TType.STRING, 'errMsg', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'detail', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'reserved', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs
