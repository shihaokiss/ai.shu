#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCommonType_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncDataSourceJobInfo(object):
  """
  Attributes:
   - clusterId
   - authUser
   - jobId
   - jobName
   - passWd
   - customer
   - vip
   - jobType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterId', None, None, ), # 1
    (2, TType.STRING, 'authUser', None, None, ), # 2
    (3, TType.STRING, 'jobId', None, None, ), # 3
    (4, TType.STRING, 'jobName', None, None, ), # 4
    (5, TType.STRING, 'passWd', None, None, ), # 5
    (6, TType.STRING, 'customer', None, None, ), # 6
    (7, TType.STRING, 'vip', None, None, ), # 7
    (8, TType.STRING, 'jobType', None, None, ), # 8
  )

  def __init__(self, clusterId=None, authUser=None, jobId=None, jobName=None, passWd=None, customer=None, vip=None, jobType=None,):
    self.clusterId = clusterId
    self.authUser = authUser
    self.jobId = jobId
    self.jobName = jobName
    self.passWd = passWd
    self.customer = customer
    self.vip = vip
    self.jobType = jobType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.authUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.passWd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.vip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataSourceJobInfo')
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 1)
      oprot.writeString(self.clusterId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.authUser is not None:
      oprot.writeFieldBegin('authUser', TType.STRING, 2)
      oprot.writeString(self.authUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 3)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 4)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.passWd is not None:
      oprot.writeFieldBegin('passWd', TType.STRING, 5)
      oprot.writeString(self.passWd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 6)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vip is not None:
      oprot.writeFieldBegin('vip', TType.STRING, 7)
      oprot.writeString(self.vip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 8)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clusterId)
    value = (value * 31) ^ hash(self.authUser)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.passWd)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.vip)
    value = (value * 31) ^ hash(self.jobType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataSyncSourceToDest(object):
  """
  Attributes:
   - sourceVip
   - sourceClusterId
   - sourceSyncJobId
   - sourceSyncJobName
   - sourceSyncJobAuthUser
   - customer
   - recAuthUser
   - sourceJobInfo
   - isDedup
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sourceVip', None, None, ), # 1
    (2, TType.STRING, 'sourceClusterId', None, None, ), # 2
    (3, TType.STRING, 'sourceSyncJobId', None, None, ), # 3
    (4, TType.STRING, 'sourceSyncJobName', None, None, ), # 4
    (5, TType.STRING, 'sourceSyncJobAuthUser', None, None, ), # 5
    (6, TType.STRING, 'customer', None, None, ), # 6
    (7, TType.LIST, 'sourceJobInfo', (TType.STRUCT,(ncDataSourceJobInfo, ncDataSourceJobInfo.thrift_spec)), None, ), # 7
    (8, TType.STRING, 'recAuthUser', None, None, ), # 8
    (9, TType.I32, 'isDedup', None, None, ), # 9
  )

  def __init__(self, sourceVip=None, sourceClusterId=None, sourceSyncJobId=None, sourceSyncJobName=None, sourceSyncJobAuthUser=None, customer=None, recAuthUser=None, sourceJobInfo=None, isDedup=None,):
    self.sourceVip = sourceVip
    self.sourceClusterId = sourceClusterId
    self.sourceSyncJobId = sourceSyncJobId
    self.sourceSyncJobName = sourceSyncJobName
    self.sourceSyncJobAuthUser = sourceSyncJobAuthUser
    self.customer = customer
    self.recAuthUser = recAuthUser
    self.sourceJobInfo = sourceJobInfo
    self.isDedup = isDedup

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sourceVip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceClusterId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sourceSyncJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sourceSyncJobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sourceSyncJobAuthUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.recAuthUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.sourceJobInfo = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncDataSourceJobInfo()
            _elem5.read(iprot)
            self.sourceJobInfo.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.isDedup = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataSyncSourceToDest')
    if self.sourceVip is not None:
      oprot.writeFieldBegin('sourceVip', TType.STRING, 1)
      oprot.writeString(self.sourceVip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceClusterId is not None:
      oprot.writeFieldBegin('sourceClusterId', TType.STRING, 2)
      oprot.writeString(self.sourceClusterId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceSyncJobId is not None:
      oprot.writeFieldBegin('sourceSyncJobId', TType.STRING, 3)
      oprot.writeString(self.sourceSyncJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceSyncJobName is not None:
      oprot.writeFieldBegin('sourceSyncJobName', TType.STRING, 4)
      oprot.writeString(self.sourceSyncJobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceSyncJobAuthUser is not None:
      oprot.writeFieldBegin('sourceSyncJobAuthUser', TType.STRING, 5)
      oprot.writeString(self.sourceSyncJobAuthUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 6)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceJobInfo is not None:
      oprot.writeFieldBegin('sourceJobInfo', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.sourceJobInfo))
      for iter6 in self.sourceJobInfo:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recAuthUser is not None:
      oprot.writeFieldBegin('recAuthUser', TType.STRING, 8)
      oprot.writeString(self.recAuthUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isDedup is not None:
      oprot.writeFieldBegin('isDedup', TType.I32, 9)
      oprot.writeI32(self.isDedup)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sourceVip)
    value = (value * 31) ^ hash(self.sourceClusterId)
    value = (value * 31) ^ hash(self.sourceSyncJobId)
    value = (value * 31) ^ hash(self.sourceSyncJobName)
    value = (value * 31) ^ hash(self.sourceSyncJobAuthUser)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.recAuthUser)
    value = (value * 31) ^ hash(self.sourceJobInfo)
    value = (value * 31) ^ hash(self.isDedup)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAppJobRemoteReq(object):
  """
  Attributes:
   - jobAuthUser
   - jobId
   - jobClusterId
   - jobAppType
   - destClusterVips
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobAuthUser', None, None, ), # 1
    (2, TType.STRING, 'jobId', None, None, ), # 2
    (3, TType.STRING, 'jobClusterId', None, None, ), # 3
    (4, TType.I32, 'jobAppType', None, None, ), # 4
    (5, TType.LIST, 'destClusterVips', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, jobAuthUser=None, jobId=None, jobClusterId=None, jobAppType=None, destClusterVips=None,):
    self.jobAuthUser = jobAuthUser
    self.jobId = jobId
    self.jobClusterId = jobClusterId
    self.jobAppType = jobAppType
    self.destClusterVips = destClusterVips

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobAuthUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobClusterId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.jobAppType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.destClusterVips = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString().decode('utf-8')
            self.destClusterVips.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAppJobRemoteReq')
    if self.jobAuthUser is not None:
      oprot.writeFieldBegin('jobAuthUser', TType.STRING, 1)
      oprot.writeString(self.jobAuthUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 2)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobClusterId is not None:
      oprot.writeFieldBegin('jobClusterId', TType.STRING, 3)
      oprot.writeString(self.jobClusterId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobAppType is not None:
      oprot.writeFieldBegin('jobAppType', TType.I32, 4)
      oprot.writeI32(self.jobAppType)
      oprot.writeFieldEnd()
    if self.destClusterVips is not None:
      oprot.writeFieldBegin('destClusterVips', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.destClusterVips))
      for iter13 in self.destClusterVips:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobAuthUser)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobClusterId)
    value = (value * 31) ^ hash(self.jobAppType)
    value = (value * 31) ^ hash(self.destClusterVips)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFPRelateJob(object):
  """
  Attributes:
   - jobId
   - clusterVip
   - jobName
   - engineType
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'clusterVip', None, None, ), # 2
    (3, TType.STRING, 'jobName', None, None, ), # 3
    (4, TType.I32, 'engineType', None, None, ), # 4
    (5, TType.STRING, 'userName', None, None, ), # 5
  )

  def __init__(self, jobId=None, clusterVip=None, jobName=None, engineType=None, userName=None,):
    self.jobId = jobId
    self.clusterVip = clusterVip
    self.jobName = jobName
    self.engineType = engineType
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterVip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFPRelateJob')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterVip is not None:
      oprot.writeFieldBegin('clusterVip', TType.STRING, 2)
      oprot.writeString(self.clusterVip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 3)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 4)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 5)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.clusterVip)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBackupRemoteJobCountInfo(object):
  """
  Attributes:
   - abnormal
   - stopped
   - running
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'abnormal', None, None, ), # 1
    (2, TType.I32, 'stopped', None, None, ), # 2
    (3, TType.I32, 'running', None, None, ), # 3
  )

  def __init__(self, abnormal=None, stopped=None, running=None,):
    self.abnormal = abnormal
    self.stopped = stopped
    self.running = running

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.abnormal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.stopped = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.running = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBackupRemoteJobCountInfo')
    if self.abnormal is not None:
      oprot.writeFieldBegin('abnormal', TType.I32, 1)
      oprot.writeI32(self.abnormal)
      oprot.writeFieldEnd()
    if self.stopped is not None:
      oprot.writeFieldBegin('stopped', TType.I32, 2)
      oprot.writeI32(self.stopped)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.I32, 3)
      oprot.writeI32(self.running)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.abnormal)
    value = (value * 31) ^ hash(self.stopped)
    value = (value * 31) ^ hash(self.running)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
