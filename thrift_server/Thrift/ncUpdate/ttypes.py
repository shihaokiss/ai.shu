#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncFileAttr(object):
  TARGZ = 0
  ZIP = 1

  _VALUES_TO_NAMES = {
    0: "TARGZ",
    1: "ZIP",
  }

  _NAMES_TO_VALUES = {
    "TARGZ": 0,
    "ZIP": 1,
  }


class ncBuf(object):
  """
  Attributes:
   - context
   - fName
   - attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'context', None, None, ), # 1
    (2, TType.STRING, 'fName', None, None, ), # 2
    None, # 3
    (4, TType.I32, 'attr', None, None, ), # 4
  )

  def __init__(self, context=None, fName=None, attr=None,):
    self.context = context
    self.fName = fName
    self.attr = attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.context = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.attr = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBuf')
    if self.context is not None:
      oprot.writeFieldBegin('context', TType.STRING, 1)
      oprot.writeString(self.context)
      oprot.writeFieldEnd()
    if self.fName is not None:
      oprot.writeFieldBegin('fName', TType.STRING, 2)
      oprot.writeString(self.fName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.attr is not None:
      oprot.writeFieldBegin('attr', TType.I32, 4)
      oprot.writeI32(self.attr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.context)
    value = (value * 31) ^ hash(self.fName)
    value = (value * 31) ^ hash(self.attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBufReq(object):
  """
  Attributes:
   - requestId
   - destData
   - rootPath
   - installPath
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.LIST, 'destData', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'rootPath', None, None, ), # 3
    (4, TType.STRING, 'installPath', None, None, ), # 4
  )

  def __init__(self, requestId=None, destData=None, rootPath=None, installPath=None,):
    self.requestId = requestId
    self.destData = destData
    self.rootPath = rootPath
    self.installPath = installPath

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.destData = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.destData.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.rootPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.installPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBufReq')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.destData is not None:
      oprot.writeFieldBegin('destData', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.destData))
      for iter6 in self.destData:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rootPath is not None:
      oprot.writeFieldBegin('rootPath', TType.STRING, 3)
      oprot.writeString(self.rootPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.installPath is not None:
      oprot.writeFieldBegin('installPath', TType.STRING, 4)
      oprot.writeString(self.installPath.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.destData)
    value = (value * 31) ^ hash(self.rootPath)
    value = (value * 31) ^ hash(self.installPath)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBufResult(object):
  """
  Attributes:
   - requestId
   - buf
   - finished
   - nodeIp
   - version
   - sysInfo
   - installPath
   - noteNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRUCT, 'buf', (ncBuf, ncBuf.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'finished', None, False, ), # 3
    (4, TType.STRING, 'nodeIp', None, None, ), # 4
    (5, TType.STRING, 'version', None, None, ), # 5
    (6, TType.STRING, 'sysInfo', None, None, ), # 6
    (7, TType.STRING, 'installPath', None, None, ), # 7
    (8, TType.I32, 'noteNum', None, None, ), # 8
  )

  def __init__(self, requestId=None, buf=None, finished=thrift_spec[3][4], nodeIp=None, version=None, sysInfo=None, installPath=None, noteNum=None,):
    self.requestId = requestId
    self.buf = buf
    self.finished = finished
    self.nodeIp = nodeIp
    self.version = version
    self.sysInfo = sysInfo
    self.installPath = installPath
    self.noteNum = noteNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.buf = ncBuf()
          self.buf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sysInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.installPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.noteNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBufResult')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.buf is not None:
      oprot.writeFieldBegin('buf', TType.STRUCT, 2)
      self.buf.write(oprot)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 3)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 4)
      oprot.writeString(self.nodeIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 5)
      oprot.writeString(self.version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sysInfo is not None:
      oprot.writeFieldBegin('sysInfo', TType.STRING, 6)
      oprot.writeString(self.sysInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.installPath is not None:
      oprot.writeFieldBegin('installPath', TType.STRING, 7)
      oprot.writeString(self.installPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.noteNum is not None:
      oprot.writeFieldBegin('noteNum', TType.I32, 8)
      oprot.writeI32(self.noteNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.buf)
    value = (value * 31) ^ hash(self.finished)
    value = (value * 31) ^ hash(self.nodeIp)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.sysInfo)
    value = (value * 31) ^ hash(self.installPath)
    value = (value * 31) ^ hash(self.noteNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
