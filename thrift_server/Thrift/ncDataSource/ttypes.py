# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes
import ncCommonType.ttypes
import ncException.ttypes
import ncDataSource_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncVerificationStatus(object):
    NONE = 0
    TRUSTED = 1
    PSEUDO_TRUSTED = 2
    UNTRUSTED = 3

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "TRUSTED",
        2: "PSEUDO_TRUSTED",
        3: "UNTRUSTED",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "TRUSTED": 1,
        "PSEUDO_TRUSTED": 2,
        "UNTRUSTED": 3,
    }


class ncVerificationError(object):
    NONE = 0
    INVALID_DATE = 1
    INVALID_CA = 2
    REVOKED = 3
    INVALID_COMMON_NAME = 4

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "INVALID_DATE",
        2: "INVALID_CA",
        3: "REVOKED",
        4: "INVALID_COMMON_NAME",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "INVALID_DATE": 1,
        "INVALID_CA": 2,
        "REVOKED": 3,
        "INVALID_COMMON_NAME": 4,
    }


class ncAppSupportRequest(object):
    """
    Attributes:
     - clientMac
     - appVec

    """


    def __init__(self, clientMac=None, appVec=None,):
        self.clientMac = clientMac
        self.appVec = appVec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.appVec = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.appVec.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAppSupportRequest')
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 1)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.appVec is not None:
            oprot.writeFieldBegin('appVec', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.appVec))
            for iter6 in self.appVec:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataConfigInfo(object):
    """
    Attributes:
     - userName
     - passWord
     - path
     - port
     - customer
     - uuid
     - nodeType
     - osUser
     - clientMac
     - addInstance
     - configdbInfo

    """


    def __init__(self, userName=None, passWord=None, path=None, port=None, customer=None, uuid=None, nodeType=None, osUser=None, clientMac=None, addInstance=False, configdbInfo=None,):
        self.userName = userName
        self.passWord = passWord
        self.path = path
        self.port = port
        self.customer = customer
        self.uuid = uuid
        self.nodeType = nodeType
        self.osUser = osUser
        self.clientMac = clientMac
        self.addInstance = addInstance
        self.configdbInfo = configdbInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.passWord = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.nodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.osUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.addInstance = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.configdbInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataConfigInfo')
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 1)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.passWord is not None:
            oprot.writeFieldBegin('passWord', TType.STRING, 2)
            oprot.writeString(self.passWord.encode('utf-8') if sys.version_info[0] == 2 else self.passWord)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 3)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 4)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 5)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 6)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.I32, 7)
            oprot.writeI32(self.nodeType)
            oprot.writeFieldEnd()
        if self.osUser is not None:
            oprot.writeFieldBegin('osUser', TType.STRING, 8)
            oprot.writeString(self.osUser.encode('utf-8') if sys.version_info[0] == 2 else self.osUser)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 9)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.addInstance is not None:
            oprot.writeFieldBegin('addInstance', TType.BOOL, 10)
            oprot.writeBool(self.addInstance)
            oprot.writeFieldEnd()
        if self.configdbInfo is not None:
            oprot.writeFieldBegin('configdbInfo', TType.STRING, 11)
            oprot.writeString(self.configdbInfo.encode('utf-8') if sys.version_info[0] == 2 else self.configdbInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataSourceRequest(object):
    """
    Attributes:
     - jobType
     - uuid
     - fullPath
     - count
     - index
     - options
     - type
     - requestId
     - code
     - customer
     - configInfoList
     - isAll
     - reqClientMac

    """


    def __init__(self, jobType=None, uuid=None, fullPath=None, count=None, index=None, options=None, type=None, requestId=None, code=None, customer=None, configInfoList=None, isAll=None, reqClientMac=None,):
        self.jobType = jobType
        self.uuid = uuid
        self.fullPath = fullPath
        self.count = count
        self.index = index
        self.options = options
        self.type = type
        self.requestId = requestId
        self.code = code
        self.customer = customer
        self.configInfoList = configInfoList
        self.isAll = isAll
        self.reqClientMac = reqClientMac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.options = ncCommonType.ttypes.ncOptions()
                    self.options.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.configInfoList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncDataConfigInfo()
                        _elem12.read(iprot)
                        self.configInfoList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.isAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.reqClientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSourceRequest')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 3)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 4)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 5)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.STRUCT, 6)
            self.options.write(oprot)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 7)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 8)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 9)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 10)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.configInfoList is not None:
            oprot.writeFieldBegin('configInfoList', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.configInfoList))
            for iter13 in self.configInfoList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isAll is not None:
            oprot.writeFieldBegin('isAll', TType.BOOL, 12)
            oprot.writeBool(self.isAll)
            oprot.writeFieldEnd()
        if self.reqClientMac is not None:
            oprot.writeFieldBegin('reqClientMac', TType.STRING, 13)
            oprot.writeString(self.reqClientMac.encode('utf-8') if sys.version_info[0] == 2 else self.reqClientMac)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataSource(object):
    """
    Attributes:
     - fullPath
     - dispPath
     - code
     - nodeType
     - customer
     - expandedFlag
     - checked
     - checkable
     - uuid

    """


    def __init__(self, fullPath=None, dispPath=None, code=None, nodeType=None, customer=None, expandedFlag=None, checked=None, checkable=None, uuid=None,):
        self.fullPath = fullPath
        self.dispPath = dispPath
        self.code = code
        self.nodeType = nodeType
        self.customer = customer
        self.expandedFlag = expandedFlag
        self.checked = checked
        self.checkable = checkable
        self.uuid = uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dispPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.nodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.expandedFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.checked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.checkable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSource')
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 1)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        if self.dispPath is not None:
            oprot.writeFieldBegin('dispPath', TType.STRING, 2)
            oprot.writeString(self.dispPath.encode('utf-8') if sys.version_info[0] == 2 else self.dispPath)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 3)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.I32, 4)
            oprot.writeI32(self.nodeType)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 5)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.expandedFlag is not None:
            oprot.writeFieldBegin('expandedFlag', TType.BOOL, 6)
            oprot.writeBool(self.expandedFlag)
            oprot.writeFieldEnd()
        if self.checked is not None:
            oprot.writeFieldBegin('checked', TType.BOOL, 7)
            oprot.writeBool(self.checked)
            oprot.writeFieldEnd()
        if self.checkable is not None:
            oprot.writeFieldBegin('checkable', TType.BOOL, 8)
            oprot.writeBool(self.checkable)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 9)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataSourceSet(object):
    """
    数据源请求结果

    Attributes:
     - totalNum
     - data
     - requestId
     - finished
     - reqClientMark

    """


    def __init__(self, totalNum=None, data=None, requestId=None, finished=None, reqClientMark=None,):
        self.totalNum = totalNum
        self.data = data
        self.requestId = requestId
        self.finished = finished
        self.reqClientMark = reqClientMark

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncDataSource()
                        _elem19.read(iprot)
                        self.data.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.reqClientMark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSourceSet')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I32, 1)
            oprot.writeI32(self.totalNum)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter20 in self.data:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 3)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 4)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.reqClientMark is not None:
            oprot.writeFieldBegin('reqClientMark', TType.STRING, 5)
            oprot.writeString(self.reqClientMark.encode('utf-8') if sys.version_info[0] == 2 else self.reqClientMark)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClusterDataSourceSet(object):
    """
    Attributes:
     - finished
     - dataSet
     - requestId

    """


    def __init__(self, finished=None, dataSet=None, requestId=None,):
        self.finished = finished
        self.dataSet = dataSet
        self.requestId = requestId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dataSet = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncDataSourceSet()
                        _elem26.read(iprot)
                        self.dataSet.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClusterDataSourceSet')
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 1)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        if self.dataSet is not None:
            oprot.writeFieldBegin('dataSet', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.dataSet))
            for iter27 in self.dataSet:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 3)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDataConfigInfoSet(object):
    """
    请求验证配置信息

    Attributes:
     - jobType
     - configInfo
     - options

    """


    def __init__(self, jobType=None, configInfo=None, options=None,):
        self.jobType = jobType
        self.configInfo = configInfo
        self.options = options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.configInfo = ncDataConfigInfo()
                    self.configInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.options = ncCommonType.ttypes.ncOptions()
                    self.options.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataConfigInfoSet')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.configInfo is not None:
            oprot.writeFieldBegin('configInfo', TType.STRUCT, 2)
            self.configInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.STRUCT, 3)
            self.options.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jobType is None:
            raise TProtocolException(message='Required field jobType is unset!')
        if self.configInfo is None:
            raise TProtocolException(message='Required field configInfo is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncUserSvc(object):
    """
    用于启动服务的

    Attributes:
     - jobType
     - userName
     - passWord
     - clientMac
     - dbInsPath
     - needPath1
     - needPath2

    """


    def __init__(self, jobType=None, userName=None, passWord=None, clientMac=None, dbInsPath=None, needPath1=None, needPath2=None,):
        self.jobType = jobType
        self.userName = userName
        self.passWord = passWord
        self.clientMac = clientMac
        self.dbInsPath = dbInsPath
        self.needPath1 = needPath1
        self.needPath2 = needPath2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.passWord = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dbInsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.needPath1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.needPath2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUserSvc')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.passWord is not None:
            oprot.writeFieldBegin('passWord', TType.STRING, 3)
            oprot.writeString(self.passWord.encode('utf-8') if sys.version_info[0] == 2 else self.passWord)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 4)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.dbInsPath is not None:
            oprot.writeFieldBegin('dbInsPath', TType.STRING, 5)
            oprot.writeString(self.dbInsPath.encode('utf-8') if sys.version_info[0] == 2 else self.dbInsPath)
            oprot.writeFieldEnd()
        if self.needPath1 is not None:
            oprot.writeFieldBegin('needPath1', TType.STRING, 6)
            oprot.writeString(self.needPath1.encode('utf-8') if sys.version_info[0] == 2 else self.needPath1)
            oprot.writeFieldEnd()
        if self.needPath2 is not None:
            oprot.writeFieldBegin('needPath2', TType.STRING, 7)
            oprot.writeString(self.needPath2.encode('utf-8') if sys.version_info[0] == 2 else self.needPath2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDbUserNameRequest(object):
    """
    Attributes:
     - jobType
     - fullPath
     - clientMac

    """


    def __init__(self, jobType=None, fullPath=None, clientMac=None,):
        self.jobType = jobType
        self.fullPath = fullPath
        self.clientMac = clientMac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDbUserNameRequest')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 2)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 3)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCheckPathPar(object):
    """
    检测路径

    Attributes:
     - jobType
     - fullPath
     - pathType
     - clientMac

    """


    def __init__(self, jobType=None, fullPath=None, pathType=None, clientMac=None,):
        self.jobType = jobType
        self.fullPath = fullPath
        self.pathType = pathType
        self.clientMac = clientMac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pathType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCheckPathPar')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 2)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        if self.pathType is not None:
            oprot.writeFieldBegin('pathType', TType.I32, 3)
            oprot.writeI32(self.pathType)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 4)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOSUSersInfoSet(object):
    """
    获取系统用户列表

    Attributes:
     - jobType
     - osUserList
     - clientMac

    """


    def __init__(self, jobType=None, osUserList=None, clientMac=None,):
        self.jobType = jobType
        self.osUserList = osUserList
        self.clientMac = clientMac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.osUserList = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.osUserList.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOSUSersInfoSet')
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 1)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.osUserList is not None:
            oprot.writeFieldBegin('osUserList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.osUserList))
            for iter34 in self.osUserList:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 3)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVerificationRequest(object):
    """
    Attributes:
     - host
     - port
     - clientMac

    """


    def __init__(self, host=None, port=None, clientMac=None,):
        self.host = host
        self.port = port
        self.clientMac = clientMac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVerificationRequest')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 2)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 3)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVerificationResponse(object):
    """
    Attributes:
     - status
     - commonName
     - issuer
     - startDate
     - expireDate
     - isRevoked
     - fingerprint
     - error

    """


    def __init__(self, status=None, commonName=None, issuer=None, startDate=None, expireDate=None, isRevoked=None, fingerprint=None, error=None,):
        self.status = status
        self.commonName = commonName
        self.issuer = issuer
        self.startDate = startDate
        self.expireDate = expireDate
        self.isRevoked = isRevoked
        self.fingerprint = fingerprint
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.commonName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.issuer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.expireDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isRevoked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.fingerprint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVerificationResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.commonName is not None:
            oprot.writeFieldBegin('commonName', TType.STRING, 2)
            oprot.writeString(self.commonName.encode('utf-8') if sys.version_info[0] == 2 else self.commonName)
            oprot.writeFieldEnd()
        if self.issuer is not None:
            oprot.writeFieldBegin('issuer', TType.STRING, 3)
            oprot.writeString(self.issuer.encode('utf-8') if sys.version_info[0] == 2 else self.issuer)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 4)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.expireDate is not None:
            oprot.writeFieldBegin('expireDate', TType.I64, 5)
            oprot.writeI64(self.expireDate)
            oprot.writeFieldEnd()
        if self.isRevoked is not None:
            oprot.writeFieldBegin('isRevoked', TType.BOOL, 6)
            oprot.writeBool(self.isRevoked)
            oprot.writeFieldEnd()
        if self.fingerprint is not None:
            oprot.writeFieldBegin('fingerprint', TType.STRING, 7)
            oprot.writeString(self.fingerprint.encode('utf-8') if sys.version_info[0] == 2 else self.fingerprint)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 8)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncAppSupportRequest)
ncAppSupportRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientMac', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'appVec', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncDataConfigInfo)
ncDataConfigInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'passWord', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'path', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'port', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'customer', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'uuid', 'UTF8', None, ),  # 6
    (7, TType.I32, 'nodeType', None, None, ),  # 7
    (8, TType.STRING, 'osUser', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'clientMac', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'addInstance', None, False, ),  # 10
    (11, TType.STRING, 'configdbInfo', 'UTF8', None, ),  # 11
)
all_structs.append(ncDataSourceRequest)
ncDataSourceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fullPath', 'UTF8', None, ),  # 3
    (4, TType.I32, 'count', None, None, ),  # 4
    (5, TType.I32, 'index', None, None, ),  # 5
    (6, TType.STRUCT, 'options', [ncCommonType.ttypes.ncOptions, None], None, ),  # 6
    (7, TType.I32, 'type', None, None, ),  # 7
    (8, TType.STRING, 'requestId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'code', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'customer', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'configInfoList', (TType.STRUCT, [ncDataConfigInfo, None], False), None, ),  # 11
    (12, TType.BOOL, 'isAll', None, None, ),  # 12
    (13, TType.STRING, 'reqClientMac', 'UTF8', None, ),  # 13
)
all_structs.append(ncDataSource)
ncDataSource.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fullPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dispPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'code', 'UTF8', None, ),  # 3
    (4, TType.I32, 'nodeType', None, None, ),  # 4
    (5, TType.STRING, 'customer', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'expandedFlag', None, None, ),  # 6
    (7, TType.BOOL, 'checked', None, None, ),  # 7
    (8, TType.BOOL, 'checkable', None, None, ),  # 8
    (9, TType.STRING, 'uuid', 'UTF8', None, ),  # 9
)
all_structs.append(ncDataSourceSet)
ncDataSourceSet.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'data', (TType.STRUCT, [ncDataSource, None], False), None, ),  # 2
    (3, TType.STRING, 'requestId', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'finished', None, None, ),  # 4
    (5, TType.STRING, 'reqClientMark', 'UTF8', None, ),  # 5
)
all_structs.append(ncClusterDataSourceSet)
ncClusterDataSourceSet.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'finished', None, None, ),  # 1
    (2, TType.LIST, 'dataSet', (TType.STRUCT, [ncDataSourceSet, None], False), None, ),  # 2
    (3, TType.STRING, 'requestId', 'UTF8', None, ),  # 3
)
all_structs.append(ncDataConfigInfoSet)
ncDataConfigInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'configInfo', [ncDataConfigInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'options', [ncCommonType.ttypes.ncOptions, None], None, ),  # 3
)
all_structs.append(ncUserSvc)
ncUserSvc.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'passWord', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'clientMac', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dbInsPath', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'needPath1', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'needPath2', 'UTF8', None, ),  # 7
)
all_structs.append(ncDbUserNameRequest)
ncDbUserNameRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fullPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'clientMac', 'UTF8', None, ),  # 3
)
all_structs.append(ncCheckPathPar)
ncCheckPathPar.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fullPath', 'UTF8', None, ),  # 2
    (3, TType.I32, 'pathType', None, None, ),  # 3
    (4, TType.STRING, 'clientMac', 'UTF8', None, ),  # 4
)
all_structs.append(ncOSUSersInfoSet)
ncOSUSersInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobType', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'osUserList', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'clientMac', 'UTF8', None, ),  # 3
)
all_structs.append(ncVerificationRequest)
ncVerificationRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'port', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'clientMac', 'UTF8', None, ),  # 3
)
all_structs.append(ncVerificationResponse)
ncVerificationResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'commonName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'issuer', 'UTF8', None, ),  # 3
    (4, TType.I64, 'startDate', None, None, ),  # 4
    (5, TType.I64, 'expireDate', None, None, ),  # 5
    (6, TType.BOOL, 'isRevoked', None, None, ),  # 6
    (7, TType.STRING, 'fingerprint', 'UTF8', None, ),  # 7
    (8, TType.I32, 'error', None, None, ),  # 8
)
fix_spec(all_structs)
del all_structs
