# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncDiskStatus(object):
    """
    磁盘状态信息

    """
    DISK_NORMAL_STATUS = 0
    DISK_METALOST_STATUS = 1

    _VALUES_TO_NAMES = {
        0: "DISK_NORMAL_STATUS",
        1: "DISK_METALOST_STATUS",
    }

    _NAMES_TO_VALUES = {
        "DISK_NORMAL_STATUS": 0,
        "DISK_METALOST_STATUS": 1,
    }


class ncRaidLevel(object):
    """
    支持的raid类型

    """
    raid0 = 0
    raid1 = 1
    raid5 = 5
    raid6 = 6
    raid10 = 10
    raid50 = 50
    raid60 = 60

    _VALUES_TO_NAMES = {
        0: "raid0",
        1: "raid1",
        5: "raid5",
        6: "raid6",
        10: "raid10",
        50: "raid50",
        60: "raid60",
    }

    _NAMES_TO_VALUES = {
        "raid0": 0,
        "raid1": 1,
        "raid5": 5,
        "raid6": 6,
        "raid10": 10,
        "raid50": 50,
        "raid60": 60,
    }


class ncDataSpaceInfo(object):
    """
    数据容量信息

    Attributes:
     - logicalSize
     - physicalSize
     - allocSize

    """


    def __init__(self, logicalSize=None, physicalSize=None, allocSize=None,):
        self.logicalSize = logicalSize
        self.physicalSize = physicalSize
        self.allocSize = allocSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.logicalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.physicalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.allocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDataSpaceInfo')
        if self.logicalSize is not None:
            oprot.writeFieldBegin('logicalSize', TType.I64, 1)
            oprot.writeI64(self.logicalSize)
            oprot.writeFieldEnd()
        if self.physicalSize is not None:
            oprot.writeFieldBegin('physicalSize', TType.I64, 2)
            oprot.writeI64(self.physicalSize)
            oprot.writeFieldEnd()
        if self.allocSize is not None:
            oprot.writeFieldBegin('allocSize', TType.I64, 3)
            oprot.writeI64(self.allocSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDiskSpaceInfo(object):
    """
    磁盘容量信息

    Attributes:
     - diskSize
     - freeSize
     - quotaSize
     - dataSize

    """


    def __init__(self, diskSize=None, freeSize=None, quotaSize=None, dataSize=None,):
        self.diskSize = diskSize
        self.freeSize = freeSize
        self.quotaSize = quotaSize
        self.dataSize = dataSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.diskSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.quotaSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.dataSize = ncDataSpaceInfo()
                    self.dataSize.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDiskSpaceInfo')
        if self.diskSize is not None:
            oprot.writeFieldBegin('diskSize', TType.I64, 1)
            oprot.writeI64(self.diskSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 2)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        if self.quotaSize is not None:
            oprot.writeFieldBegin('quotaSize', TType.I64, 3)
            oprot.writeI64(self.quotaSize)
            oprot.writeFieldEnd()
        if self.dataSize is not None:
            oprot.writeFieldBegin('dataSize', TType.STRUCT, 4)
            self.dataSize.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDiskInfo(object):
    """
    磁盘信息

    Attributes:
     - id
     - name
     - path
     - spaceInfo
     - status
     - groupGuid

    """


    def __init__(self, id=None, name=None, path=None, spaceInfo=None, status=0, groupGuid=None,):
        self.id = id
        self.name = name
        self.path = path
        self.spaceInfo = spaceInfo
        self.status = status
        self.groupGuid = groupGuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.spaceInfo = ncDiskSpaceInfo()
                    self.spaceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.groupGuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDiskInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 3)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.spaceInfo is not None:
            oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 5)
            self.spaceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.groupGuid is not None:
            oprot.writeFieldBegin('groupGuid', TType.STRING, 7)
            oprot.writeString(self.groupGuid.encode('utf-8') if sys.version_info[0] == 2 else self.groupGuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStorageSpaceInfo(object):
    """
    存储容量信息

    Attributes:
     - totalSize
     - quotaSize
     - usedSize

    """


    def __init__(self, totalSize=None, quotaSize=None, usedSize=None,):
        self.totalSize = totalSize
        self.quotaSize = quotaSize
        self.usedSize = usedSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.quotaSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.usedSize = ncDataSpaceInfo()
                    self.usedSize.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStorageSpaceInfo')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.quotaSize is not None:
            oprot.writeFieldBegin('quotaSize', TType.I64, 2)
            oprot.writeI64(self.quotaSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.STRUCT, 3)
            self.usedSize.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncDataSpaceInfo)
ncDataSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'logicalSize', None, None, ),  # 1
    (2, TType.I64, 'physicalSize', None, None, ),  # 2
    (3, TType.I64, 'allocSize', None, None, ),  # 3
)
all_structs.append(ncDiskSpaceInfo)
ncDiskSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'diskSize', None, None, ),  # 1
    (2, TType.I64, 'freeSize', None, None, ),  # 2
    (3, TType.I64, 'quotaSize', None, None, ),  # 3
    (4, TType.STRUCT, 'dataSize', [ncDataSpaceInfo, None], None, ),  # 4
)
all_structs.append(ncDiskInfo)
ncDiskInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'path', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRUCT, 'spaceInfo', [ncDiskSpaceInfo, None], None, ),  # 5
    (6, TType.I32, 'status', None, 0, ),  # 6
    (7, TType.STRING, 'groupGuid', 'UTF8', None, ),  # 7
)
all_structs.append(ncStorageSpaceInfo)
ncStorageSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.I64, 'quotaSize', None, None, ),  # 2
    (3, TType.STRUCT, 'usedSize', [ncDataSpaceInfo, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
