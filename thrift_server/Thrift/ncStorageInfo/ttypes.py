#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncDiskStatus(object):
  """
  磁盘状态信息
  """
  DISK_NORMAL_STATUS = 0
  DISK_METALOST_STATUS = 1

  _VALUES_TO_NAMES = {
    0: "DISK_NORMAL_STATUS",
    1: "DISK_METALOST_STATUS",
  }

  _NAMES_TO_VALUES = {
    "DISK_NORMAL_STATUS": 0,
    "DISK_METALOST_STATUS": 1,
  }

class ncRaidLevel(object):
  """
  支持的raid类型
  """
  raid0 = 0
  raid1 = 1
  raid5 = 5
  raid6 = 6
  raid10 = 10
  raid50 = 50
  raid60 = 60

  _VALUES_TO_NAMES = {
    0: "raid0",
    1: "raid1",
    5: "raid5",
    6: "raid6",
    10: "raid10",
    50: "raid50",
    60: "raid60",
  }

  _NAMES_TO_VALUES = {
    "raid0": 0,
    "raid1": 1,
    "raid5": 5,
    "raid6": 6,
    "raid10": 10,
    "raid50": 50,
    "raid60": 60,
  }


class ncDataSpaceInfo(object):
  """
  数据容量信息

  Attributes:
   - logicalSize
   - physicalSize
   - allocSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'logicalSize', None, None, ), # 1
    (2, TType.I64, 'physicalSize', None, None, ), # 2
    (3, TType.I64, 'allocSize', None, None, ), # 3
  )

  def __init__(self, logicalSize=None, physicalSize=None, allocSize=None,):
    self.logicalSize = logicalSize
    self.physicalSize = physicalSize
    self.allocSize = allocSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.logicalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.physicalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.allocSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataSpaceInfo')
    if self.logicalSize is not None:
      oprot.writeFieldBegin('logicalSize', TType.I64, 1)
      oprot.writeI64(self.logicalSize)
      oprot.writeFieldEnd()
    if self.physicalSize is not None:
      oprot.writeFieldBegin('physicalSize', TType.I64, 2)
      oprot.writeI64(self.physicalSize)
      oprot.writeFieldEnd()
    if self.allocSize is not None:
      oprot.writeFieldBegin('allocSize', TType.I64, 3)
      oprot.writeI64(self.allocSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.logicalSize)
    value = (value * 31) ^ hash(self.physicalSize)
    value = (value * 31) ^ hash(self.allocSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDiskSpaceInfo(object):
  """
  磁盘容量信息

  Attributes:
   - diskSize
   - freeSize
   - quotaSize
   - dataSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'diskSize', None, None, ), # 1
    (2, TType.I64, 'freeSize', None, None, ), # 2
    (3, TType.I64, 'quotaSize', None, None, ), # 3
    (4, TType.STRUCT, 'dataSize', (ncDataSpaceInfo, ncDataSpaceInfo.thrift_spec), None, ), # 4
  )

  def __init__(self, diskSize=None, freeSize=None, quotaSize=None, dataSize=None,):
    self.diskSize = diskSize
    self.freeSize = freeSize
    self.quotaSize = quotaSize
    self.dataSize = dataSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.diskSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.freeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.quotaSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.dataSize = ncDataSpaceInfo()
          self.dataSize.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDiskSpaceInfo')
    if self.diskSize is not None:
      oprot.writeFieldBegin('diskSize', TType.I64, 1)
      oprot.writeI64(self.diskSize)
      oprot.writeFieldEnd()
    if self.freeSize is not None:
      oprot.writeFieldBegin('freeSize', TType.I64, 2)
      oprot.writeI64(self.freeSize)
      oprot.writeFieldEnd()
    if self.quotaSize is not None:
      oprot.writeFieldBegin('quotaSize', TType.I64, 3)
      oprot.writeI64(self.quotaSize)
      oprot.writeFieldEnd()
    if self.dataSize is not None:
      oprot.writeFieldBegin('dataSize', TType.STRUCT, 4)
      self.dataSize.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.diskSize)
    value = (value * 31) ^ hash(self.freeSize)
    value = (value * 31) ^ hash(self.quotaSize)
    value = (value * 31) ^ hash(self.dataSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDiskInfo(object):
  """
  磁盘信息

  Attributes:
   - id
   - name
   - path
   - spaceInfo
   - status
   - groupGuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'path', None, None, ), # 3
    None, # 4
    (5, TType.STRUCT, 'spaceInfo', (ncDiskSpaceInfo, ncDiskSpaceInfo.thrift_spec), None, ), # 5
    (6, TType.I32, 'status', None,     0, ), # 6
    (7, TType.STRING, 'groupGuid', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, path=None, spaceInfo=None, status=thrift_spec[6][4], groupGuid=None,):
    self.id = id
    self.name = name
    self.path = path
    self.spaceInfo = spaceInfo
    self.status = status
    self.groupGuid = groupGuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.path = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.spaceInfo = ncDiskSpaceInfo()
          self.spaceInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.groupGuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDiskInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 3)
      oprot.writeString(self.path.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.spaceInfo is not None:
      oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 5)
      self.spaceInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.groupGuid is not None:
      oprot.writeFieldBegin('groupGuid', TType.STRING, 7)
      oprot.writeString(self.groupGuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.path)
    value = (value * 31) ^ hash(self.spaceInfo)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.groupGuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStorageSpaceInfo(object):
  """
  存储容量信息

  Attributes:
   - totalSize
   - quotaSize
   - usedSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'totalSize', None, None, ), # 1
    (2, TType.I64, 'quotaSize', None, None, ), # 2
    (3, TType.STRUCT, 'usedSize', (ncDataSpaceInfo, ncDataSpaceInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, totalSize=None, quotaSize=None, usedSize=None,):
    self.totalSize = totalSize
    self.quotaSize = quotaSize
    self.usedSize = usedSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.totalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.quotaSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.usedSize = ncDataSpaceInfo()
          self.usedSize.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStorageSpaceInfo')
    if self.totalSize is not None:
      oprot.writeFieldBegin('totalSize', TType.I64, 1)
      oprot.writeI64(self.totalSize)
      oprot.writeFieldEnd()
    if self.quotaSize is not None:
      oprot.writeFieldBegin('quotaSize', TType.I64, 2)
      oprot.writeI64(self.quotaSize)
      oprot.writeFieldEnd()
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.STRUCT, 3)
      self.usedSize.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalSize)
    value = (value * 31) ^ hash(self.quotaSize)
    value = (value * 31) ^ hash(self.usedSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
