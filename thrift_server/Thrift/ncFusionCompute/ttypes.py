# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncTfFusionObjType(object):
    NC_TF_TYPE_UNDEFINE = 0
    NC_TF_TYPE_ROOT_OBJ = 1
    NC_TF_TYPE_SITE_OBJ = 2
    NC_TF_TYPE_CLUSTFOLDER_OBJ = 3
    NC_TF_TYPE_CLUSTER_OBJ = 4
    NC_TF_TYPE_HOST_OBJ = 5
    NC_TF_TYPE_VM_OBJ = 6

    _VALUES_TO_NAMES = {
        0: "NC_TF_TYPE_UNDEFINE",
        1: "NC_TF_TYPE_ROOT_OBJ",
        2: "NC_TF_TYPE_SITE_OBJ",
        3: "NC_TF_TYPE_CLUSTFOLDER_OBJ",
        4: "NC_TF_TYPE_CLUSTER_OBJ",
        5: "NC_TF_TYPE_HOST_OBJ",
        6: "NC_TF_TYPE_VM_OBJ",
    }

    _NAMES_TO_VALUES = {
        "NC_TF_TYPE_UNDEFINE": 0,
        "NC_TF_TYPE_ROOT_OBJ": 1,
        "NC_TF_TYPE_SITE_OBJ": 2,
        "NC_TF_TYPE_CLUSTFOLDER_OBJ": 3,
        "NC_TF_TYPE_CLUSTER_OBJ": 4,
        "NC_TF_TYPE_HOST_OBJ": 5,
        "NC_TF_TYPE_VM_OBJ": 6,
    }


class ncTfFusionObjInfo(object):
    """
    Attributes:
     - urn
     - name
     - uuid
     - tfType
     - leaf
     - checkable

    """


    def __init__(self, urn=None, name=None, uuid=None, tfType=None, leaf=None, checkable=None,):
        self.urn = urn
        self.name = name
        self.uuid = uuid
        self.tfType = tfType
        self.leaf = leaf
        self.checkable = checkable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tfType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.leaf = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.checkable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionObjInfo')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 3)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.tfType is not None:
            oprot.writeFieldBegin('tfType', TType.I32, 4)
            oprot.writeI32(self.tfType)
            oprot.writeFieldEnd()
        if self.leaf is not None:
            oprot.writeFieldBegin('leaf', TType.BOOL, 5)
            oprot.writeBool(self.leaf)
            oprot.writeFieldEnd()
        if self.checkable is not None:
            oprot.writeFieldBegin('checkable', TType.BOOL, 6)
            oprot.writeBool(self.checkable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionQueryObjInfo(object):
    """
    Attributes:
     - urn
     - tfType

    """


    def __init__(self, urn=None, tfType=None,):
        self.urn = urn
        self.tfType = tfType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tfType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionQueryObjInfo')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.tfType is not None:
            oprot.writeFieldBegin('tfType', TType.I32, 2)
            oprot.writeI32(self.tfType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionObjInfoLSet(object):
    """
    Attributes:
     - objInfos

    """


    def __init__(self, objInfos=None,):
        self.objInfos = objInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.objInfos = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncTfFusionObjInfo()
                        _elem5.read(iprot)
                        self.objInfos.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionObjInfoLSet')
        if self.objInfos is not None:
            oprot.writeFieldBegin('objInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.objInfos))
            for iter6 in self.objInfos:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionDataStoreInfo(object):
    """
    Attributes:
     - urn
     - name
     - storageType
     - storageSize

    """


    def __init__(self, urn=None, name=None, storageType=None, storageSize=None,):
        self.urn = urn
        self.name = name
        self.storageType = storageType
        self.storageSize = storageSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.storageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionDataStoreInfo')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.storageType is not None:
            oprot.writeFieldBegin('storageType', TType.STRING, 3)
            oprot.writeString(self.storageType.encode('utf-8') if sys.version_info[0] == 2 else self.storageType)
            oprot.writeFieldEnd()
        if self.storageSize is not None:
            oprot.writeFieldBegin('storageSize', TType.I32, 4)
            oprot.writeI32(self.storageSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionDataStoreInfoSet(object):
    """
    Attributes:
     - datastores

    """


    def __init__(self, datastores=None,):
        self.datastores = datastores

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.datastores = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncTfFusionDataStoreInfo()
                        _elem12.read(iprot)
                        self.datastores.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionDataStoreInfoSet')
        if self.datastores is not None:
            oprot.writeFieldBegin('datastores', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.datastores))
            for iter13 in self.datastores:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionPortGroupInfo(object):
    """
    Attributes:
     - urn
     - name

    """


    def __init__(self, urn=None, name=None,):
        self.urn = urn
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionPortGroupInfo')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionDvswitchInfo(object):
    """
    Attributes:
     - urn
     - name
     - portGroups

    """


    def __init__(self, urn=None, name=None, portGroups=None,):
        self.urn = urn
        self.name = name
        self.portGroups = portGroups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.portGroups = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncTfFusionPortGroupInfo()
                        _elem19.read(iprot)
                        self.portGroups.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionDvswitchInfo')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.portGroups is not None:
            oprot.writeFieldBegin('portGroups', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.portGroups))
            for iter20 in self.portGroups:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionDvswitchInfoSet(object):
    """
    Attributes:
     - dvswitchInfos

    """


    def __init__(self, dvswitchInfos=None,):
        self.dvswitchInfos = dvswitchInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dvswitchInfos = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncTfFusionDvswitchInfo()
                        _elem26.read(iprot)
                        self.dvswitchInfos.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionDvswitchInfoSet')
        if self.dvswitchInfos is not None:
            oprot.writeFieldBegin('dvswitchInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.dvswitchInfos))
            for iter27 in self.dvswitchInfos:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionPortGroupInfoSet(object):
    """
    Attributes:
     - portGroups

    """


    def __init__(self, portGroups=None,):
        self.portGroups = portGroups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.portGroups = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncTfFusionPortGroupInfo()
                        _elem33.read(iprot)
                        self.portGroups.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionPortGroupInfoSet')
        if self.portGroups is not None:
            oprot.writeFieldBegin('portGroups', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.portGroups))
            for iter34 in self.portGroups:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionLoginInfo(object):
    """
    Attributes:
     - svrIp
     - port
     - userName
     - password
     - customer
     - verification

    """


    def __init__(self, svrIp=None, port=None, userName=None, password=None, customer=None, verification=None,):
        self.svrIp = svrIp
        self.port = port
        self.userName = userName
        self.password = password
        self.customer = customer
        self.verification = verification

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.svrIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.verification = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionLoginInfo')
        if self.svrIp is not None:
            oprot.writeFieldBegin('svrIp', TType.STRING, 1)
            oprot.writeString(self.svrIp.encode('utf-8') if sys.version_info[0] == 2 else self.svrIp)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 3)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 5)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.verification is not None:
            oprot.writeFieldBegin('verification', TType.STRING, 6)
            oprot.writeString(self.verification.encode('utf-8') if sys.version_info[0] == 2 else self.verification)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionObjectRequest(object):
    """
    Attributes:
     - loginInfo
     - objInfo
     - serverId
     - vplatformId

    """


    def __init__(self, loginInfo=None, objInfo=None, serverId=None, vplatformId=None,):
        self.loginInfo = loginInfo
        self.objInfo = objInfo
        self.serverId = serverId
        self.vplatformId = vplatformId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncTfFusionLoginInfo()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objInfo = ncTfFusionQueryObjInfo()
                    self.objInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serverId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionObjectRequest')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.objInfo is not None:
            oprot.writeFieldBegin('objInfo', TType.STRUCT, 2)
            self.objInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.serverId is not None:
            oprot.writeFieldBegin('serverId', TType.STRING, 3)
            oprot.writeString(self.serverId.encode('utf-8') if sys.version_info[0] == 2 else self.serverId)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 4)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionDiskInfo(object):
    """
    Attributes:
     - sequenceNum
     - quantityGB
     - volumeUrn
     - storageType
     - diskName
     - datastoreName
     - datastoreUrn

    """


    def __init__(self, sequenceNum=None, quantityGB=None, volumeUrn=None, storageType=None, diskName=None, datastoreName=None, datastoreUrn=None,):
        self.sequenceNum = sequenceNum
        self.quantityGB = quantityGB
        self.volumeUrn = volumeUrn
        self.storageType = storageType
        self.diskName = diskName
        self.datastoreName = datastoreName
        self.datastoreUrn = datastoreUrn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sequenceNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.quantityGB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volumeUrn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.storageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.diskName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.datastoreName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.datastoreUrn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionDiskInfo')
        if self.sequenceNum is not None:
            oprot.writeFieldBegin('sequenceNum', TType.I32, 1)
            oprot.writeI32(self.sequenceNum)
            oprot.writeFieldEnd()
        if self.quantityGB is not None:
            oprot.writeFieldBegin('quantityGB', TType.I32, 2)
            oprot.writeI32(self.quantityGB)
            oprot.writeFieldEnd()
        if self.volumeUrn is not None:
            oprot.writeFieldBegin('volumeUrn', TType.STRING, 3)
            oprot.writeString(self.volumeUrn.encode('utf-8') if sys.version_info[0] == 2 else self.volumeUrn)
            oprot.writeFieldEnd()
        if self.storageType is not None:
            oprot.writeFieldBegin('storageType', TType.STRING, 4)
            oprot.writeString(self.storageType.encode('utf-8') if sys.version_info[0] == 2 else self.storageType)
            oprot.writeFieldEnd()
        if self.diskName is not None:
            oprot.writeFieldBegin('diskName', TType.STRING, 5)
            oprot.writeString(self.diskName.encode('utf-8') if sys.version_info[0] == 2 else self.diskName)
            oprot.writeFieldEnd()
        if self.datastoreName is not None:
            oprot.writeFieldBegin('datastoreName', TType.STRING, 6)
            oprot.writeString(self.datastoreName.encode('utf-8') if sys.version_info[0] == 2 else self.datastoreName)
            oprot.writeFieldEnd()
        if self.datastoreUrn is not None:
            oprot.writeFieldBegin('datastoreUrn', TType.STRING, 7)
            oprot.writeString(self.datastoreUrn.encode('utf-8') if sys.version_info[0] == 2 else self.datastoreUrn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionNicInfo(object):
    """
    Attributes:
     - name
     - urn
     - portGroupUrn
     - portGroupName
     - dvSwitchName
     - dvSwitchUrn

    """


    def __init__(self, name=None, urn=None, portGroupUrn=None, portGroupName=None, dvSwitchName=None, dvSwitchUrn=None,):
        self.name = name
        self.urn = urn
        self.portGroupUrn = portGroupUrn
        self.portGroupName = portGroupName
        self.dvSwitchName = dvSwitchName
        self.dvSwitchUrn = dvSwitchUrn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.portGroupUrn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.portGroupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dvSwitchName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dvSwitchUrn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionNicInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 2)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.portGroupUrn is not None:
            oprot.writeFieldBegin('portGroupUrn', TType.STRING, 3)
            oprot.writeString(self.portGroupUrn.encode('utf-8') if sys.version_info[0] == 2 else self.portGroupUrn)
            oprot.writeFieldEnd()
        if self.portGroupName is not None:
            oprot.writeFieldBegin('portGroupName', TType.STRING, 4)
            oprot.writeString(self.portGroupName.encode('utf-8') if sys.version_info[0] == 2 else self.portGroupName)
            oprot.writeFieldEnd()
        if self.dvSwitchName is not None:
            oprot.writeFieldBegin('dvSwitchName', TType.STRING, 5)
            oprot.writeString(self.dvSwitchName.encode('utf-8') if sys.version_info[0] == 2 else self.dvSwitchName)
            oprot.writeFieldEnd()
        if self.dvSwitchUrn is not None:
            oprot.writeFieldBegin('dvSwitchUrn', TType.STRING, 6)
            oprot.writeString(self.dvSwitchUrn.encode('utf-8') if sys.version_info[0] == 2 else self.dvSwitchUrn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfFusionVmDetails(object):
    """
    Attributes:
     - urn
     - vmName
     - location
     - locationName
     - nicsInfo
     - disksInfo

    """


    def __init__(self, urn=None, vmName=None, location=None, locationName=None, nicsInfo=None, disksInfo=None,):
        self.urn = urn
        self.vmName = vmName
        self.location = location
        self.locationName = locationName
        self.nicsInfo = nicsInfo
        self.disksInfo = disksInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vmName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.locationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nicsInfo = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = ncTfFusionNicInfo()
                        _elem40.read(iprot)
                        self.nicsInfo.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.disksInfo = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = ncTfFusionDiskInfo()
                        _elem46.read(iprot)
                        self.disksInfo.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfFusionVmDetails')
        if self.urn is not None:
            oprot.writeFieldBegin('urn', TType.STRING, 1)
            oprot.writeString(self.urn.encode('utf-8') if sys.version_info[0] == 2 else self.urn)
            oprot.writeFieldEnd()
        if self.vmName is not None:
            oprot.writeFieldBegin('vmName', TType.STRING, 2)
            oprot.writeString(self.vmName.encode('utf-8') if sys.version_info[0] == 2 else self.vmName)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 3)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.locationName is not None:
            oprot.writeFieldBegin('locationName', TType.STRING, 4)
            oprot.writeString(self.locationName.encode('utf-8') if sys.version_info[0] == 2 else self.locationName)
            oprot.writeFieldEnd()
        if self.nicsInfo is not None:
            oprot.writeFieldBegin('nicsInfo', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nicsInfo))
            for iter47 in self.nicsInfo:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.disksInfo is not None:
            oprot.writeFieldBegin('disksInfo', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.disksInfo))
            for iter48 in self.disksInfo:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTfFusionObjInfo)
ncTfFusionObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'uuid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'tfType', None, None, ),  # 4
    (5, TType.BOOL, 'leaf', None, None, ),  # 5
    (6, TType.BOOL, 'checkable', None, None, ),  # 6
)
all_structs.append(ncTfFusionQueryObjInfo)
ncTfFusionQueryObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.I32, 'tfType', None, None, ),  # 2
)
all_structs.append(ncTfFusionObjInfoLSet)
ncTfFusionObjInfoLSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'objInfos', (TType.STRUCT, [ncTfFusionObjInfo, None], False), None, ),  # 1
)
all_structs.append(ncTfFusionDataStoreInfo)
ncTfFusionDataStoreInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'storageType', 'UTF8', None, ),  # 3
    (4, TType.I32, 'storageSize', None, None, ),  # 4
)
all_structs.append(ncTfFusionDataStoreInfoSet)
ncTfFusionDataStoreInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'datastores', (TType.STRUCT, [ncTfFusionDataStoreInfo, None], False), None, ),  # 1
)
all_structs.append(ncTfFusionPortGroupInfo)
ncTfFusionPortGroupInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTfFusionDvswitchInfo)
ncTfFusionDvswitchInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'portGroups', (TType.STRUCT, [ncTfFusionPortGroupInfo, None], False), None, ),  # 3
)
all_structs.append(ncTfFusionDvswitchInfoSet)
ncTfFusionDvswitchInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dvswitchInfos', (TType.STRUCT, [ncTfFusionDvswitchInfo, None], False), None, ),  # 1
)
all_structs.append(ncTfFusionPortGroupInfoSet)
ncTfFusionPortGroupInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'portGroups', (TType.STRUCT, [ncTfFusionPortGroupInfo, None], False), None, ),  # 1
)
all_structs.append(ncTfFusionLoginInfo)
ncTfFusionLoginInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'svrIp', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.STRING, 'userName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'customer', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'verification', 'UTF8', None, ),  # 6
)
all_structs.append(ncTfFusionObjectRequest)
ncTfFusionObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncTfFusionLoginInfo, None], None, ),  # 1
    (2, TType.STRUCT, 'objInfo', [ncTfFusionQueryObjInfo, None], None, ),  # 2
    (3, TType.STRING, 'serverId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 4
)
all_structs.append(ncTfFusionDiskInfo)
ncTfFusionDiskInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sequenceNum', None, None, ),  # 1
    (2, TType.I32, 'quantityGB', None, None, ),  # 2
    (3, TType.STRING, 'volumeUrn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'storageType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'diskName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'datastoreName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'datastoreUrn', 'UTF8', None, ),  # 7
)
all_structs.append(ncTfFusionNicInfo)
ncTfFusionNicInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'urn', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'portGroupUrn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'portGroupName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dvSwitchName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dvSwitchUrn', 'UTF8', None, ),  # 6
)
all_structs.append(ncTfFusionVmDetails)
ncTfFusionVmDetails.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'urn', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vmName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'location', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'locationName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'nicsInfo', (TType.STRUCT, [ncTfFusionNicInfo, None], False), None, ),  # 5
    (6, TType.LIST, 'disksInfo', (TType.STRUCT, [ncTfFusionDiskInfo, None], False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
