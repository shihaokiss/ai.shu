#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncArchiveMgmSvc import ncArchiveMgmSvc
from ncArchiveMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void add_or_update_strategy( schedule_ids)')
  print('  void remove_strategy( schedule_ids)')
  print('  string submit_task(string task_id, i32 device_type, string dest_client, bool is_auto_task)')
  print('   export_history(string history_id, string doc_format)')
  print('   export_strategy( id_list, string user_id)')
  print('   get_cloud_archive_jobs()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncArchiveMgmSvc.Client(protocol)
transport.open()

if cmd == 'add_or_update_strategy':
  if len(args) != 1:
    print('add_or_update_strategy requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_or_update_strategy(eval(args[0]),))

elif cmd == 'remove_strategy':
  if len(args) != 1:
    print('remove_strategy requires 1 args')
    sys.exit(1)
  pp.pprint(client.remove_strategy(eval(args[0]),))

elif cmd == 'submit_task':
  if len(args) != 4:
    print('submit_task requires 4 args')
    sys.exit(1)
  pp.pprint(client.submit_task(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'export_history':
  if len(args) != 2:
    print('export_history requires 2 args')
    sys.exit(1)
  pp.pprint(client.export_history(args[0],args[1],))

elif cmd == 'export_strategy':
  if len(args) != 2:
    print('export_strategy requires 2 args')
    sys.exit(1)
  pp.pprint(client.export_strategy(eval(args[0]),args[1],))

elif cmd == 'get_cloud_archive_jobs':
  if len(args) != 0:
    print('get_cloud_archive_jobs requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_cloud_archive_jobs())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
