#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCdmStoreMgmCommon.ttypes
import ncStoreCommonProto.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncDedupPoolSpaceInfo(object):
  """
  DedupPool容量信息

  Attributes:
   - usedSize
   - freeSize
   - capacity
   - warnThreshold
   - safeThreshold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'usedSize', None, None, ), # 1
    (2, TType.I64, 'freeSize', None, None, ), # 2
    (3, TType.I64, 'capacity', None, None, ), # 3
    (4, TType.I64, 'warnThreshold', None, None, ), # 4
    (5, TType.I64, 'safeThreshold', None, None, ), # 5
  )

  def __init__(self, usedSize=None, freeSize=None, capacity=None, warnThreshold=None, safeThreshold=None,):
    self.usedSize = usedSize
    self.freeSize = freeSize
    self.capacity = capacity
    self.warnThreshold = warnThreshold
    self.safeThreshold = safeThreshold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.usedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.freeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.capacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.warnThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.safeThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDedupPoolSpaceInfo')
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.I64, 1)
      oprot.writeI64(self.usedSize)
      oprot.writeFieldEnd()
    if self.freeSize is not None:
      oprot.writeFieldBegin('freeSize', TType.I64, 2)
      oprot.writeI64(self.freeSize)
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 3)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    if self.warnThreshold is not None:
      oprot.writeFieldBegin('warnThreshold', TType.I64, 4)
      oprot.writeI64(self.warnThreshold)
      oprot.writeFieldEnd()
    if self.safeThreshold is not None:
      oprot.writeFieldBegin('safeThreshold', TType.I64, 5)
      oprot.writeI64(self.safeThreshold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.usedSize)
    value = (value * 31) ^ hash(self.freeSize)
    value = (value * 31) ^ hash(self.capacity)
    value = (value * 31) ^ hash(self.warnThreshold)
    value = (value * 31) ^ hash(self.safeThreshold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDedupPoolInfo(object):
  """
  DedupPool信息

  Attributes:
   - uuid
   - friendlyName
   - spaceInfo
   - mdiskInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'friendlyName', None, None, ), # 2
    (3, TType.STRUCT, 'spaceInfo', (ncDedupPoolSpaceInfo, ncDedupPoolSpaceInfo.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'mdiskInfos', (ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList.thrift_spec), None, ), # 4
  )

  def __init__(self, uuid=None, friendlyName=None, spaceInfo=None, mdiskInfos=None,):
    self.uuid = uuid
    self.friendlyName = friendlyName
    self.spaceInfo = spaceInfo
    self.mdiskInfos = mdiskInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.friendlyName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.spaceInfo = ncDedupPoolSpaceInfo()
          self.spaceInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
          self.mdiskInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDedupPoolInfo')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.friendlyName is not None:
      oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
      oprot.writeString(self.friendlyName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.spaceInfo is not None:
      oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 3)
      self.spaceInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.mdiskInfos is not None:
      oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 4)
      self.mdiskInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.friendlyName)
    value = (value * 31) ^ hash(self.spaceInfo)
    value = (value * 31) ^ hash(self.mdiskInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDedupPoolInfoList(object):
  """
  DedupPool列表

  Attributes:
   - dedupPoolInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dedupPoolInfoList', (TType.STRUCT,(ncDedupPoolInfo, ncDedupPoolInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, dedupPoolInfoList=None,):
    self.dedupPoolInfoList = dedupPoolInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.dedupPoolInfoList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncDedupPoolInfo()
            _elem5.read(iprot)
            self.dedupPoolInfoList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDedupPoolInfoList')
    if self.dedupPoolInfoList is not None:
      oprot.writeFieldBegin('dedupPoolInfoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.dedupPoolInfoList))
      for iter6 in self.dedupPoolInfoList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dedupPoolInfoList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
