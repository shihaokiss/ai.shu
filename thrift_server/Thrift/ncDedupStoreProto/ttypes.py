# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCdmStoreMgmCommon.ttypes
import ncStoreCommonProto.ttypes

from thrift.transport import TTransport
all_structs = []


class ncDedupPoolSpaceInfo(object):
    """
    DedupPool容量信息

    Attributes:
     - usedSize
     - freeSize
     - capacity
     - warnThreshold
     - safeThreshold

    """


    def __init__(self, usedSize=None, freeSize=None, capacity=None, warnThreshold=None, safeThreshold=None,):
        self.usedSize = usedSize
        self.freeSize = freeSize
        self.capacity = capacity
        self.warnThreshold = warnThreshold
        self.safeThreshold = safeThreshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.warnThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.safeThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDedupPoolSpaceInfo')
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 1)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 2)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 3)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        if self.warnThreshold is not None:
            oprot.writeFieldBegin('warnThreshold', TType.I64, 4)
            oprot.writeI64(self.warnThreshold)
            oprot.writeFieldEnd()
        if self.safeThreshold is not None:
            oprot.writeFieldBegin('safeThreshold', TType.I64, 5)
            oprot.writeI64(self.safeThreshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDedupPoolInfo(object):
    """
    DedupPool信息

    Attributes:
     - uuid
     - friendlyName
     - spaceInfo
     - mdiskInfos

    """


    def __init__(self, uuid=None, friendlyName=None, spaceInfo=None, mdiskInfos=None,):
        self.uuid = uuid
        self.friendlyName = friendlyName
        self.spaceInfo = spaceInfo
        self.mdiskInfos = mdiskInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.friendlyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.spaceInfo = ncDedupPoolSpaceInfo()
                    self.spaceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
                    self.mdiskInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDedupPoolInfo')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.friendlyName is not None:
            oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
            oprot.writeString(self.friendlyName.encode('utf-8') if sys.version_info[0] == 2 else self.friendlyName)
            oprot.writeFieldEnd()
        if self.spaceInfo is not None:
            oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 3)
            self.spaceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.mdiskInfos is not None:
            oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 4)
            self.mdiskInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDedupPoolInfoList(object):
    """
    DedupPool列表

    Attributes:
     - dedupPoolInfoList

    """


    def __init__(self, dedupPoolInfoList=None,):
        self.dedupPoolInfoList = dedupPoolInfoList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dedupPoolInfoList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncDedupPoolInfo()
                        _elem5.read(iprot)
                        self.dedupPoolInfoList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDedupPoolInfoList')
        if self.dedupPoolInfoList is not None:
            oprot.writeFieldBegin('dedupPoolInfoList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.dedupPoolInfoList))
            for iter6 in self.dedupPoolInfoList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncDedupPoolSpaceInfo)
ncDedupPoolSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'usedSize', None, None, ),  # 1
    (2, TType.I64, 'freeSize', None, None, ),  # 2
    (3, TType.I64, 'capacity', None, None, ),  # 3
    (4, TType.I64, 'warnThreshold', None, None, ),  # 4
    (5, TType.I64, 'safeThreshold', None, None, ),  # 5
)
all_structs.append(ncDedupPoolInfo)
ncDedupPoolInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'friendlyName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'spaceInfo', [ncDedupPoolSpaceInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'mdiskInfos', [ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, None], None, ),  # 4
)
all_structs.append(ncDedupPoolInfoList)
ncDedupPoolInfoList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dedupPoolInfoList', (TType.STRUCT, [ncDedupPoolInfo, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
