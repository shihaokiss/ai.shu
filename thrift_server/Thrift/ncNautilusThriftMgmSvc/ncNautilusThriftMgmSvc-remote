#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncNautilusThriftMgmSvc import ncNautilusThriftMgmSvc
from ncNautilusThriftMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void Microprobe()')
    print('  ncAddListenReply AddDataTransmissionIP(string ip)')
    print('  ncGetListenReply GetDataTransmissionIP()')
    print('  ncDelListenReply DelDataTransmissionIP(string ip)')
    print('  ncUpdateListenReply EditDataTransmissionIP(string oldip, string newip)')
    print('  ncAddListenReply AddStorageIP(string ip)')
    print('  ncGetListenReply GetStorageIP()')
    print('  ncDelListenReply DelStorageIP(string ip)')
    print('  ncUpdateListenReply EditStorageIP(string oldip, string newip)')
    print('  void AddTaskIndexVol(string path)')
    print('  i64 GetTaskIndexVolInfo()')
    print('  void DelTaskIndexVol(string path)')
    print('  i32 GetTaskTimepointCount(string uid, string cid)')
    print('  ncTaskInfoSet GetTaskInfo(ncTaskInfoRequest request)')
    print('  ncTimepointInfoSet GetTimepoint(ncTimepointRequest request)')
    print('  void WriteTaskMetadata(string uid, string cid, string metadata)')
    print('  void ClearTask(string uid, string cid)')
    print('  void RemoveTimepoint(string uid, string cid,  tps)')
    print('  ncNTCapacityInfoSet GetCapacityInfo()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncNautilusThriftMgmSvc.Client(protocol)
transport.open()

if cmd == 'Microprobe':
    if len(args) != 0:
        print('Microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.Microprobe())

elif cmd == 'AddDataTransmissionIP':
    if len(args) != 1:
        print('AddDataTransmissionIP requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddDataTransmissionIP(args[0],))

elif cmd == 'GetDataTransmissionIP':
    if len(args) != 0:
        print('GetDataTransmissionIP requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetDataTransmissionIP())

elif cmd == 'DelDataTransmissionIP':
    if len(args) != 1:
        print('DelDataTransmissionIP requires 1 args')
        sys.exit(1)
    pp.pprint(client.DelDataTransmissionIP(args[0],))

elif cmd == 'EditDataTransmissionIP':
    if len(args) != 2:
        print('EditDataTransmissionIP requires 2 args')
        sys.exit(1)
    pp.pprint(client.EditDataTransmissionIP(args[0], args[1],))

elif cmd == 'AddStorageIP':
    if len(args) != 1:
        print('AddStorageIP requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddStorageIP(args[0],))

elif cmd == 'GetStorageIP':
    if len(args) != 0:
        print('GetStorageIP requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetStorageIP())

elif cmd == 'DelStorageIP':
    if len(args) != 1:
        print('DelStorageIP requires 1 args')
        sys.exit(1)
    pp.pprint(client.DelStorageIP(args[0],))

elif cmd == 'EditStorageIP':
    if len(args) != 2:
        print('EditStorageIP requires 2 args')
        sys.exit(1)
    pp.pprint(client.EditStorageIP(args[0], args[1],))

elif cmd == 'AddTaskIndexVol':
    if len(args) != 1:
        print('AddTaskIndexVol requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddTaskIndexVol(args[0],))

elif cmd == 'GetTaskIndexVolInfo':
    if len(args) != 0:
        print('GetTaskIndexVolInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetTaskIndexVolInfo())

elif cmd == 'DelTaskIndexVol':
    if len(args) != 1:
        print('DelTaskIndexVol requires 1 args')
        sys.exit(1)
    pp.pprint(client.DelTaskIndexVol(args[0],))

elif cmd == 'GetTaskTimepointCount':
    if len(args) != 2:
        print('GetTaskTimepointCount requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetTaskTimepointCount(args[0], args[1],))

elif cmd == 'GetTaskInfo':
    if len(args) != 1:
        print('GetTaskInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTaskInfo(eval(args[0]),))

elif cmd == 'GetTimepoint':
    if len(args) != 1:
        print('GetTimepoint requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTimepoint(eval(args[0]),))

elif cmd == 'WriteTaskMetadata':
    if len(args) != 3:
        print('WriteTaskMetadata requires 3 args')
        sys.exit(1)
    pp.pprint(client.WriteTaskMetadata(args[0], args[1], args[2],))

elif cmd == 'ClearTask':
    if len(args) != 2:
        print('ClearTask requires 2 args')
        sys.exit(1)
    pp.pprint(client.ClearTask(args[0], args[1],))

elif cmd == 'RemoveTimepoint':
    if len(args) != 3:
        print('RemoveTimepoint requires 3 args')
        sys.exit(1)
    pp.pprint(client.RemoveTimepoint(args[0], args[1], eval(args[2]),))

elif cmd == 'GetCapacityInfo':
    if len(args) != 0:
        print('GetCapacityInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetCapacityInfo())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
