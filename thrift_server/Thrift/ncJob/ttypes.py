#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncEEFComm_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncJobStatus(object):
  NOT_RUNNING = 1
  RUNNING = 4
  STOPPED = 16
  SUCCEED = 32
  FAILED = 64
  STOPPING = 512

  _VALUES_TO_NAMES = {
    1: "NOT_RUNNING",
    4: "RUNNING",
    16: "STOPPED",
    32: "SUCCEED",
    64: "FAILED",
    512: "STOPPING",
  }

  _NAMES_TO_VALUES = {
    "NOT_RUNNING": 1,
    "RUNNING": 4,
    "STOPPED": 16,
    "SUCCEED": 32,
    "FAILED": 64,
    "STOPPING": 512,
  }


class ncTJob(object):
  """
  BS通用的对外返回的任务信息(如果需要对外返回一个任务, 返回这个即可)

  按理来说, 取名为 ncJobResponse 比较合适, 但这是历史原因了, 不深究.


  Attributes:
   - jobId
   - jobName
   - type
   - isBackup
   - isDeleted
   - status
   - destClientId
   - completedData
   - userId
   - clientId
   - createTime
   - updateTime
   - engineType
   - storageId
   - databaseRunUsername
   - lstartTime
   - nstartTime
   - nextBackupType
   - relatedId
   - platformId
   - auther
   - planId
   - backupMedia
   - anyshare_resource_id
   - cloudStorageName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'jobName', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.I32, 'isBackup', None, 1, ), # 4
    (5, TType.I32, 'isDeleted', None, 0, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'destClientId', None, None, ), # 7
    (8, TType.STRING, 'completedData', None, None, ), # 8
    (9, TType.STRING, 'userId', None, None, ), # 9
    (10, TType.STRING, 'clientId', None, None, ), # 10
    (11, TType.I64, 'createTime', None, None, ), # 11
    (12, TType.I64, 'updateTime', None, None, ), # 12
    (13, TType.I32, 'engineType', None, None, ), # 13
    (14, TType.STRING, 'storageId', None, None, ), # 14
    (15, TType.STRING, 'databaseRunUsername', None, None, ), # 15
    (16, TType.I64, 'lstartTime', None, None, ), # 16
    (17, TType.I64, 'nstartTime', None, None, ), # 17
    (18, TType.I32, 'nextBackupType', None, None, ), # 18
    (19, TType.STRING, 'relatedId', None, None, ), # 19
    (20, TType.STRING, 'platformId', None, None, ), # 20
    (21, TType.STRING, 'auther', None, None, ), # 21
    (22, TType.STRING, 'planId', None, None, ), # 22
    (23, TType.STRING, 'backupMedia', None, None, ), # 23
    (24, TType.STRING, 'anyshare_resource_id', None, None, ), # 24
    (25, TType.STRING, 'cloudStorageName', None, None, ), # 25
  )

  def __init__(self, jobId=None, jobName=None, type=None, isBackup=thrift_spec[4][4], isDeleted=thrift_spec[5][4], status=None, destClientId=None, completedData=None, userId=None, clientId=None, createTime=None, updateTime=None, engineType=None, storageId=None, databaseRunUsername=None, lstartTime=None, nstartTime=None, nextBackupType=None, relatedId=None, platformId=None, auther=None, planId=None, backupMedia=None, anyshare_resource_id=None, cloudStorageName=None,):
    self.jobId = jobId
    self.jobName = jobName
    self.type = type
    self.isBackup = isBackup
    self.isDeleted = isDeleted
    self.status = status
    self.destClientId = destClientId
    self.completedData = completedData
    self.userId = userId
    self.clientId = clientId
    self.createTime = createTime
    self.updateTime = updateTime
    self.engineType = engineType
    self.storageId = storageId
    self.databaseRunUsername = databaseRunUsername
    self.lstartTime = lstartTime
    self.nstartTime = nstartTime
    self.nextBackupType = nextBackupType
    self.relatedId = relatedId
    self.platformId = platformId
    self.auther = auther
    self.planId = planId
    self.backupMedia = backupMedia
    self.anyshare_resource_id = anyshare_resource_id
    self.cloudStorageName = cloudStorageName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.isBackup = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isDeleted = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.destClientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.completedData = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.storageId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.databaseRunUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.lstartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.nstartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.nextBackupType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.relatedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.platformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.auther = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.planId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.backupMedia = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.anyshare_resource_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.cloudStorageName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTJob')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 2)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isBackup is not None:
      oprot.writeFieldBegin('isBackup', TType.I32, 4)
      oprot.writeI32(self.isBackup)
      oprot.writeFieldEnd()
    if self.isDeleted is not None:
      oprot.writeFieldBegin('isDeleted', TType.I32, 5)
      oprot.writeI32(self.isDeleted)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.destClientId is not None:
      oprot.writeFieldBegin('destClientId', TType.STRING, 7)
      oprot.writeString(self.destClientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.completedData is not None:
      oprot.writeFieldBegin('completedData', TType.STRING, 8)
      oprot.writeString(self.completedData.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 9)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 10)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 11)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 12)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 13)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    if self.storageId is not None:
      oprot.writeFieldBegin('storageId', TType.STRING, 14)
      oprot.writeString(self.storageId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.databaseRunUsername is not None:
      oprot.writeFieldBegin('databaseRunUsername', TType.STRING, 15)
      oprot.writeString(self.databaseRunUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.lstartTime is not None:
      oprot.writeFieldBegin('lstartTime', TType.I64, 16)
      oprot.writeI64(self.lstartTime)
      oprot.writeFieldEnd()
    if self.nstartTime is not None:
      oprot.writeFieldBegin('nstartTime', TType.I64, 17)
      oprot.writeI64(self.nstartTime)
      oprot.writeFieldEnd()
    if self.nextBackupType is not None:
      oprot.writeFieldBegin('nextBackupType', TType.I32, 18)
      oprot.writeI32(self.nextBackupType)
      oprot.writeFieldEnd()
    if self.relatedId is not None:
      oprot.writeFieldBegin('relatedId', TType.STRING, 19)
      oprot.writeString(self.relatedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.platformId is not None:
      oprot.writeFieldBegin('platformId', TType.STRING, 20)
      oprot.writeString(self.platformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.auther is not None:
      oprot.writeFieldBegin('auther', TType.STRING, 21)
      oprot.writeString(self.auther.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.planId is not None:
      oprot.writeFieldBegin('planId', TType.STRING, 22)
      oprot.writeString(self.planId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.backupMedia is not None:
      oprot.writeFieldBegin('backupMedia', TType.STRING, 23)
      oprot.writeString(self.backupMedia.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.anyshare_resource_id is not None:
      oprot.writeFieldBegin('anyshare_resource_id', TType.STRING, 24)
      oprot.writeString(self.anyshare_resource_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cloudStorageName is not None:
      oprot.writeFieldBegin('cloudStorageName', TType.STRING, 25)
      oprot.writeString(self.cloudStorageName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    if self.jobName is None:
      raise TProtocol.TProtocolException(message='Required field jobName is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.isBackup is None:
      raise TProtocol.TProtocolException(message='Required field isBackup is unset!')
    if self.isDeleted is None:
      raise TProtocol.TProtocolException(message='Required field isDeleted is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.createTime is None:
      raise TProtocol.TProtocolException(message='Required field createTime is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    if self.engineType is None:
      raise TProtocol.TProtocolException(message='Required field engineType is unset!')
    if self.storageId is None:
      raise TProtocol.TProtocolException(message='Required field storageId is unset!')
    if self.databaseRunUsername is None:
      raise TProtocol.TProtocolException(message='Required field databaseRunUsername is unset!')
    if self.lstartTime is None:
      raise TProtocol.TProtocolException(message='Required field lstartTime is unset!')
    if self.nstartTime is None:
      raise TProtocol.TProtocolException(message='Required field nstartTime is unset!')
    if self.nextBackupType is None:
      raise TProtocol.TProtocolException(message='Required field nextBackupType is unset!')
    if self.relatedId is None:
      raise TProtocol.TProtocolException(message='Required field relatedId is unset!')
    if self.platformId is None:
      raise TProtocol.TProtocolException(message='Required field platformId is unset!')
    if self.auther is None:
      raise TProtocol.TProtocolException(message='Required field auther is unset!')
    if self.planId is None:
      raise TProtocol.TProtocolException(message='Required field planId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.isBackup)
    value = (value * 31) ^ hash(self.isDeleted)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.destClientId)
    value = (value * 31) ^ hash(self.completedData)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.storageId)
    value = (value * 31) ^ hash(self.databaseRunUsername)
    value = (value * 31) ^ hash(self.lstartTime)
    value = (value * 31) ^ hash(self.nstartTime)
    value = (value * 31) ^ hash(self.nextBackupType)
    value = (value * 31) ^ hash(self.relatedId)
    value = (value * 31) ^ hash(self.platformId)
    value = (value * 31) ^ hash(self.auther)
    value = (value * 31) ^ hash(self.planId)
    value = (value * 31) ^ hash(self.backupMedia)
    value = (value * 31) ^ hash(self.anyshare_resource_id)
    value = (value * 31) ^ hash(self.cloudStorageName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDBJobInstanceRequest(object):
  """
  Attributes:
   - client_id
   - instance_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'instance_name', None, None, ), # 2
  )

  def __init__(self, client_id=None, instance_name=None,):
    self.client_id = client_id
    self.instance_name = instance_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.instance_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDBJobInstanceRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instance_name is not None:
      oprot.writeFieldBegin('instance_name', TType.STRING, 2)
      oprot.writeString(self.instance_name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.instance_name is None:
      raise TProtocol.TProtocolException(message='Required field instance_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.instance_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDBJobInstance(object):
  """
  Attributes:
   - job_id
   - job_name
   - instance_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'job_id', None, None, ), # 1
    (2, TType.STRING, 'job_name', None, None, ), # 2
    (3, TType.STRING, 'instance_name', None, None, ), # 3
  )

  def __init__(self, job_id=None, job_name=None, instance_name=None,):
    self.job_id = job_id
    self.job_name = job_name
    self.instance_name = instance_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.job_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.job_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instance_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDBJobInstance')
    if self.job_id is not None:
      oprot.writeFieldBegin('job_id', TType.STRING, 1)
      oprot.writeString(self.job_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.job_name is not None:
      oprot.writeFieldBegin('job_name', TType.STRING, 2)
      oprot.writeString(self.job_name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instance_name is not None:
      oprot.writeFieldBegin('instance_name', TType.STRING, 3)
      oprot.writeString(self.instance_name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.job_id is None:
      raise TProtocol.TProtocolException(message='Required field job_id is unset!')
    if self.job_name is None:
      raise TProtocol.TProtocolException(message='Required field job_name is unset!')
    if self.instance_name is None:
      raise TProtocol.TProtocolException(message='Required field instance_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.job_id)
    value = (value * 31) ^ hash(self.job_name)
    value = (value * 31) ^ hash(self.instance_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncASDatasourceMappingRequest(object):
  """
  见表ASJobDatasourceMapping

  Attributes:
   - client_id
   - datasource
   - exclude_job_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'datasource', None, None, ), # 2
    (3, TType.LIST, 'exclude_job_ids', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, client_id=None, datasource=None, exclude_job_ids=None,):
    self.client_id = client_id
    self.datasource = datasource
    self.exclude_job_ids = exclude_job_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.datasource = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.exclude_job_ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.exclude_job_ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncASDatasourceMappingRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.datasource is not None:
      oprot.writeFieldBegin('datasource', TType.STRING, 2)
      oprot.writeString(self.datasource.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.exclude_job_ids is not None:
      oprot.writeFieldBegin('exclude_job_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.exclude_job_ids))
      for iter6 in self.exclude_job_ids:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.datasource is None:
      raise TProtocol.TProtocolException(message='Required field datasource is unset!')
    if self.exclude_job_ids is None:
      raise TProtocol.TProtocolException(message='Required field exclude_job_ids is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.datasource)
    value = (value * 31) ^ hash(self.exclude_job_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncASDatasourceMappingResponse(object):
  """
  见表ASJobDatasourceMapping

  Attributes:
   - job_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'job_name', None, None, ), # 1
  )

  def __init__(self, job_name=None,):
    self.job_name = job_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.job_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncASDatasourceMappingResponse')
    if self.job_name is not None:
      oprot.writeFieldBegin('job_name', TType.STRING, 1)
      oprot.writeString(self.job_name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.job_name is None:
      raise TProtocol.TProtocolException(message='Required field job_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.job_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncRelatedJob(object):
  """
  Attributes:
   - jobId
   - jobName
   - type
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'jobName', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.STRING, 'userId', None, None, ), # 4
  )

  def __init__(self, jobId=None, jobName=None, type=None, userId=None,):
    self.jobId = jobId
    self.jobName = jobName
    self.type = type
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncRelatedJob')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 2)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 4)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.userId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncJobFilterRequest(object):
  """
  向BS获取任务(根据一组特定的筛选参数)

  Attributes:
   - client_id
   - type
   - user_id
   - job_id
   - src_client_ids
   - v_platform_ids
   - storage_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.STRING, 'user_id', None, None, ), # 3
    (4, TType.STRING, 'job_id', None, None, ), # 4
    (5, TType.LIST, 'src_client_ids', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'v_platform_ids', (TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'storage_id', None, None, ), # 7
  )

  def __init__(self, client_id=None, type=None, user_id=None, job_id=None, src_client_ids=None, v_platform_ids=None, storage_id=None,):
    self.client_id = client_id
    self.type = type
    self.user_id = user_id
    self.job_id = job_id
    self.src_client_ids = src_client_ids
    self.v_platform_ids = v_platform_ids
    self.storage_id = storage_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.job_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.src_client_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString().decode('utf-8')
            self.src_client_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.v_platform_ids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString().decode('utf-8')
            self.v_platform_ids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.storage_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncJobFilterRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.STRING, 3)
      oprot.writeString(self.user_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.job_id is not None:
      oprot.writeFieldBegin('job_id', TType.STRING, 4)
      oprot.writeString(self.job_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.src_client_ids is not None:
      oprot.writeFieldBegin('src_client_ids', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.src_client_ids))
      for iter19 in self.src_client_ids:
        oprot.writeString(iter19.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.v_platform_ids is not None:
      oprot.writeFieldBegin('v_platform_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.v_platform_ids))
      for iter20 in self.v_platform_ids:
        oprot.writeString(iter20.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.storage_id is not None:
      oprot.writeFieldBegin('storage_id', TType.STRING, 7)
      oprot.writeString(self.storage_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.job_id)
    value = (value * 31) ^ hash(self.src_client_ids)
    value = (value * 31) ^ hash(self.v_platform_ids)
    value = (value * 31) ^ hash(self.storage_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUpdateJobRequest(object):
  """
  Attributes:
   - plan_id
   - lstart_time
   - nstart_time
   - next_backup_type
   - client_id
   - src_client_ip
   - dest_client_ip
   - virtual_platform_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plan_id', None, None, ), # 1
    (2, TType.I64, 'lstart_time', None, None, ), # 2
    (3, TType.I64, 'nstart_time', None, None, ), # 3
    (4, TType.I32, 'next_backup_type', None, None, ), # 4
    (5, TType.STRING, 'client_id', None, None, ), # 5
    (6, TType.STRING, 'src_client_ip', None, None, ), # 6
    (7, TType.STRING, 'dest_client_ip', None, None, ), # 7
    (8, TType.STRING, 'virtual_platform_ip', None, None, ), # 8
  )

  def __init__(self, plan_id=None, lstart_time=None, nstart_time=None, next_backup_type=None, client_id=None, src_client_ip=None, dest_client_ip=None, virtual_platform_ip=None,):
    self.plan_id = plan_id
    self.lstart_time = lstart_time
    self.nstart_time = nstart_time
    self.next_backup_type = next_backup_type
    self.client_id = client_id
    self.src_client_ip = src_client_ip
    self.dest_client_ip = dest_client_ip
    self.virtual_platform_ip = virtual_platform_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.plan_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lstart_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.nstart_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.next_backup_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.src_client_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.dest_client_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.virtual_platform_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUpdateJobRequest')
    if self.plan_id is not None:
      oprot.writeFieldBegin('plan_id', TType.STRING, 1)
      oprot.writeString(self.plan_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.lstart_time is not None:
      oprot.writeFieldBegin('lstart_time', TType.I64, 2)
      oprot.writeI64(self.lstart_time)
      oprot.writeFieldEnd()
    if self.nstart_time is not None:
      oprot.writeFieldBegin('nstart_time', TType.I64, 3)
      oprot.writeI64(self.nstart_time)
      oprot.writeFieldEnd()
    if self.next_backup_type is not None:
      oprot.writeFieldBegin('next_backup_type', TType.I32, 4)
      oprot.writeI32(self.next_backup_type)
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 5)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.src_client_ip is not None:
      oprot.writeFieldBegin('src_client_ip', TType.STRING, 6)
      oprot.writeString(self.src_client_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dest_client_ip is not None:
      oprot.writeFieldBegin('dest_client_ip', TType.STRING, 7)
      oprot.writeString(self.dest_client_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.virtual_platform_ip is not None:
      oprot.writeFieldBegin('virtual_platform_ip', TType.STRING, 8)
      oprot.writeString(self.virtual_platform_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.plan_id)
    value = (value * 31) ^ hash(self.lstart_time)
    value = (value * 31) ^ hash(self.nstart_time)
    value = (value * 31) ^ hash(self.next_backup_type)
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.src_client_ip)
    value = (value * 31) ^ hash(self.dest_client_ip)
    value = (value * 31) ^ hash(self.virtual_platform_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFilterUpdateRequest(object):
  """
  Attributes:
   - filter_obj
   - update_obj
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter_obj', (ncJobFilterRequest, ncJobFilterRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'update_obj', (ncUpdateJobRequest, ncUpdateJobRequest.thrift_spec), None, ), # 2
  )

  def __init__(self, filter_obj=None, update_obj=None,):
    self.filter_obj = filter_obj
    self.update_obj = update_obj

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter_obj = ncJobFilterRequest()
          self.filter_obj.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.update_obj = ncUpdateJobRequest()
          self.update_obj.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFilterUpdateRequest')
    if self.filter_obj is not None:
      oprot.writeFieldBegin('filter_obj', TType.STRUCT, 1)
      self.filter_obj.write(oprot)
      oprot.writeFieldEnd()
    if self.update_obj is not None:
      oprot.writeFieldBegin('update_obj', TType.STRUCT, 2)
      self.update_obj.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.filter_obj is None:
      raise TProtocol.TProtocolException(message='Required field filter_obj is unset!')
    if self.update_obj is None:
      raise TProtocol.TProtocolException(message='Required field update_obj is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_obj)
    value = (value * 31) ^ hash(self.update_obj)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUpdateDatasourceRequest(object):
  """
  Attributes:
   - client_id
   - job_type
   - is_deleted
   - is_backup
   - new_client_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'job_type', None, None, ), # 2
    (3, TType.BOOL, 'is_deleted', None, False, ), # 3
    (4, TType.BOOL, 'is_backup', None, True, ), # 4
    (5, TType.STRING, 'new_client_name', None, None, ), # 5
  )

  def __init__(self, client_id=None, job_type=None, is_deleted=thrift_spec[3][4], is_backup=thrift_spec[4][4], new_client_name=None,):
    self.client_id = client_id
    self.job_type = job_type
    self.is_deleted = is_deleted
    self.is_backup = is_backup
    self.new_client_name = new_client_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.job_type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_deleted = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.is_backup = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.new_client_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUpdateDatasourceRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.job_type is not None:
      oprot.writeFieldBegin('job_type', TType.STRING, 2)
      oprot.writeString(self.job_type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.is_deleted is not None:
      oprot.writeFieldBegin('is_deleted', TType.BOOL, 3)
      oprot.writeBool(self.is_deleted)
      oprot.writeFieldEnd()
    if self.is_backup is not None:
      oprot.writeFieldBegin('is_backup', TType.BOOL, 4)
      oprot.writeBool(self.is_backup)
      oprot.writeFieldEnd()
    if self.new_client_name is not None:
      oprot.writeFieldBegin('new_client_name', TType.STRING, 5)
      oprot.writeString(self.new_client_name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.job_type is None:
      raise TProtocol.TProtocolException(message='Required field job_type is unset!')
    if self.is_deleted is None:
      raise TProtocol.TProtocolException(message='Required field is_deleted is unset!')
    if self.is_backup is None:
      raise TProtocol.TProtocolException(message='Required field is_backup is unset!')
    if self.new_client_name is None:
      raise TProtocol.TProtocolException(message='Required field new_client_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.job_type)
    value = (value * 31) ^ hash(self.is_deleted)
    value = (value * 31) ^ hash(self.is_backup)
    value = (value * 31) ^ hash(self.new_client_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBackupSvcDataSourceRequest(object):
  """
  Attributes:
   - client_id
   - is_backup
   - pure_full_paths
   - job_type
   - is_deleted
   - use_contains
   - use_startswith
   - database_run_username
   - fuzzy_full_paths
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.BOOL, 'is_backup', None, True, ), # 2
    (3, TType.LIST, 'pure_full_paths', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'job_type', None, None, ), # 4
    (5, TType.BOOL, 'is_deleted', None, False, ), # 5
    (6, TType.BOOL, 'use_contains', None, False, ), # 6
    (7, TType.BOOL, 'use_startswith', None, False, ), # 7
    (8, TType.STRING, 'database_run_username', None, None, ), # 8
    (9, TType.LIST, 'fuzzy_full_paths', (TType.STRING,None), None, ), # 9
  )

  def __init__(self, client_id=None, is_backup=thrift_spec[2][4], pure_full_paths=None, job_type=None, is_deleted=thrift_spec[5][4], use_contains=thrift_spec[6][4], use_startswith=thrift_spec[7][4], database_run_username=None, fuzzy_full_paths=None,):
    self.client_id = client_id
    self.is_backup = is_backup
    self.pure_full_paths = pure_full_paths
    self.job_type = job_type
    self.is_deleted = is_deleted
    self.use_contains = use_contains
    self.use_startswith = use_startswith
    self.database_run_username = database_run_username
    self.fuzzy_full_paths = fuzzy_full_paths

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_backup = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.pure_full_paths = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString().decode('utf-8')
            self.pure_full_paths.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.job_type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_deleted = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.use_contains = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.use_startswith = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.database_run_username = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.fuzzy_full_paths = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString().decode('utf-8')
            self.fuzzy_full_paths.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBackupSvcDataSourceRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.is_backup is not None:
      oprot.writeFieldBegin('is_backup', TType.BOOL, 2)
      oprot.writeBool(self.is_backup)
      oprot.writeFieldEnd()
    if self.pure_full_paths is not None:
      oprot.writeFieldBegin('pure_full_paths', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.pure_full_paths))
      for iter33 in self.pure_full_paths:
        oprot.writeString(iter33.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.job_type is not None:
      oprot.writeFieldBegin('job_type', TType.STRING, 4)
      oprot.writeString(self.job_type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.is_deleted is not None:
      oprot.writeFieldBegin('is_deleted', TType.BOOL, 5)
      oprot.writeBool(self.is_deleted)
      oprot.writeFieldEnd()
    if self.use_contains is not None:
      oprot.writeFieldBegin('use_contains', TType.BOOL, 6)
      oprot.writeBool(self.use_contains)
      oprot.writeFieldEnd()
    if self.use_startswith is not None:
      oprot.writeFieldBegin('use_startswith', TType.BOOL, 7)
      oprot.writeBool(self.use_startswith)
      oprot.writeFieldEnd()
    if self.database_run_username is not None:
      oprot.writeFieldBegin('database_run_username', TType.STRING, 8)
      oprot.writeString(self.database_run_username.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fuzzy_full_paths is not None:
      oprot.writeFieldBegin('fuzzy_full_paths', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.fuzzy_full_paths))
      for iter34 in self.fuzzy_full_paths:
        oprot.writeString(iter34.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.is_backup is None:
      raise TProtocol.TProtocolException(message='Required field is_backup is unset!')
    if self.pure_full_paths is None:
      raise TProtocol.TProtocolException(message='Required field pure_full_paths is unset!')
    if self.job_type is None:
      raise TProtocol.TProtocolException(message='Required field job_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.is_backup)
    value = (value * 31) ^ hash(self.pure_full_paths)
    value = (value * 31) ^ hash(self.job_type)
    value = (value * 31) ^ hash(self.is_deleted)
    value = (value * 31) ^ hash(self.use_contains)
    value = (value * 31) ^ hash(self.use_startswith)
    value = (value * 31) ^ hash(self.database_run_username)
    value = (value * 31) ^ hash(self.fuzzy_full_paths)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncKmsKeyMaterial(object):
  """
  Attributes:
   - length
   - KeyMaterial
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'length', None, None, ), # 1
    (2, TType.STRING, 'KeyMaterial', None, None, ), # 2
  )

  def __init__(self, length=None, KeyMaterial=None,):
    self.length = length
    self.KeyMaterial = KeyMaterial

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.length = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.KeyMaterial = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncKmsKeyMaterial')
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I32, 1)
      oprot.writeI32(self.length)
      oprot.writeFieldEnd()
    if self.KeyMaterial is not None:
      oprot.writeFieldBegin('KeyMaterial', TType.STRING, 2)
      oprot.writeString(self.KeyMaterial.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.length)
    value = (value * 31) ^ hash(self.KeyMaterial)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBackupJob(object):
  """
  Attributes:
   - jobVplatformId
   - jobPlanId
   - jobDesc
   - hasSches
   - jobSrcClient
   - jobId
   - jobDestClientId
   - jobType
   - jobUsername
   - jobDatabaseRunUsername
   - jobStatus
   - jobNextStartTime
   - jobCreatedTime
   - jobUserId
   - jobEngineType
   - jobNextBackupType
   - jobStorageType
   - jobDestClient
   - jobLastStartTime
   - jobName
   - jobClientId
   - jobUpdateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobVplatformId', None, None, ), # 1
    (2, TType.STRING, 'jobPlanId', None, None, ), # 2
    (3, TType.STRING, 'jobDesc', None, None, ), # 3
    (4, TType.BOOL, 'hasSches', None, None, ), # 4
    (5, TType.STRING, 'jobSrcClient', None, None, ), # 5
    (6, TType.STRING, 'jobId', None, None, ), # 6
    (7, TType.STRING, 'jobDestClientId', None, None, ), # 7
    (8, TType.STRING, 'jobType', None, None, ), # 8
    (9, TType.STRING, 'jobUsername', None, None, ), # 9
    (10, TType.STRING, 'jobDatabaseRunUsername', None, None, ), # 10
    (11, TType.I32, 'jobStatus', None, None, ), # 11
    (12, TType.I64, 'jobNextStartTime', None, None, ), # 12
    (13, TType.I64, 'jobCreatedTime', None, None, ), # 13
    (14, TType.STRING, 'jobUserId', None, None, ), # 14
    (15, TType.I32, 'jobEngineType', None, None, ), # 15
    (16, TType.I32, 'jobNextBackupType', None, None, ), # 16
    (17, TType.I32, 'jobStorageType', None, None, ), # 17
    (18, TType.STRING, 'jobDestClient', None, None, ), # 18
    (19, TType.I64, 'jobLastStartTime', None, None, ), # 19
    (20, TType.STRING, 'jobName', None, None, ), # 20
    (21, TType.STRING, 'jobClientId', None, None, ), # 21
    (22, TType.I64, 'jobUpdateTime', None, None, ), # 22
  )

  def __init__(self, jobVplatformId=None, jobPlanId=None, jobDesc=None, hasSches=None, jobSrcClient=None, jobId=None, jobDestClientId=None, jobType=None, jobUsername=None, jobDatabaseRunUsername=None, jobStatus=None, jobNextStartTime=None, jobCreatedTime=None, jobUserId=None, jobEngineType=None, jobNextBackupType=None, jobStorageType=None, jobDestClient=None, jobLastStartTime=None, jobName=None, jobClientId=None, jobUpdateTime=None,):
    self.jobVplatformId = jobVplatformId
    self.jobPlanId = jobPlanId
    self.jobDesc = jobDesc
    self.hasSches = hasSches
    self.jobSrcClient = jobSrcClient
    self.jobId = jobId
    self.jobDestClientId = jobDestClientId
    self.jobType = jobType
    self.jobUsername = jobUsername
    self.jobDatabaseRunUsername = jobDatabaseRunUsername
    self.jobStatus = jobStatus
    self.jobNextStartTime = jobNextStartTime
    self.jobCreatedTime = jobCreatedTime
    self.jobUserId = jobUserId
    self.jobEngineType = jobEngineType
    self.jobNextBackupType = jobNextBackupType
    self.jobStorageType = jobStorageType
    self.jobDestClient = jobDestClient
    self.jobLastStartTime = jobLastStartTime
    self.jobName = jobName
    self.jobClientId = jobClientId
    self.jobUpdateTime = jobUpdateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobVplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobPlanId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.hasSches = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jobSrcClient = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.jobDestClientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.jobUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.jobDatabaseRunUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.jobStatus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.jobNextStartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.jobCreatedTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.jobUserId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.jobEngineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.jobNextBackupType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.jobStorageType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.jobDestClient = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.jobLastStartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.jobClientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.jobUpdateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBackupJob')
    if self.jobVplatformId is not None:
      oprot.writeFieldBegin('jobVplatformId', TType.STRING, 1)
      oprot.writeString(self.jobVplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobPlanId is not None:
      oprot.writeFieldBegin('jobPlanId', TType.STRING, 2)
      oprot.writeString(self.jobPlanId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDesc is not None:
      oprot.writeFieldBegin('jobDesc', TType.STRING, 3)
      oprot.writeString(self.jobDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hasSches is not None:
      oprot.writeFieldBegin('hasSches', TType.BOOL, 4)
      oprot.writeBool(self.hasSches)
      oprot.writeFieldEnd()
    if self.jobSrcClient is not None:
      oprot.writeFieldBegin('jobSrcClient', TType.STRING, 5)
      oprot.writeString(self.jobSrcClient.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 6)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDestClientId is not None:
      oprot.writeFieldBegin('jobDestClientId', TType.STRING, 7)
      oprot.writeString(self.jobDestClientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 8)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobUsername is not None:
      oprot.writeFieldBegin('jobUsername', TType.STRING, 9)
      oprot.writeString(self.jobUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDatabaseRunUsername is not None:
      oprot.writeFieldBegin('jobDatabaseRunUsername', TType.STRING, 10)
      oprot.writeString(self.jobDatabaseRunUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobStatus is not None:
      oprot.writeFieldBegin('jobStatus', TType.I32, 11)
      oprot.writeI32(self.jobStatus)
      oprot.writeFieldEnd()
    if self.jobNextStartTime is not None:
      oprot.writeFieldBegin('jobNextStartTime', TType.I64, 12)
      oprot.writeI64(self.jobNextStartTime)
      oprot.writeFieldEnd()
    if self.jobCreatedTime is not None:
      oprot.writeFieldBegin('jobCreatedTime', TType.I64, 13)
      oprot.writeI64(self.jobCreatedTime)
      oprot.writeFieldEnd()
    if self.jobUserId is not None:
      oprot.writeFieldBegin('jobUserId', TType.STRING, 14)
      oprot.writeString(self.jobUserId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobEngineType is not None:
      oprot.writeFieldBegin('jobEngineType', TType.I32, 15)
      oprot.writeI32(self.jobEngineType)
      oprot.writeFieldEnd()
    if self.jobNextBackupType is not None:
      oprot.writeFieldBegin('jobNextBackupType', TType.I32, 16)
      oprot.writeI32(self.jobNextBackupType)
      oprot.writeFieldEnd()
    if self.jobStorageType is not None:
      oprot.writeFieldBegin('jobStorageType', TType.I32, 17)
      oprot.writeI32(self.jobStorageType)
      oprot.writeFieldEnd()
    if self.jobDestClient is not None:
      oprot.writeFieldBegin('jobDestClient', TType.STRING, 18)
      oprot.writeString(self.jobDestClient.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobLastStartTime is not None:
      oprot.writeFieldBegin('jobLastStartTime', TType.I64, 19)
      oprot.writeI64(self.jobLastStartTime)
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 20)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobClientId is not None:
      oprot.writeFieldBegin('jobClientId', TType.STRING, 21)
      oprot.writeString(self.jobClientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobUpdateTime is not None:
      oprot.writeFieldBegin('jobUpdateTime', TType.I64, 22)
      oprot.writeI64(self.jobUpdateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobVplatformId)
    value = (value * 31) ^ hash(self.jobPlanId)
    value = (value * 31) ^ hash(self.jobDesc)
    value = (value * 31) ^ hash(self.hasSches)
    value = (value * 31) ^ hash(self.jobSrcClient)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobDestClientId)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.jobUsername)
    value = (value * 31) ^ hash(self.jobDatabaseRunUsername)
    value = (value * 31) ^ hash(self.jobStatus)
    value = (value * 31) ^ hash(self.jobNextStartTime)
    value = (value * 31) ^ hash(self.jobCreatedTime)
    value = (value * 31) ^ hash(self.jobUserId)
    value = (value * 31) ^ hash(self.jobEngineType)
    value = (value * 31) ^ hash(self.jobNextBackupType)
    value = (value * 31) ^ hash(self.jobStorageType)
    value = (value * 31) ^ hash(self.jobDestClient)
    value = (value * 31) ^ hash(self.jobLastStartTime)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.jobClientId)
    value = (value * 31) ^ hash(self.jobUpdateTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBackupJobCountInfo(object):
  """
  Attributes:
   - failed
   - success
   - running
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'failed', None, None, ), # 1
    (2, TType.I32, 'success', None, None, ), # 2
    (3, TType.I32, 'running', None, None, ), # 3
  )

  def __init__(self, failed=None, success=None, running=None,):
    self.failed = failed
    self.success = success
    self.running = running

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.failed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.running = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBackupJobCountInfo')
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.I32, 1)
      oprot.writeI32(self.failed)
      oprot.writeFieldEnd()
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 2)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.I32, 3)
      oprot.writeI32(self.running)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.running)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
