# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncObjectInfo.ttypes

from thrift.transport import TTransport
all_structs = []


class ncUserType(object):
    """
    用户类型
        LDAP     域用户
        SYSTEM   系统应用用户
        UNKOWN   未知用户


    """
    LDAP = 1
    SYSTEM = 0
    UNKOWN = 2
    HUAWEI_SYSTEM = 3

    _VALUES_TO_NAMES = {
        1: "LDAP",
        0: "SYSTEM",
        2: "UNKOWN",
        3: "HUAWEI_SYSTEM",
    }

    _NAMES_TO_VALUES = {
        "LDAP": 1,
        "SYSTEM": 0,
        "UNKOWN": 2,
        "HUAWEI_SYSTEM": 3,
    }


class ncUserStatus(object):
    """
    用户状态
        ENABLE   启用
        DISABLE  禁用


    """
    ENABLE = 1
    DISABLE = 0

    _VALUES_TO_NAMES = {
        1: "ENABLE",
        0: "DISABLE",
    }

    _NAMES_TO_VALUES = {
        "ENABLE": 1,
        "DISABLE": 0,
    }


class ncRoleType(object):
    """
    用户角色类型

    """
    SYSTEM_ADMIN = 0
    SECURITY_ADMIN = 1
    AUDIT_ADMIN = 2
    OPERATOR_USER = 3
    RI_ADMIN = 4
    TENANT = 5

    _VALUES_TO_NAMES = {
        0: "SYSTEM_ADMIN",
        1: "SECURITY_ADMIN",
        2: "AUDIT_ADMIN",
        3: "OPERATOR_USER",
        4: "RI_ADMIN",
        5: "TENANT",
    }

    _NAMES_TO_VALUES = {
        "SYSTEM_ADMIN": 0,
        "SECURITY_ADMIN": 1,
        "AUDIT_ADMIN": 2,
        "OPERATOR_USER": 3,
        "RI_ADMIN": 4,
        "TENANT": 5,
    }


class ncLicenseCapType(object):
    FRONTEND_CAP_TIMING = 2
    BACKEND_CAP_TIMING = 4
    BACKEND_CAP_CLOUD = 6
    FRONTEND_CAPACITY_DEDUP_TIMING = 8
    BACKEND_CAPACITY_DEDUP_TIMING = 10
    FRONTEND_CAP_CDM = 16
    BACKEND_CAP_CDM = 18
    BACKEND_NAUTILUS = 28
    FRONTEND_CAP_DEDUP_CDM = 32
    BACKEND_CAP_DEDUP_CDM = 34
    BACKEND_CAP_ESSS = 100
    CDP_BACKEND = 101
    SAPHANA_BACKEND = 102
    HADOOP_BACKEND = 103
    CDP_FRONTEND = 201
    SAPHANA_FRONTEND = 202
    HADOOP_FRONTEND = 203

    _VALUES_TO_NAMES = {
        2: "FRONTEND_CAP_TIMING",
        4: "BACKEND_CAP_TIMING",
        6: "BACKEND_CAP_CLOUD",
        8: "FRONTEND_CAPACITY_DEDUP_TIMING",
        10: "BACKEND_CAPACITY_DEDUP_TIMING",
        16: "FRONTEND_CAP_CDM",
        18: "BACKEND_CAP_CDM",
        28: "BACKEND_NAUTILUS",
        32: "FRONTEND_CAP_DEDUP_CDM",
        34: "BACKEND_CAP_DEDUP_CDM",
        100: "BACKEND_CAP_ESSS",
        101: "CDP_BACKEND",
        102: "SAPHANA_BACKEND",
        103: "HADOOP_BACKEND",
        201: "CDP_FRONTEND",
        202: "SAPHANA_FRONTEND",
        203: "HADOOP_FRONTEND",
    }

    _NAMES_TO_VALUES = {
        "FRONTEND_CAP_TIMING": 2,
        "BACKEND_CAP_TIMING": 4,
        "BACKEND_CAP_CLOUD": 6,
        "FRONTEND_CAPACITY_DEDUP_TIMING": 8,
        "BACKEND_CAPACITY_DEDUP_TIMING": 10,
        "FRONTEND_CAP_CDM": 16,
        "BACKEND_CAP_CDM": 18,
        "BACKEND_NAUTILUS": 28,
        "FRONTEND_CAP_DEDUP_CDM": 32,
        "BACKEND_CAP_DEDUP_CDM": 34,
        "BACKEND_CAP_ESSS": 100,
        "CDP_BACKEND": 101,
        "SAPHANA_BACKEND": 102,
        "HADOOP_BACKEND": 103,
        "CDP_FRONTEND": 201,
        "SAPHANA_FRONTEND": 202,
        "HADOOP_FRONTEND": 203,
    }


class ncSvcType(object):
    BACKUP = 1
    CDM = 2
    CDP = 3

    _VALUES_TO_NAMES = {
        1: "BACKUP",
        2: "CDM",
        3: "CDP",
    }

    _NAMES_TO_VALUES = {
        "BACKUP": 1,
        "CDM": 2,
        "CDP": 3,
    }


class ncLicenseAdvType(object):
    PERMANENT = 7
    DEDUP = 8
    CDP = 10
    TAPE = 12
    REMOTE = 13
    D2D2C = 14
    HADOOP = 15
    SAP_HANA = 16
    LAN_FREE = 17
    OPENSTACK = 18
    CROSS_CLOUD = 19
    STORAGE = 20
    D2D2B = 21
    VM = 26
    CLOUD = 27
    CDM_REMOTE = 37
    CDM_DEDUP = 38
    CDM_CDP = 39
    UNIX_CLIENT = 40

    _VALUES_TO_NAMES = {
        7: "PERMANENT",
        8: "DEDUP",
        10: "CDP",
        12: "TAPE",
        13: "REMOTE",
        14: "D2D2C",
        15: "HADOOP",
        16: "SAP_HANA",
        17: "LAN_FREE",
        18: "OPENSTACK",
        19: "CROSS_CLOUD",
        20: "STORAGE",
        21: "D2D2B",
        26: "VM",
        27: "CLOUD",
        37: "CDM_REMOTE",
        38: "CDM_DEDUP",
        39: "CDM_CDP",
        40: "UNIX_CLIENT",
    }

    _NAMES_TO_VALUES = {
        "PERMANENT": 7,
        "DEDUP": 8,
        "CDP": 10,
        "TAPE": 12,
        "REMOTE": 13,
        "D2D2C": 14,
        "HADOOP": 15,
        "SAP_HANA": 16,
        "LAN_FREE": 17,
        "OPENSTACK": 18,
        "CROSS_CLOUD": 19,
        "STORAGE": 20,
        "D2D2B": 21,
        "VM": 26,
        "CLOUD": 27,
        "CDM_REMOTE": 37,
        "CDM_DEDUP": 38,
        "CDM_CDP": 39,
        "UNIX_CLIENT": 40,
    }


class ncSubLicenseType(object):
    UNIX_CLIENT = 1
    CDP_CLIENT = 2
    D2D2B = 3
    TAPE = 4

    _VALUES_TO_NAMES = {
        1: "UNIX_CLIENT",
        2: "CDP_CLIENT",
        3: "D2D2B",
        4: "TAPE",
    }

    _NAMES_TO_VALUES = {
        "UNIX_CLIENT": 1,
        "CDP_CLIENT": 2,
        "D2D2B": 3,
        "TAPE": 4,
    }


class ncThirdPlatformType(object):
    TSTACK = 1
    AMS = 2
    HUAWEI = 3

    _VALUES_TO_NAMES = {
        1: "TSTACK",
        2: "AMS",
        3: "HUAWEI",
    }

    _NAMES_TO_VALUES = {
        "TSTACK": 1,
        "AMS": 2,
        "HUAWEI": 3,
    }


class ncProductType(object):
    EXPRESS = 1
    CDM = 2
    CLOUD = 3
    SECRET = 4
    Enterprise = 5

    _VALUES_TO_NAMES = {
        1: "EXPRESS",
        2: "CDM",
        3: "CLOUD",
        4: "SECRET",
        5: "Enterprise",
    }

    _NAMES_TO_VALUES = {
        "EXPRESS": 1,
        "CDM": 2,
        "CLOUD": 3,
        "SECRET": 4,
        "Enterprise": 5,
    }


class ncBCEventType(object):
    CREATE_USER = 0
    DELETE_USER = 1
    EDIT_USER = 2

    _VALUES_TO_NAMES = {
        0: "CREATE_USER",
        1: "DELETE_USER",
        2: "EDIT_USER",
    }

    _NAMES_TO_VALUES = {
        "CREATE_USER": 0,
        "DELETE_USER": 1,
        "EDIT_USER": 2,
    }


class ncUserInfo(object):
    """
    通用-用户结构对象


    Attributes:
     - userId
     - userName
     - userType
     - userStatus
     - userEmail
     - userCreateTime
     - userPhone
     - userLastLoginTime
     - userIsBuildin
     - userRole
     - userToken
     - userCryptoperiod
     - userTokenExpire
     - passWd
     - level
     - parent_id

    """


    def __init__(self, userId=None, userName=None, userType=None, userStatus=None, userEmail=None, userCreateTime=None, userPhone=None, userLastLoginTime=None, userIsBuildin=None, userRole=None, userToken=None, userCryptoperiod=None, userTokenExpire=None, passWd=None, level=None, parent_id=None,):
        self.userId = userId
        self.userName = userName
        self.userType = userType
        self.userStatus = userStatus
        self.userEmail = userEmail
        self.userCreateTime = userCreateTime
        self.userPhone = userPhone
        self.userLastLoginTime = userLastLoginTime
        self.userIsBuildin = userIsBuildin
        self.userRole = userRole
        self.userToken = userToken
        self.userCryptoperiod = userCryptoperiod
        self.userTokenExpire = userTokenExpire
        self.passWd = passWd
        self.level = level
        self.parent_id = parent_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.userType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.userStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.userEmail = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userEmail.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.userCreateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.userPhone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.userLastLoginTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.userIsBuildin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.userRole = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.userCryptoperiod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.userTokenExpire = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.passWd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.parent_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUserInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userType is not None:
            oprot.writeFieldBegin('userType', TType.I32, 3)
            oprot.writeI32(self.userType)
            oprot.writeFieldEnd()
        if self.userStatus is not None:
            oprot.writeFieldBegin('userStatus', TType.I32, 4)
            oprot.writeI32(self.userStatus)
            oprot.writeFieldEnd()
        if self.userEmail is not None:
            oprot.writeFieldBegin('userEmail', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.userEmail))
            for iter6 in self.userEmail:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userCreateTime is not None:
            oprot.writeFieldBegin('userCreateTime', TType.I64, 6)
            oprot.writeI64(self.userCreateTime)
            oprot.writeFieldEnd()
        if self.userPhone is not None:
            oprot.writeFieldBegin('userPhone', TType.STRING, 7)
            oprot.writeString(self.userPhone.encode('utf-8') if sys.version_info[0] == 2 else self.userPhone)
            oprot.writeFieldEnd()
        if self.userLastLoginTime is not None:
            oprot.writeFieldBegin('userLastLoginTime', TType.I64, 8)
            oprot.writeI64(self.userLastLoginTime)
            oprot.writeFieldEnd()
        if self.userIsBuildin is not None:
            oprot.writeFieldBegin('userIsBuildin', TType.BOOL, 9)
            oprot.writeBool(self.userIsBuildin)
            oprot.writeFieldEnd()
        if self.userRole is not None:
            oprot.writeFieldBegin('userRole', TType.I32, 10)
            oprot.writeI32(self.userRole)
            oprot.writeFieldEnd()
        if self.userToken is not None:
            oprot.writeFieldBegin('userToken', TType.STRING, 11)
            oprot.writeString(self.userToken.encode('utf-8') if sys.version_info[0] == 2 else self.userToken)
            oprot.writeFieldEnd()
        if self.userCryptoperiod is not None:
            oprot.writeFieldBegin('userCryptoperiod', TType.I32, 12)
            oprot.writeI32(self.userCryptoperiod)
            oprot.writeFieldEnd()
        if self.userTokenExpire is not None:
            oprot.writeFieldBegin('userTokenExpire', TType.BOOL, 13)
            oprot.writeBool(self.userTokenExpire)
            oprot.writeFieldEnd()
        if self.passWd is not None:
            oprot.writeFieldBegin('passWd', TType.STRING, 14)
            oprot.writeString(self.passWd.encode('utf-8') if sys.version_info[0] == 2 else self.passWd)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 15)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.parent_id is not None:
            oprot.writeFieldBegin('parent_id', TType.STRING, 16)
            oprot.writeString(self.parent_id.encode('utf-8') if sys.version_info[0] == 2 else self.parent_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSubLicenseCount(object):
    """
    Attributes:
     - authType
     - tapeCount
     - blueCount

    """


    def __init__(self, authType=None, tapeCount=None, blueCount=None,):
        self.authType = authType
        self.tapeCount = tapeCount
        self.blueCount = blueCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tapeCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.blueCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSubLicenseCount')
        if self.authType is not None:
            oprot.writeFieldBegin('authType', TType.I32, 1)
            oprot.writeI32(self.authType)
            oprot.writeFieldEnd()
        if self.tapeCount is not None:
            oprot.writeFieldBegin('tapeCount', TType.I32, 2)
            oprot.writeI32(self.tapeCount)
            oprot.writeFieldEnd()
        if self.blueCount is not None:
            oprot.writeFieldBegin('blueCount', TType.I32, 3)
            oprot.writeI32(self.blueCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncLicenseReq(object):
    """
    Attributes:
     - needCap
     - advs
     - execClientId
     - platformId
     - tapeId
     - diskId
     - totalCount
     - capType
     - userId
     - svcType
     - userName
     - needUserCap
     - isArchive

    """


    def __init__(self, needCap=None, advs=None, execClientId=None, platformId=None, tapeId=None, diskId=None, totalCount=None, capType=None, userId=None, svcType=None, userName="", needUserCap=True, isArchive=False,):
        self.needCap = needCap
        self.advs = advs
        self.execClientId = execClientId
        self.platformId = platformId
        self.tapeId = tapeId
        self.diskId = diskId
        self.totalCount = totalCount
        self.capType = capType
        self.userId = userId
        self.svcType = svcType
        self.userName = userName
        self.needUserCap = needUserCap
        self.isArchive = isArchive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.needCap = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.advs = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.advs.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.execClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tapeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.diskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.totalCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.capType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.svcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.needUserCap = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.isArchive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncLicenseReq')
        if self.needCap is not None:
            oprot.writeFieldBegin('needCap', TType.BOOL, 1)
            oprot.writeBool(self.needCap)
            oprot.writeFieldEnd()
        if self.advs is not None:
            oprot.writeFieldBegin('advs', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.advs))
            for iter13 in self.advs:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.execClientId is not None:
            oprot.writeFieldBegin('execClientId', TType.STRING, 3)
            oprot.writeString(self.execClientId.encode('utf-8') if sys.version_info[0] == 2 else self.execClientId)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 4)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.tapeId is not None:
            oprot.writeFieldBegin('tapeId', TType.STRING, 5)
            oprot.writeString(self.tapeId.encode('utf-8') if sys.version_info[0] == 2 else self.tapeId)
            oprot.writeFieldEnd()
        if self.diskId is not None:
            oprot.writeFieldBegin('diskId', TType.STRING, 6)
            oprot.writeString(self.diskId.encode('utf-8') if sys.version_info[0] == 2 else self.diskId)
            oprot.writeFieldEnd()
        if self.totalCount is not None:
            oprot.writeFieldBegin('totalCount', TType.I32, 7)
            oprot.writeI32(self.totalCount)
            oprot.writeFieldEnd()
        if self.capType is not None:
            oprot.writeFieldBegin('capType', TType.I32, 8)
            oprot.writeI32(self.capType)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 9)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.svcType is not None:
            oprot.writeFieldBegin('svcType', TType.I32, 10)
            oprot.writeI32(self.svcType)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 11)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.needUserCap is not None:
            oprot.writeFieldBegin('needUserCap', TType.BOOL, 12)
            oprot.writeBool(self.needUserCap)
            oprot.writeFieldEnd()
        if self.isArchive is not None:
            oprot.writeFieldBegin('isArchive', TType.BOOL, 13)
            oprot.writeBool(self.isArchive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStorageCapacityInfo(object):
    """
    Attributes:
     - storageName
     - capacity

    """


    def __init__(self, storageName=None, capacity=None,):
        self.storageName = storageName
        self.capacity = capacity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.storageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStorageCapacityInfo')
        if self.storageName is not None:
            oprot.writeFieldBegin('storageName', TType.STRING, 1)
            oprot.writeString(self.storageName.encode('utf-8') if sys.version_info[0] == 2 else self.storageName)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 2)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCIDCapacityInfo(object):
    """
    Attributes:
     - cid
     - capacity
     - storageCapacityInfos
     - taskSetSign
     - jobType
     - orginalInfo
     - senderInfo
     - recipientInfo
     - openDedup
     - userName
     - userId
     - svcType

    """


    def __init__(self, cid=None, capacity=None, storageCapacityInfos=None, taskSetSign=None, jobType="", orginalInfo=None, senderInfo=None, recipientInfo=None, openDedup=False, userName="", userId="", svcType=None,):
        self.cid = cid
        self.capacity = capacity
        self.storageCapacityInfos = storageCapacityInfos
        self.taskSetSign = taskSetSign
        self.jobType = jobType
        self.orginalInfo = orginalInfo
        self.senderInfo = senderInfo
        self.recipientInfo = recipientInfo
        self.openDedup = openDedup
        self.userName = userName
        self.userId = userId
        self.svcType = svcType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.storageCapacityInfos = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncStorageCapacityInfo()
                        _elem19.read(iprot)
                        self.storageCapacityInfos.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.orginalInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
                    self.orginalInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.senderInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
                    self.senderInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.recipientInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
                    self.recipientInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.openDedup = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.svcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCIDCapacityInfo')
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 1)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 2)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        if self.storageCapacityInfos is not None:
            oprot.writeFieldBegin('storageCapacityInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.storageCapacityInfos))
            for iter20 in self.storageCapacityInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 4)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 5)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.orginalInfo is not None:
            oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 6)
            self.orginalInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.senderInfo is not None:
            oprot.writeFieldBegin('senderInfo', TType.STRUCT, 7)
            self.senderInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.recipientInfo is not None:
            oprot.writeFieldBegin('recipientInfo', TType.STRUCT, 8)
            self.recipientInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.openDedup is not None:
            oprot.writeFieldBegin('openDedup', TType.BOOL, 9)
            oprot.writeBool(self.openDedup)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 10)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 11)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.svcType is not None:
            oprot.writeFieldBegin('svcType', TType.I32, 12)
            oprot.writeI32(self.svcType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFpInfo(object):
    """
    Attributes:
     - id
     - fpName
     - fpId
     - userName

    """


    def __init__(self, id=None, fpName=None, fpId=None, userName=None,):
        self.id = id
        self.fpName = fpName
        self.fpId = fpId
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fpName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFpInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.fpName is not None:
            oprot.writeFieldBegin('fpName', TType.STRING, 2)
            oprot.writeString(self.fpName.encode('utf-8') if sys.version_info[0] == 2 else self.fpName)
            oprot.writeFieldEnd()
        if self.fpId is not None:
            oprot.writeFieldBegin('fpId', TType.STRING, 3)
            oprot.writeString(self.fpId.encode('utf-8') if sys.version_info[0] == 2 else self.fpId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 4)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncThirdPlatformInfo(object):
    """
    Attributes:
     - platformType
     - domain
     - port
     - cmdbIp
     - cmdbPort

    """


    def __init__(self, platformType=None, domain=None, port=None, cmdbIp=None, cmdbPort=None,):
        self.platformType = platformType
        self.domain = domain
        self.port = port
        self.cmdbIp = cmdbIp
        self.cmdbPort = cmdbPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cmdbIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.cmdbPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncThirdPlatformInfo')
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 1)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 2)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.cmdbIp is not None:
            oprot.writeFieldBegin('cmdbIp', TType.STRING, 4)
            oprot.writeString(self.cmdbIp.encode('utf-8') if sys.version_info[0] == 2 else self.cmdbIp)
            oprot.writeFieldEnd()
        if self.cmdbPort is not None:
            oprot.writeFieldBegin('cmdbPort', TType.I32, 5)
            oprot.writeI32(self.cmdbPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class nclicenseReq(object):
    """
    Attributes:
     - licenseCodes
     - requestId
     - method
     - userId
     - loginIp
     - machineCode
     - activeCodes

    """


    def __init__(self, licenseCodes=None, requestId=None, method=None, userId=None, loginIp=None, machineCode=None, activeCodes=None,):
        self.licenseCodes = licenseCodes
        self.requestId = requestId
        self.method = method
        self.userId = userId
        self.loginIp = loginIp
        self.machineCode = machineCode
        self.activeCodes = activeCodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.licenseCodes = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.licenseCodes.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.method = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.activeCodes = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.activeCodes.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('nclicenseReq')
        if self.licenseCodes is not None:
            oprot.writeFieldBegin('licenseCodes', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.licenseCodes))
            for iter33 in self.licenseCodes:
                oprot.writeString(iter33.encode('utf-8') if sys.version_info[0] == 2 else iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 2)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 3)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 4)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 5)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 6)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.activeCodes is not None:
            oprot.writeFieldBegin('activeCodes', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.activeCodes))
            for iter34 in self.activeCodes:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class nclicenseRes(object):
    """
    Attributes:
     - requestId
     - isFinished
     - nodeIp
     - noFailureIndict
     - successCount
     - failCount
     - failReason
     - isErr
     - errs

    """


    def __init__(self, requestId=None, isFinished=None, nodeIp=None, noFailureIndict=None, successCount=None, failCount=None, failReason=None, isErr=None, errs=None,):
        self.requestId = requestId
        self.isFinished = isFinished
        self.nodeIp = nodeIp
        self.noFailureIndict = noFailureIndict
        self.successCount = successCount
        self.failCount = failCount
        self.failReason = failReason
        self.isErr = isErr
        self.errs = errs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.noFailureIndict = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.successCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.failCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.failReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.isErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.errs = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.errs.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('nclicenseRes')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 2)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 3)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.noFailureIndict is not None:
            oprot.writeFieldBegin('noFailureIndict', TType.BOOL, 4)
            oprot.writeBool(self.noFailureIndict)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I32, 5)
            oprot.writeI32(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I32, 6)
            oprot.writeI32(self.failCount)
            oprot.writeFieldEnd()
        if self.failReason is not None:
            oprot.writeFieldBegin('failReason', TType.STRING, 7)
            oprot.writeString(self.failReason.encode('utf-8') if sys.version_info[0] == 2 else self.failReason)
            oprot.writeFieldEnd()
        if self.isErr is not None:
            oprot.writeFieldBegin('isErr', TType.BOOL, 8)
            oprot.writeBool(self.isErr)
            oprot.writeFieldEnd()
        if self.errs is not None:
            oprot.writeFieldBegin('errs', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.errs))
            for iter41 in self.errs:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncUserPurview(object):
    """
    Attributes:
     - onPurviews
     - userPurviews

    """


    def __init__(self, onPurviews=None, userPurviews=None,):
        self.onPurviews = onPurviews
        self.userPurviews = userPurviews

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.onPurviews = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.userPurviews = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userPurviews.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUserPurview')
        if self.onPurviews is not None:
            oprot.writeFieldBegin('onPurviews', TType.I32, 1)
            oprot.writeI32(self.onPurviews)
            oprot.writeFieldEnd()
        if self.userPurviews is not None:
            oprot.writeFieldBegin('userPurviews', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.userPurviews))
            for iter48 in self.userPurviews:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncUserByRole(object):
    """
    Attributes:
     - totalNum
     - userInfos

    """


    def __init__(self, totalNum=None, userInfos=None,):
        self.totalNum = totalNum
        self.userInfos = userInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.userInfos = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = ncUserInfo()
                        _elem54.read(iprot)
                        self.userInfos.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncUserByRole')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.userInfos is not None:
            oprot.writeFieldBegin('userInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.userInfos))
            for iter55 in self.userInfos:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFpByUser(object):
    """
    Attributes:
     - totalNum
     - fpInfos

    """


    def __init__(self, totalNum=None, fpInfos=None,):
        self.totalNum = totalNum
        self.fpInfos = fpInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.fpInfos = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = ncFpInfo()
                        _elem61.read(iprot)
                        self.fpInfos.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFpByUser')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.fpInfos is not None:
            oprot.writeFieldBegin('fpInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.fpInfos))
            for iter62 in self.fpInfos:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncThirdPlatformByType(object):
    """
    Attributes:
     - totalNum
     - ThirdPlatformInfos

    """


    def __init__(self, totalNum=None, ThirdPlatformInfos=None,):
        self.totalNum = totalNum
        self.ThirdPlatformInfos = ThirdPlatformInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ThirdPlatformInfos = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = ncThirdPlatformInfo()
                        _elem68.read(iprot)
                        self.ThirdPlatformInfos.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncThirdPlatformByType')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.ThirdPlatformInfos is not None:
            oprot.writeFieldBegin('ThirdPlatformInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.ThirdPlatformInfos))
            for iter69 in self.ThirdPlatformInfos:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOperatorByTenant(object):
    """
    Attributes:
     - totalNum
     - operatorIds

    """


    def __init__(self, totalNum=None, operatorIds=None,):
        self.totalNum = totalNum
        self.operatorIds = operatorIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.operatorIds = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.operatorIds.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOperatorByTenant')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.operatorIds is not None:
            oprot.writeFieldBegin('operatorIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.operatorIds))
            for iter76 in self.operatorIds:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncLockUser(object):
    """
    Attributes:
     - totalNum
     - userIds

    """


    def __init__(self, totalNum=None, userIds=None,):
        self.totalNum = totalNum
        self.userIds = userIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.userIds = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userIds.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncLockUser')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.userIds is not None:
            oprot.writeFieldBegin('userIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.userIds))
            for iter83 in self.userIds:
                oprot.writeString(iter83.encode('utf-8') if sys.version_info[0] == 2 else iter83)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncUserInfo)
ncUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'userType', None, None, ),  # 3
    (4, TType.I32, 'userStatus', None, None, ),  # 4
    (5, TType.LIST, 'userEmail', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.I64, 'userCreateTime', None, None, ),  # 6
    (7, TType.STRING, 'userPhone', 'UTF8', None, ),  # 7
    (8, TType.I64, 'userLastLoginTime', None, None, ),  # 8
    (9, TType.BOOL, 'userIsBuildin', None, None, ),  # 9
    (10, TType.I32, 'userRole', None, None, ),  # 10
    (11, TType.STRING, 'userToken', 'UTF8', None, ),  # 11
    (12, TType.I32, 'userCryptoperiod', None, None, ),  # 12
    (13, TType.BOOL, 'userTokenExpire', None, None, ),  # 13
    (14, TType.STRING, 'passWd', 'UTF8', None, ),  # 14
    (15, TType.I32, 'level', None, None, ),  # 15
    (16, TType.STRING, 'parent_id', 'UTF8', None, ),  # 16
)
all_structs.append(ncSubLicenseCount)
ncSubLicenseCount.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'authType', None, None, ),  # 1
    (2, TType.I32, 'tapeCount', None, None, ),  # 2
    (3, TType.I32, 'blueCount', None, None, ),  # 3
)
all_structs.append(ncLicenseReq)
ncLicenseReq.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'needCap', None, None, ),  # 1
    (2, TType.LIST, 'advs', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRING, 'execClientId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'platformId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tapeId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'diskId', 'UTF8', None, ),  # 6
    (7, TType.I32, 'totalCount', None, None, ),  # 7
    (8, TType.I32, 'capType', None, None, ),  # 8
    (9, TType.STRING, 'userId', 'UTF8', None, ),  # 9
    (10, TType.I32, 'svcType', None, None, ),  # 10
    (11, TType.STRING, 'userName', 'UTF8', "", ),  # 11
    (12, TType.BOOL, 'needUserCap', None, True, ),  # 12
    (13, TType.BOOL, 'isArchive', None, False, ),  # 13
)
all_structs.append(ncStorageCapacityInfo)
ncStorageCapacityInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'storageName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'capacity', None, None, ),  # 2
)
all_structs.append(ncCIDCapacityInfo)
ncCIDCapacityInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'capacity', None, None, ),  # 2
    (3, TType.LIST, 'storageCapacityInfos', (TType.STRUCT, [ncStorageCapacityInfo, None], False), None, ),  # 3
    (4, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'jobType', 'UTF8', "", ),  # 5
    (6, TType.STRUCT, 'orginalInfo', [ncObjectInfo.ttypes.ncCIDAuthInfo, None], None, ),  # 6
    (7, TType.STRUCT, 'senderInfo', [ncObjectInfo.ttypes.ncCIDAuthInfo, None], None, ),  # 7
    (8, TType.STRUCT, 'recipientInfo', [ncObjectInfo.ttypes.ncCIDAuthInfo, None], None, ),  # 8
    (9, TType.BOOL, 'openDedup', None, False, ),  # 9
    (10, TType.STRING, 'userName', 'UTF8', "", ),  # 10
    (11, TType.STRING, 'userId', 'UTF8', "", ),  # 11
    (12, TType.I32, 'svcType', None, None, ),  # 12
)
all_structs.append(ncFpInfo)
ncFpInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fpName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fpId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userName', 'UTF8', None, ),  # 4
)
all_structs.append(ncThirdPlatformInfo)
ncThirdPlatformInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platformType', None, None, ),  # 1
    (2, TType.STRING, 'domain', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.STRING, 'cmdbIp', 'UTF8', None, ),  # 4
    (5, TType.I32, 'cmdbPort', None, None, ),  # 5
)
all_structs.append(nclicenseReq)
nclicenseReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'licenseCodes', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'requestId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'method', None, None, ),  # 3
    (4, TType.STRING, 'userId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'loginIp', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'machineCode', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'activeCodes', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(nclicenseRes)
nclicenseRes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isFinished', None, None, ),  # 2
    (3, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'noFailureIndict', None, None, ),  # 4
    (5, TType.I32, 'successCount', None, None, ),  # 5
    (6, TType.I32, 'failCount', None, None, ),  # 6
    (7, TType.STRING, 'failReason', 'UTF8', None, ),  # 7
    (8, TType.BOOL, 'isErr', None, None, ),  # 8
    (9, TType.LIST, 'errs', (TType.STRING, 'UTF8', False), None, ),  # 9
)
all_structs.append(ncUserPurview)
ncUserPurview.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'onPurviews', None, None, ),  # 1
    (2, TType.LIST, 'userPurviews', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncUserByRole)
ncUserByRole.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'userInfos', (TType.STRUCT, [ncUserInfo, None], False), None, ),  # 2
)
all_structs.append(ncFpByUser)
ncFpByUser.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'fpInfos', (TType.STRUCT, [ncFpInfo, None], False), None, ),  # 2
)
all_structs.append(ncThirdPlatformByType)
ncThirdPlatformByType.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'ThirdPlatformInfos', (TType.STRUCT, [ncThirdPlatformInfo, None], False), None, ),  # 2
)
all_structs.append(ncOperatorByTenant)
ncOperatorByTenant.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'operatorIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncLockUser)
ncLockUser.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.LIST, 'userIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
