#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncObjectInfo.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncUserType(object):
  """
  用户类型
      LDAP     域用户
      SYSTEM   系统应用用户
      UNKOWN   未知用户

  """
  LDAP = 1
  SYSTEM = 0
  UNKOWN = 2
  HUAWEI_SYSTEM = 3

  _VALUES_TO_NAMES = {
    1: "LDAP",
    0: "SYSTEM",
    2: "UNKOWN",
    3: "HUAWEI_SYSTEM",
  }

  _NAMES_TO_VALUES = {
    "LDAP": 1,
    "SYSTEM": 0,
    "UNKOWN": 2,
    "HUAWEI_SYSTEM": 3,
  }

class ncUserStatus(object):
  """
  用户状态
      ENABLE   启用
      DISABLE  禁用

  """
  ENABLE = 1
  DISABLE = 0

  _VALUES_TO_NAMES = {
    1: "ENABLE",
    0: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 1,
    "DISABLE": 0,
  }

class ncRoleType(object):
  """
  用户角色类型
  """
  SYSTEM_ADMIN = 0
  SECURITY_ADMIN = 1
  AUDIT_ADMIN = 2
  OPERATOR_USER = 3
  RI_ADMIN = 4
  TENANT = 5

  _VALUES_TO_NAMES = {
    0: "SYSTEM_ADMIN",
    1: "SECURITY_ADMIN",
    2: "AUDIT_ADMIN",
    3: "OPERATOR_USER",
    4: "RI_ADMIN",
    5: "TENANT",
  }

  _NAMES_TO_VALUES = {
    "SYSTEM_ADMIN": 0,
    "SECURITY_ADMIN": 1,
    "AUDIT_ADMIN": 2,
    "OPERATOR_USER": 3,
    "RI_ADMIN": 4,
    "TENANT": 5,
  }

class ncLicenseCapType(object):
  FRONTEND_CAP_TIMING = 2
  BACKEND_CAP_TIMING = 4
  BACKEND_CAP_CLOUD = 6
  FRONTEND_CAPACITY_DEDUP_TIMING = 8
  BACKEND_CAPACITY_DEDUP_TIMING = 10
  FRONTEND_CAP_CDM = 16
  BACKEND_CAP_CDM = 18
  FRONTEND_CAP_DEDUP_CDM = 32
  BACKEND_CAP_DEDUP_CDM = 34
  BACKEND_CAP_ESSS = 100
  CDP_BACKEND = 101
  SAPHANA_BACKEND = 102
  HADOOP_BACKEND = 103

  _VALUES_TO_NAMES = {
    2: "FRONTEND_CAP_TIMING",
    4: "BACKEND_CAP_TIMING",
    6: "BACKEND_CAP_CLOUD",
    8: "FRONTEND_CAPACITY_DEDUP_TIMING",
    10: "BACKEND_CAPACITY_DEDUP_TIMING",
    16: "FRONTEND_CAP_CDM",
    18: "BACKEND_CAP_CDM",
    32: "FRONTEND_CAP_DEDUP_CDM",
    34: "BACKEND_CAP_DEDUP_CDM",
    100: "BACKEND_CAP_ESSS",
    101: "CDP_BACKEND",
    102: "SAPHANA_BACKEND",
    103: "HADOOP_BACKEND",
  }

  _NAMES_TO_VALUES = {
    "FRONTEND_CAP_TIMING": 2,
    "BACKEND_CAP_TIMING": 4,
    "BACKEND_CAP_CLOUD": 6,
    "FRONTEND_CAPACITY_DEDUP_TIMING": 8,
    "BACKEND_CAPACITY_DEDUP_TIMING": 10,
    "FRONTEND_CAP_CDM": 16,
    "BACKEND_CAP_CDM": 18,
    "FRONTEND_CAP_DEDUP_CDM": 32,
    "BACKEND_CAP_DEDUP_CDM": 34,
    "BACKEND_CAP_ESSS": 100,
    "CDP_BACKEND": 101,
    "SAPHANA_BACKEND": 102,
    "HADOOP_BACKEND": 103,
  }

class ncSvcType(object):
  BACKUP = 1
  CDM = 2
  CDP = 3

  _VALUES_TO_NAMES = {
    1: "BACKUP",
    2: "CDM",
    3: "CDP",
  }

  _NAMES_TO_VALUES = {
    "BACKUP": 1,
    "CDM": 2,
    "CDP": 3,
  }

class ncLicenseAdvType(object):
  PERMANENT = 7
  DEDUP = 8
  CDP = 10
  TAPE = 12
  REMOTE = 13
  D2D2C = 14
  HADOOP = 15
  SAP_HANA = 16
  LAN_FREE = 17
  OPENSTACK = 18
  CROSS_CLOUD = 19
  STORAGE = 20
  D2D2B = 21
  VM = 26
  CLOUD = 27
  CDM_REMOTE = 37
  CDM_DEDUP = 38
  CDM_CDP = 39
  UNIX_CLIENT = 40

  _VALUES_TO_NAMES = {
    7: "PERMANENT",
    8: "DEDUP",
    10: "CDP",
    12: "TAPE",
    13: "REMOTE",
    14: "D2D2C",
    15: "HADOOP",
    16: "SAP_HANA",
    17: "LAN_FREE",
    18: "OPENSTACK",
    19: "CROSS_CLOUD",
    20: "STORAGE",
    21: "D2D2B",
    26: "VM",
    27: "CLOUD",
    37: "CDM_REMOTE",
    38: "CDM_DEDUP",
    39: "CDM_CDP",
    40: "UNIX_CLIENT",
  }

  _NAMES_TO_VALUES = {
    "PERMANENT": 7,
    "DEDUP": 8,
    "CDP": 10,
    "TAPE": 12,
    "REMOTE": 13,
    "D2D2C": 14,
    "HADOOP": 15,
    "SAP_HANA": 16,
    "LAN_FREE": 17,
    "OPENSTACK": 18,
    "CROSS_CLOUD": 19,
    "STORAGE": 20,
    "D2D2B": 21,
    "VM": 26,
    "CLOUD": 27,
    "CDM_REMOTE": 37,
    "CDM_DEDUP": 38,
    "CDM_CDP": 39,
    "UNIX_CLIENT": 40,
  }

class ncThirdPlatformType(object):
  TSTACK = 1
  AMS = 2
  HUAWEI = 3

  _VALUES_TO_NAMES = {
    1: "TSTACK",
    2: "AMS",
    3: "HUAWEI",
  }

  _NAMES_TO_VALUES = {
    "TSTACK": 1,
    "AMS": 2,
    "HUAWEI": 3,
  }

class ncProductType(object):
  EXPRESS = 1
  CDM = 2
  CLOUD = 3
  SECRET = 4

  _VALUES_TO_NAMES = {
    1: "EXPRESS",
    2: "CDM",
    3: "CLOUD",
    4: "SECRET",
  }

  _NAMES_TO_VALUES = {
    "EXPRESS": 1,
    "CDM": 2,
    "CLOUD": 3,
    "SECRET": 4,
  }

class ncBCEventType(object):
  CREATE_USER = 0
  DELETE_USER = 1
  EDIT_USER = 2

  _VALUES_TO_NAMES = {
    0: "CREATE_USER",
    1: "DELETE_USER",
    2: "EDIT_USER",
  }

  _NAMES_TO_VALUES = {
    "CREATE_USER": 0,
    "DELETE_USER": 1,
    "EDIT_USER": 2,
  }


class ncUserInfo(object):
  """
  通用-用户结构对象


  Attributes:
   - userId
   - userName
   - userType
   - userStatus
   - userEmail
   - userCreateTime
   - userPhone
   - userLastLoginTime
   - userIsBuildin
   - userRole
   - userToken
   - userCryptoperiod
   - userTokenExpire
   - passWd
   - level
   - parent_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I32, 'userType', None, None, ), # 3
    (4, TType.I32, 'userStatus', None, None, ), # 4
    (5, TType.STRING, 'userEmail', None, None, ), # 5
    (6, TType.I64, 'userCreateTime', None, None, ), # 6
    (7, TType.STRING, 'userPhone', None, None, ), # 7
    (8, TType.I64, 'userLastLoginTime', None, None, ), # 8
    (9, TType.BOOL, 'userIsBuildin', None, None, ), # 9
    (10, TType.I32, 'userRole', None, None, ), # 10
    (11, TType.STRING, 'userToken', None, None, ), # 11
    (12, TType.I32, 'userCryptoperiod', None, None, ), # 12
    (13, TType.BOOL, 'userTokenExpire', None, None, ), # 13
    (14, TType.STRING, 'passWd', None, None, ), # 14
    (15, TType.I32, 'level', None, None, ), # 15
    (16, TType.STRING, 'parent_id', None, None, ), # 16
  )

  def __init__(self, userId=None, userName=None, userType=None, userStatus=None, userEmail=None, userCreateTime=None, userPhone=None, userLastLoginTime=None, userIsBuildin=None, userRole=None, userToken=None, userCryptoperiod=None, userTokenExpire=None, passWd=None, level=None, parent_id=None,):
    self.userId = userId
    self.userName = userName
    self.userType = userType
    self.userStatus = userStatus
    self.userEmail = userEmail
    self.userCreateTime = userCreateTime
    self.userPhone = userPhone
    self.userLastLoginTime = userLastLoginTime
    self.userIsBuildin = userIsBuildin
    self.userRole = userRole
    self.userToken = userToken
    self.userCryptoperiod = userCryptoperiod
    self.userTokenExpire = userTokenExpire
    self.passWd = passWd
    self.level = level
    self.parent_id = parent_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.userType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.userStatus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.userEmail = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userCreateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.userPhone = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.userLastLoginTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.userIsBuildin = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.userRole = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.userToken = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.userCryptoperiod = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.userTokenExpire = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.passWd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.parent_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUserInfo')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 1)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userType is not None:
      oprot.writeFieldBegin('userType', TType.I32, 3)
      oprot.writeI32(self.userType)
      oprot.writeFieldEnd()
    if self.userStatus is not None:
      oprot.writeFieldBegin('userStatus', TType.I32, 4)
      oprot.writeI32(self.userStatus)
      oprot.writeFieldEnd()
    if self.userEmail is not None:
      oprot.writeFieldBegin('userEmail', TType.STRING, 5)
      oprot.writeString(self.userEmail.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userCreateTime is not None:
      oprot.writeFieldBegin('userCreateTime', TType.I64, 6)
      oprot.writeI64(self.userCreateTime)
      oprot.writeFieldEnd()
    if self.userPhone is not None:
      oprot.writeFieldBegin('userPhone', TType.STRING, 7)
      oprot.writeString(self.userPhone.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userLastLoginTime is not None:
      oprot.writeFieldBegin('userLastLoginTime', TType.I64, 8)
      oprot.writeI64(self.userLastLoginTime)
      oprot.writeFieldEnd()
    if self.userIsBuildin is not None:
      oprot.writeFieldBegin('userIsBuildin', TType.BOOL, 9)
      oprot.writeBool(self.userIsBuildin)
      oprot.writeFieldEnd()
    if self.userRole is not None:
      oprot.writeFieldBegin('userRole', TType.I32, 10)
      oprot.writeI32(self.userRole)
      oprot.writeFieldEnd()
    if self.userToken is not None:
      oprot.writeFieldBegin('userToken', TType.STRING, 11)
      oprot.writeString(self.userToken.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userCryptoperiod is not None:
      oprot.writeFieldBegin('userCryptoperiod', TType.I32, 12)
      oprot.writeI32(self.userCryptoperiod)
      oprot.writeFieldEnd()
    if self.userTokenExpire is not None:
      oprot.writeFieldBegin('userTokenExpire', TType.BOOL, 13)
      oprot.writeBool(self.userTokenExpire)
      oprot.writeFieldEnd()
    if self.passWd is not None:
      oprot.writeFieldBegin('passWd', TType.STRING, 14)
      oprot.writeString(self.passWd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 15)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.STRING, 16)
      oprot.writeString(self.parent_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.userType)
    value = (value * 31) ^ hash(self.userStatus)
    value = (value * 31) ^ hash(self.userEmail)
    value = (value * 31) ^ hash(self.userCreateTime)
    value = (value * 31) ^ hash(self.userPhone)
    value = (value * 31) ^ hash(self.userLastLoginTime)
    value = (value * 31) ^ hash(self.userIsBuildin)
    value = (value * 31) ^ hash(self.userRole)
    value = (value * 31) ^ hash(self.userToken)
    value = (value * 31) ^ hash(self.userCryptoperiod)
    value = (value * 31) ^ hash(self.userTokenExpire)
    value = (value * 31) ^ hash(self.passWd)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.parent_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncLicenseReq(object):
  """
  Attributes:
   - needCap
   - advs
   - execClientId
   - platformId
   - tapeId
   - diskId
   - totalCount
   - capType
   - userId
   - svcType
   - userName
   - needUserCap
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'needCap', None, None, ), # 1
    (2, TType.LIST, 'advs', (TType.I32,None), None, ), # 2
    (3, TType.STRING, 'execClientId', None, None, ), # 3
    (4, TType.STRING, 'platformId', None, None, ), # 4
    (5, TType.STRING, 'tapeId', None, None, ), # 5
    (6, TType.STRING, 'diskId', None, None, ), # 6
    (7, TType.I32, 'totalCount', None, None, ), # 7
    (8, TType.I32, 'capType', None, None, ), # 8
    (9, TType.STRING, 'userId', None, None, ), # 9
    (10, TType.I32, 'svcType', None, None, ), # 10
    (11, TType.STRING, 'userName', None, "", ), # 11
    (12, TType.BOOL, 'needUserCap', None, True, ), # 12
  )

  def __init__(self, needCap=None, advs=None, execClientId=None, platformId=None, tapeId=None, diskId=None, totalCount=None, capType=None, userId=None, svcType=None, userName=thrift_spec[11][4], needUserCap=thrift_spec[12][4],):
    self.needCap = needCap
    self.advs = advs
    self.execClientId = execClientId
    self.platformId = platformId
    self.tapeId = tapeId
    self.diskId = diskId
    self.totalCount = totalCount
    self.capType = capType
    self.userId = userId
    self.svcType = svcType
    self.userName = userName
    self.needUserCap = needUserCap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.needCap = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.advs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.advs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.execClientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.platformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tapeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.diskId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.capType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.svcType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.needUserCap = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncLicenseReq')
    if self.needCap is not None:
      oprot.writeFieldBegin('needCap', TType.BOOL, 1)
      oprot.writeBool(self.needCap)
      oprot.writeFieldEnd()
    if self.advs is not None:
      oprot.writeFieldBegin('advs', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.advs))
      for iter6 in self.advs:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.execClientId is not None:
      oprot.writeFieldBegin('execClientId', TType.STRING, 3)
      oprot.writeString(self.execClientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.platformId is not None:
      oprot.writeFieldBegin('platformId', TType.STRING, 4)
      oprot.writeString(self.platformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.tapeId is not None:
      oprot.writeFieldBegin('tapeId', TType.STRING, 5)
      oprot.writeString(self.tapeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diskId is not None:
      oprot.writeFieldBegin('diskId', TType.STRING, 6)
      oprot.writeString(self.diskId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 7)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.capType is not None:
      oprot.writeFieldBegin('capType', TType.I32, 8)
      oprot.writeI32(self.capType)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 9)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.svcType is not None:
      oprot.writeFieldBegin('svcType', TType.I32, 10)
      oprot.writeI32(self.svcType)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 11)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.needUserCap is not None:
      oprot.writeFieldBegin('needUserCap', TType.BOOL, 12)
      oprot.writeBool(self.needUserCap)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.needCap)
    value = (value * 31) ^ hash(self.advs)
    value = (value * 31) ^ hash(self.execClientId)
    value = (value * 31) ^ hash(self.platformId)
    value = (value * 31) ^ hash(self.tapeId)
    value = (value * 31) ^ hash(self.diskId)
    value = (value * 31) ^ hash(self.totalCount)
    value = (value * 31) ^ hash(self.capType)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.svcType)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.needUserCap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStorageCapacityInfo(object):
  """
  Attributes:
   - storageName
   - capacity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'storageName', None, None, ), # 1
    (2, TType.I64, 'capacity', None, None, ), # 2
  )

  def __init__(self, storageName=None, capacity=None,):
    self.storageName = storageName
    self.capacity = capacity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.storageName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.capacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStorageCapacityInfo')
    if self.storageName is not None:
      oprot.writeFieldBegin('storageName', TType.STRING, 1)
      oprot.writeString(self.storageName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 2)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.storageName)
    value = (value * 31) ^ hash(self.capacity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDCapacityInfo(object):
  """
  Attributes:
   - cid
   - capacity
   - storageCapacityInfos
   - taskSetSign
   - jobType
   - orginalInfo
   - senderInfo
   - recipientInfo
   - openDedup
   - userName
   - userId
   - svcType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cid', None, None, ), # 1
    (2, TType.I64, 'capacity', None, None, ), # 2
    (3, TType.LIST, 'storageCapacityInfos', (TType.STRUCT,(ncStorageCapacityInfo, ncStorageCapacityInfo.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'taskSetSign', None, None, ), # 4
    (5, TType.STRING, 'jobType', None, "", ), # 5
    (6, TType.STRUCT, 'orginalInfo', (ncObjectInfo.ttypes.ncCIDAuthInfo, ncObjectInfo.ttypes.ncCIDAuthInfo.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'senderInfo', (ncObjectInfo.ttypes.ncCIDAuthInfo, ncObjectInfo.ttypes.ncCIDAuthInfo.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'recipientInfo', (ncObjectInfo.ttypes.ncCIDAuthInfo, ncObjectInfo.ttypes.ncCIDAuthInfo.thrift_spec), None, ), # 8
    (9, TType.BOOL, 'openDedup', None, False, ), # 9
    (10, TType.STRING, 'userName', None, "", ), # 10
    (11, TType.STRING, 'userId', None, "", ), # 11
    (12, TType.I32, 'svcType', None, None, ), # 12
  )

  def __init__(self, cid=None, capacity=None, storageCapacityInfos=None, taskSetSign=None, jobType=thrift_spec[5][4], orginalInfo=None, senderInfo=None, recipientInfo=None, openDedup=thrift_spec[9][4], userName=thrift_spec[10][4], userId=thrift_spec[11][4], svcType=None,):
    self.cid = cid
    self.capacity = capacity
    self.storageCapacityInfos = storageCapacityInfos
    self.taskSetSign = taskSetSign
    self.jobType = jobType
    self.orginalInfo = orginalInfo
    self.senderInfo = senderInfo
    self.recipientInfo = recipientInfo
    self.openDedup = openDedup
    self.userName = userName
    self.userId = userId
    self.svcType = svcType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.capacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.storageCapacityInfos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncStorageCapacityInfo()
            _elem12.read(iprot)
            self.storageCapacityInfos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.orginalInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
          self.orginalInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.senderInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
          self.senderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.recipientInfo = ncObjectInfo.ttypes.ncCIDAuthInfo()
          self.recipientInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.openDedup = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.svcType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDCapacityInfo')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.STRING, 1)
      oprot.writeString(self.cid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 2)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    if self.storageCapacityInfos is not None:
      oprot.writeFieldBegin('storageCapacityInfos', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.storageCapacityInfos))
      for iter13 in self.storageCapacityInfos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 4)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 5)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.orginalInfo is not None:
      oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 6)
      self.orginalInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.senderInfo is not None:
      oprot.writeFieldBegin('senderInfo', TType.STRUCT, 7)
      self.senderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.recipientInfo is not None:
      oprot.writeFieldBegin('recipientInfo', TType.STRUCT, 8)
      self.recipientInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.openDedup is not None:
      oprot.writeFieldBegin('openDedup', TType.BOOL, 9)
      oprot.writeBool(self.openDedup)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 10)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 11)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.svcType is not None:
      oprot.writeFieldBegin('svcType', TType.I32, 12)
      oprot.writeI32(self.svcType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.capacity)
    value = (value * 31) ^ hash(self.storageCapacityInfos)
    value = (value * 31) ^ hash(self.taskSetSign)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.orginalInfo)
    value = (value * 31) ^ hash(self.senderInfo)
    value = (value * 31) ^ hash(self.recipientInfo)
    value = (value * 31) ^ hash(self.openDedup)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.svcType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFpInfo(object):
  """
  Attributes:
   - id
   - fpName
   - fpId
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'fpName', None, None, ), # 2
    (3, TType.STRING, 'fpId', None, None, ), # 3
    (4, TType.STRING, 'userName', None, None, ), # 4
  )

  def __init__(self, id=None, fpName=None, fpId=None, userName=None,):
    self.id = id
    self.fpName = fpName
    self.fpId = fpId
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fpName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fpId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFpInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fpName is not None:
      oprot.writeFieldBegin('fpName', TType.STRING, 2)
      oprot.writeString(self.fpName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fpId is not None:
      oprot.writeFieldBegin('fpId', TType.STRING, 3)
      oprot.writeString(self.fpId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 4)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.fpName)
    value = (value * 31) ^ hash(self.fpId)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncThirdPlatformInfo(object):
  """
  Attributes:
   - platformType
   - domain
   - port
   - cmdbIp
   - cmdbPort
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'platformType', None, None, ), # 1
    (2, TType.STRING, 'domain', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
    (4, TType.STRING, 'cmdbIp', None, None, ), # 4
    (5, TType.I32, 'cmdbPort', None, None, ), # 5
  )

  def __init__(self, platformType=None, domain=None, port=None, cmdbIp=None, cmdbPort=None,):
    self.platformType = platformType
    self.domain = domain
    self.port = port
    self.cmdbIp = cmdbIp
    self.cmdbPort = cmdbPort

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.platformType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cmdbIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cmdbPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncThirdPlatformInfo')
    if self.platformType is not None:
      oprot.writeFieldBegin('platformType', TType.I32, 1)
      oprot.writeI32(self.platformType)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 2)
      oprot.writeString(self.domain.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.cmdbIp is not None:
      oprot.writeFieldBegin('cmdbIp', TType.STRING, 4)
      oprot.writeString(self.cmdbIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cmdbPort is not None:
      oprot.writeFieldBegin('cmdbPort', TType.I32, 5)
      oprot.writeI32(self.cmdbPort)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.platformType)
    value = (value * 31) ^ hash(self.domain)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.cmdbIp)
    value = (value * 31) ^ hash(self.cmdbPort)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nclicenseReq(object):
  """
  Attributes:
   - licenseCodes
   - requestId
   - method
   - userId
   - loginIp
   - machineCode
   - activeCodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'licenseCodes', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.I32, 'method', None, None, ), # 3
    (4, TType.STRING, 'userId', None, None, ), # 4
    (5, TType.STRING, 'loginIp', None, None, ), # 5
    (6, TType.STRING, 'machineCode', None, None, ), # 6
    (7, TType.LIST, 'activeCodes', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, licenseCodes=None, requestId=None, method=None, userId=None, loginIp=None, machineCode=None, activeCodes=None,):
    self.licenseCodes = licenseCodes
    self.requestId = requestId
    self.method = method
    self.userId = userId
    self.loginIp = loginIp
    self.machineCode = machineCode
    self.activeCodes = activeCodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.licenseCodes = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString().decode('utf-8')
            self.licenseCodes.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.loginIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.machineCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.activeCodes = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString().decode('utf-8')
            self.activeCodes.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nclicenseReq')
    if self.licenseCodes is not None:
      oprot.writeFieldBegin('licenseCodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.licenseCodes))
      for iter26 in self.licenseCodes:
        oprot.writeString(iter26.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.I32, 3)
      oprot.writeI32(self.method)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 4)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.loginIp is not None:
      oprot.writeFieldBegin('loginIp', TType.STRING, 5)
      oprot.writeString(self.loginIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.machineCode is not None:
      oprot.writeFieldBegin('machineCode', TType.STRING, 6)
      oprot.writeString(self.machineCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.activeCodes is not None:
      oprot.writeFieldBegin('activeCodes', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.activeCodes))
      for iter27 in self.activeCodes:
        oprot.writeString(iter27.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.licenseCodes)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.method)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.loginIp)
    value = (value * 31) ^ hash(self.machineCode)
    value = (value * 31) ^ hash(self.activeCodes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nclicenseRes(object):
  """
  Attributes:
   - requestId
   - isFinished
   - nodeIp
   - noFailureIndict
   - successCount
   - failCount
   - failReason
   - isErr
   - errs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.BOOL, 'isFinished', None, None, ), # 2
    (3, TType.STRING, 'nodeIp', None, None, ), # 3
    (4, TType.BOOL, 'noFailureIndict', None, None, ), # 4
    (5, TType.I32, 'successCount', None, None, ), # 5
    (6, TType.I32, 'failCount', None, None, ), # 6
    (7, TType.STRING, 'failReason', None, None, ), # 7
    (8, TType.BOOL, 'isErr', None, None, ), # 8
    (9, TType.LIST, 'errs', (TType.STRING,None), None, ), # 9
  )

  def __init__(self, requestId=None, isFinished=None, nodeIp=None, noFailureIndict=None, successCount=None, failCount=None, failReason=None, isErr=None, errs=None,):
    self.requestId = requestId
    self.isFinished = isFinished
    self.nodeIp = nodeIp
    self.noFailureIndict = noFailureIndict
    self.successCount = successCount
    self.failCount = failCount
    self.failReason = failReason
    self.isErr = isErr
    self.errs = errs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.isFinished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.noFailureIndict = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.successCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.failCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.failReason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.isErr = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.errs = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString().decode('utf-8')
            self.errs.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nclicenseRes')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isFinished is not None:
      oprot.writeFieldBegin('isFinished', TType.BOOL, 2)
      oprot.writeBool(self.isFinished)
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 3)
      oprot.writeString(self.nodeIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.noFailureIndict is not None:
      oprot.writeFieldBegin('noFailureIndict', TType.BOOL, 4)
      oprot.writeBool(self.noFailureIndict)
      oprot.writeFieldEnd()
    if self.successCount is not None:
      oprot.writeFieldBegin('successCount', TType.I32, 5)
      oprot.writeI32(self.successCount)
      oprot.writeFieldEnd()
    if self.failCount is not None:
      oprot.writeFieldBegin('failCount', TType.I32, 6)
      oprot.writeI32(self.failCount)
      oprot.writeFieldEnd()
    if self.failReason is not None:
      oprot.writeFieldBegin('failReason', TType.STRING, 7)
      oprot.writeString(self.failReason.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isErr is not None:
      oprot.writeFieldBegin('isErr', TType.BOOL, 8)
      oprot.writeBool(self.isErr)
      oprot.writeFieldEnd()
    if self.errs is not None:
      oprot.writeFieldBegin('errs', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.errs))
      for iter34 in self.errs:
        oprot.writeString(iter34.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.isFinished)
    value = (value * 31) ^ hash(self.nodeIp)
    value = (value * 31) ^ hash(self.noFailureIndict)
    value = (value * 31) ^ hash(self.successCount)
    value = (value * 31) ^ hash(self.failCount)
    value = (value * 31) ^ hash(self.failReason)
    value = (value * 31) ^ hash(self.isErr)
    value = (value * 31) ^ hash(self.errs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUserPurview(object):
  """
  Attributes:
   - onPurviews
   - userPurviews
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'onPurviews', None, None, ), # 1
    (2, TType.LIST, 'userPurviews', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, onPurviews=None, userPurviews=None,):
    self.onPurviews = onPurviews
    self.userPurviews = userPurviews

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.onPurviews = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userPurviews = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString().decode('utf-8')
            self.userPurviews.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUserPurview')
    if self.onPurviews is not None:
      oprot.writeFieldBegin('onPurviews', TType.I32, 1)
      oprot.writeI32(self.onPurviews)
      oprot.writeFieldEnd()
    if self.userPurviews is not None:
      oprot.writeFieldBegin('userPurviews', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.userPurviews))
      for iter41 in self.userPurviews:
        oprot.writeString(iter41.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.onPurviews)
    value = (value * 31) ^ hash(self.userPurviews)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
