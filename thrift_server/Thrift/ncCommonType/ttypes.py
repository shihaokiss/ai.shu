# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncKeyValue(object):
    """
    Attributes:
     - keyStr
     - valueStr

    """


    def __init__(self, keyStr=None, valueStr=None,):
        self.keyStr = keyStr
        self.valueStr = valueStr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keyStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.valueStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncKeyValue')
        if self.keyStr is not None:
            oprot.writeFieldBegin('keyStr', TType.STRING, 1)
            oprot.writeString(self.keyStr.encode('utf-8') if sys.version_info[0] == 2 else self.keyStr)
            oprot.writeFieldEnd()
        if self.valueStr is not None:
            oprot.writeFieldBegin('valueStr', TType.STRING, 2)
            oprot.writeString(self.valueStr.encode('utf-8') if sys.version_info[0] == 2 else self.valueStr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncString(object):
    """
    Attributes:
     - strVal

    """


    def __init__(self, strVal=None,):
        self.strVal = strVal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strVal = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncString')
        if self.strVal is not None:
            oprot.writeFieldBegin('strVal', TType.STRING, 1)
            oprot.writeString(self.strVal.encode('utf-8') if sys.version_info[0] == 2 else self.strVal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStringList(object):
    """
    Attributes:
     - strList

    """


    def __init__(self, strList=None,):
        self.strList = strList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.strList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.strList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStringList')
        if self.strList is not None:
            oprot.writeFieldBegin('strList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.strList))
            for iter6 in self.strList:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTwoStringList(object):
    """
    Attributes:
     - strList1
     - strList2

    """


    def __init__(self, strList1=None, strList2=None,):
        self.strList1 = strList1
        self.strList2 = strList2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.strList1 = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.strList1.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.strList2 = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.strList2.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTwoStringList')
        if self.strList1 is not None:
            oprot.writeFieldBegin('strList1', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.strList1))
            for iter19 in self.strList1:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.strList2 is not None:
            oprot.writeFieldBegin('strList2', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.strList2))
            for iter20 in self.strList2:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOptions(object):
    """
    Attributes:
     - clientType
     - engineType

    """


    def __init__(self, clientType=1, engineType=1001,):
        self.clientType = clientType
        self.engineType = engineType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOptions')
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 1)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 2)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCustomerParams(object):
    """
    键值对列表


    Attributes:
     - partialSign
     - params

    """


    def __init__(self, partialSign=None, params=None,):
        self.partialSign = partialSign
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.partialSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncKeyValue()
                        _elem26.read(iprot)
                        self.params.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCustomerParams')
        if self.partialSign is not None:
            oprot.writeFieldBegin('partialSign', TType.STRING, 1)
            oprot.writeString(self.partialSign.encode('utf-8') if sys.version_info[0] == 2 else self.partialSign)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter27 in self.params:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.partialSign is None:
            raise TProtocolException(message='Required field partialSign is unset!')
        if self.params is None:
            raise TProtocolException(message='Required field params is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncKeyValueCustomerParams(object):
    """
    Attributes:
     - keyStr
     - params

    """


    def __init__(self, keyStr=None, params=None,):
        self.keyStr = keyStr
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keyStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncKeyValue()
                        _elem33.read(iprot)
                        self.params.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncKeyValueCustomerParams')
        if self.keyStr is not None:
            oprot.writeFieldBegin('keyStr', TType.STRING, 1)
            oprot.writeString(self.keyStr.encode('utf-8') if sys.version_info[0] == 2 else self.keyStr)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter34 in self.params:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.keyStr is None:
            raise TProtocolException(message='Required field keyStr is unset!')
        if self.params is None:
            raise TProtocolException(message='Required field params is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetJobsReq(object):
    """
    Attributes:
     - client_ids
     - client_macs
     - status

    """


    def __init__(self, client_ids=None, client_macs=None, status=None,):
        self.client_ids = client_ids
        self.client_macs = client_macs
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.client_ids = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.client_ids.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.client_macs = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.client_macs.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.status = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = iprot.readI32()
                        self.status.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetJobsReq')
        if self.client_ids is not None:
            oprot.writeFieldBegin('client_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.client_ids))
            for iter53 in self.client_ids:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.client_macs is not None:
            oprot.writeFieldBegin('client_macs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.client_macs))
            for iter54 in self.client_macs:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.status))
            for iter55 in self.status:
                oprot.writeI32(iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRemoteJob(object):
    """
    Attributes:
     - jobName
     - jobId
     - jobStatus
     - authUser
     - isEmail
     - isDeleted

    """


    def __init__(self, jobName=None, jobId=None, jobStatus=None, authUser=None, isEmail=None, isDeleted=None,):
        self.jobName = jobName
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.authUser = authUser
        self.isEmail = isEmail
        self.isDeleted = isDeleted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.jobStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.authUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isDeleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRemoteJob')
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 1)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.jobStatus is not None:
            oprot.writeFieldBegin('jobStatus', TType.I32, 3)
            oprot.writeI32(self.jobStatus)
            oprot.writeFieldEnd()
        if self.authUser is not None:
            oprot.writeFieldBegin('authUser', TType.STRING, 4)
            oprot.writeString(self.authUser.encode('utf-8') if sys.version_info[0] == 2 else self.authUser)
            oprot.writeFieldEnd()
        if self.isEmail is not None:
            oprot.writeFieldBegin('isEmail', TType.BOOL, 5)
            oprot.writeBool(self.isEmail)
            oprot.writeFieldEnd()
        if self.isDeleted is not None:
            oprot.writeFieldBegin('isDeleted', TType.BOOL, 6)
            oprot.writeBool(self.isDeleted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncKeyValue)
ncKeyValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'keyStr', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'valueStr', 'UTF8', None, ),  # 2
)
all_structs.append(ncString)
ncString.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strVal', 'UTF8', None, ),  # 1
)
all_structs.append(ncStringList)
ncStringList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'strList', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncTwoStringList)
ncTwoStringList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'strList1', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'strList2', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncOptions)
ncOptions.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clientType', None, 1, ),  # 1
    (2, TType.I32, 'engineType', None, 1001, ),  # 2
)
all_structs.append(ncCustomerParams)
ncCustomerParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'partialSign', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [ncKeyValue, None], False), None, ),  # 2
)
all_structs.append(ncKeyValueCustomerParams)
ncKeyValueCustomerParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'keyStr', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [ncKeyValue, None], False), None, ),  # 2
)
all_structs.append(ncGetJobsReq)
ncGetJobsReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'client_ids', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'client_macs', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'status', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(ncRemoteJob)
ncRemoteJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'jobStatus', None, None, ),  # 3
    (4, TType.STRING, 'authUser', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'isEmail', None, None, ),  # 5
    (6, TType.BOOL, 'isDeleted', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
