#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncMDiskStatus(object):
  """
  MDisk状态
  """
  MANAGED = 1
  UNMANAGED = 2

  _VALUES_TO_NAMES = {
    1: "MANAGED",
    2: "UNMANAGED",
  }

  _NAMES_TO_VALUES = {
    "MANAGED": 1,
    "UNMANAGED": 2,
  }

class ncPoolType(object):
  """
  存储池类型
  """
  ALL = 0
  SNAPSHOT = 1
  DEDUP = 2
  CLOUD = 3

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "SNAPSHOT",
    2: "DEDUP",
    3: "CLOUD",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "SNAPSHOT": 1,
    "DEDUP": 2,
    "CLOUD": 3,
  }

class ncPoolStatus(object):
  """
  存储池状态
  """
  NORMAL = 0
  ABNORMAL = 1

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "ABNORMAL",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "ABNORMAL": 1,
  }

class ncVolumeType(object):
  """
  volume类型
  """
  BASE = 1
  SNAP = 2
  CLONE = 3

  _VALUES_TO_NAMES = {
    1: "BASE",
    2: "SNAP",
    3: "CLONE",
  }

  _NAMES_TO_VALUES = {
    "BASE": 1,
    "SNAP": 2,
    "CLONE": 3,
  }

class ncBaseVolumeType(object):
  """
  baseVolume类型
  """
  NORMAL = 1
  THIN = 2

  _VALUES_TO_NAMES = {
    1: "NORMAL",
    2: "THIN",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 1,
    "THIN": 2,
  }

class ncFabricModule(object):
  """
  Fabric类型
  """
  LOOPBACK = 0
  ISCSI = 1
  FC = 2
  SRPT = 3
  SBP = 4
  TCMFC = 5
  VHOST = 6
  XENPVSCSI = 7
  IBMVSCSIS = 8

  _VALUES_TO_NAMES = {
    0: "LOOPBACK",
    1: "ISCSI",
    2: "FC",
    3: "SRPT",
    4: "SBP",
    5: "TCMFC",
    6: "VHOST",
    7: "XENPVSCSI",
    8: "IBMVSCSIS",
  }

  _NAMES_TO_VALUES = {
    "LOOPBACK": 0,
    "ISCSI": 1,
    "FC": 2,
    "SRPT": 3,
    "SBP": 4,
    "TCMFC": 5,
    "VHOST": 6,
    "XENPVSCSI": 7,
    "IBMVSCSIS": 8,
  }

class ncLinkStatus(object):
  """
  链路状态
  """
  ALL = 0
  NORMAL = 1
  USED = 2
  ABNORMAL = 3
  CREATING = 4
  DELETING = 5

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "NORMAL",
    2: "USED",
    3: "ABNORMAL",
    4: "CREATING",
    5: "DELETING",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "NORMAL": 1,
    "USED": 2,
    "ABNORMAL": 3,
    "CREATING": 4,
    "DELETING": 5,
  }


class ncMDiskSpaceInfo(object):
  """
  MDisk容量信息

  Attributes:
   - diskSize
   - freeSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'diskSize', None, None, ), # 1
    (2, TType.I64, 'freeSize', None, None, ), # 2
  )

  def __init__(self, diskSize=None, freeSize=None,):
    self.diskSize = diskSize
    self.freeSize = freeSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.diskSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.freeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncMDiskSpaceInfo')
    if self.diskSize is not None:
      oprot.writeFieldBegin('diskSize', TType.I64, 1)
      oprot.writeI64(self.diskSize)
      oprot.writeFieldEnd()
    if self.freeSize is not None:
      oprot.writeFieldBegin('freeSize', TType.I64, 2)
      oprot.writeI64(self.freeSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.diskSize)
    value = (value * 31) ^ hash(self.freeSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncMDiskInfo(object):
  """
  MDisk信息（MDisk是构建SnapPool和DedupPool的基本单元）

  Attributes:
   - uuid
   - name
   - path
   - vendor
   - poolUuid
   - status
   - spaceInfo
   - pooluuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'path', None, None, ), # 3
    (4, TType.STRING, 'vendor', None, None, ), # 4
    (5, TType.STRING, 'poolUuid', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRUCT, 'spaceInfo', (ncMDiskSpaceInfo, ncMDiskSpaceInfo.thrift_spec), None, ), # 7
    (8, TType.STRING, 'pooluuid', None, None, ), # 8
  )

  def __init__(self, uuid=None, name=None, path=None, vendor=None, poolUuid=None, status=None, spaceInfo=None, pooluuid=None,):
    self.uuid = uuid
    self.name = name
    self.path = path
    self.vendor = vendor
    self.poolUuid = poolUuid
    self.status = status
    self.spaceInfo = spaceInfo
    self.pooluuid = pooluuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.path = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vendor = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.poolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.spaceInfo = ncMDiskSpaceInfo()
          self.spaceInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.pooluuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncMDiskInfo')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 3)
      oprot.writeString(self.path.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vendor is not None:
      oprot.writeFieldBegin('vendor', TType.STRING, 4)
      oprot.writeString(self.vendor.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolUuid is not None:
      oprot.writeFieldBegin('poolUuid', TType.STRING, 5)
      oprot.writeString(self.poolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.spaceInfo is not None:
      oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 7)
      self.spaceInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.pooluuid is not None:
      oprot.writeFieldBegin('pooluuid', TType.STRING, 8)
      oprot.writeString(self.pooluuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.path)
    value = (value * 31) ^ hash(self.vendor)
    value = (value * 31) ^ hash(self.poolUuid)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.spaceInfo)
    value = (value * 31) ^ hash(self.pooluuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncMDiskInfoList(object):
  """
  MDisk列表

  Attributes:
   - mdiskInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mdiskInfoList', (TType.STRUCT,(ncMDiskInfo, ncMDiskInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, mdiskInfoList=None,):
    self.mdiskInfoList = mdiskInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mdiskInfoList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncMDiskInfo()
            _elem5.read(iprot)
            self.mdiskInfoList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncMDiskInfoList')
    if self.mdiskInfoList is not None:
      oprot.writeFieldBegin('mdiskInfoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mdiskInfoList))
      for iter6 in self.mdiskInfoList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mdiskInfoList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncLinkInfo(object):
  """
  链路信息

  Attributes:
   - link_id
   - fabric_type
   - server_wwn
   - client_wwn
   - server_id
   - client_id
   - portal_ip
   - portal_port
   - pool_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'link_id', None, None, ), # 1
    (2, TType.I32, 'fabric_type', None, None, ), # 2
    (3, TType.STRING, 'server_wwn', None, None, ), # 3
    (4, TType.STRING, 'client_wwn', None, None, ), # 4
    (5, TType.STRING, 'server_id', None, None, ), # 5
    (6, TType.STRING, 'client_id', None, None, ), # 6
    (7, TType.STRING, 'portal_ip', None, None, ), # 7
    (8, TType.I32, 'portal_port', None, None, ), # 8
    (9, TType.STRING, 'pool_id', None, None, ), # 9
  )

  def __init__(self, link_id=None, fabric_type=None, server_wwn=None, client_wwn=None, server_id=None, client_id=None, portal_ip=None, portal_port=None, pool_id=None,):
    self.link_id = link_id
    self.fabric_type = fabric_type
    self.server_wwn = server_wwn
    self.client_wwn = client_wwn
    self.server_id = server_id
    self.client_id = client_id
    self.portal_ip = portal_ip
    self.portal_port = portal_port
    self.pool_id = pool_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.link_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.fabric_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.server_wwn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.client_wwn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.server_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.portal_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.portal_port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.pool_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncLinkInfo')
    if self.link_id is not None:
      oprot.writeFieldBegin('link_id', TType.STRING, 1)
      oprot.writeString(self.link_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fabric_type is not None:
      oprot.writeFieldBegin('fabric_type', TType.I32, 2)
      oprot.writeI32(self.fabric_type)
      oprot.writeFieldEnd()
    if self.server_wwn is not None:
      oprot.writeFieldBegin('server_wwn', TType.STRING, 3)
      oprot.writeString(self.server_wwn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.client_wwn is not None:
      oprot.writeFieldBegin('client_wwn', TType.STRING, 4)
      oprot.writeString(self.client_wwn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.server_id is not None:
      oprot.writeFieldBegin('server_id', TType.STRING, 5)
      oprot.writeString(self.server_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 6)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.portal_ip is not None:
      oprot.writeFieldBegin('portal_ip', TType.STRING, 7)
      oprot.writeString(self.portal_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.portal_port is not None:
      oprot.writeFieldBegin('portal_port', TType.I32, 8)
      oprot.writeI32(self.portal_port)
      oprot.writeFieldEnd()
    if self.pool_id is not None:
      oprot.writeFieldBegin('pool_id', TType.STRING, 9)
      oprot.writeString(self.pool_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.link_id)
    value = (value * 31) ^ hash(self.fabric_type)
    value = (value * 31) ^ hash(self.server_wwn)
    value = (value * 31) ^ hash(self.client_wwn)
    value = (value * 31) ^ hash(self.server_id)
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.portal_ip)
    value = (value * 31) ^ hash(self.portal_port)
    value = (value * 31) ^ hash(self.pool_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
