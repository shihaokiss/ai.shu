#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncAuthSvc import ncAuthSvc
from ncAuthSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void microprobe()')
  print('  ncUserInfo get_user_by_access_token(string access_token, string user_id)')
  print('  ncUserInfo get_user_by_user_id(string user_id)')
  print('   get_users_by_role_type(string role_type)')
  print('  string get_user_by_userId(string userId)')
  print('   get_users_by_user_names( user_names)')
  print('  ncUserInfo get_userpurviewly_by_access_token(string access_token, string user_id, string uri, i32 is_backup)')
  print('  void update_license_cap(ncLicenseCapType cap_type,  cid_caps)')
  print('  i64 get_storage_total_used(string user_id, bool is_operator)')
  print('  bool check_license(ncLicenseReq license_req)')
  print('  bool is_node_authenticated(string node_id)')
  print('   get_fps_user(string userName, string fp_id)')
  print('  void delete_fp_users(string fp_id)')
  print('  string get_ip_by_user_id(string user_id)')
  print('  bool valid_user(string username, string password)')
  print('  string get_data_for_ams(string kwargs)')
  print('  string do_operation_from_ams(string target, string method, string kwargs)')
  print('  string get_total_license_cap()')
  print('  void get_safe_strategy(double threshold, string mark)')
  print('   get_third_platforms(i32 platform_type)')
  print('  ncProductType get_product_type()')
  print('   get_tenant_operator(string tenant_id)')
  print('  ncUserInfo get_parent_or_self(string userName)')
  print('   get_locked_user_ids()')
  print('  void create_fp_user(string kwargs)')
  print('  void update_safe(i64 crypto_period)')
  print('  ncUserInfo get_user_by_bc_manger(string access_token, string user_id, i64 exp, i64 created)')
  print('  nclicenseRes import_licenses(nclicenseReq licenseReq)')
  print('  void modify_ams_sso_user_status(string user_name)')
  print('  ncUserPurview get_user_purviews(string user_id)')
  print('  bool valid_tool_user(string username, string password)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncAuthSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
  if len(args) != 0:
    print('microprobe requires 0 args')
    sys.exit(1)
  pp.pprint(client.microprobe())

elif cmd == 'get_user_by_access_token':
  if len(args) != 2:
    print('get_user_by_access_token requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_user_by_access_token(args[0],args[1],))

elif cmd == 'get_user_by_user_id':
  if len(args) != 1:
    print('get_user_by_user_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_by_user_id(args[0],))

elif cmd == 'get_users_by_role_type':
  if len(args) != 1:
    print('get_users_by_role_type requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_users_by_role_type(args[0],))

elif cmd == 'get_user_by_userId':
  if len(args) != 1:
    print('get_user_by_userId requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_by_userId(args[0],))

elif cmd == 'get_users_by_user_names':
  if len(args) != 1:
    print('get_users_by_user_names requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_users_by_user_names(eval(args[0]),))

elif cmd == 'get_userpurviewly_by_access_token':
  if len(args) != 4:
    print('get_userpurviewly_by_access_token requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_userpurviewly_by_access_token(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'update_license_cap':
  if len(args) != 2:
    print('update_license_cap requires 2 args')
    sys.exit(1)
  pp.pprint(client.update_license_cap(eval(args[0]),eval(args[1]),))

elif cmd == 'get_storage_total_used':
  if len(args) != 2:
    print('get_storage_total_used requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_storage_total_used(args[0],eval(args[1]),))

elif cmd == 'check_license':
  if len(args) != 1:
    print('check_license requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_license(eval(args[0]),))

elif cmd == 'is_node_authenticated':
  if len(args) != 1:
    print('is_node_authenticated requires 1 args')
    sys.exit(1)
  pp.pprint(client.is_node_authenticated(args[0],))

elif cmd == 'get_fps_user':
  if len(args) != 2:
    print('get_fps_user requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_fps_user(args[0],args[1],))

elif cmd == 'delete_fp_users':
  if len(args) != 1:
    print('delete_fp_users requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_fp_users(args[0],))

elif cmd == 'get_ip_by_user_id':
  if len(args) != 1:
    print('get_ip_by_user_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_ip_by_user_id(args[0],))

elif cmd == 'valid_user':
  if len(args) != 2:
    print('valid_user requires 2 args')
    sys.exit(1)
  pp.pprint(client.valid_user(args[0],args[1],))

elif cmd == 'get_data_for_ams':
  if len(args) != 1:
    print('get_data_for_ams requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'do_operation_from_ams':
  if len(args) != 3:
    print('do_operation_from_ams requires 3 args')
    sys.exit(1)
  pp.pprint(client.do_operation_from_ams(args[0],args[1],args[2],))

elif cmd == 'get_total_license_cap':
  if len(args) != 0:
    print('get_total_license_cap requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_total_license_cap())

elif cmd == 'get_safe_strategy':
  if len(args) != 2:
    print('get_safe_strategy requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_safe_strategy(eval(args[0]),args[1],))

elif cmd == 'get_third_platforms':
  if len(args) != 1:
    print('get_third_platforms requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_third_platforms(eval(args[0]),))

elif cmd == 'get_product_type':
  if len(args) != 0:
    print('get_product_type requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_product_type())

elif cmd == 'get_tenant_operator':
  if len(args) != 1:
    print('get_tenant_operator requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_tenant_operator(args[0],))

elif cmd == 'get_parent_or_self':
  if len(args) != 1:
    print('get_parent_or_self requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_parent_or_self(args[0],))

elif cmd == 'get_locked_user_ids':
  if len(args) != 0:
    print('get_locked_user_ids requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_locked_user_ids())

elif cmd == 'create_fp_user':
  if len(args) != 1:
    print('create_fp_user requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_fp_user(args[0],))

elif cmd == 'update_safe':
  if len(args) != 1:
    print('update_safe requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_safe(eval(args[0]),))

elif cmd == 'get_user_by_bc_manger':
  if len(args) != 4:
    print('get_user_by_bc_manger requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_user_by_bc_manger(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'import_licenses':
  if len(args) != 1:
    print('import_licenses requires 1 args')
    sys.exit(1)
  pp.pprint(client.import_licenses(eval(args[0]),))

elif cmd == 'modify_ams_sso_user_status':
  if len(args) != 1:
    print('modify_ams_sso_user_status requires 1 args')
    sys.exit(1)
  pp.pprint(client.modify_ams_sso_user_status(args[0],))

elif cmd == 'get_user_purviews':
  if len(args) != 1:
    print('get_user_purviews requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_purviews(args[0],))

elif cmd == 'valid_tool_user':
  if len(args) != 2:
    print('valid_tool_user requires 2 args')
    sys.exit(1)
  pp.pprint(client.valid_tool_user(args[0],args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
