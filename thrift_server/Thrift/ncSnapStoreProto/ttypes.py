#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCdmStoreMgmCommon.ttypes
import ncStoreCommonProto.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncSnapPoolSpaceInfo(object):
  """
  SnapPool容量信息

  Attributes:
   - extentSize
   - usedSize
   - freeSize
   - capacity
   - warnThreshold
   - safeThreshold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'extentSize', None, None, ), # 1
    (2, TType.I64, 'usedSize', None, None, ), # 2
    (3, TType.I64, 'freeSize', None, None, ), # 3
    (4, TType.I64, 'capacity', None, None, ), # 4
    (5, TType.I64, 'warnThreshold', None, None, ), # 5
    (6, TType.I64, 'safeThreshold', None, None, ), # 6
  )

  def __init__(self, extentSize=None, usedSize=None, freeSize=None, capacity=None, warnThreshold=None, safeThreshold=None,):
    self.extentSize = extentSize
    self.usedSize = usedSize
    self.freeSize = freeSize
    self.capacity = capacity
    self.warnThreshold = warnThreshold
    self.safeThreshold = safeThreshold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.extentSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.usedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.freeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.capacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.warnThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.safeThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapPoolSpaceInfo')
    if self.extentSize is not None:
      oprot.writeFieldBegin('extentSize', TType.I32, 1)
      oprot.writeI32(self.extentSize)
      oprot.writeFieldEnd()
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.I64, 2)
      oprot.writeI64(self.usedSize)
      oprot.writeFieldEnd()
    if self.freeSize is not None:
      oprot.writeFieldBegin('freeSize', TType.I64, 3)
      oprot.writeI64(self.freeSize)
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 4)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    if self.warnThreshold is not None:
      oprot.writeFieldBegin('warnThreshold', TType.I64, 5)
      oprot.writeI64(self.warnThreshold)
      oprot.writeFieldEnd()
    if self.safeThreshold is not None:
      oprot.writeFieldBegin('safeThreshold', TType.I64, 6)
      oprot.writeI64(self.safeThreshold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.extentSize)
    value = (value * 31) ^ hash(self.usedSize)
    value = (value * 31) ^ hash(self.freeSize)
    value = (value * 31) ^ hash(self.capacity)
    value = (value * 31) ^ hash(self.warnThreshold)
    value = (value * 31) ^ hash(self.safeThreshold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapPoolInfo(object):
  """
  SnapPool信息

  Attributes:
   - uuid
   - friendlyName
   - spaceInfo
   - mdiskInfos
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'friendlyName', None, None, ), # 2
    None, # 3
    (4, TType.STRUCT, 'spaceInfo', (ncSnapPoolSpaceInfo, ncSnapPoolSpaceInfo.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'mdiskInfos', (ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList.thrift_spec), None, ), # 5
    (6, TType.I32, 'status', None,     0, ), # 6
  )

  def __init__(self, uuid=None, friendlyName=None, spaceInfo=None, mdiskInfos=None, status=thrift_spec[6][4],):
    self.uuid = uuid
    self.friendlyName = friendlyName
    self.spaceInfo = spaceInfo
    self.mdiskInfos = mdiskInfos
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.friendlyName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.spaceInfo = ncSnapPoolSpaceInfo()
          self.spaceInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
          self.mdiskInfos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapPoolInfo')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.friendlyName is not None:
      oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
      oprot.writeString(self.friendlyName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.spaceInfo is not None:
      oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 4)
      self.spaceInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.mdiskInfos is not None:
      oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 5)
      self.mdiskInfos.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.friendlyName)
    value = (value * 31) ^ hash(self.spaceInfo)
    value = (value * 31) ^ hash(self.mdiskInfos)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapPoolInfoList(object):
  """
  SnapPool列表

  Attributes:
   - snapPoolInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'snapPoolInfoList', (TType.STRUCT,(ncSnapPoolInfo, ncSnapPoolInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, snapPoolInfoList=None,):
    self.snapPoolInfoList = snapPoolInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.snapPoolInfoList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncSnapPoolInfo()
            _elem5.read(iprot)
            self.snapPoolInfoList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapPoolInfoList')
    if self.snapPoolInfoList is not None:
      oprot.writeFieldBegin('snapPoolInfoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.snapPoolInfoList))
      for iter6 in self.snapPoolInfoList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolInfoList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapPoolListRequest(object):
  """
  Attributes:
   - start
   - limit
   - hint
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'start', None, 0, ), # 2
    (3, TType.I32, 'limit', None, 1000, ), # 3
    (4, TType.STRING, 'hint', None, None, ), # 4
  )

  def __init__(self, start=thrift_spec[2][4], limit=thrift_spec[3][4], hint=None,):
    self.start = start
    self.limit = limit
    self.hint = hint

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapPoolListRequest')
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 3)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 4)
      oprot.writeString(self.hint.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.hint)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapPoolListResponse(object):
  """
  Attributes:
   - snapPoolInfoList
   - total
   - hasmore
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'snapPoolInfoList', (TType.STRUCT,(ncSnapPoolInfo, ncSnapPoolInfo.thrift_spec)), None, ), # 1
    (2, TType.I64, 'total', None, None, ), # 2
    (3, TType.BOOL, 'hasmore', None, None, ), # 3
  )

  def __init__(self, snapPoolInfoList=None, total=None, hasmore=None,):
    self.snapPoolInfoList = snapPoolInfoList
    self.total = total
    self.hasmore = hasmore

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.snapPoolInfoList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncSnapPoolInfo()
            _elem12.read(iprot)
            self.snapPoolInfoList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.total = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.hasmore = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapPoolListResponse')
    if self.snapPoolInfoList is not None:
      oprot.writeFieldBegin('snapPoolInfoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.snapPoolInfoList))
      for iter13 in self.snapPoolInfoList:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I64, 2)
      oprot.writeI64(self.total)
      oprot.writeFieldEnd()
    if self.hasmore is not None:
      oprot.writeFieldBegin('hasmore', TType.BOOL, 3)
      oprot.writeBool(self.hasmore)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolInfoList)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.hasmore)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapPoolRequest(object):
  """
  Attributes:
   - snapPoolUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
  )

  def __init__(self, snapPoolUuid=None,):
    self.snapPoolUuid = snapPoolUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapPoolRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapPoolResponse(object):
  """
  Attributes:
   - exists
   - snapPoolInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'exists', None, None, ), # 1
    (2, TType.STRUCT, 'snapPoolInfo', (ncSnapPoolInfo, ncSnapPoolInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, exists=None, snapPoolInfo=None,):
    self.exists = exists
    self.snapPoolInfo = snapPoolInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.exists = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.snapPoolInfo = ncSnapPoolInfo()
          self.snapPoolInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapPoolResponse')
    if self.exists is not None:
      oprot.writeFieldBegin('exists', TType.BOOL, 1)
      oprot.writeBool(self.exists)
      oprot.writeFieldEnd()
    if self.snapPoolInfo is not None:
      oprot.writeFieldBegin('snapPoolInfo', TType.STRUCT, 2)
      self.snapPoolInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exists)
    value = (value * 31) ^ hash(self.snapPoolInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSnapPoolRequest(object):
  """
  CreateSnapPool请求包

  Attributes:
   - extentSize
   - friendlyName
   - warnThreshold
   - safeThreshold
   - mdiskInfos
   - snapPoolUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'extentSize', None, None, ), # 1
    (2, TType.STRING, 'friendlyName', None, None, ), # 2
    (3, TType.I64, 'warnThreshold', None, None, ), # 3
    (4, TType.I64, 'safeThreshold', None, None, ), # 4
    (5, TType.STRUCT, 'mdiskInfos', (ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList.thrift_spec), None, ), # 5
    (6, TType.STRING, 'snapPoolUuid', None, None, ), # 6
  )

  def __init__(self, extentSize=None, friendlyName=None, warnThreshold=None, safeThreshold=None, mdiskInfos=None, snapPoolUuid=None,):
    self.extentSize = extentSize
    self.friendlyName = friendlyName
    self.warnThreshold = warnThreshold
    self.safeThreshold = safeThreshold
    self.mdiskInfos = mdiskInfos
    self.snapPoolUuid = snapPoolUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.extentSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.friendlyName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.warnThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.safeThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
          self.mdiskInfos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSnapPoolRequest')
    if self.extentSize is not None:
      oprot.writeFieldBegin('extentSize', TType.I32, 1)
      oprot.writeI32(self.extentSize)
      oprot.writeFieldEnd()
    if self.friendlyName is not None:
      oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
      oprot.writeString(self.friendlyName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.warnThreshold is not None:
      oprot.writeFieldBegin('warnThreshold', TType.I64, 3)
      oprot.writeI64(self.warnThreshold)
      oprot.writeFieldEnd()
    if self.safeThreshold is not None:
      oprot.writeFieldBegin('safeThreshold', TType.I64, 4)
      oprot.writeI64(self.safeThreshold)
      oprot.writeFieldEnd()
    if self.mdiskInfos is not None:
      oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 5)
      self.mdiskInfos.write(oprot)
      oprot.writeFieldEnd()
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 6)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.extentSize)
    value = (value * 31) ^ hash(self.friendlyName)
    value = (value * 31) ^ hash(self.warnThreshold)
    value = (value * 31) ^ hash(self.safeThreshold)
    value = (value * 31) ^ hash(self.mdiskInfos)
    value = (value * 31) ^ hash(self.snapPoolUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSnapPoolResponse(object):
  """
  CreateSnapPool响应包

  Attributes:
   - snapPoolUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
  )

  def __init__(self, snapPoolUuid=None,):
    self.snapPoolUuid = snapPoolUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSnapPoolResponse')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncModifySnapPoolRequest(object):
  """
  ModifySnapPool请求包

  Attributes:
   - snapPoolUuid
   - warnThreshold
   - safeThreshold
   - addMDiskInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.I64, 'warnThreshold', None, None, ), # 2
    (3, TType.I64, 'safeThreshold', None, None, ), # 3
    (4, TType.STRUCT, 'addMDiskInfos', (ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList.thrift_spec), None, ), # 4
  )

  def __init__(self, snapPoolUuid=None, warnThreshold=None, safeThreshold=None, addMDiskInfos=None,):
    self.snapPoolUuid = snapPoolUuid
    self.warnThreshold = warnThreshold
    self.safeThreshold = safeThreshold
    self.addMDiskInfos = addMDiskInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.warnThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.safeThreshold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.addMDiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
          self.addMDiskInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncModifySnapPoolRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.warnThreshold is not None:
      oprot.writeFieldBegin('warnThreshold', TType.I64, 2)
      oprot.writeI64(self.warnThreshold)
      oprot.writeFieldEnd()
    if self.safeThreshold is not None:
      oprot.writeFieldBegin('safeThreshold', TType.I64, 3)
      oprot.writeI64(self.safeThreshold)
      oprot.writeFieldEnd()
    if self.addMDiskInfos is not None:
      oprot.writeFieldBegin('addMDiskInfos', TType.STRUCT, 4)
      self.addMDiskInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.warnThreshold)
    value = (value * 31) ^ hash(self.safeThreshold)
    value = (value * 31) ^ hash(self.addMDiskInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateBaseVolumeRequest(object):
  """
  CreateBaseVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRUCT, 'baseVolInfos', (ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, ncStoreCommonProto.ttypes.ncBaseVolumeInfoList.thrift_spec), None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolInfos=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolInfos = baseVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
          self.baseVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateBaseVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolInfos is not None:
      oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 2)
      self.baseVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateBaseVolumeResponse(object):
  """
  CreateBaseVolume响应包

  Attributes:
   - baseVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'baseVolInfos', (ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, ncStoreCommonProto.ttypes.ncBaseVolumeInfoList.thrift_spec), None, ), # 1
  )

  def __init__(self, baseVolInfos=None,):
    self.baseVolInfos = baseVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
          self.baseVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateBaseVolumeResponse')
    if self.baseVolInfos is not None:
      oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 1)
      self.baseVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.baseVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDelBaseVolumeRequest(object):
  """
  DelBaseVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRUCT, 'baseVolInfos', (ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, ncStoreCommonProto.ttypes.ncBaseVolumeInfoList.thrift_spec), None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolInfos=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolInfos = baseVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
          self.baseVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDelBaseVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolInfos is not None:
      oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 2)
      self.baseVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSnapVolumeRequest(object):
  """
  CreateSnapVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - snapVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRING, 'snapVolumeUuid', None, None, ), # 3
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.snapVolumeUuid = snapVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSnapVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeUuid is not None:
      oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
      oprot.writeString(self.snapVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSnapVolumeResponse(object):
  """
  CreateSnapVolume响应包

  Attributes:
   - snapVolInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'snapVolInfo', (ncStoreCommonProto.ttypes.ncSnapVolumeInfo, ncStoreCommonProto.ttypes.ncSnapVolumeInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, snapVolInfo=None,):
    self.snapVolInfo = snapVolInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.snapVolInfo = ncStoreCommonProto.ttypes.ncSnapVolumeInfo()
          self.snapVolInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSnapVolumeResponse')
    if self.snapVolInfo is not None:
      oprot.writeFieldBegin('snapVolInfo', TType.STRUCT, 1)
      self.snapVolInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapVolInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDelSnapVolumeRequest(object):
  """
  DelSnapVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - snapVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRUCT, 'snapVolInfos', (ncStoreCommonProto.ttypes.ncSnapVolumeInfoList, ncStoreCommonProto.ttypes.ncSnapVolumeInfoList.thrift_spec), None, ), # 3
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolInfos=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.snapVolInfos = snapVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.snapVolInfos = ncStoreCommonProto.ttypes.ncSnapVolumeInfoList()
          self.snapVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDelSnapVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolInfos is not None:
      oprot.writeFieldBegin('snapVolInfos', TType.STRUCT, 3)
      self.snapVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateCloneVolumeRequest(object):
  """
  CreateCloneVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - snapVolumeUuid
   - cloneVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRING, 'snapVolumeUuid', None, None, ), # 3
    (4, TType.STRING, 'cloneVolumeUuid', None, None, ), # 4
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None, cloneVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.snapVolumeUuid = snapVolumeUuid
    self.cloneVolumeUuid = cloneVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cloneVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateCloneVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeUuid is not None:
      oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
      oprot.writeString(self.snapVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cloneVolumeUuid is not None:
      oprot.writeFieldBegin('cloneVolumeUuid', TType.STRING, 4)
      oprot.writeString(self.cloneVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolumeUuid)
    value = (value * 31) ^ hash(self.cloneVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateCloneVolumeResponse(object):
  """
  CreateCloneVolume响应包

  Attributes:
   - cloneVolInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cloneVolInfo', (ncStoreCommonProto.ttypes.ncCloneVolumeInfo, ncStoreCommonProto.ttypes.ncCloneVolumeInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, cloneVolInfo=None,):
    self.cloneVolInfo = cloneVolInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cloneVolInfo = ncStoreCommonProto.ttypes.ncCloneVolumeInfo()
          self.cloneVolInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateCloneVolumeResponse')
    if self.cloneVolInfo is not None:
      oprot.writeFieldBegin('cloneVolInfo', TType.STRUCT, 1)
      self.cloneVolInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cloneVolInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDelCloneVolumeRequest(object):
  """
  DelCloneVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - snapVolumeUuid
   - cloneVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRING, 'snapVolumeUuid', None, None, ), # 3
    (4, TType.STRUCT, 'cloneVolInfos', (ncStoreCommonProto.ttypes.ncCloneVolumeInfoList, ncStoreCommonProto.ttypes.ncCloneVolumeInfoList.thrift_spec), None, ), # 4
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None, cloneVolInfos=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.snapVolumeUuid = snapVolumeUuid
    self.cloneVolInfos = cloneVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cloneVolInfos = ncStoreCommonProto.ttypes.ncCloneVolumeInfoList()
          self.cloneVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDelCloneVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeUuid is not None:
      oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
      oprot.writeString(self.snapVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cloneVolInfos is not None:
      oprot.writeFieldBegin('cloneVolInfos', TType.STRUCT, 4)
      self.cloneVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolumeUuid)
    value = (value * 31) ^ hash(self.cloneVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStatBaseVolumeRequest(object):
  """
  StatBaseVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStatBaseVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStatSnapVolumeRequest(object):
  """
  StatSnapVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - snapVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRING, 'snapVolumeUuid', None, None, ), # 3
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.snapVolumeUuid = snapVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStatSnapVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeUuid is not None:
      oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
      oprot.writeString(self.snapVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStatCloneVolumeRequest(object):
  """
  StatCloneVolume请求包

  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
   - cloneVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
    (3, TType.STRING, 'cloneVolumeUuid', None, None, ), # 3
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, cloneVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid
    self.cloneVolumeUuid = cloneVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cloneVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStatCloneVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cloneVolumeUuid is not None:
      oprot.writeFieldBegin('cloneVolumeUuid', TType.STRING, 3)
      oprot.writeString(self.cloneVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.cloneVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetBaseVolumeListRequest(object):
  """
  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetBaseVolumeListRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetBaseVolumeListResponse(object):
  """
  Attributes:
   - baseVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'baseVolInfos', (ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, ncStoreCommonProto.ttypes.ncBaseVolumeInfoList.thrift_spec), None, ), # 1
  )

  def __init__(self, baseVolInfos=None,):
    self.baseVolInfos = baseVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
          self.baseVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetBaseVolumeListResponse')
    if self.baseVolInfos is not None:
      oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 1)
      self.baseVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.baseVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapVolumeListRequest(object):
  """
  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapVolumeListRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSnapVolumeListResponse(object):
  """
  Attributes:
   - snapVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'snapVolInfos', (ncStoreCommonProto.ttypes.ncSnapVolumeInfoList, ncStoreCommonProto.ttypes.ncSnapVolumeInfoList.thrift_spec), None, ), # 1
  )

  def __init__(self, snapVolInfos=None,):
    self.snapVolInfos = snapVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.snapVolInfos = ncStoreCommonProto.ttypes.ncSnapVolumeInfoList()
          self.snapVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSnapVolumeListResponse')
    if self.snapVolInfos is not None:
      oprot.writeFieldBegin('snapVolInfos', TType.STRUCT, 1)
      self.snapVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetCloneVolumeListRequest(object):
  """
  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetCloneVolumeListRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetCloneVolumeListResponse(object):
  """
  Attributes:
   - cloneVolInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cloneVolInfos', (ncStoreCommonProto.ttypes.ncCloneVolumeInfoList, ncStoreCommonProto.ttypes.ncCloneVolumeInfoList.thrift_spec), None, ), # 1
  )

  def __init__(self, cloneVolInfos=None,):
    self.cloneVolInfos = cloneVolInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cloneVolInfos = ncStoreCommonProto.ttypes.ncCloneVolumeInfoList()
          self.cloneVolInfos.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetCloneVolumeListResponse')
    if self.cloneVolInfos is not None:
      oprot.writeFieldBegin('cloneVolInfos', TType.STRUCT, 1)
      self.cloneVolInfos.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cloneVolInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCleanBaseVolumeRequest(object):
  """
  Attributes:
   - snapPoolUuid
   - baseVolumeUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapPoolUuid', None, None, ), # 1
    (2, TType.STRING, 'baseVolumeUuid', None, None, ), # 2
  )

  def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
    self.snapPoolUuid = snapPoolUuid
    self.baseVolumeUuid = baseVolumeUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCleanBaseVolumeRequest')
    if self.snapPoolUuid is not None:
      oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
      oprot.writeString(self.snapPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapPoolUuid)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCleanBaseVolumeResponse(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCleanBaseVolumeResponse')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSyncSnapVolumeTask(object):
  """
  Attributes:
   - dstAddr
   - dstPort
   - dstPoolUuid
   - dstVolUuid
   - dstSnapUuid
   - srcAddr
   - srcPort
   - srcPoolUuid
   - srcVolUuid
   - srcSnapUuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dstAddr', None, None, ), # 1
    (2, TType.I32, 'dstPort', None, None, ), # 2
    (3, TType.STRING, 'dstPoolUuid', None, None, ), # 3
    (4, TType.STRING, 'dstVolUuid', None, None, ), # 4
    (5, TType.STRING, 'dstSnapUuid', None, None, ), # 5
    (6, TType.STRING, 'srcAddr', None, None, ), # 6
    (7, TType.I32, 'srcPort', None, None, ), # 7
    (8, TType.STRING, 'srcPoolUuid', None, None, ), # 8
    (9, TType.STRING, 'srcVolUuid', None, None, ), # 9
    (10, TType.STRING, 'srcSnapUuid', None, None, ), # 10
  )

  def __init__(self, dstAddr=None, dstPort=None, dstPoolUuid=None, dstVolUuid=None, dstSnapUuid=None, srcAddr=None, srcPort=None, srcPoolUuid=None, srcVolUuid=None, srcSnapUuid=None,):
    self.dstAddr = dstAddr
    self.dstPort = dstPort
    self.dstPoolUuid = dstPoolUuid
    self.dstVolUuid = dstVolUuid
    self.dstSnapUuid = dstSnapUuid
    self.srcAddr = srcAddr
    self.srcPort = srcPort
    self.srcPoolUuid = srcPoolUuid
    self.srcVolUuid = srcVolUuid
    self.srcSnapUuid = srcSnapUuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dstAddr = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dstPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.dstPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.dstVolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.dstSnapUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.srcAddr = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.srcPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.srcPoolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.srcVolUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.srcSnapUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSyncSnapVolumeTask')
    if self.dstAddr is not None:
      oprot.writeFieldBegin('dstAddr', TType.STRING, 1)
      oprot.writeString(self.dstAddr.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dstPort is not None:
      oprot.writeFieldBegin('dstPort', TType.I32, 2)
      oprot.writeI32(self.dstPort)
      oprot.writeFieldEnd()
    if self.dstPoolUuid is not None:
      oprot.writeFieldBegin('dstPoolUuid', TType.STRING, 3)
      oprot.writeString(self.dstPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dstVolUuid is not None:
      oprot.writeFieldBegin('dstVolUuid', TType.STRING, 4)
      oprot.writeString(self.dstVolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dstSnapUuid is not None:
      oprot.writeFieldBegin('dstSnapUuid', TType.STRING, 5)
      oprot.writeString(self.dstSnapUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcAddr is not None:
      oprot.writeFieldBegin('srcAddr', TType.STRING, 6)
      oprot.writeString(self.srcAddr.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcPort is not None:
      oprot.writeFieldBegin('srcPort', TType.I32, 7)
      oprot.writeI32(self.srcPort)
      oprot.writeFieldEnd()
    if self.srcPoolUuid is not None:
      oprot.writeFieldBegin('srcPoolUuid', TType.STRING, 8)
      oprot.writeString(self.srcPoolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcVolUuid is not None:
      oprot.writeFieldBegin('srcVolUuid', TType.STRING, 9)
      oprot.writeString(self.srcVolUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcSnapUuid is not None:
      oprot.writeFieldBegin('srcSnapUuid', TType.STRING, 10)
      oprot.writeString(self.srcSnapUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dstAddr)
    value = (value * 31) ^ hash(self.dstPort)
    value = (value * 31) ^ hash(self.dstPoolUuid)
    value = (value * 31) ^ hash(self.dstVolUuid)
    value = (value * 31) ^ hash(self.dstSnapUuid)
    value = (value * 31) ^ hash(self.srcAddr)
    value = (value * 31) ^ hash(self.srcPort)
    value = (value * 31) ^ hash(self.srcPoolUuid)
    value = (value * 31) ^ hash(self.srcVolUuid)
    value = (value * 31) ^ hash(self.srcSnapUuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSyncSnapVolumeProgress(object):
  """
  Attributes:
   - totalSize
   - syncSize
   - outputMsg
   - execSpeed
   - isFinished
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'totalSize', None, None, ), # 1
    (2, TType.I64, 'syncSize', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'outputMsg', None, None, ), # 4
    (5, TType.I64, 'execSpeed', None, None, ), # 5
    (6, TType.BOOL, 'isFinished', None, None, ), # 6
  )

  def __init__(self, totalSize=None, syncSize=None, outputMsg=None, execSpeed=None, isFinished=None,):
    self.totalSize = totalSize
    self.syncSize = syncSize
    self.outputMsg = outputMsg
    self.execSpeed = execSpeed
    self.isFinished = isFinished

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.totalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.syncSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.outputMsg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.execSpeed = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.isFinished = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSyncSnapVolumeProgress')
    if self.totalSize is not None:
      oprot.writeFieldBegin('totalSize', TType.I64, 1)
      oprot.writeI64(self.totalSize)
      oprot.writeFieldEnd()
    if self.syncSize is not None:
      oprot.writeFieldBegin('syncSize', TType.I64, 2)
      oprot.writeI64(self.syncSize)
      oprot.writeFieldEnd()
    if self.outputMsg is not None:
      oprot.writeFieldBegin('outputMsg', TType.STRING, 4)
      oprot.writeString(self.outputMsg.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.execSpeed is not None:
      oprot.writeFieldBegin('execSpeed', TType.I64, 5)
      oprot.writeI64(self.execSpeed)
      oprot.writeFieldEnd()
    if self.isFinished is not None:
      oprot.writeFieldBegin('isFinished', TType.BOOL, 6)
      oprot.writeBool(self.isFinished)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalSize)
    value = (value * 31) ^ hash(self.syncSize)
    value = (value * 31) ^ hash(self.outputMsg)
    value = (value * 31) ^ hash(self.execSpeed)
    value = (value * 31) ^ hash(self.isFinished)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
