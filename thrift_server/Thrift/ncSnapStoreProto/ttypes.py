# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCdmStoreMgmCommon.ttypes
import ncStoreCommonProto.ttypes

from thrift.transport import TTransport
all_structs = []


class ncSnapPoolSpaceInfo(object):
    """
    SnapPool容量信息

    Attributes:
     - extentSize
     - usedSize
     - freeSize
     - preallocSize
     - capacity
     - warnThreshold
     - safeThreshold

    """


    def __init__(self, extentSize=None, usedSize=None, freeSize=None, preallocSize=None, capacity=None, warnThreshold=None, safeThreshold=None,):
        self.extentSize = extentSize
        self.usedSize = usedSize
        self.freeSize = freeSize
        self.preallocSize = preallocSize
        self.capacity = capacity
        self.warnThreshold = warnThreshold
        self.safeThreshold = safeThreshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.extentSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.preallocSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.warnThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.safeThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapPoolSpaceInfo')
        if self.extentSize is not None:
            oprot.writeFieldBegin('extentSize', TType.I32, 1)
            oprot.writeI32(self.extentSize)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 2)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 3)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        if self.preallocSize is not None:
            oprot.writeFieldBegin('preallocSize', TType.I64, 4)
            oprot.writeI64(self.preallocSize)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I64, 5)
            oprot.writeI64(self.capacity)
            oprot.writeFieldEnd()
        if self.warnThreshold is not None:
            oprot.writeFieldBegin('warnThreshold', TType.I64, 6)
            oprot.writeI64(self.warnThreshold)
            oprot.writeFieldEnd()
        if self.safeThreshold is not None:
            oprot.writeFieldBegin('safeThreshold', TType.I64, 7)
            oprot.writeI64(self.safeThreshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapPoolInfo(object):
    """
    SnapPool信息

    Attributes:
     - uuid
     - friendlyName
     - metadataVolumePath
     - type
     - spaceInfo
     - mdiskInfos
     - status

    """


    def __init__(self, uuid=None, friendlyName=None, metadataVolumePath=None, type=1, spaceInfo=None, mdiskInfos=None, status=0,):
        self.uuid = uuid
        self.friendlyName = friendlyName
        self.metadataVolumePath = metadataVolumePath
        self.type = type
        self.spaceInfo = spaceInfo
        self.mdiskInfos = mdiskInfos
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.friendlyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.metadataVolumePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.spaceInfo = ncSnapPoolSpaceInfo()
                    self.spaceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
                    self.mdiskInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapPoolInfo')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.friendlyName is not None:
            oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
            oprot.writeString(self.friendlyName.encode('utf-8') if sys.version_info[0] == 2 else self.friendlyName)
            oprot.writeFieldEnd()
        if self.metadataVolumePath is not None:
            oprot.writeFieldBegin('metadataVolumePath', TType.STRING, 3)
            oprot.writeString(self.metadataVolumePath.encode('utf-8') if sys.version_info[0] == 2 else self.metadataVolumePath)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.spaceInfo is not None:
            oprot.writeFieldBegin('spaceInfo', TType.STRUCT, 5)
            self.spaceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.mdiskInfos is not None:
            oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 6)
            self.mdiskInfos.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSnapPoolInfoList(object):
    """
    SnapPool列表

    Attributes:
     - snapPoolInfoList

    """


    def __init__(self, snapPoolInfoList=None,):
        self.snapPoolInfoList = snapPoolInfoList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.snapPoolInfoList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncSnapPoolInfo()
                        _elem5.read(iprot)
                        self.snapPoolInfoList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSnapPoolInfoList')
        if self.snapPoolInfoList is not None:
            oprot.writeFieldBegin('snapPoolInfoList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.snapPoolInfoList))
            for iter6 in self.snapPoolInfoList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapPoolListRequest(object):
    """
    Attributes:
     - start
     - limit
     - hint

    """


    def __init__(self, start=0, limit=1000, hint=None,):
        self.start = start
        self.limit = limit
        self.hint = hint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I64:
                    self.start = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapPoolListRequest')
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I64, 2)
            oprot.writeI64(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 4)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapPoolListResponse(object):
    """
    Attributes:
     - snapPoolInfoList
     - total
     - hasmore

    """


    def __init__(self, snapPoolInfoList=None, total=None, hasmore=None,):
        self.snapPoolInfoList = snapPoolInfoList
        self.total = total
        self.hasmore = hasmore

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.snapPoolInfoList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncSnapPoolInfo()
                        _elem12.read(iprot)
                        self.snapPoolInfoList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.total = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasmore = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapPoolListResponse')
        if self.snapPoolInfoList is not None:
            oprot.writeFieldBegin('snapPoolInfoList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.snapPoolInfoList))
            for iter13 in self.snapPoolInfoList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I64, 2)
            oprot.writeI64(self.total)
            oprot.writeFieldEnd()
        if self.hasmore is not None:
            oprot.writeFieldBegin('hasmore', TType.BOOL, 3)
            oprot.writeBool(self.hasmore)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapPoolRequest(object):
    """
    Attributes:
     - snapPoolUuid

    """


    def __init__(self, snapPoolUuid=None,):
        self.snapPoolUuid = snapPoolUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapPoolRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapPoolResponse(object):
    """
    Attributes:
     - exists
     - snapPoolInfo

    """


    def __init__(self, exists=None, snapPoolInfo=None,):
        self.exists = exists
        self.snapPoolInfo = snapPoolInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.snapPoolInfo = ncSnapPoolInfo()
                    self.snapPoolInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapPoolResponse')
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 1)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        if self.snapPoolInfo is not None:
            oprot.writeFieldBegin('snapPoolInfo', TType.STRUCT, 2)
            self.snapPoolInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateSnapPoolRequest(object):
    """
    CreateSnapPool请求包

    Attributes:
     - extentSize
     - friendlyName
     - warnThreshold
     - safeThreshold
     - mdiskInfos
     - snapPoolUuid
     - metadataVolumePath
     - type

    """


    def __init__(self, extentSize=None, friendlyName=None, warnThreshold=None, safeThreshold=None, mdiskInfos=None, snapPoolUuid=None, metadataVolumePath=None, type=1,):
        self.extentSize = extentSize
        self.friendlyName = friendlyName
        self.warnThreshold = warnThreshold
        self.safeThreshold = safeThreshold
        self.mdiskInfos = mdiskInfos
        self.snapPoolUuid = snapPoolUuid
        self.metadataVolumePath = metadataVolumePath
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.extentSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.friendlyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.warnThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.safeThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.mdiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
                    self.mdiskInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.metadataVolumePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateSnapPoolRequest')
        if self.extentSize is not None:
            oprot.writeFieldBegin('extentSize', TType.I32, 1)
            oprot.writeI32(self.extentSize)
            oprot.writeFieldEnd()
        if self.friendlyName is not None:
            oprot.writeFieldBegin('friendlyName', TType.STRING, 2)
            oprot.writeString(self.friendlyName.encode('utf-8') if sys.version_info[0] == 2 else self.friendlyName)
            oprot.writeFieldEnd()
        if self.warnThreshold is not None:
            oprot.writeFieldBegin('warnThreshold', TType.I64, 3)
            oprot.writeI64(self.warnThreshold)
            oprot.writeFieldEnd()
        if self.safeThreshold is not None:
            oprot.writeFieldBegin('safeThreshold', TType.I64, 4)
            oprot.writeI64(self.safeThreshold)
            oprot.writeFieldEnd()
        if self.mdiskInfos is not None:
            oprot.writeFieldBegin('mdiskInfos', TType.STRUCT, 5)
            self.mdiskInfos.write(oprot)
            oprot.writeFieldEnd()
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 6)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.metadataVolumePath is not None:
            oprot.writeFieldBegin('metadataVolumePath', TType.STRING, 7)
            oprot.writeString(self.metadataVolumePath.encode('utf-8') if sys.version_info[0] == 2 else self.metadataVolumePath)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 8)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateSnapPoolResponse(object):
    """
    CreateSnapPool响应包

    Attributes:
     - snapPoolUuid

    """


    def __init__(self, snapPoolUuid=None,):
        self.snapPoolUuid = snapPoolUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateSnapPoolResponse')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncModifySnapPoolRequest(object):
    """
    ModifySnapPool请求包

    Attributes:
     - snapPoolUuid
     - warnThreshold
     - safeThreshold
     - addMDiskInfos

    """


    def __init__(self, snapPoolUuid=None, warnThreshold=None, safeThreshold=None, addMDiskInfos=None,):
        self.snapPoolUuid = snapPoolUuid
        self.warnThreshold = warnThreshold
        self.safeThreshold = safeThreshold
        self.addMDiskInfos = addMDiskInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.warnThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.safeThreshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.addMDiskInfos = ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList()
                    self.addMDiskInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncModifySnapPoolRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.warnThreshold is not None:
            oprot.writeFieldBegin('warnThreshold', TType.I64, 2)
            oprot.writeI64(self.warnThreshold)
            oprot.writeFieldEnd()
        if self.safeThreshold is not None:
            oprot.writeFieldBegin('safeThreshold', TType.I64, 3)
            oprot.writeI64(self.safeThreshold)
            oprot.writeFieldEnd()
        if self.addMDiskInfos is not None:
            oprot.writeFieldBegin('addMDiskInfos', TType.STRUCT, 4)
            self.addMDiskInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateBaseVolumeRequest(object):
    """
    CreateBaseVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolInfos

    """


    def __init__(self, snapPoolUuid=None, baseVolInfos=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolInfos = baseVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
                    self.baseVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateBaseVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolInfos is not None:
            oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 2)
            self.baseVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateBaseVolumeResponse(object):
    """
    CreateBaseVolume响应包

    Attributes:
     - baseVolInfos

    """


    def __init__(self, baseVolInfos=None,):
        self.baseVolInfos = baseVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
                    self.baseVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateBaseVolumeResponse')
        if self.baseVolInfos is not None:
            oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 1)
            self.baseVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDelBaseVolumeRequest(object):
    """
    DelBaseVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolInfos

    """


    def __init__(self, snapPoolUuid=None, baseVolInfos=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolInfos = baseVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
                    self.baseVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDelBaseVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolInfos is not None:
            oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 2)
            self.baseVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateSnapVolumeRequest(object):
    """
    CreateSnapVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - snapVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.snapVolumeUuid = snapVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateSnapVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.snapVolumeUuid is not None:
            oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
            oprot.writeString(self.snapVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateSnapVolumeResponse(object):
    """
    CreateSnapVolume响应包

    Attributes:
     - snapVolInfo

    """


    def __init__(self, snapVolInfo=None,):
        self.snapVolInfo = snapVolInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.snapVolInfo = ncStoreCommonProto.ttypes.ncSnapVolumeInfo()
                    self.snapVolInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateSnapVolumeResponse')
        if self.snapVolInfo is not None:
            oprot.writeFieldBegin('snapVolInfo', TType.STRUCT, 1)
            self.snapVolInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDelSnapVolumeRequest(object):
    """
    DelSnapVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - snapVolInfos

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolInfos=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.snapVolInfos = snapVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.snapVolInfos = ncStoreCommonProto.ttypes.ncSnapVolumeInfoList()
                    self.snapVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDelSnapVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.snapVolInfos is not None:
            oprot.writeFieldBegin('snapVolInfos', TType.STRUCT, 3)
            self.snapVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateCloneVolumeRequest(object):
    """
    CreateCloneVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - snapVolumeUuid
     - cloneVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None, cloneVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.snapVolumeUuid = snapVolumeUuid
        self.cloneVolumeUuid = cloneVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cloneVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateCloneVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.snapVolumeUuid is not None:
            oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
            oprot.writeString(self.snapVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapVolumeUuid)
            oprot.writeFieldEnd()
        if self.cloneVolumeUuid is not None:
            oprot.writeFieldBegin('cloneVolumeUuid', TType.STRING, 4)
            oprot.writeString(self.cloneVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.cloneVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCreateCloneVolumeResponse(object):
    """
    CreateCloneVolume响应包

    Attributes:
     - cloneVolInfo

    """


    def __init__(self, cloneVolInfo=None,):
        self.cloneVolInfo = cloneVolInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloneVolInfo = ncStoreCommonProto.ttypes.ncCloneVolumeInfo()
                    self.cloneVolInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCreateCloneVolumeResponse')
        if self.cloneVolInfo is not None:
            oprot.writeFieldBegin('cloneVolInfo', TType.STRUCT, 1)
            self.cloneVolInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDelCloneVolumeRequest(object):
    """
    DelCloneVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - snapVolumeUuid
     - cloneVolInfos

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None, cloneVolInfos=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.snapVolumeUuid = snapVolumeUuid
        self.cloneVolInfos = cloneVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.cloneVolInfos = ncStoreCommonProto.ttypes.ncCloneVolumeInfoList()
                    self.cloneVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDelCloneVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.snapVolumeUuid is not None:
            oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
            oprot.writeString(self.snapVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapVolumeUuid)
            oprot.writeFieldEnd()
        if self.cloneVolInfos is not None:
            oprot.writeFieldBegin('cloneVolInfos', TType.STRUCT, 4)
            self.cloneVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStatBaseVolumeRequest(object):
    """
    StatBaseVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStatBaseVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStatSnapVolumeRequest(object):
    """
    StatSnapVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - snapVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, snapVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.snapVolumeUuid = snapVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStatSnapVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.snapVolumeUuid is not None:
            oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 3)
            oprot.writeString(self.snapVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStatCloneVolumeRequest(object):
    """
    StatCloneVolume请求包

    Attributes:
     - snapPoolUuid
     - baseVolumeUuid
     - cloneVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None, cloneVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid
        self.cloneVolumeUuid = cloneVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cloneVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStatCloneVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        if self.cloneVolumeUuid is not None:
            oprot.writeFieldBegin('cloneVolumeUuid', TType.STRING, 3)
            oprot.writeString(self.cloneVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.cloneVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetBaseVolumeListRequest(object):
    """
    Attributes:
     - snapPoolUuid
     - baseVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetBaseVolumeListRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetBaseVolumeListResponse(object):
    """
    Attributes:
     - baseVolInfos

    """


    def __init__(self, baseVolInfos=None,):
        self.baseVolInfos = baseVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseVolInfos = ncStoreCommonProto.ttypes.ncBaseVolumeInfoList()
                    self.baseVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetBaseVolumeListResponse')
        if self.baseVolInfos is not None:
            oprot.writeFieldBegin('baseVolInfos', TType.STRUCT, 1)
            self.baseVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapVolumeListRequest(object):
    """
    Attributes:
     - snapPoolUuid
     - baseVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapVolumeListRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSnapVolumeListResponse(object):
    """
    Attributes:
     - snapVolInfos

    """


    def __init__(self, snapVolInfos=None,):
        self.snapVolInfos = snapVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.snapVolInfos = ncStoreCommonProto.ttypes.ncSnapVolumeInfoList()
                    self.snapVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSnapVolumeListResponse')
        if self.snapVolInfos is not None:
            oprot.writeFieldBegin('snapVolInfos', TType.STRUCT, 1)
            self.snapVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetCloneVolumeListRequest(object):
    """
    Attributes:
     - snapPoolUuid
     - baseVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetCloneVolumeListRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetCloneVolumeListResponse(object):
    """
    Attributes:
     - cloneVolInfos

    """


    def __init__(self, cloneVolInfos=None,):
        self.cloneVolInfos = cloneVolInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloneVolInfos = ncStoreCommonProto.ttypes.ncCloneVolumeInfoList()
                    self.cloneVolInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetCloneVolumeListResponse')
        if self.cloneVolInfos is not None:
            oprot.writeFieldBegin('cloneVolInfos', TType.STRUCT, 1)
            self.cloneVolInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCleanBaseVolumeRequest(object):
    """
    Attributes:
     - snapPoolUuid
     - baseVolumeUuid

    """


    def __init__(self, snapPoolUuid=None, baseVolumeUuid=None,):
        self.snapPoolUuid = snapPoolUuid
        self.baseVolumeUuid = baseVolumeUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.baseVolumeUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCleanBaseVolumeRequest')
        if self.snapPoolUuid is not None:
            oprot.writeFieldBegin('snapPoolUuid', TType.STRING, 1)
            oprot.writeString(self.snapPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.snapPoolUuid)
            oprot.writeFieldEnd()
        if self.baseVolumeUuid is not None:
            oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 2)
            oprot.writeString(self.baseVolumeUuid.encode('utf-8') if sys.version_info[0] == 2 else self.baseVolumeUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCleanBaseVolumeResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCleanBaseVolumeResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSyncSnapVolumeTask(object):
    """
    Attributes:
     - dstAddr
     - dstPort
     - dstPoolUuid
     - dstVolUuid
     - dstSnapUuid
     - srcAddr
     - srcPort
     - srcPoolUuid
     - srcVolUuid
     - srcSnapUuid
     - proxyIp
     - proxyPort
     - proxyPlanarNetName

    """


    def __init__(self, dstAddr=None, dstPort=None, dstPoolUuid=None, dstVolUuid=None, dstSnapUuid=None, srcAddr=None, srcPort=None, srcPoolUuid=None, srcVolUuid=None, srcSnapUuid=None, proxyIp=None, proxyPort=None, proxyPlanarNetName=None,):
        self.dstAddr = dstAddr
        self.dstPort = dstPort
        self.dstPoolUuid = dstPoolUuid
        self.dstVolUuid = dstVolUuid
        self.dstSnapUuid = dstSnapUuid
        self.srcAddr = srcAddr
        self.srcPort = srcPort
        self.srcPoolUuid = srcPoolUuid
        self.srcVolUuid = srcVolUuid
        self.srcSnapUuid = srcSnapUuid
        self.proxyIp = proxyIp
        self.proxyPort = proxyPort
        self.proxyPlanarNetName = proxyPlanarNetName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dstAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dstPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dstPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dstVolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dstSnapUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.srcAddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.srcPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.srcPoolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.srcVolUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.srcSnapUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.proxyIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.proxyPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.proxyPlanarNetName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSyncSnapVolumeTask')
        if self.dstAddr is not None:
            oprot.writeFieldBegin('dstAddr', TType.STRING, 1)
            oprot.writeString(self.dstAddr.encode('utf-8') if sys.version_info[0] == 2 else self.dstAddr)
            oprot.writeFieldEnd()
        if self.dstPort is not None:
            oprot.writeFieldBegin('dstPort', TType.I32, 2)
            oprot.writeI32(self.dstPort)
            oprot.writeFieldEnd()
        if self.dstPoolUuid is not None:
            oprot.writeFieldBegin('dstPoolUuid', TType.STRING, 3)
            oprot.writeString(self.dstPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.dstPoolUuid)
            oprot.writeFieldEnd()
        if self.dstVolUuid is not None:
            oprot.writeFieldBegin('dstVolUuid', TType.STRING, 4)
            oprot.writeString(self.dstVolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.dstVolUuid)
            oprot.writeFieldEnd()
        if self.dstSnapUuid is not None:
            oprot.writeFieldBegin('dstSnapUuid', TType.STRING, 5)
            oprot.writeString(self.dstSnapUuid.encode('utf-8') if sys.version_info[0] == 2 else self.dstSnapUuid)
            oprot.writeFieldEnd()
        if self.srcAddr is not None:
            oprot.writeFieldBegin('srcAddr', TType.STRING, 6)
            oprot.writeString(self.srcAddr.encode('utf-8') if sys.version_info[0] == 2 else self.srcAddr)
            oprot.writeFieldEnd()
        if self.srcPort is not None:
            oprot.writeFieldBegin('srcPort', TType.I32, 7)
            oprot.writeI32(self.srcPort)
            oprot.writeFieldEnd()
        if self.srcPoolUuid is not None:
            oprot.writeFieldBegin('srcPoolUuid', TType.STRING, 8)
            oprot.writeString(self.srcPoolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.srcPoolUuid)
            oprot.writeFieldEnd()
        if self.srcVolUuid is not None:
            oprot.writeFieldBegin('srcVolUuid', TType.STRING, 9)
            oprot.writeString(self.srcVolUuid.encode('utf-8') if sys.version_info[0] == 2 else self.srcVolUuid)
            oprot.writeFieldEnd()
        if self.srcSnapUuid is not None:
            oprot.writeFieldBegin('srcSnapUuid', TType.STRING, 10)
            oprot.writeString(self.srcSnapUuid.encode('utf-8') if sys.version_info[0] == 2 else self.srcSnapUuid)
            oprot.writeFieldEnd()
        if self.proxyIp is not None:
            oprot.writeFieldBegin('proxyIp', TType.STRING, 11)
            oprot.writeString(self.proxyIp.encode('utf-8') if sys.version_info[0] == 2 else self.proxyIp)
            oprot.writeFieldEnd()
        if self.proxyPort is not None:
            oprot.writeFieldBegin('proxyPort', TType.I32, 12)
            oprot.writeI32(self.proxyPort)
            oprot.writeFieldEnd()
        if self.proxyPlanarNetName is not None:
            oprot.writeFieldBegin('proxyPlanarNetName', TType.STRING, 13)
            oprot.writeString(self.proxyPlanarNetName.encode('utf-8') if sys.version_info[0] == 2 else self.proxyPlanarNetName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSyncSnapVolumeProgress(object):
    """
    Attributes:
     - totalSize
     - syncSize
     - outputMsg
     - execSpeed
     - isFinished

    """


    def __init__(self, totalSize=None, syncSize=None, outputMsg=None, execSpeed=None, isFinished=None,):
        self.totalSize = totalSize
        self.syncSize = syncSize
        self.outputMsg = outputMsg
        self.execSpeed = execSpeed
        self.isFinished = isFinished

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.syncSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.outputMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.execSpeed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSyncSnapVolumeProgress')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.syncSize is not None:
            oprot.writeFieldBegin('syncSize', TType.I64, 2)
            oprot.writeI64(self.syncSize)
            oprot.writeFieldEnd()
        if self.outputMsg is not None:
            oprot.writeFieldBegin('outputMsg', TType.STRING, 4)
            oprot.writeString(self.outputMsg.encode('utf-8') if sys.version_info[0] == 2 else self.outputMsg)
            oprot.writeFieldEnd()
        if self.execSpeed is not None:
            oprot.writeFieldBegin('execSpeed', TType.I64, 5)
            oprot.writeI64(self.execSpeed)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 6)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncSnapPoolSpaceInfo)
ncSnapPoolSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'extentSize', None, None, ),  # 1
    (2, TType.I64, 'usedSize', None, None, ),  # 2
    (3, TType.I64, 'freeSize', None, None, ),  # 3
    (4, TType.I64, 'preallocSize', None, None, ),  # 4
    (5, TType.I64, 'capacity', None, None, ),  # 5
    (6, TType.I64, 'warnThreshold', None, None, ),  # 6
    (7, TType.I64, 'safeThreshold', None, None, ),  # 7
)
all_structs.append(ncSnapPoolInfo)
ncSnapPoolInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'friendlyName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'metadataVolumePath', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, 1, ),  # 4
    (5, TType.STRUCT, 'spaceInfo', [ncSnapPoolSpaceInfo, None], None, ),  # 5
    (6, TType.STRUCT, 'mdiskInfos', [ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, None], None, ),  # 6
    (7, TType.I32, 'status', None, 0, ),  # 7
)
all_structs.append(ncSnapPoolInfoList)
ncSnapPoolInfoList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'snapPoolInfoList', (TType.STRUCT, [ncSnapPoolInfo, None], False), None, ),  # 1
)
all_structs.append(ncGetSnapPoolListRequest)
ncGetSnapPoolListRequest.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.I64, 'start', None, 0, ),  # 2
    (3, TType.I32, 'limit', None, 1000, ),  # 3
    (4, TType.STRING, 'hint', 'UTF8', None, ),  # 4
)
all_structs.append(ncGetSnapPoolListResponse)
ncGetSnapPoolListResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'snapPoolInfoList', (TType.STRUCT, [ncSnapPoolInfo, None], False), None, ),  # 1
    (2, TType.I64, 'total', None, None, ),  # 2
    (3, TType.BOOL, 'hasmore', None, None, ),  # 3
)
all_structs.append(ncGetSnapPoolRequest)
ncGetSnapPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
)
all_structs.append(ncGetSnapPoolResponse)
ncGetSnapPoolResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'exists', None, None, ),  # 1
    (2, TType.STRUCT, 'snapPoolInfo', [ncSnapPoolInfo, None], None, ),  # 2
)
all_structs.append(ncCreateSnapPoolRequest)
ncCreateSnapPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'extentSize', None, None, ),  # 1
    (2, TType.STRING, 'friendlyName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'warnThreshold', None, None, ),  # 3
    (4, TType.I64, 'safeThreshold', None, None, ),  # 4
    (5, TType.STRUCT, 'mdiskInfos', [ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, None], None, ),  # 5
    (6, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'metadataVolumePath', 'UTF8', None, ),  # 7
    (8, TType.I32, 'type', None, 1, ),  # 8
)
all_structs.append(ncCreateSnapPoolResponse)
ncCreateSnapPoolResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
)
all_structs.append(ncModifySnapPoolRequest)
ncModifySnapPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'warnThreshold', None, None, ),  # 2
    (3, TType.I64, 'safeThreshold', None, None, ),  # 3
    (4, TType.STRUCT, 'addMDiskInfos', [ncCdmStoreMgmCommon.ttypes.ncMDiskInfoList, None], None, ),  # 4
)
all_structs.append(ncCreateBaseVolumeRequest)
ncCreateBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'baseVolInfos', [ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, None], None, ),  # 2
)
all_structs.append(ncCreateBaseVolumeResponse)
ncCreateBaseVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseVolInfos', [ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, None], None, ),  # 1
)
all_structs.append(ncDelBaseVolumeRequest)
ncDelBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'baseVolInfos', [ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, None], None, ),  # 2
)
all_structs.append(ncCreateSnapVolumeRequest)
ncCreateSnapVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'snapVolumeUuid', 'UTF8', None, ),  # 3
)
all_structs.append(ncCreateSnapVolumeResponse)
ncCreateSnapVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'snapVolInfo', [ncStoreCommonProto.ttypes.ncSnapVolumeInfo, None], None, ),  # 1
)
all_structs.append(ncDelSnapVolumeRequest)
ncDelSnapVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'snapVolInfos', [ncStoreCommonProto.ttypes.ncSnapVolumeInfoList, None], None, ),  # 3
)
all_structs.append(ncCreateCloneVolumeRequest)
ncCreateCloneVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'snapVolumeUuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'cloneVolumeUuid', 'UTF8', None, ),  # 4
)
all_structs.append(ncCreateCloneVolumeResponse)
ncCreateCloneVolumeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloneVolInfo', [ncStoreCommonProto.ttypes.ncCloneVolumeInfo, None], None, ),  # 1
)
all_structs.append(ncDelCloneVolumeRequest)
ncDelCloneVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'snapVolumeUuid', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'cloneVolInfos', [ncStoreCommonProto.ttypes.ncCloneVolumeInfoList, None], None, ),  # 4
)
all_structs.append(ncStatBaseVolumeRequest)
ncStatBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncStatSnapVolumeRequest)
ncStatSnapVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'snapVolumeUuid', 'UTF8', None, ),  # 3
)
all_structs.append(ncStatCloneVolumeRequest)
ncStatCloneVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cloneVolumeUuid', 'UTF8', None, ),  # 3
)
all_structs.append(ncGetBaseVolumeListRequest)
ncGetBaseVolumeListRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncGetBaseVolumeListResponse)
ncGetBaseVolumeListResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseVolInfos', [ncStoreCommonProto.ttypes.ncBaseVolumeInfoList, None], None, ),  # 1
)
all_structs.append(ncGetSnapVolumeListRequest)
ncGetSnapVolumeListRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncGetSnapVolumeListResponse)
ncGetSnapVolumeListResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'snapVolInfos', [ncStoreCommonProto.ttypes.ncSnapVolumeInfoList, None], None, ),  # 1
)
all_structs.append(ncGetCloneVolumeListRequest)
ncGetCloneVolumeListRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncGetCloneVolumeListResponse)
ncGetCloneVolumeListResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloneVolInfos', [ncStoreCommonProto.ttypes.ncCloneVolumeInfoList, None], None, ),  # 1
)
all_structs.append(ncCleanBaseVolumeRequest)
ncCleanBaseVolumeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'snapPoolUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'baseVolumeUuid', 'UTF8', None, ),  # 2
)
all_structs.append(ncCleanBaseVolumeResponse)
ncCleanBaseVolumeResponse.thrift_spec = (
)
all_structs.append(ncSyncSnapVolumeTask)
ncSyncSnapVolumeTask.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dstAddr', 'UTF8', None, ),  # 1
    (2, TType.I32, 'dstPort', None, None, ),  # 2
    (3, TType.STRING, 'dstPoolUuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dstVolUuid', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dstSnapUuid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'srcAddr', 'UTF8', None, ),  # 6
    (7, TType.I32, 'srcPort', None, None, ),  # 7
    (8, TType.STRING, 'srcPoolUuid', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'srcVolUuid', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'srcSnapUuid', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'proxyIp', 'UTF8', None, ),  # 11
    (12, TType.I32, 'proxyPort', None, None, ),  # 12
    (13, TType.STRING, 'proxyPlanarNetName', 'UTF8', None, ),  # 13
)
all_structs.append(ncSyncSnapVolumeProgress)
ncSyncSnapVolumeProgress.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.I64, 'syncSize', None, None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'outputMsg', 'UTF8', None, ),  # 4
    (5, TType.I64, 'execSpeed', None, None, ),  # 5
    (6, TType.BOOL, 'isFinished', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
