#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncSnapSyncSvc import ncSnapSyncSvc
from ncSnapSyncSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void microprobe()')
    print('   get_thrift_methods()')
    print('  ncSnapSyncCertifyResult certify_job_info(ncSnapSyncCertifyRequest req)')
    print('   get_job_certified_results( reqs, bool throwE)')
    print('   get_cerified_source_jobs( req)')
    print('  void remove_job_certified_infos( reqs)')
    print('   get_jobs_status( reqs)')
    print('  void commit_job(ncEEFJobParams param)')
    print('  void stop_job(ncEEFBase param)')
    print('  void pause_job(ncEEFBase param)')
    print('  bool check_job(string execId)')
    print('  void reset_job_param(ncEEFJobParams param)')
    print('   get_app_job_reverse_extra_infos(string appJobId)')
    print('  void report_app_jobs_info( reqs)')
    print('  string get_data_for_ams(string kwargs)')
    print('   get_remote_jobs_to_log(string userName)')
    print('  string get_origin_job_id(string reverseId)')
    print('  ncSnapSyncJobCountInfo get_job_count_info(i32 userRole, string userName)')
    print('   check_user_has_data( user_list)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncSnapSyncSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
    if len(args) != 0:
        print('microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.microprobe())

elif cmd == 'get_thrift_methods':
    if len(args) != 0:
        print('get_thrift_methods requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_thrift_methods())

elif cmd == 'certify_job_info':
    if len(args) != 1:
        print('certify_job_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.certify_job_info(eval(args[0]),))

elif cmd == 'get_job_certified_results':
    if len(args) != 2:
        print('get_job_certified_results requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_job_certified_results(eval(args[0]), eval(args[1]),))

elif cmd == 'get_cerified_source_jobs':
    if len(args) != 1:
        print('get_cerified_source_jobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cerified_source_jobs(eval(args[0]),))

elif cmd == 'remove_job_certified_infos':
    if len(args) != 1:
        print('remove_job_certified_infos requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_job_certified_infos(eval(args[0]),))

elif cmd == 'get_jobs_status':
    if len(args) != 1:
        print('get_jobs_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_jobs_status(eval(args[0]),))

elif cmd == 'commit_job':
    if len(args) != 1:
        print('commit_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.commit_job(eval(args[0]),))

elif cmd == 'stop_job':
    if len(args) != 1:
        print('stop_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_job(eval(args[0]),))

elif cmd == 'pause_job':
    if len(args) != 1:
        print('pause_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.pause_job(eval(args[0]),))

elif cmd == 'check_job':
    if len(args) != 1:
        print('check_job requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_job(args[0],))

elif cmd == 'reset_job_param':
    if len(args) != 1:
        print('reset_job_param requires 1 args')
        sys.exit(1)
    pp.pprint(client.reset_job_param(eval(args[0]),))

elif cmd == 'get_app_job_reverse_extra_infos':
    if len(args) != 1:
        print('get_app_job_reverse_extra_infos requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_app_job_reverse_extra_infos(args[0],))

elif cmd == 'report_app_jobs_info':
    if len(args) != 1:
        print('report_app_jobs_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.report_app_jobs_info(eval(args[0]),))

elif cmd == 'get_data_for_ams':
    if len(args) != 1:
        print('get_data_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'get_remote_jobs_to_log':
    if len(args) != 1:
        print('get_remote_jobs_to_log requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_remote_jobs_to_log(args[0],))

elif cmd == 'get_origin_job_id':
    if len(args) != 1:
        print('get_origin_job_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_origin_job_id(args[0],))

elif cmd == 'get_job_count_info':
    if len(args) != 2:
        print('get_job_count_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_job_count_info(eval(args[0]), args[1],))

elif cmd == 'check_user_has_data':
    if len(args) != 1:
        print('check_user_has_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_user_has_data(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
