#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncKeyMgmSvc import ncKeyMgmSvc
from ncKeyMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string GenerateKey()')
  print('  string Encrypt(string key)')
  print('  string Decrypt(string dKey)')
  print('   GetEncryptMainKeys()')
  print('   GetOriginalRootKeys()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncKeyMgmSvc.Client(protocol)
transport.open()

if cmd == 'GenerateKey':
  if len(args) != 0:
    print('GenerateKey requires 0 args')
    sys.exit(1)
  pp.pprint(client.GenerateKey())

elif cmd == 'Encrypt':
  if len(args) != 1:
    print('Encrypt requires 1 args')
    sys.exit(1)
  pp.pprint(client.Encrypt(args[0],))

elif cmd == 'Decrypt':
  if len(args) != 1:
    print('Decrypt requires 1 args')
    sys.exit(1)
  pp.pprint(client.Decrypt(args[0],))

elif cmd == 'GetEncryptMainKeys':
  if len(args) != 0:
    print('GetEncryptMainKeys requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetEncryptMainKeys())

elif cmd == 'GetOriginalRootKeys':
  if len(args) != 0:
    print('GetOriginalRootKeys requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetOriginalRootKeys())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
