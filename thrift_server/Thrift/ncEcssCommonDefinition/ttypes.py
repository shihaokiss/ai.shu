#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncEcssVolumeInfo(object):
  """
  Attributes:
   - volumePath
   - volumeTotalSize
   - usedSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'volumePath', None, None, ), # 1
    (2, TType.I64, 'volumeTotalSize', None, None, ), # 2
    (3, TType.I64, 'usedSize', None, None, ), # 3
  )

  def __init__(self, volumePath=None, volumeTotalSize=None, usedSize=None,):
    self.volumePath = volumePath
    self.volumeTotalSize = volumeTotalSize
    self.usedSize = usedSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.volumePath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.volumeTotalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.usedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEcssVolumeInfo')
    if self.volumePath is not None:
      oprot.writeFieldBegin('volumePath', TType.STRING, 1)
      oprot.writeString(self.volumePath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeTotalSize is not None:
      oprot.writeFieldBegin('volumeTotalSize', TType.I64, 2)
      oprot.writeI64(self.volumeTotalSize)
      oprot.writeFieldEnd()
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.I64, 3)
      oprot.writeI64(self.usedSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.volumePath)
    value = (value * 31) ^ hash(self.volumeTotalSize)
    value = (value * 31) ^ hash(self.usedSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCloudStorageInfo(object):
  """
  云存储信息

  Attributes:
   - url
   - accessKey
   - secretKey
   - bucketInfos
   - needSSL
   - cloudType
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'accessKey', None, None, ), # 2
    (3, TType.STRING, 'secretKey', None, None, ), # 3
    (4, TType.LIST, 'bucketInfos', (TType.STRING,None), None, ), # 4
    (5, TType.BOOL, 'needSSL', None, None, ), # 5
    (6, TType.STRING, 'cloudType', None, None, ), # 6
    (7, TType.STRING, 'userId', None, None, ), # 7
  )

  def __init__(self, url=None, accessKey=None, secretKey=None, bucketInfos=None, needSSL=None, cloudType=None, userId=None,):
    self.url = url
    self.accessKey = accessKey
    self.secretKey = secretKey
    self.bucketInfos = bucketInfos
    self.needSSL = needSSL
    self.cloudType = cloudType
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.accessKey = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.secretKey = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.bucketInfos = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.bucketInfos.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.needSSL = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cloudType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCloudStorageInfo')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.accessKey is not None:
      oprot.writeFieldBegin('accessKey', TType.STRING, 2)
      oprot.writeString(self.accessKey.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.secretKey is not None:
      oprot.writeFieldBegin('secretKey', TType.STRING, 3)
      oprot.writeString(self.secretKey.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.bucketInfos is not None:
      oprot.writeFieldBegin('bucketInfos', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.bucketInfos))
      for iter6 in self.bucketInfos:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.needSSL is not None:
      oprot.writeFieldBegin('needSSL', TType.BOOL, 5)
      oprot.writeBool(self.needSSL)
      oprot.writeFieldEnd()
    if self.cloudType is not None:
      oprot.writeFieldBegin('cloudType', TType.STRING, 6)
      oprot.writeString(self.cloudType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 7)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.accessKey)
    value = (value * 31) ^ hash(self.secretKey)
    value = (value * 31) ^ hash(self.bucketInfos)
    value = (value * 31) ^ hash(self.needSSL)
    value = (value * 31) ^ hash(self.cloudType)
    value = (value * 31) ^ hash(self.userId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTaskSetInfo(object):
  """
  D2D2C任务集信息

  Attributes:
   - taskSetSign
   - taskSetName
   - mediaVip
   - isDeleted
   - taskSetId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'taskSetSign', None, None, ), # 1
    (2, TType.STRING, 'taskSetName', None, None, ), # 2
    (3, TType.STRING, 'mediaVip', None, None, ), # 3
    (4, TType.BOOL, 'isDeleted', None, None, ), # 4
    (5, TType.STRING, 'taskSetId', None, None, ), # 5
  )

  def __init__(self, taskSetSign=None, taskSetName=None, mediaVip=None, isDeleted=None, taskSetId=None,):
    self.taskSetSign = taskSetSign
    self.taskSetName = taskSetName
    self.mediaVip = mediaVip
    self.isDeleted = isDeleted
    self.taskSetId = taskSetId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskSetName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mediaVip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.isDeleted = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.taskSetId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTaskSetInfo')
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 1)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.taskSetName is not None:
      oprot.writeFieldBegin('taskSetName', TType.STRING, 2)
      oprot.writeString(self.taskSetName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.mediaVip is not None:
      oprot.writeFieldBegin('mediaVip', TType.STRING, 3)
      oprot.writeString(self.mediaVip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isDeleted is not None:
      oprot.writeFieldBegin('isDeleted', TType.BOOL, 4)
      oprot.writeBool(self.isDeleted)
      oprot.writeFieldEnd()
    if self.taskSetId is not None:
      oprot.writeFieldBegin('taskSetId', TType.STRING, 5)
      oprot.writeString(self.taskSetId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskSetSign)
    value = (value * 31) ^ hash(self.taskSetName)
    value = (value * 31) ^ hash(self.mediaVip)
    value = (value * 31) ^ hash(self.isDeleted)
    value = (value * 31) ^ hash(self.taskSetId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTaskSetInfoSet(object):
  """
  D2D2C任务集信息集合

  Attributes:
   - infos
   - totalNum
   - requestId
   - finished
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ncTaskSetInfo, ncTaskSetInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'totalNum', None, None, ), # 2
    (3, TType.STRING, 'requestId', None, None, ), # 3
    (4, TType.BOOL, 'finished', None, None, ), # 4
  )

  def __init__(self, infos=None, totalNum=None, requestId=None, finished=None,):
    self.infos = infos
    self.totalNum = totalNum
    self.requestId = requestId
    self.finished = finished

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncTaskSetInfo()
            _elem12.read(iprot)
            self.infos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTaskSetInfoSet')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter13 in self.infos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 2)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 3)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 4)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.infos)
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.finished)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTaskSetRequest(object):
  """
  D2D2C任务集请求信息

  Attributes:
   - requestId
   - index
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.I64, 'index', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
  )

  def __init__(self, requestId=None, index=None, count=None,):
    self.requestId = requestId
    self.index = index
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTaskSetRequest')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 2)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBucketInfoReply(object):
  """
  Attributes:
   - finished
   - infos
   - requestId
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'finished', None, None, ), # 1
    (2, TType.LIST, 'infos', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'requestId', None, None, ), # 3
  )

  def __init__(self, finished=None, infos=None, requestId=None,):
    self.finished = finished
    self.infos = infos
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.infos = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString().decode('utf-8')
            self.infos.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBucketInfoReply')
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 1)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.infos))
      for iter20 in self.infos:
        oprot.writeString(iter20.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 3)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.finished)
    value = (value * 31) ^ hash(self.infos)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
