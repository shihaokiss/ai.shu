#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncFPPoolInfo(object):
  """
  Attributes:
   - poolName
   - poolType
   - poolGuid
   - nodeIPs
   - minSize
   - maxSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'poolName', None, None, ), # 1
    (2, TType.STRING, 'poolType', None, None, ), # 2
    (3, TType.STRING, 'poolGuid', None, None, ), # 3
    (4, TType.LIST, 'nodeIPs', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'minSize', None, None, ), # 5
    (6, TType.I32, 'maxSize', None, None, ), # 6
  )

  def __init__(self, poolName=None, poolType=None, poolGuid=None, nodeIPs=None, minSize=None, maxSize=None,):
    self.poolName = poolName
    self.poolType = poolType
    self.poolGuid = poolGuid
    self.nodeIPs = nodeIPs
    self.minSize = minSize
    self.maxSize = maxSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.poolName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.poolType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.poolGuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.nodeIPs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.nodeIPs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.minSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.maxSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFPPoolInfo')
    if self.poolName is not None:
      oprot.writeFieldBegin('poolName', TType.STRING, 1)
      oprot.writeString(self.poolName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolType is not None:
      oprot.writeFieldBegin('poolType', TType.STRING, 2)
      oprot.writeString(self.poolType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolGuid is not None:
      oprot.writeFieldBegin('poolGuid', TType.STRING, 3)
      oprot.writeString(self.poolGuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodeIPs is not None:
      oprot.writeFieldBegin('nodeIPs', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.nodeIPs))
      for iter6 in self.nodeIPs:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.minSize is not None:
      oprot.writeFieldBegin('minSize', TType.I32, 5)
      oprot.writeI32(self.minSize)
      oprot.writeFieldEnd()
    if self.maxSize is not None:
      oprot.writeFieldBegin('maxSize', TType.I32, 6)
      oprot.writeI32(self.maxSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.poolName)
    value = (value * 31) ^ hash(self.poolType)
    value = (value * 31) ^ hash(self.poolGuid)
    value = (value * 31) ^ hash(self.nodeIPs)
    value = (value * 31) ^ hash(self.minSize)
    value = (value * 31) ^ hash(self.maxSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDDCacheInfo(object):
  """
  Attributes:
   - ddcachename
   - ddcachepath
   - allsize
   - spacesize
   - usesize
   - diskspacesize
   - isfault
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ddcachename', None, None, ), # 1
    (2, TType.STRING, 'ddcachepath', None, None, ), # 2
    (3, TType.I64, 'allsize', None, None, ), # 3
    (4, TType.I64, 'spacesize', None, None, ), # 4
    (5, TType.I64, 'usesize', None, None, ), # 5
    (6, TType.I64, 'diskspacesize', None, None, ), # 6
    (7, TType.BOOL, 'isfault', None, None, ), # 7
  )

  def __init__(self, ddcachename=None, ddcachepath=None, allsize=None, spacesize=None, usesize=None, diskspacesize=None, isfault=None,):
    self.ddcachename = ddcachename
    self.ddcachepath = ddcachepath
    self.allsize = allsize
    self.spacesize = spacesize
    self.usesize = usesize
    self.diskspacesize = diskspacesize
    self.isfault = isfault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ddcachename = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ddcachepath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.allsize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.spacesize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.usesize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.diskspacesize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.isfault = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDDCacheInfo')
    if self.ddcachename is not None:
      oprot.writeFieldBegin('ddcachename', TType.STRING, 1)
      oprot.writeString(self.ddcachename.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ddcachepath is not None:
      oprot.writeFieldBegin('ddcachepath', TType.STRING, 2)
      oprot.writeString(self.ddcachepath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.allsize is not None:
      oprot.writeFieldBegin('allsize', TType.I64, 3)
      oprot.writeI64(self.allsize)
      oprot.writeFieldEnd()
    if self.spacesize is not None:
      oprot.writeFieldBegin('spacesize', TType.I64, 4)
      oprot.writeI64(self.spacesize)
      oprot.writeFieldEnd()
    if self.usesize is not None:
      oprot.writeFieldBegin('usesize', TType.I64, 5)
      oprot.writeI64(self.usesize)
      oprot.writeFieldEnd()
    if self.diskspacesize is not None:
      oprot.writeFieldBegin('diskspacesize', TType.I64, 6)
      oprot.writeI64(self.diskspacesize)
      oprot.writeFieldEnd()
    if self.isfault is not None:
      oprot.writeFieldBegin('isfault', TType.BOOL, 7)
      oprot.writeBool(self.isfault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ddcachename)
    value = (value * 31) ^ hash(self.ddcachepath)
    value = (value * 31) ^ hash(self.allsize)
    value = (value * 31) ^ hash(self.spacesize)
    value = (value * 31) ^ hash(self.usesize)
    value = (value * 31) ^ hash(self.diskspacesize)
    value = (value * 31) ^ hash(self.isfault)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
