#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncUpdateSvc import ncUpdateSvc
from ncUpdateSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void start_self_task_push( req)')
  print('  void delete_tp_records( req)')
  print('   get_running_but_over_tasks( req)')
  print('  ncBufResult pull_dest_data(ncBufReq req)')
  print('  void sync_package(ncBufResult req)')
  print('  void delete_sync_tp_records( req)')
  print('  void connect_test()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncUpdateSvc.Client(protocol)
transport.open()

if cmd == 'start_self_task_push':
  if len(args) != 1:
    print('start_self_task_push requires 1 args')
    sys.exit(1)
  pp.pprint(client.start_self_task_push(eval(args[0]),))

elif cmd == 'delete_tp_records':
  if len(args) != 1:
    print('delete_tp_records requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_tp_records(eval(args[0]),))

elif cmd == 'get_running_but_over_tasks':
  if len(args) != 1:
    print('get_running_but_over_tasks requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_running_but_over_tasks(eval(args[0]),))

elif cmd == 'pull_dest_data':
  if len(args) != 1:
    print('pull_dest_data requires 1 args')
    sys.exit(1)
  pp.pprint(client.pull_dest_data(eval(args[0]),))

elif cmd == 'sync_package':
  if len(args) != 1:
    print('sync_package requires 1 args')
    sys.exit(1)
  pp.pprint(client.sync_package(eval(args[0]),))

elif cmd == 'delete_sync_tp_records':
  if len(args) != 1:
    print('delete_sync_tp_records requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_sync_tp_records(eval(args[0]),))

elif cmd == 'connect_test':
  if len(args) != 0:
    print('connect_test requires 0 args')
    sys.exit(1)
  pp.pprint(client.connect_test())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
