# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncCloudStorageInfo(object):
    """
    Attributes:
     - venderType
     - url
     - accessKey
     - secret
     - bucket
     - appid
     - storageId
     - backupSize
     - restoreSize

    """


    def __init__(self, venderType=None, url=None, accessKey=None, secret=None, bucket=None, appid=None, storageId=None, backupSize=None, restoreSize=None,):
        self.venderType = venderType
        self.url = url
        self.accessKey = accessKey
        self.secret = secret
        self.bucket = bucket
        self.appid = appid
        self.storageId = storageId
        self.backupSize = backupSize
        self.restoreSize = restoreSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.venderType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.accessKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.secret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.bucket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.storageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.backupSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.restoreSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloudStorageInfo')
        if self.venderType is not None:
            oprot.writeFieldBegin('venderType', TType.STRING, 1)
            oprot.writeString(self.venderType.encode('utf-8') if sys.version_info[0] == 2 else self.venderType)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.accessKey is not None:
            oprot.writeFieldBegin('accessKey', TType.STRING, 3)
            oprot.writeString(self.accessKey.encode('utf-8') if sys.version_info[0] == 2 else self.accessKey)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 4)
            oprot.writeString(self.secret.encode('utf-8') if sys.version_info[0] == 2 else self.secret)
            oprot.writeFieldEnd()
        if self.bucket is not None:
            oprot.writeFieldBegin('bucket', TType.STRING, 5)
            oprot.writeString(self.bucket.encode('utf-8') if sys.version_info[0] == 2 else self.bucket)
            oprot.writeFieldEnd()
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 6)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.storageId is not None:
            oprot.writeFieldBegin('storageId', TType.I64, 7)
            oprot.writeI64(self.storageId)
            oprot.writeFieldEnd()
        if self.backupSize is not None:
            oprot.writeFieldBegin('backupSize', TType.I64, 8)
            oprot.writeI64(self.backupSize)
            oprot.writeFieldEnd()
        if self.restoreSize is not None:
            oprot.writeFieldBegin('restoreSize', TType.I64, 9)
            oprot.writeI64(self.restoreSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncChunkInfo(object):
    """
    Attributes:
     - chunkId
     - dataFileId
     - dataFileOffset
     - chunkLength
     - isDelete
     - checksum

    """


    def __init__(self, chunkId=None, dataFileId=None, dataFileOffset=None, chunkLength=None, isDelete=None, checksum=None,):
        self.chunkId = chunkId
        self.dataFileId = dataFileId
        self.dataFileOffset = dataFileOffset
        self.chunkLength = chunkLength
        self.isDelete = isDelete
        self.checksum = checksum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.chunkId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.dataFileId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dataFileOffset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.chunkLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.isDelete = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.checksum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncChunkInfo')
        if self.chunkId is not None:
            oprot.writeFieldBegin('chunkId', TType.I64, 1)
            oprot.writeI64(self.chunkId)
            oprot.writeFieldEnd()
        if self.dataFileId is not None:
            oprot.writeFieldBegin('dataFileId', TType.I64, 2)
            oprot.writeI64(self.dataFileId)
            oprot.writeFieldEnd()
        if self.dataFileOffset is not None:
            oprot.writeFieldBegin('dataFileOffset', TType.I32, 3)
            oprot.writeI32(self.dataFileOffset)
            oprot.writeFieldEnd()
        if self.chunkLength is not None:
            oprot.writeFieldBegin('chunkLength', TType.I32, 4)
            oprot.writeI32(self.chunkLength)
            oprot.writeFieldEnd()
        if self.isDelete is not None:
            oprot.writeFieldBegin('isDelete', TType.I32, 5)
            oprot.writeI32(self.isDelete)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.I32, 6)
            oprot.writeI32(self.checksum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncKeyVaule(object):
    """
    Attributes:
     - key
     - value

    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncKeyVaule')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeBinary(self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeBinary(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncKeyVauleArray(object):
    """
    Attributes:
     - kvArr

    """


    def __init__(self, kvArr=None,):
        self.kvArr = kvArr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.kvArr = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncKeyVaule()
                        _elem5.read(iprot)
                        self.kvArr.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncKeyVauleArray')
        if self.kvArr is not None:
            oprot.writeFieldBegin('kvArr', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.kvArr))
            for iter6 in self.kvArr:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncCloudStorageInfo)
ncCloudStorageInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'venderType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'accessKey', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'secret', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'bucket', 'UTF8', None, ),  # 5
    (6, TType.I32, 'appid', None, None, ),  # 6
    (7, TType.I64, 'storageId', None, None, ),  # 7
    (8, TType.I64, 'backupSize', None, None, ),  # 8
    (9, TType.I64, 'restoreSize', None, None, ),  # 9
)
all_structs.append(ncChunkInfo)
ncChunkInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'chunkId', None, None, ),  # 1
    (2, TType.I64, 'dataFileId', None, None, ),  # 2
    (3, TType.I32, 'dataFileOffset', None, None, ),  # 3
    (4, TType.I32, 'chunkLength', None, None, ),  # 4
    (5, TType.I32, 'isDelete', None, None, ),  # 5
    (6, TType.I32, 'checksum', None, None, ),  # 6
)
all_structs.append(ncKeyVaule)
ncKeyVaule.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'value', 'BINARY', None, ),  # 2
)
all_structs.append(ncKeyVauleArray)
ncKeyVauleArray.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'kvArr', (TType.STRUCT, [ncKeyVaule, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
