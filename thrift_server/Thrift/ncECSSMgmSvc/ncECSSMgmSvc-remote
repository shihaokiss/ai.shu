#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncECSSMgmSvc import ncECSSMgmSvc
from ncECSSMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   ListCloudAllBucket(ncCloudStorageInfo csInfo)')
  print('  i64 AddCloudStorage(ncCloudStorageInfo csInfo)')
  print('  bool ModifyCloudStorage(ncCloudStorageInfo csInfo)')
  print('  void DelCloudStorage(i64 storageId)')
  print('  ncCloudStorageInfo ListCloudStorage()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncECSSMgmSvc.Client(protocol)
transport.open()

if cmd == 'ListCloudAllBucket':
  if len(args) != 1:
    print('ListCloudAllBucket requires 1 args')
    sys.exit(1)
  pp.pprint(client.ListCloudAllBucket(eval(args[0]),))

elif cmd == 'AddCloudStorage':
  if len(args) != 1:
    print('AddCloudStorage requires 1 args')
    sys.exit(1)
  pp.pprint(client.AddCloudStorage(eval(args[0]),))

elif cmd == 'ModifyCloudStorage':
  if len(args) != 1:
    print('ModifyCloudStorage requires 1 args')
    sys.exit(1)
  pp.pprint(client.ModifyCloudStorage(eval(args[0]),))

elif cmd == 'DelCloudStorage':
  if len(args) != 1:
    print('DelCloudStorage requires 1 args')
    sys.exit(1)
  pp.pprint(client.DelCloudStorage(eval(args[0]),))

elif cmd == 'ListCloudStorage':
  if len(args) != 0:
    print('ListCloudStorage requires 0 args')
    sys.exit(1)
  pp.pprint(client.ListCloudStorage())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
