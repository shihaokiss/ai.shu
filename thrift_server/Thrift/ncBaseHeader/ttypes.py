#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncEPMSMsgType(object):
  """
  消息类型

  """
  NC_EPMS_SEND_MSG = 0
  NC_EPMS_REPLY_MSG = 1
  NC_EPMS_SEND_SUCCESS = 2
  NC_EPMS_SEND_FAILED = 3
  NC_EPMS_NO_SUBSCRIBER = 4
  NC_EPMS_CONNECT = 5
  NC_EPMS_DISCONNECT = 6
  NC_EPMS_HEARTBEAT = 7

  _VALUES_TO_NAMES = {
    0: "NC_EPMS_SEND_MSG",
    1: "NC_EPMS_REPLY_MSG",
    2: "NC_EPMS_SEND_SUCCESS",
    3: "NC_EPMS_SEND_FAILED",
    4: "NC_EPMS_NO_SUBSCRIBER",
    5: "NC_EPMS_CONNECT",
    6: "NC_EPMS_DISCONNECT",
    7: "NC_EPMS_HEARTBEAT",
  }

  _NAMES_TO_VALUES = {
    "NC_EPMS_SEND_MSG": 0,
    "NC_EPMS_REPLY_MSG": 1,
    "NC_EPMS_SEND_SUCCESS": 2,
    "NC_EPMS_SEND_FAILED": 3,
    "NC_EPMS_NO_SUBSCRIBER": 4,
    "NC_EPMS_CONNECT": 5,
    "NC_EPMS_DISCONNECT": 6,
    "NC_EPMS_HEARTBEAT": 7,
  }

class ncEPMSMsgOpt(object):
  """
  消息配置选项

  """
  NC_EPMS_ENABLE_COMPRESS = 1
  NC_EPMS_ENABLE_ENCRYPT = 2

  _VALUES_TO_NAMES = {
    1: "NC_EPMS_ENABLE_COMPRESS",
    2: "NC_EPMS_ENABLE_ENCRYPT",
  }

  _NAMES_TO_VALUES = {
    "NC_EPMS_ENABLE_COMPRESS": 1,
    "NC_EPMS_ENABLE_ENCRYPT": 2,
  }

class ncEPMSExceptionType(object):
  """
  异常类型

  """
  NC_ROOT_EXCEPTION = 0
  NC_ABORT_EXCEPTION = 1
  NC_WARN_EXCEPTION = 2
  NC_INFO_EXCEPTION = 3
  NC_IGNORE_EXCEPTION = 4
  NC_NON_CORE_EXCEPTION = 5

  _VALUES_TO_NAMES = {
    0: "NC_ROOT_EXCEPTION",
    1: "NC_ABORT_EXCEPTION",
    2: "NC_WARN_EXCEPTION",
    3: "NC_INFO_EXCEPTION",
    4: "NC_IGNORE_EXCEPTION",
    5: "NC_NON_CORE_EXCEPTION",
  }

  _NAMES_TO_VALUES = {
    "NC_ROOT_EXCEPTION": 0,
    "NC_ABORT_EXCEPTION": 1,
    "NC_WARN_EXCEPTION": 2,
    "NC_INFO_EXCEPTION": 3,
    "NC_IGNORE_EXCEPTION": 4,
    "NC_NON_CORE_EXCEPTION": 5,
  }


class ncConnectionInfo(object):
  """
  连接消息（IP, PORT 直接从连接状态中获取）


  Attributes:
   - osVersion
   - hostName
   - processName
   - machineCode
   - ipAddr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'osVersion', None, None, ), # 1
    (2, TType.STRING, 'hostName', None, None, ), # 2
    (3, TType.STRING, 'processName', None, None, ), # 3
    (4, TType.STRING, 'machineCode', None, None, ), # 4
    (5, TType.STRING, 'ipAddr', None, None, ), # 5
  )

  def __init__(self, osVersion=None, hostName=None, processName=None, machineCode=None, ipAddr=None,):
    self.osVersion = osVersion
    self.hostName = hostName
    self.processName = processName
    self.machineCode = machineCode
    self.ipAddr = ipAddr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.osVersion = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.processName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.machineCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ipAddr = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncConnectionInfo')
    if self.osVersion is not None:
      oprot.writeFieldBegin('osVersion', TType.I32, 1)
      oprot.writeI32(self.osVersion)
      oprot.writeFieldEnd()
    if self.hostName is not None:
      oprot.writeFieldBegin('hostName', TType.STRING, 2)
      oprot.writeString(self.hostName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.processName is not None:
      oprot.writeFieldBegin('processName', TType.STRING, 3)
      oprot.writeString(self.processName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.machineCode is not None:
      oprot.writeFieldBegin('machineCode', TType.STRING, 4)
      oprot.writeString(self.machineCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ipAddr is not None:
      oprot.writeFieldBegin('ipAddr', TType.STRING, 5)
      oprot.writeString(self.ipAddr.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.osVersion)
    value = (value * 31) ^ hash(self.hostName)
    value = (value * 31) ^ hash(self.processName)
    value = (value * 31) ^ hash(self.machineCode)
    value = (value * 31) ^ hash(self.ipAddr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncConnectRequest(object):
  """
  连接请求


  Attributes:
   - connInfo
   - connectType
   - detecttime
   - reconnectId
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'connInfo', (ncConnectionInfo, ncConnectionInfo.thrift_spec), None, ), # 1
    (2, TType.I32, 'connectType', None, None, ), # 2
    (3, TType.I32, 'detecttime', None, None, ), # 3
    (4, TType.I64, 'reconnectId', None, -1, ), # 4
    (5, TType.STRING, 'guid', None, "", ), # 5
  )

  def __init__(self, connInfo=None, connectType=None, detecttime=None, reconnectId=thrift_spec[4][4], guid=thrift_spec[5][4],):
    self.connInfo = connInfo
    self.connectType = connectType
    self.detecttime = detecttime
    self.reconnectId = reconnectId
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.connInfo = ncConnectionInfo()
          self.connInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.connectType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.detecttime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.reconnectId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.guid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncConnectRequest')
    if self.connInfo is not None:
      oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
      self.connInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.connectType is not None:
      oprot.writeFieldBegin('connectType', TType.I32, 2)
      oprot.writeI32(self.connectType)
      oprot.writeFieldEnd()
    if self.detecttime is not None:
      oprot.writeFieldBegin('detecttime', TType.I32, 3)
      oprot.writeI32(self.detecttime)
      oprot.writeFieldEnd()
    if self.reconnectId is not None:
      oprot.writeFieldBegin('reconnectId', TType.I64, 4)
      oprot.writeI64(self.reconnectId)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 5)
      oprot.writeString(self.guid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.connInfo)
    value = (value * 31) ^ hash(self.connectType)
    value = (value * 31) ^ hash(self.detecttime)
    value = (value * 31) ^ hash(self.reconnectId)
    value = (value * 31) ^ hash(self.guid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncConnectReply(object):
  """
  连接请求回复


  Attributes:
   - connInfo
   - reconnectId
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'connInfo', (ncConnectionInfo, ncConnectionInfo.thrift_spec), None, ), # 1
    (2, TType.I64, 'reconnectId', None, None, ), # 2
    (3, TType.STRING, 'guid', None, None, ), # 3
  )

  def __init__(self, connInfo=None, reconnectId=None, guid=None,):
    self.connInfo = connInfo
    self.reconnectId = reconnectId
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.connInfo = ncConnectionInfo()
          self.connInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.reconnectId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.guid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncConnectReply')
    if self.connInfo is not None:
      oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
      self.connInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.reconnectId is not None:
      oprot.writeFieldBegin('reconnectId', TType.I64, 2)
      oprot.writeI64(self.reconnectId)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 3)
      oprot.writeString(self.guid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.connInfo)
    value = (value * 31) ^ hash(self.reconnectId)
    value = (value * 31) ^ hash(self.guid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncEPMSMsgHeader(object):
  """
  EPMS 消息头

  EPMS 根据  【type + msgName】 判断接收到的消息是哪种类型
             【bufLength + buffer】 为消息的实际内容，将 proto 对象转换为二进制数据块后得出

      1. NC_EPMS_SEND_MSG + msgName：     由发送端发送过来的消息，EPMS 接收到后将消息通知给订阅函数
      2. NC_EPMS_REPLY_MSG + msgName：    由发送端发送过来的回复消息，EPMS 接收到后将消息通知给发送结果回调函数
      3. NC_EPMS_SEND_SUCCESS + msgName： 由发送端发送过来的发送成功，EPMS 接收到后将成功结果通知给发送结果回调函数
      4. NC_EPMS_SEND_FAILED + msgName：  由发送端发送过来的发送失败，EPMS 接收到后将失败结果及错误内容通知给发送结果回调函数

  Attributes:
   - msgType
   - msgName
   - sourceId
   - protoName
   - bufLength
   - buffer
   - option
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'msgType', None, None, ), # 1
    (2, TType.STRING, 'msgName', None, None, ), # 2
    (3, TType.I64, 'sourceId', None, None, ), # 3
    (4, TType.STRING, 'protoName', None, None, ), # 4
    (5, TType.I32, 'bufLength', None, None, ), # 5
    (6, TType.STRING, 'buffer', None, None, ), # 6
    (7, TType.I32, 'option', None, 0, ), # 7
  )

  def __init__(self, msgType=None, msgName=None, sourceId=None, protoName=None, bufLength=None, buffer=None, option=thrift_spec[7][4],):
    self.msgType = msgType
    self.msgName = msgName
    self.sourceId = sourceId
    self.protoName = protoName
    self.bufLength = bufLength
    self.buffer = buffer
    self.option = option

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.msgType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msgName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sourceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.protoName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.bufLength = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.buffer = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.option = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEPMSMsgHeader')
    if self.msgType is not None:
      oprot.writeFieldBegin('msgType', TType.I32, 1)
      oprot.writeI32(self.msgType)
      oprot.writeFieldEnd()
    if self.msgName is not None:
      oprot.writeFieldBegin('msgName', TType.STRING, 2)
      oprot.writeString(self.msgName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.I64, 3)
      oprot.writeI64(self.sourceId)
      oprot.writeFieldEnd()
    if self.protoName is not None:
      oprot.writeFieldBegin('protoName', TType.STRING, 4)
      oprot.writeString(self.protoName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.bufLength is not None:
      oprot.writeFieldBegin('bufLength', TType.I32, 5)
      oprot.writeI32(self.bufLength)
      oprot.writeFieldEnd()
    if self.buffer is not None:
      oprot.writeFieldBegin('buffer', TType.STRING, 6)
      oprot.writeString(self.buffer)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.I32, 7)
      oprot.writeI32(self.option)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msgType)
    value = (value * 31) ^ hash(self.msgName)
    value = (value * 31) ^ hash(self.sourceId)
    value = (value * 31) ^ hash(self.protoName)
    value = (value * 31) ^ hash(self.bufLength)
    value = (value * 31) ^ hash(self.buffer)
    value = (value * 31) ^ hash(self.option)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncEPMSException(object):
  """
  系统异常协议


  Attributes:
   - expType
   - codeLine
   - errID
   - fileName
   - errmsg
   - errProvider
   - stackInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'expType', None, None, ), # 1
    (2, TType.I32, 'codeLine', None, None, ), # 2
    (3, TType.I32, 'errID', None, None, ), # 3
    (4, TType.STRING, 'fileName', None, None, ), # 4
    (5, TType.STRING, 'errmsg', None, None, ), # 5
    (6, TType.STRING, 'errProvider', None, None, ), # 6
    (7, TType.LIST, 'stackInfo', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, expType=None, codeLine=None, errID=None, fileName=None, errmsg=None, errProvider=None, stackInfo=None,):
    self.expType = expType
    self.codeLine = codeLine
    self.errID = errID
    self.fileName = fileName
    self.errmsg = errmsg
    self.errProvider = errProvider
    self.stackInfo = stackInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.expType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.codeLine = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.errID = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fileName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.errProvider = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.stackInfo = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.stackInfo.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEPMSException')
    if self.expType is not None:
      oprot.writeFieldBegin('expType', TType.I32, 1)
      oprot.writeI32(self.expType)
      oprot.writeFieldEnd()
    if self.codeLine is not None:
      oprot.writeFieldBegin('codeLine', TType.I32, 2)
      oprot.writeI32(self.codeLine)
      oprot.writeFieldEnd()
    if self.errID is not None:
      oprot.writeFieldBegin('errID', TType.I32, 3)
      oprot.writeI32(self.errID)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 4)
      oprot.writeString(self.fileName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 5)
      oprot.writeString(self.errmsg.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.errProvider is not None:
      oprot.writeFieldBegin('errProvider', TType.STRING, 6)
      oprot.writeString(self.errProvider.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.stackInfo is not None:
      oprot.writeFieldBegin('stackInfo', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.stackInfo))
      for iter6 in self.stackInfo:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.expType)
    value = (value * 31) ^ hash(self.codeLine)
    value = (value * 31) ^ hash(self.errID)
    value = (value * 31) ^ hash(self.fileName)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.errProvider)
    value = (value * 31) ^ hash(self.stackInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncEPMSExceptionTProto(object):
  """
  系统异常协议(链式)


  Attributes:
   - excp
   - nextexcp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'excp', (ncEPMSException, ncEPMSException.thrift_spec), None, ), # 1
    (2, TType.LIST, 'nextexcp', (TType.STRUCT,(ncEPMSException, ncEPMSException.thrift_spec)), None, ), # 2
  )

  def __init__(self, excp=None, nextexcp=None,):
    self.excp = excp
    self.nextexcp = nextexcp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.excp = ncEPMSException()
          self.excp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.nextexcp = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncEPMSException()
            _elem12.read(iprot)
            self.nextexcp.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEPMSExceptionTProto')
    if self.excp is not None:
      oprot.writeFieldBegin('excp', TType.STRUCT, 1)
      self.excp.write(oprot)
      oprot.writeFieldEnd()
    if self.nextexcp is not None:
      oprot.writeFieldBegin('nextexcp', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.nextexcp))
      for iter13 in self.nextexcp:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.excp)
    value = (value * 31) ^ hash(self.nextexcp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
