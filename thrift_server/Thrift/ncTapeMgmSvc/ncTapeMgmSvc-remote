#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncTapeMgmSvc import ncTapeMgmSvc
from ncTapeMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void CreateTapeSet(string tapeLibSerialNo, string tapeSetName, i32 driveNum,  tapes, TapeSetCycle cycle, bool isMetaTapeMedia)')
    print('  void DeleteTapeSet(string tapeSetName, bool recursive)')
    print('  void UpdateTapeSet(string tapeSetName, i32 driveNum,  tapes, TapeSetCycle cycle)')
    print('  TapeSetInfoWeb ListTapeSet(i32 offset, i32 limit, TapeQueryCond cond)')
    print('  TapeInfoWeb ListTapeSetTape(string tapeSetName, i32 offset, i32 limit, TapeQueryCond cond)')
    print('  TapeLibInfoWeb ListTapeLibrary(i32 offset, i32 limit, TapeQueryCond cond)')
    print('  TapeInfoWeb ListTapeLibTape(string tapeLibSerialNo, i32 offset, i32 limit, TapeQueryCond cond)')
    print('  TapeLibDriveWeb ListTapeDrive(string tapeLibSerialNo, i32 offset, i32 limit)')
    print('  TapeScanStatus ScanTapeLib()')
    print('  TapeScanStatus GetTapeScanStatus()')
    print('  bool IsTapeSetNotExisted(string tapeSetName)')
    print('   GetTapeDriverInfo()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTapeMgmSvc.Client(protocol)
transport.open()

if cmd == 'CreateTapeSet':
    if len(args) != 6:
        print('CreateTapeSet requires 6 args')
        sys.exit(1)
    pp.pprint(client.CreateTapeSet(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'DeleteTapeSet':
    if len(args) != 2:
        print('DeleteTapeSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeleteTapeSet(args[0], eval(args[1]),))

elif cmd == 'UpdateTapeSet':
    if len(args) != 4:
        print('UpdateTapeSet requires 4 args')
        sys.exit(1)
    pp.pprint(client.UpdateTapeSet(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'ListTapeSet':
    if len(args) != 3:
        print('ListTapeSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.ListTapeSet(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ListTapeSetTape':
    if len(args) != 4:
        print('ListTapeSetTape requires 4 args')
        sys.exit(1)
    pp.pprint(client.ListTapeSetTape(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'ListTapeLibrary':
    if len(args) != 3:
        print('ListTapeLibrary requires 3 args')
        sys.exit(1)
    pp.pprint(client.ListTapeLibrary(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ListTapeLibTape':
    if len(args) != 4:
        print('ListTapeLibTape requires 4 args')
        sys.exit(1)
    pp.pprint(client.ListTapeLibTape(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'ListTapeDrive':
    if len(args) != 3:
        print('ListTapeDrive requires 3 args')
        sys.exit(1)
    pp.pprint(client.ListTapeDrive(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'ScanTapeLib':
    if len(args) != 0:
        print('ScanTapeLib requires 0 args')
        sys.exit(1)
    pp.pprint(client.ScanTapeLib())

elif cmd == 'GetTapeScanStatus':
    if len(args) != 0:
        print('GetTapeScanStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetTapeScanStatus())

elif cmd == 'IsTapeSetNotExisted':
    if len(args) != 1:
        print('IsTapeSetNotExisted requires 1 args')
        sys.exit(1)
    pp.pprint(client.IsTapeSetNotExisted(args[0],))

elif cmd == 'GetTapeDriverInfo':
    if len(args) != 0:
        print('GetTapeDriverInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetTapeDriverInfo())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
