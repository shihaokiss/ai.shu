# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncObjectInfo.ttypes
import ncEOSSMetaInfo.ttypes

from thrift.transport import TTransport
all_structs = []


class ncPreStorageType(object):
    RESTORESTORAGE = 1
    UNDORESTORESTORAGE = 2
    MOUNTRESTORESTORAGE = 3
    UNDOMOUNTRESTORESTORAGE = 4
    BACKUPSTORAGE = 5
    UNDOBACKUPSTORAGE = 6

    _VALUES_TO_NAMES = {
        1: "RESTORESTORAGE",
        2: "UNDORESTORESTORAGE",
        3: "MOUNTRESTORESTORAGE",
        4: "UNDOMOUNTRESTORESTORAGE",
        5: "BACKUPSTORAGE",
        6: "UNDOBACKUPSTORAGE",
    }

    _NAMES_TO_VALUES = {
        "RESTORESTORAGE": 1,
        "UNDORESTORESTORAGE": 2,
        "MOUNTRESTORESTORAGE": 3,
        "UNDOMOUNTRESTORESTORAGE": 4,
        "BACKUPSTORAGE": 5,
        "UNDOBACKUPSTORAGE": 6,
    }


class ncWriteStatus(object):
    WRITE_SUCESS = 0
    WRITE_FAILED = 1
    WRITE_NO_SPACE = 2
    WRITE_NO_QUEUE = 3
    WRITE_NOT_ACTIVE = 4

    _VALUES_TO_NAMES = {
        0: "WRITE_SUCESS",
        1: "WRITE_FAILED",
        2: "WRITE_NO_SPACE",
        3: "WRITE_NO_QUEUE",
        4: "WRITE_NOT_ACTIVE",
    }

    _NAMES_TO_VALUES = {
        "WRITE_SUCESS": 0,
        "WRITE_FAILED": 1,
        "WRITE_NO_SPACE": 2,
        "WRITE_NO_QUEUE": 3,
        "WRITE_NOT_ACTIVE": 4,
    }


class ncLoginRequest(object):
    """
    Attributes:
     - serverIP
     - serverPort
     - clientIP
     - detectTime
     - clientSign
     - targetType
     - targetId

    """


    def __init__(self, serverIP=None, serverPort=None, clientIP=None, detectTime=None, clientSign=None, targetType=None, targetId=None,):
        self.serverIP = serverIP
        self.serverPort = serverPort
        self.clientIP = clientIP
        self.detectTime = detectTime
        self.clientSign = clientSign
        self.targetType = targetType
        self.targetId = targetId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serverPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.detectTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.targetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.targetId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncLoginRequest')
        if self.serverIP is not None:
            oprot.writeFieldBegin('serverIP', TType.STRING, 1)
            oprot.writeString(self.serverIP.encode('utf-8') if sys.version_info[0] == 2 else self.serverIP)
            oprot.writeFieldEnd()
        if self.serverPort is not None:
            oprot.writeFieldBegin('serverPort', TType.I32, 2)
            oprot.writeI32(self.serverPort)
            oprot.writeFieldEnd()
        if self.clientIP is not None:
            oprot.writeFieldBegin('clientIP', TType.STRING, 3)
            oprot.writeString(self.clientIP.encode('utf-8') if sys.version_info[0] == 2 else self.clientIP)
            oprot.writeFieldEnd()
        if self.detectTime is not None:
            oprot.writeFieldBegin('detectTime', TType.I32, 4)
            oprot.writeI32(self.detectTime)
            oprot.writeFieldEnd()
        if self.clientSign is not None:
            oprot.writeFieldBegin('clientSign', TType.STRING, 5)
            oprot.writeString(self.clientSign.encode('utf-8') if sys.version_info[0] == 2 else self.clientSign)
            oprot.writeFieldEnd()
        if self.targetType is not None:
            oprot.writeFieldBegin('targetType', TType.I32, 6)
            oprot.writeI32(self.targetType)
            oprot.writeFieldEnd()
        if self.targetId is not None:
            oprot.writeFieldBegin('targetId', TType.I64, 7)
            oprot.writeI64(self.targetId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncLoginReply(object):
    """
    Attributes:
     - acceptted
     - datachannelIp

    """


    def __init__(self, acceptted=None, datachannelIp=None,):
        self.acceptted = acceptted
        self.datachannelIp = datachannelIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.acceptted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.datachannelIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncLoginReply')
        if self.acceptted is not None:
            oprot.writeFieldBegin('acceptted', TType.BOOL, 1)
            oprot.writeBool(self.acceptted)
            oprot.writeFieldEnd()
        if self.datachannelIp is not None:
            oprot.writeFieldBegin('datachannelIp', TType.STRING, 2)
            oprot.writeString(self.datachannelIp.encode('utf-8') if sys.version_info[0] == 2 else self.datachannelIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncInitRequest(object):
    """
    Attributes:
     - jobInfo
     - vmId
     - queueSign

    """


    def __init__(self, jobInfo=None, vmId=None, queueSign=None,):
        self.jobInfo = jobInfo
        self.vmId = vmId
        self.queueSign = queueSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.jobInfo = ncObjectInfo.ttypes.ncCIDObjectInfo()
                    self.jobInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vmId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.queueSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncInitRequest')
        if self.jobInfo is not None:
            oprot.writeFieldBegin('jobInfo', TType.STRUCT, 1)
            self.jobInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.vmId is not None:
            oprot.writeFieldBegin('vmId', TType.STRING, 2)
            oprot.writeString(self.vmId.encode('utf-8') if sys.version_info[0] == 2 else self.vmId)
            oprot.writeFieldEnd()
        if self.queueSign is not None:
            oprot.writeFieldBegin('queueSign', TType.STRING, 3)
            oprot.writeString(self.queueSign.encode('utf-8') if sys.version_info[0] == 2 else self.queueSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncInitReply(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncInitReply')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNotiftStatus(object):
    """
    Attributes:
     - status
     - breakPoint

    """


    def __init__(self, status=None, breakPoint=None,):
        self.status = status
        self.breakPoint = breakPoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.breakPoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNotiftStatus')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.breakPoint is not None:
            oprot.writeFieldBegin('breakPoint', TType.I64, 2)
            oprot.writeI64(self.breakPoint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tfVolumeInfo(object):
    """
    Attributes:
     - volumeSize
     - partitionOffset
     - devName
     - volumeName

    """


    def __init__(self, volumeSize=None, partitionOffset=None, devName=None, volumeName=None,):
        self.volumeSize = volumeSize
        self.partitionOffset = partitionOffset
        self.devName = devName
        self.volumeName = volumeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.volumeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.partitionOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.devName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.volumeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tfVolumeInfo')
        if self.volumeSize is not None:
            oprot.writeFieldBegin('volumeSize', TType.I64, 1)
            oprot.writeI64(self.volumeSize)
            oprot.writeFieldEnd()
        if self.partitionOffset is not None:
            oprot.writeFieldBegin('partitionOffset', TType.I64, 2)
            oprot.writeI64(self.partitionOffset)
            oprot.writeFieldEnd()
        if self.devName is not None:
            oprot.writeFieldBegin('devName', TType.STRING, 3)
            oprot.writeString(self.devName.encode('utf-8') if sys.version_info[0] == 2 else self.devName)
            oprot.writeFieldEnd()
        if self.volumeName is not None:
            oprot.writeFieldBegin('volumeName', TType.STRING, 4)
            oprot.writeString(self.volumeName.encode('utf-8') if sys.version_info[0] == 2 else self.volumeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tfHostInfo(object):
    """
    Attributes:
     - hostId
     - uuid
     - systemType
     - volumeInfos

    """


    def __init__(self, hostId=None, uuid=None, systemType=None, volumeInfos=None,):
        self.hostId = hostId
        self.uuid = uuid
        self.systemType = systemType
        self.volumeInfos = volumeInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.systemType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.volumeInfos = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = tfVolumeInfo()
                        _elem5.read(iprot)
                        self.volumeInfos.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tfHostInfo')
        if self.hostId is not None:
            oprot.writeFieldBegin('hostId', TType.STRING, 1)
            oprot.writeString(self.hostId.encode('utf-8') if sys.version_info[0] == 2 else self.hostId)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.systemType is not None:
            oprot.writeFieldBegin('systemType', TType.I32, 3)
            oprot.writeI32(self.systemType)
            oprot.writeFieldEnd()
        if self.volumeInfos is not None:
            oprot.writeFieldBegin('volumeInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.volumeInfos))
            for iter6 in self.volumeInfos:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncRtInitRequest(object):
    """
    Attributes:
     - host

    """


    def __init__(self, host=None,):
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.host = tfHostInfo()
                    self.host.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncRtInitRequest')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRUCT, 1)
            self.host.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncWriteObjectRequest(object):
    """
    Attributes:
     - requestId
     - objectInfo
     - cid

    """


    def __init__(self, requestId=None, objectInfo=None, cid=None,):
        self.requestId = requestId
        self.objectInfo = objectInfo
        self.cid = cid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.requestId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectInfo = ncEOSSMetaInfo.ttypes.ncCNSObjectInfo()
                    self.objectInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncWriteObjectRequest')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I64, 1)
            oprot.writeI64(self.requestId)
            oprot.writeFieldEnd()
        if self.objectInfo is not None:
            oprot.writeFieldBegin('objectInfo', TType.STRUCT, 2)
            self.objectInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncWriteObjectReply(object):
    """
    Attributes:
     - requestId
     - objectId

    """


    def __init__(self, requestId=None, objectId=None,):
        self.requestId = requestId
        self.objectId = objectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.requestId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncWriteObjectReply')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I64, 1)
            oprot.writeI64(self.requestId)
            oprot.writeFieldEnd()
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 2)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSetMetadataRequest(object):
    """
    Attributes:
     - gnsPath
     - metadata
     - isappend
     - cid

    """


    def __init__(self, gnsPath=None, metadata=None, isappend=None, cid=None,):
        self.gnsPath = gnsPath
        self.metadata = metadata
        self.isappend = isappend
        self.cid = cid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.metadata = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isappend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSetMetadataRequest')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 2)
            oprot.writeBinary(self.metadata)
            oprot.writeFieldEnd()
        if self.isappend is not None:
            oprot.writeFieldBegin('isappend', TType.BOOL, 3)
            oprot.writeBool(self.isappend)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 4)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSetMetadataReply(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSetMetadataReply')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTfPlatformInfo(object):
    """
    Attributes:
     - ip
     - id
     - name
     - username
     - password

    """


    def __init__(self, ip=None, id=None, name=None, username=None, password=None,):
        self.ip = ip
        self.id = id
        self.name = name
        self.username = username
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTfPlatformInfo')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 5)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPreStorageRequest(object):
    """
    Attributes:
     - requestType
     - gns
     - restoreJobId
     - vmId
     - backupJobId
     - timepoint
     - volumeSize
     - taskId
     - dispatchServiceIp
     - poolIp
     - poolId
     - execId
     - platformInfo
     - isFirstMount
     - firstMountJobId

    """


    def __init__(self, requestType=None, gns=None, restoreJobId=None, vmId=None, backupJobId=None, timepoint=None, volumeSize=None, taskId=None, dispatchServiceIp=None, poolIp=None, poolId=None, execId=None, platformInfo=None, isFirstMount=None, firstMountJobId=None,):
        self.requestType = requestType
        self.gns = gns
        self.restoreJobId = restoreJobId
        self.vmId = vmId
        self.backupJobId = backupJobId
        self.timepoint = timepoint
        self.volumeSize = volumeSize
        self.taskId = taskId
        self.dispatchServiceIp = dispatchServiceIp
        self.poolIp = poolIp
        self.poolId = poolId
        self.execId = execId
        self.platformInfo = platformInfo
        self.isFirstMount = isFirstMount
        self.firstMountJobId = firstMountJobId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.restoreJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.vmId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.backupJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timepoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.volumeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.dispatchServiceIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.poolIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.poolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.execId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.platformInfo = ncTfPlatformInfo()
                    self.platformInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.isFirstMount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.firstMountJobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPreStorageRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.I32, 1)
            oprot.writeI32(self.requestType)
            oprot.writeFieldEnd()
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 2)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.restoreJobId is not None:
            oprot.writeFieldBegin('restoreJobId', TType.STRING, 3)
            oprot.writeString(self.restoreJobId.encode('utf-8') if sys.version_info[0] == 2 else self.restoreJobId)
            oprot.writeFieldEnd()
        if self.vmId is not None:
            oprot.writeFieldBegin('vmId', TType.STRING, 4)
            oprot.writeString(self.vmId.encode('utf-8') if sys.version_info[0] == 2 else self.vmId)
            oprot.writeFieldEnd()
        if self.backupJobId is not None:
            oprot.writeFieldBegin('backupJobId', TType.STRING, 5)
            oprot.writeString(self.backupJobId.encode('utf-8') if sys.version_info[0] == 2 else self.backupJobId)
            oprot.writeFieldEnd()
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.I64, 6)
            oprot.writeI64(self.timepoint)
            oprot.writeFieldEnd()
        if self.volumeSize is not None:
            oprot.writeFieldBegin('volumeSize', TType.I64, 7)
            oprot.writeI64(self.volumeSize)
            oprot.writeFieldEnd()
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 8)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        if self.dispatchServiceIp is not None:
            oprot.writeFieldBegin('dispatchServiceIp', TType.STRING, 9)
            oprot.writeString(self.dispatchServiceIp.encode('utf-8') if sys.version_info[0] == 2 else self.dispatchServiceIp)
            oprot.writeFieldEnd()
        if self.poolIp is not None:
            oprot.writeFieldBegin('poolIp', TType.STRING, 10)
            oprot.writeString(self.poolIp.encode('utf-8') if sys.version_info[0] == 2 else self.poolIp)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.STRING, 11)
            oprot.writeString(self.poolId.encode('utf-8') if sys.version_info[0] == 2 else self.poolId)
            oprot.writeFieldEnd()
        if self.execId is not None:
            oprot.writeFieldBegin('execId', TType.STRING, 12)
            oprot.writeString(self.execId.encode('utf-8') if sys.version_info[0] == 2 else self.execId)
            oprot.writeFieldEnd()
        if self.platformInfo is not None:
            oprot.writeFieldBegin('platformInfo', TType.STRUCT, 13)
            self.platformInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.isFirstMount is not None:
            oprot.writeFieldBegin('isFirstMount', TType.BOOL, 14)
            oprot.writeBool(self.isFirstMount)
            oprot.writeFieldEnd()
        if self.firstMountJobId is not None:
            oprot.writeFieldBegin('firstMountJobId', TType.STRING, 15)
            oprot.writeString(self.firstMountJobId.encode('utf-8') if sys.version_info[0] == 2 else self.firstMountJobId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPreStorageReply(object):
    """
    Attributes:
     - taskId

    """


    def __init__(self, taskId=None,):
        self.taskId = taskId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPreStorageReply')
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 1)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncPreStorageResult(object):
    """
    Attributes:
     - taskId
     - success
     - resultValue

    """


    def __init__(self, taskId=None, success=None, resultValue=None,):
        self.taskId = taskId
        self.success = success
        self.resultValue = resultValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.resultValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncPreStorageResult')
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 1)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 2)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.resultValue is not None:
            oprot.writeFieldBegin('resultValue', TType.STRING, 3)
            oprot.writeString(self.resultValue.encode('utf-8') if sys.version_info[0] == 2 else self.resultValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncConvertRequest(object):
    """
    Attributes:
     - param
     - destPlatformType
     - taskId

    """


    def __init__(self, param=None, destPlatformType=None, taskId=None,):
        self.param = param
        self.destPlatformType = destPlatformType
        self.taskId = taskId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.param = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.destPlatformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncConvertRequest')
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 1)
            oprot.writeString(self.param.encode('utf-8') if sys.version_info[0] == 2 else self.param)
            oprot.writeFieldEnd()
        if self.destPlatformType is not None:
            oprot.writeFieldBegin('destPlatformType', TType.I32, 2)
            oprot.writeI32(self.destPlatformType)
            oprot.writeFieldEnd()
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 3)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncWriteDataRequest(object):
    """
    Attributes:
     - objectId
     - blockId
     - blockoffset
     - blockLength
     - compressed
     - encrypted
     - gnsPath
     - attributes
     - versionInfo
     - displayName

    """


    def __init__(self, objectId=None, blockId=None, blockoffset=-1, blockLength=None, compressed=False, encrypted=False, gnsPath=None, attributes=None, versionInfo=None, displayName=None,):
        self.objectId = objectId
        self.blockId = blockId
        self.blockoffset = blockoffset
        self.blockLength = blockLength
        self.compressed = compressed
        self.encrypted = encrypted
        self.gnsPath = gnsPath
        self.attributes = attributes
        self.versionInfo = versionInfo
        self.displayName = displayName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.blockoffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.blockLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.versionInfo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncWriteDataRequest')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 2)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        if self.blockoffset is not None:
            oprot.writeFieldBegin('blockoffset', TType.I64, 3)
            oprot.writeI64(self.blockoffset)
            oprot.writeFieldEnd()
        if self.blockLength is not None:
            oprot.writeFieldBegin('blockLength', TType.I32, 4)
            oprot.writeI32(self.blockLength)
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 5)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        if self.encrypted is not None:
            oprot.writeFieldBegin('encrypted', TType.BOOL, 6)
            oprot.writeBool(self.encrypted)
            oprot.writeFieldEnd()
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 7)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 8)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.versionInfo is not None:
            oprot.writeFieldBegin('versionInfo', TType.I32, 9)
            oprot.writeI32(self.versionInfo)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 10)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncWriteDataReply(object):
    """
    Attributes:
     - objectId
     - blockId
     - blockoffset
     - storageLength
     - compressed
     - encrypted

    """


    def __init__(self, objectId=None, blockId=None, blockoffset=None, storageLength=None, compressed=False, encrypted=False,):
        self.objectId = objectId
        self.blockId = blockId
        self.blockoffset = blockoffset
        self.storageLength = storageLength
        self.compressed = compressed
        self.encrypted = encrypted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.blockoffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.storageLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncWriteDataReply')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 2)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        if self.blockoffset is not None:
            oprot.writeFieldBegin('blockoffset', TType.I64, 3)
            oprot.writeI64(self.blockoffset)
            oprot.writeFieldEnd()
        if self.storageLength is not None:
            oprot.writeFieldBegin('storageLength', TType.I32, 4)
            oprot.writeI32(self.storageLength)
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 5)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        if self.encrypted is not None:
            oprot.writeFieldBegin('encrypted', TType.BOOL, 6)
            oprot.writeBool(self.encrypted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSyncWriteDataReply(object):
    """
    Attributes:
     - writeStatus
     - blockId

    """


    def __init__(self, writeStatus=None, blockId=None,):
        self.writeStatus = writeStatus
        self.blockId = blockId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.writeStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSyncWriteDataReply')
        if self.writeStatus is not None:
            oprot.writeFieldBegin('writeStatus', TType.I32, 1)
            oprot.writeI32(self.writeStatus)
            oprot.writeFieldEnd()
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 2)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetIOSnapGnsReply(object):
    """
    Attributes:
     - ioGns
     - snapGnsList

    """


    def __init__(self, ioGns=None, snapGnsList=None,):
        self.ioGns = ioGns
        self.snapGnsList = snapGnsList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ioGns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.snapGnsList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.snapGnsList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetIOSnapGnsReply')
        if self.ioGns is not None:
            oprot.writeFieldBegin('ioGns', TType.STRING, 1)
            oprot.writeString(self.ioGns.encode('utf-8') if sys.version_info[0] == 2 else self.ioGns)
            oprot.writeFieldEnd()
        if self.snapGnsList is not None:
            oprot.writeFieldBegin('snapGnsList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.snapGnsList))
            for iter13 in self.snapGnsList:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetDataBlockIdReply(object):
    """
    Attributes:
     - blockId

    """


    def __init__(self, blockId=None,):
        self.blockId = blockId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.blockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetDataBlockIdReply')
        if self.blockId is not None:
            oprot.writeFieldBegin('blockId', TType.I64, 1)
            oprot.writeI64(self.blockId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTimePointSecRequest(object):
    """
    Attributes:
     - startTpGns
     - endTpGns

    """


    def __init__(self, startTpGns=None, endTpGns=None,):
        self.startTpGns = startTpGns
        self.endTpGns = endTpGns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.startTpGns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.endTpGns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTimePointSecRequest')
        if self.startTpGns is not None:
            oprot.writeFieldBegin('startTpGns', TType.STRING, 1)
            oprot.writeString(self.startTpGns.encode('utf-8') if sys.version_info[0] == 2 else self.startTpGns)
            oprot.writeFieldEnd()
        if self.endTpGns is not None:
            oprot.writeFieldBegin('endTpGns', TType.STRING, 2)
            oprot.writeString(self.endTpGns.encode('utf-8') if sys.version_info[0] == 2 else self.endTpGns)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSubObjectsReply(object):
    """
    Attributes:
     - total
     - objectInfos
     - exist

    """


    def __init__(self, total=None, objectInfos=None, exist=True,):
        self.total = total
        self.objectInfos = objectInfos
        self.exist = exist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.objectInfos = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncEOSSMetaInfo.ttypes.ncCNSObjectInfo()
                        _elem19.read(iprot)
                        self.objectInfos.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSubObjectsReply')
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 1)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        if self.objectInfos is not None:
            oprot.writeFieldBegin('objectInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.objectInfos))
            for iter20 in self.objectInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 3)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetObjectRequest(object):
    """
    Attributes:
     - gnsPath
     - needMetadata
     - cid

    """


    def __init__(self, gnsPath=None, needMetadata=None, cid=None,):
        self.gnsPath = gnsPath
        self.needMetadata = needMetadata
        self.cid = cid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.needMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetObjectRequest')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.needMetadata is not None:
            oprot.writeFieldBegin('needMetadata', TType.BOOL, 2)
            oprot.writeBool(self.needMetadata)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetObjectReply(object):
    """
    Attributes:
     - exist
     - objectInfo

    """


    def __init__(self, exist=None, objectInfo=None,):
        self.exist = exist
        self.objectInfo = objectInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.exist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectInfo = ncEOSSMetaInfo.ttypes.ncCNSObjectInfo()
                    self.objectInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetObjectReply')
        if self.exist is not None:
            oprot.writeFieldBegin('exist', TType.BOOL, 1)
            oprot.writeBool(self.exist)
            oprot.writeFieldEnd()
        if self.objectInfo is not None:
            oprot.writeFieldBegin('objectInfo', TType.STRUCT, 2)
            self.objectInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncReadObjectRequest(object):
    """
    Attributes:
     - gnsPath
     - traverseMode
     - cid
     - breakpointExist
     - breakpointDataObjGns
     - breakpointDataBlockOffset

    """


    def __init__(self, gnsPath=None, traverseMode=None, cid=None, breakpointExist=False, breakpointDataObjGns=None, breakpointDataBlockOffset=0,):
        self.gnsPath = gnsPath
        self.traverseMode = traverseMode
        self.cid = cid
        self.breakpointExist = breakpointExist
        self.breakpointDataObjGns = breakpointDataObjGns
        self.breakpointDataBlockOffset = breakpointDataBlockOffset

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gnsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.traverseMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.breakpointExist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.breakpointDataObjGns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.breakpointDataBlockOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncReadObjectRequest')
        if self.gnsPath is not None:
            oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
            oprot.writeString(self.gnsPath.encode('utf-8') if sys.version_info[0] == 2 else self.gnsPath)
            oprot.writeFieldEnd()
        if self.traverseMode is not None:
            oprot.writeFieldBegin('traverseMode', TType.I32, 2)
            oprot.writeI32(self.traverseMode)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        if self.breakpointExist is not None:
            oprot.writeFieldBegin('breakpointExist', TType.BOOL, 4)
            oprot.writeBool(self.breakpointExist)
            oprot.writeFieldEnd()
        if self.breakpointDataObjGns is not None:
            oprot.writeFieldBegin('breakpointDataObjGns', TType.STRING, 5)
            oprot.writeString(self.breakpointDataObjGns.encode('utf-8') if sys.version_info[0] == 2 else self.breakpointDataObjGns)
            oprot.writeFieldEnd()
        if self.breakpointDataBlockOffset is not None:
            oprot.writeFieldBegin('breakpointDataBlockOffset', TType.I64, 6)
            oprot.writeI64(self.breakpointDataBlockOffset)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncLoginRequest)
ncLoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serverIP', 'UTF8', None, ),  # 1
    (2, TType.I32, 'serverPort', None, None, ),  # 2
    (3, TType.STRING, 'clientIP', 'UTF8', None, ),  # 3
    (4, TType.I32, 'detectTime', None, None, ),  # 4
    (5, TType.STRING, 'clientSign', 'UTF8', None, ),  # 5
    (6, TType.I32, 'targetType', None, None, ),  # 6
    (7, TType.I64, 'targetId', None, None, ),  # 7
)
all_structs.append(ncLoginReply)
ncLoginReply.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'acceptted', None, None, ),  # 1
    (2, TType.STRING, 'datachannelIp', 'UTF8', None, ),  # 2
)
all_structs.append(ncInitRequest)
ncInitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'jobInfo', [ncObjectInfo.ttypes.ncCIDObjectInfo, None], None, ),  # 1
    (2, TType.STRING, 'vmId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'queueSign', 'UTF8', None, ),  # 3
)
all_structs.append(ncInitReply)
ncInitReply.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
)
all_structs.append(ncNotiftStatus)
ncNotiftStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I64, 'breakPoint', None, None, ),  # 2
)
all_structs.append(tfVolumeInfo)
tfVolumeInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'volumeSize', None, None, ),  # 1
    (2, TType.I64, 'partitionOffset', None, None, ),  # 2
    (3, TType.STRING, 'devName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'volumeName', 'UTF8', None, ),  # 4
)
all_structs.append(tfHostInfo)
tfHostInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I32, 'systemType', None, None, ),  # 3
    (4, TType.LIST, 'volumeInfos', (TType.STRUCT, [tfVolumeInfo, None], False), None, ),  # 4
)
all_structs.append(ncRtInitRequest)
ncRtInitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'host', [tfHostInfo, None], None, ),  # 1
)
all_structs.append(ncWriteObjectRequest)
ncWriteObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'requestId', None, None, ),  # 1
    (2, TType.STRUCT, 'objectInfo', [ncEOSSMetaInfo.ttypes.ncCNSObjectInfo, None], None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
)
all_structs.append(ncWriteObjectReply)
ncWriteObjectReply.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'requestId', None, None, ),  # 1
    (2, TType.I64, 'objectId', None, None, ),  # 2
)
all_structs.append(ncSetMetadataRequest)
ncSetMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'metadata', 'BINARY', None, ),  # 2
    (3, TType.BOOL, 'isappend', None, None, ),  # 3
    (4, TType.STRING, 'cid', 'UTF8', None, ),  # 4
)
all_structs.append(ncSetMetadataReply)
ncSetMetadataReply.thrift_spec = (
)
all_structs.append(ncTfPlatformInfo)
ncTfPlatformInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'username', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'password', 'UTF8', None, ),  # 5
)
all_structs.append(ncPreStorageRequest)
ncPreStorageRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestType', None, None, ),  # 1
    (2, TType.STRING, 'gns', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'restoreJobId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'vmId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'backupJobId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'timepoint', None, None, ),  # 6
    (7, TType.I64, 'volumeSize', None, None, ),  # 7
    (8, TType.STRING, 'taskId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'dispatchServiceIp', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'poolIp', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'poolId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'execId', 'UTF8', None, ),  # 12
    (13, TType.STRUCT, 'platformInfo', [ncTfPlatformInfo, None], None, ),  # 13
    (14, TType.BOOL, 'isFirstMount', None, None, ),  # 14
    (15, TType.STRING, 'firstMountJobId', 'UTF8', None, ),  # 15
)
all_structs.append(ncPreStorageReply)
ncPreStorageReply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskId', 'UTF8', None, ),  # 1
)
all_structs.append(ncPreStorageResult)
ncPreStorageResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'success', None, None, ),  # 2
    (3, TType.STRING, 'resultValue', 'UTF8', None, ),  # 3
)
all_structs.append(ncConvertRequest)
ncConvertRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'param', 'UTF8', None, ),  # 1
    (2, TType.I32, 'destPlatformType', None, None, ),  # 2
    (3, TType.STRING, 'taskId', 'UTF8', None, ),  # 3
)
all_structs.append(ncWriteDataRequest)
ncWriteDataRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'objectId', None, None, ),  # 1
    (2, TType.I64, 'blockId', None, None, ),  # 2
    (3, TType.I64, 'blockoffset', None, -1, ),  # 3
    (4, TType.I32, 'blockLength', None, None, ),  # 4
    (5, TType.BOOL, 'compressed', None, False, ),  # 5
    (6, TType.BOOL, 'encrypted', None, False, ),  # 6
    (7, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 7
    (8, TType.I32, 'attributes', None, None, ),  # 8
    (9, TType.I32, 'versionInfo', None, None, ),  # 9
    (10, TType.STRING, 'displayName', 'UTF8', None, ),  # 10
)
all_structs.append(ncWriteDataReply)
ncWriteDataReply.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'objectId', None, None, ),  # 1
    (2, TType.I64, 'blockId', None, None, ),  # 2
    (3, TType.I64, 'blockoffset', None, None, ),  # 3
    (4, TType.I32, 'storageLength', None, None, ),  # 4
    (5, TType.BOOL, 'compressed', None, False, ),  # 5
    (6, TType.BOOL, 'encrypted', None, False, ),  # 6
)
all_structs.append(ncSyncWriteDataReply)
ncSyncWriteDataReply.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'writeStatus', None, None, ),  # 1
    (2, TType.I64, 'blockId', None, None, ),  # 2
)
all_structs.append(ncGetIOSnapGnsReply)
ncGetIOSnapGnsReply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ioGns', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'snapGnsList', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncGetDataBlockIdReply)
ncGetDataBlockIdReply.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'blockId', None, None, ),  # 1
)
all_structs.append(ncTimePointSecRequest)
ncTimePointSecRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'startTpGns', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'endTpGns', 'UTF8', None, ),  # 2
)
all_structs.append(ncGetSubObjectsReply)
ncGetSubObjectsReply.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'total', None, None, ),  # 1
    (2, TType.LIST, 'objectInfos', (TType.STRUCT, [ncEOSSMetaInfo.ttypes.ncCNSObjectInfo, None], False), None, ),  # 2
    (3, TType.BOOL, 'exist', None, True, ),  # 3
)
all_structs.append(ncGetObjectRequest)
ncGetObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'needMetadata', None, None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
)
all_structs.append(ncGetObjectReply)
ncGetObjectReply.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'exist', None, None, ),  # 1
    (2, TType.STRUCT, 'objectInfo', [ncEOSSMetaInfo.ttypes.ncCNSObjectInfo, None], None, ),  # 2
)
all_structs.append(ncReadObjectRequest)
ncReadObjectRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gnsPath', 'UTF8', None, ),  # 1
    (2, TType.I32, 'traverseMode', None, None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'breakpointExist', None, False, ),  # 4
    (5, TType.STRING, 'breakpointDataObjGns', 'UTF8', None, ),  # 5
    (6, TType.I64, 'breakpointDataBlockOffset', None, 0, ),  # 6
)
fix_spec(all_structs)
del all_structs
