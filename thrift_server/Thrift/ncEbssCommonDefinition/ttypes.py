#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncObjectInfo.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncArchiveCopyStrategyType(object):
  """
  归档策略类型
  """
  T_ARCHIVE_COPY_STRATEGY_TYPE_NEWEST = 1
  T_ARCHIVE_COPY_STRATEGY_TYPE_ALL = 2

  _VALUES_TO_NAMES = {
    1: "T_ARCHIVE_COPY_STRATEGY_TYPE_NEWEST",
    2: "T_ARCHIVE_COPY_STRATEGY_TYPE_ALL",
  }

  _NAMES_TO_VALUES = {
    "T_ARCHIVE_COPY_STRATEGY_TYPE_NEWEST": 1,
    "T_ARCHIVE_COPY_STRATEGY_TYPE_ALL": 2,
  }

class ncBlurayShareType(object):
  """
  蓝光共享类型
  """
  T_BLURAY_SHARE_TYPE_NFS = 1
  T_BLURAY_SHARE_TYPE_CIFS = 2
  T_BLURAY_SHARE_TYPE_S3 = 3

  _VALUES_TO_NAMES = {
    1: "T_BLURAY_SHARE_TYPE_NFS",
    2: "T_BLURAY_SHARE_TYPE_CIFS",
    3: "T_BLURAY_SHARE_TYPE_S3",
  }

  _NAMES_TO_VALUES = {
    "T_BLURAY_SHARE_TYPE_NFS": 1,
    "T_BLURAY_SHARE_TYPE_CIFS": 2,
    "T_BLURAY_SHARE_TYPE_S3": 3,
  }

class ncBlurayProtocolType(object):
  """
  蓝光协议类型
  """
  T_BLURAY_PROTOCOL_TYPE_HTTP = 1
  T_BLURAY_PROTOCOL_TYPE_HTTPS = 2

  _VALUES_TO_NAMES = {
    1: "T_BLURAY_PROTOCOL_TYPE_HTTP",
    2: "T_BLURAY_PROTOCOL_TYPE_HTTPS",
  }

  _NAMES_TO_VALUES = {
    "T_BLURAY_PROTOCOL_TYPE_HTTP": 1,
    "T_BLURAY_PROTOCOL_TYPE_HTTPS": 2,
  }


class ncBluRayInfo(object):
  """
  蓝光信息

  Attributes:
   - bluRayId
   - address
   - sharePath
   - mountPoint
   - shareType
   - protocolType
   - userName
   - userPwd
   - capacity
   - usedCapacity
   - createTime
   - lastModifyTime
   - operatorId
   - operatorName
   - serialNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bluRayId', None, None, ), # 1
    (2, TType.STRING, 'address', None, None, ), # 2
    (3, TType.STRING, 'sharePath', None, None, ), # 3
    (4, TType.STRING, 'mountPoint', None, None, ), # 4
    (5, TType.I32, 'shareType', None, 1, ), # 5
    (6, TType.I32, 'protocolType', None, 1, ), # 6
    (7, TType.STRING, 'userName', None, None, ), # 7
    (8, TType.STRING, 'userPwd', None, None, ), # 8
    (9, TType.I64, 'capacity', None, 0, ), # 9
    (10, TType.I64, 'usedCapacity', None, 0, ), # 10
    (11, TType.I64, 'createTime', None, 0, ), # 11
    (12, TType.I64, 'lastModifyTime', None, 0, ), # 12
    (13, TType.STRING, 'operatorId', None, None, ), # 13
    (14, TType.STRING, 'operatorName', None, None, ), # 14
    (15, TType.STRING, 'serialNum', None, None, ), # 15
  )

  def __init__(self, bluRayId=None, address=None, sharePath=None, mountPoint=None, shareType=thrift_spec[5][4], protocolType=thrift_spec[6][4], userName=None, userPwd=None, capacity=thrift_spec[9][4], usedCapacity=thrift_spec[10][4], createTime=thrift_spec[11][4], lastModifyTime=thrift_spec[12][4], operatorId=None, operatorName=None, serialNum=None,):
    self.bluRayId = bluRayId
    self.address = address
    self.sharePath = sharePath
    self.mountPoint = mountPoint
    self.shareType = shareType
    self.protocolType = protocolType
    self.userName = userName
    self.userPwd = userPwd
    self.capacity = capacity
    self.usedCapacity = usedCapacity
    self.createTime = createTime
    self.lastModifyTime = lastModifyTime
    self.operatorId = operatorId
    self.operatorName = operatorName
    self.serialNum = serialNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bluRayId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.address = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sharePath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mountPoint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.shareType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.protocolType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.userPwd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.capacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.usedCapacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.lastModifyTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.operatorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.operatorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.serialNum = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBluRayInfo')
    if self.bluRayId is not None:
      oprot.writeFieldBegin('bluRayId', TType.STRING, 1)
      oprot.writeString(self.bluRayId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 2)
      oprot.writeString(self.address.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sharePath is not None:
      oprot.writeFieldBegin('sharePath', TType.STRING, 3)
      oprot.writeString(self.sharePath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.mountPoint is not None:
      oprot.writeFieldBegin('mountPoint', TType.STRING, 4)
      oprot.writeString(self.mountPoint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.shareType is not None:
      oprot.writeFieldBegin('shareType', TType.I32, 5)
      oprot.writeI32(self.shareType)
      oprot.writeFieldEnd()
    if self.protocolType is not None:
      oprot.writeFieldBegin('protocolType', TType.I32, 6)
      oprot.writeI32(self.protocolType)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 7)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userPwd is not None:
      oprot.writeFieldBegin('userPwd', TType.STRING, 8)
      oprot.writeString(self.userPwd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.I64, 9)
      oprot.writeI64(self.capacity)
      oprot.writeFieldEnd()
    if self.usedCapacity is not None:
      oprot.writeFieldBegin('usedCapacity', TType.I64, 10)
      oprot.writeI64(self.usedCapacity)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 11)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.lastModifyTime is not None:
      oprot.writeFieldBegin('lastModifyTime', TType.I64, 12)
      oprot.writeI64(self.lastModifyTime)
      oprot.writeFieldEnd()
    if self.operatorId is not None:
      oprot.writeFieldBegin('operatorId', TType.STRING, 13)
      oprot.writeString(self.operatorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.operatorName is not None:
      oprot.writeFieldBegin('operatorName', TType.STRING, 14)
      oprot.writeString(self.operatorName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.serialNum is not None:
      oprot.writeFieldBegin('serialNum', TType.STRING, 15)
      oprot.writeString(self.serialNum.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bluRayId)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.sharePath)
    value = (value * 31) ^ hash(self.mountPoint)
    value = (value * 31) ^ hash(self.shareType)
    value = (value * 31) ^ hash(self.protocolType)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.userPwd)
    value = (value * 31) ^ hash(self.capacity)
    value = (value * 31) ^ hash(self.usedCapacity)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.lastModifyTime)
    value = (value * 31) ^ hash(self.operatorId)
    value = (value * 31) ^ hash(self.operatorName)
    value = (value * 31) ^ hash(self.serialNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetBluRayInfoReply(object):
  """
  获取蓝光信息响应

  Attributes:
   - requestId
   - bluRayInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.LIST, 'bluRayInfos', (TType.STRUCT,(ncBluRayInfo, ncBluRayInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, requestId=None, bluRayInfos=None,):
    self.requestId = requestId
    self.bluRayInfos = bluRayInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.bluRayInfos = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncBluRayInfo()
            _elem5.read(iprot)
            self.bluRayInfos.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetBluRayInfoReply')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.bluRayInfos is not None:
      oprot.writeFieldBegin('bluRayInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.bluRayInfos))
      for iter6 in self.bluRayInfos:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.bluRayInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncArchiveToBluRayRequest(object):
  """
  归档蓝光任务请求

  Attributes:
   - execId
   - machineCode
   - serverIp
   - localIp
   - clusterIp
   - port
   - offlineDetectTime
   - engineType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'execId', None, None, ), # 1
    (2, TType.STRING, 'machineCode', None, None, ), # 2
    (3, TType.STRING, 'serverIp', None, None, ), # 3
    (4, TType.STRING, 'localIp', None, None, ), # 4
    (5, TType.STRING, 'clusterIp', None, None, ), # 5
    (6, TType.I32, 'port', None, None, ), # 6
    (7, TType.I32, 'offlineDetectTime', None, None, ), # 7
    (8, TType.I32, 'engineType', None, None, ), # 8
  )

  def __init__(self, execId=None, machineCode=None, serverIp=None, localIp=None, clusterIp=None, port=None, offlineDetectTime=None, engineType=None,):
    self.execId = execId
    self.machineCode = machineCode
    self.serverIp = serverIp
    self.localIp = localIp
    self.clusterIp = clusterIp
    self.port = port
    self.offlineDetectTime = offlineDetectTime
    self.engineType = engineType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.execId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.machineCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.serverIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.localIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clusterIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.offlineDetectTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncArchiveToBluRayRequest')
    if self.execId is not None:
      oprot.writeFieldBegin('execId', TType.STRING, 1)
      oprot.writeString(self.execId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.machineCode is not None:
      oprot.writeFieldBegin('machineCode', TType.STRING, 2)
      oprot.writeString(self.machineCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.serverIp is not None:
      oprot.writeFieldBegin('serverIp', TType.STRING, 3)
      oprot.writeString(self.serverIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.localIp is not None:
      oprot.writeFieldBegin('localIp', TType.STRING, 4)
      oprot.writeString(self.localIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterIp is not None:
      oprot.writeFieldBegin('clusterIp', TType.STRING, 5)
      oprot.writeString(self.clusterIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 6)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.offlineDetectTime is not None:
      oprot.writeFieldBegin('offlineDetectTime', TType.I32, 7)
      oprot.writeI32(self.offlineDetectTime)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 8)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execId)
    value = (value * 31) ^ hash(self.machineCode)
    value = (value * 31) ^ hash(self.serverIp)
    value = (value * 31) ^ hash(self.localIp)
    value = (value * 31) ^ hash(self.clusterIp)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.offlineDetectTime)
    value = (value * 31) ^ hash(self.engineType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncBluRayCIDObjectRequest(object):
  """
  查询蓝光归档的备份任务信息 请求

  Attributes:
   - bluRayId
   - operatorId
   - gnsPath
   - index
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bluRayId', None, None, ), # 1
    (2, TType.STRING, 'operatorId', None, None, ), # 2
    (3, TType.STRING, 'gnsPath', None, None, ), # 3
    (4, TType.I64, 'index', None, 0, ), # 4
    (5, TType.I32, 'count', None, 0, ), # 5
  )

  def __init__(self, bluRayId=None, operatorId=None, gnsPath=None, index=thrift_spec[4][4], count=thrift_spec[5][4],):
    self.bluRayId = bluRayId
    self.operatorId = operatorId
    self.gnsPath = gnsPath
    self.index = index
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bluRayId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operatorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncBluRayCIDObjectRequest')
    if self.bluRayId is not None:
      oprot.writeFieldBegin('bluRayId', TType.STRING, 1)
      oprot.writeString(self.bluRayId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.operatorId is not None:
      oprot.writeFieldBegin('operatorId', TType.STRING, 2)
      oprot.writeString(self.operatorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 3)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 4)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bluRayId)
    value = (value * 31) ^ hash(self.operatorId)
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncEbssVolumeInfo(object):
  """
  蓝光归档元数据卷信息

  Attributes:
   - volumePath
   - volumeTotalSize
   - usedSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'volumePath', None, None, ), # 1
    (2, TType.I64, 'volumeTotalSize', None, None, ), # 2
    (3, TType.I64, 'usedSize', None, None, ), # 3
  )

  def __init__(self, volumePath=None, volumeTotalSize=None, usedSize=None,):
    self.volumePath = volumePath
    self.volumeTotalSize = volumeTotalSize
    self.usedSize = usedSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.volumePath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.volumeTotalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.usedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEbssVolumeInfo')
    if self.volumePath is not None:
      oprot.writeFieldBegin('volumePath', TType.STRING, 1)
      oprot.writeString(self.volumePath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeTotalSize is not None:
      oprot.writeFieldBegin('volumeTotalSize', TType.I64, 2)
      oprot.writeI64(self.volumeTotalSize)
      oprot.writeFieldEnd()
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.I64, 3)
      oprot.writeI64(self.usedSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.volumePath)
    value = (value * 31) ^ hash(self.volumeTotalSize)
    value = (value * 31) ^ hash(self.usedSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
