# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncOracleConnectInfo(object):
    """
    Attributes:
     - os_user
     - instance_name
     - instance_user
     - instance_pwd

    """


    def __init__(self, os_user=None, instance_name=None, instance_user=None, instance_pwd=None,):
        self.os_user = os_user
        self.instance_name = instance_name
        self.instance_user = instance_user
        self.instance_pwd = instance_pwd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.os_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.instance_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.instance_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.instance_pwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleConnectInfo')
        if self.os_user is not None:
            oprot.writeFieldBegin('os_user', TType.STRING, 1)
            oprot.writeString(self.os_user.encode('utf-8') if sys.version_info[0] == 2 else self.os_user)
            oprot.writeFieldEnd()
        if self.instance_name is not None:
            oprot.writeFieldBegin('instance_name', TType.STRING, 2)
            oprot.writeString(self.instance_name.encode('utf-8') if sys.version_info[0] == 2 else self.instance_name)
            oprot.writeFieldEnd()
        if self.instance_user is not None:
            oprot.writeFieldBegin('instance_user', TType.STRING, 3)
            oprot.writeString(self.instance_user.encode('utf-8') if sys.version_info[0] == 2 else self.instance_user)
            oprot.writeFieldEnd()
        if self.instance_pwd is not None:
            oprot.writeFieldBegin('instance_pwd', TType.STRING, 4)
            oprot.writeString(self.instance_pwd.encode('utf-8') if sys.version_info[0] == 2 else self.instance_pwd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleDataFileInfo(object):
    """
    Attributes:
     - fileNo
     - filePath
     - fileSize

    """


    def __init__(self, fileNo=None, filePath=None, fileSize=None,):
        self.fileNo = fileNo
        self.filePath = filePath
        self.fileSize = fileSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.filePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fileSize = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleDataFileInfo')
        if self.fileNo is not None:
            oprot.writeFieldBegin('fileNo', TType.STRING, 1)
            oprot.writeString(self.fileNo.encode('utf-8') if sys.version_info[0] == 2 else self.fileNo)
            oprot.writeFieldEnd()
        if self.filePath is not None:
            oprot.writeFieldBegin('filePath', TType.STRING, 2)
            oprot.writeString(self.filePath.encode('utf-8') if sys.version_info[0] == 2 else self.filePath)
            oprot.writeFieldEnd()
        if self.fileSize is not None:
            oprot.writeFieldBegin('fileSize', TType.STRING, 3)
            oprot.writeString(self.fileSize.encode('utf-8') if sys.version_info[0] == 2 else self.fileSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetDataFileListRequest(object):
    """
    Attributes:
     - client_id
     - connInfo

    """


    def __init__(self, client_id=None, connInfo=None,):
        self.client_id = client_id
        self.connInfo = connInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.connInfo = ncOracleConnectInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetDataFileListRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 2)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetDataFileListResponse(object):
    """
    Attributes:
     - datafileList

    """


    def __init__(self, datafileList=None,):
        self.datafileList = datafileList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.datafileList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncOracleDataFileInfo()
                        _elem5.read(iprot)
                        self.datafileList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetDataFileListResponse')
        if self.datafileList is not None:
            oprot.writeFieldBegin('datafileList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.datafileList))
            for iter6 in self.datafileList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetClientTimestampRequest(object):
    """
    Attributes:
     - client_id

    """


    def __init__(self, client_id=None,):
        self.client_id = client_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetClientTimestampRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetClientTimestampResponse(object):
    """
    Attributes:
     - timestamp

    """


    def __init__(self, timestamp=None,):
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetClientTimestampResponse')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 1)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetClientRuningInstanceRequest(object):
    """
    Attributes:
     - client_id

    """


    def __init__(self, client_id=None,):
        self.client_id = client_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetClientRuningInstanceRequest')
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 1)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetClientRuningInstanceResponse(object):
    """
    Attributes:
     - runinginstance

    """


    def __init__(self, runinginstance=None,):
        self.runinginstance = runinginstance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.runinginstance = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.runinginstance.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetClientRuningInstanceResponse')
        if self.runinginstance is not None:
            oprot.writeFieldBegin('runinginstance', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.runinginstance))
            for iter13 in self.runinginstance:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetPrimaryDBConvertRequest(object):
    """
    Attributes:
     - connInfo
     - clientId

    """


    def __init__(self, connInfo=None, clientId=None,):
        self.connInfo = connInfo
        self.clientId = clientId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.connInfo = ncOracleConnectInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetPrimaryDBConvertRequest')
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetPrimaryDBConvertResponse(object):
    """
    Attributes:
     - datafileConvertList

    """


    def __init__(self, datafileConvertList=None,):
        self.datafileConvertList = datafileConvertList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.datafileConvertList = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.datafileConvertList.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetPrimaryDBConvertResponse')
        if self.datafileConvertList is not None:
            oprot.writeFieldBegin('datafileConvertList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.datafileConvertList))
            for iter20 in self.datafileConvertList:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetPrimaryLogConvertRequest(object):
    """
    Attributes:
     - connInfo
     - clientId

    """


    def __init__(self, connInfo=None, clientId=None,):
        self.connInfo = connInfo
        self.clientId = clientId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.connInfo = ncOracleConnectInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetPrimaryLogConvertRequest')
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 1)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGetPrimaryLogConvertResponse(object):
    """
    Attributes:
     - logfileConvertList

    """


    def __init__(self, logfileConvertList=None,):
        self.logfileConvertList = logfileConvertList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.logfileConvertList = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.logfileConvertList.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGetPrimaryLogConvertResponse')
        if self.logfileConvertList is not None:
            oprot.writeFieldBegin('logfileConvertList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.logfileConvertList))
            for iter27 in self.logfileConvertList:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGenDGScriptRequest(object):
    """
    Attributes:
     - sourceUserName
     - destUserName
     - fullPath
     - primaryLogArchiveDest1
     - standbyLogArchiveDest1
     - primaryDatafileConvertList
     - standbyDatafileConvertList
     - primaryLogfileConvertList
     - standbyLogfileConvertList
     - clientId
     - connInfo
     - indic

    """


    def __init__(self, sourceUserName=None, destUserName=None, fullPath=None, primaryLogArchiveDest1=None, standbyLogArchiveDest1=None, primaryDatafileConvertList=None, standbyDatafileConvertList=None, primaryLogfileConvertList=None, standbyLogfileConvertList=None, clientId=None, connInfo=None, indic=None,):
        self.sourceUserName = sourceUserName
        self.destUserName = destUserName
        self.fullPath = fullPath
        self.primaryLogArchiveDest1 = primaryLogArchiveDest1
        self.standbyLogArchiveDest1 = standbyLogArchiveDest1
        self.primaryDatafileConvertList = primaryDatafileConvertList
        self.standbyDatafileConvertList = standbyDatafileConvertList
        self.primaryLogfileConvertList = primaryLogfileConvertList
        self.standbyLogfileConvertList = standbyLogfileConvertList
        self.clientId = clientId
        self.connInfo = connInfo
        self.indic = indic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.destUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.primaryLogArchiveDest1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.standbyLogArchiveDest1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.primaryDatafileConvertList = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.primaryDatafileConvertList.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.standbyDatafileConvertList = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.standbyDatafileConvertList.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.primaryLogfileConvertList = []
                    (_etype43, _size40) = iprot.readListBegin()
                    for _i44 in range(_size40):
                        _elem45 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.primaryLogfileConvertList.append(_elem45)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.standbyLogfileConvertList = []
                    (_etype49, _size46) = iprot.readListBegin()
                    for _i50 in range(_size46):
                        _elem51 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.standbyLogfileConvertList.append(_elem51)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.connInfo = ncOracleConnectInfo()
                    self.connInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.indic = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGenDGScriptRequest')
        if self.sourceUserName is not None:
            oprot.writeFieldBegin('sourceUserName', TType.STRING, 1)
            oprot.writeString(self.sourceUserName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceUserName)
            oprot.writeFieldEnd()
        if self.destUserName is not None:
            oprot.writeFieldBegin('destUserName', TType.STRING, 2)
            oprot.writeString(self.destUserName.encode('utf-8') if sys.version_info[0] == 2 else self.destUserName)
            oprot.writeFieldEnd()
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 3)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        if self.primaryLogArchiveDest1 is not None:
            oprot.writeFieldBegin('primaryLogArchiveDest1', TType.STRING, 4)
            oprot.writeString(self.primaryLogArchiveDest1.encode('utf-8') if sys.version_info[0] == 2 else self.primaryLogArchiveDest1)
            oprot.writeFieldEnd()
        if self.standbyLogArchiveDest1 is not None:
            oprot.writeFieldBegin('standbyLogArchiveDest1', TType.STRING, 5)
            oprot.writeString(self.standbyLogArchiveDest1.encode('utf-8') if sys.version_info[0] == 2 else self.standbyLogArchiveDest1)
            oprot.writeFieldEnd()
        if self.primaryDatafileConvertList is not None:
            oprot.writeFieldBegin('primaryDatafileConvertList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.primaryDatafileConvertList))
            for iter52 in self.primaryDatafileConvertList:
                oprot.writeString(iter52.encode('utf-8') if sys.version_info[0] == 2 else iter52)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.standbyDatafileConvertList is not None:
            oprot.writeFieldBegin('standbyDatafileConvertList', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.standbyDatafileConvertList))
            for iter53 in self.standbyDatafileConvertList:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.primaryLogfileConvertList is not None:
            oprot.writeFieldBegin('primaryLogfileConvertList', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.primaryLogfileConvertList))
            for iter54 in self.primaryLogfileConvertList:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.standbyLogfileConvertList is not None:
            oprot.writeFieldBegin('standbyLogfileConvertList', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.standbyLogfileConvertList))
            for iter55 in self.standbyLogfileConvertList:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 10)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.connInfo is not None:
            oprot.writeFieldBegin('connInfo', TType.STRUCT, 11)
            self.connInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.indic is not None:
            oprot.writeFieldBegin('indic', TType.I32, 12)
            oprot.writeI32(self.indic)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncOracleGenDGScriptResponse(object):
    """
    Attributes:
     - scriptPath

    """


    def __init__(self, scriptPath=None,):
        self.scriptPath = scriptPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scriptPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncOracleGenDGScriptResponse')
        if self.scriptPath is not None:
            oprot.writeFieldBegin('scriptPath', TType.STRING, 1)
            oprot.writeString(self.scriptPath.encode('utf-8') if sys.version_info[0] == 2 else self.scriptPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncOracleConnectInfo)
ncOracleConnectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'os_user', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'instance_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'instance_user', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'instance_pwd', 'UTF8', None, ),  # 4
)
all_structs.append(ncOracleDataFileInfo)
ncOracleDataFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileNo', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'filePath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fileSize', 'UTF8', None, ),  # 3
)
all_structs.append(ncOracleGetDataFileListRequest)
ncOracleGetDataFileListRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'connInfo', [ncOracleConnectInfo, None], None, ),  # 2
)
all_structs.append(ncOracleGetDataFileListResponse)
ncOracleGetDataFileListResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'datafileList', (TType.STRUCT, [ncOracleDataFileInfo, None], False), None, ),  # 1
)
all_structs.append(ncOracleGetClientTimestampRequest)
ncOracleGetClientTimestampRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
)
all_structs.append(ncOracleGetClientTimestampResponse)
ncOracleGetClientTimestampResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'timestamp', 'UTF8', None, ),  # 1
)
all_structs.append(ncOracleGetClientRuningInstanceRequest)
ncOracleGetClientRuningInstanceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'client_id', 'UTF8', None, ),  # 1
)
all_structs.append(ncOracleGetClientRuningInstanceResponse)
ncOracleGetClientRuningInstanceResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'runinginstance', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncOracleGetPrimaryDBConvertRequest)
ncOracleGetPrimaryDBConvertRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'connInfo', [ncOracleConnectInfo, None], None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
)
all_structs.append(ncOracleGetPrimaryDBConvertResponse)
ncOracleGetPrimaryDBConvertResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'datafileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncOracleGetPrimaryLogConvertRequest)
ncOracleGetPrimaryLogConvertRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'connInfo', [ncOracleConnectInfo, None], None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
)
all_structs.append(ncOracleGetPrimaryLogConvertResponse)
ncOracleGetPrimaryLogConvertResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'logfileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncOracleGenDGScriptRequest)
ncOracleGenDGScriptRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceUserName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'destUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fullPath', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'primaryLogArchiveDest1', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'standbyLogArchiveDest1', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'primaryDatafileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'standbyDatafileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'primaryLogfileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'standbyLogfileConvertList', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.STRING, 'clientId', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'connInfo', [ncOracleConnectInfo, None], None, ),  # 11
    (12, TType.I32, 'indic', None, None, ),  # 12
)
all_structs.append(ncOracleGenDGScriptResponse)
ncOracleGenDGScriptResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scriptPath', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
