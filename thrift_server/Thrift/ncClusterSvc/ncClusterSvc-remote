#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ncClusterSvc import ncClusterSvc
from ncClusterSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void microprobe()')
    print('  void add_upstream()')
    print('   get_cloud_pools()')
    print('  ncCloudPool get_cloud_pool(string poolId)')
    print('   get_cloud_pool_portals(string poolId)')
    print('  ncVolumeInfo get_fs_volume_info(string poolId, string volumeName)')
    print('  void create_fs_base_volume(ncCreateBaseVolumeRequest request)')
    print('  void delete_fs_volumes(ncDeleteVolumeRequest request)')
    print('  ncHost get_host_by_name(ncGetHostRequest request)')
    print('  void create_host(ncGetHostRequest request)')
    print('  ncPort get_portname(ncGetDriverRequest request)')
    print('  void create_driver(ncGetDriverRequest request)')
    print('  ncHostMapping get_mapping_by_port(ncGetDriverRequest request)')
    print('  void create_driver_host_mapping(ncCreateDriverMappingRequest request)')
    print('   create_fs_volume_mapping(ncFSVolumeMappingRequest request)')
    print('   get_fs_volume_mapping(ncFSVolumeMappingRequest request)')
    print('   get_vbs_volume_mapping(ncCreateBaseVolumeRequest request)')
    print('  void delete_fs_volume_mapping(ncFSVolumeMappingRequest request)')
    print('  void create_fs_snap_volume(ncSnapVolumeRequest request)')
    print('  ncSnapVolumeInfo get_fs_snap_volume_info(string poolId, string snapVolName)')
    print('  void create_fs_clone_volume(ncCloneVolumeRequest request)')
    print('  void register_node(ncNodeInfo node_info)')
    print('  ncNodeDetailInfo get_node_detail_realtime()')
    print('  ncNodeDetailInfo get_node_details()')
    print('   get_node_detail_hour()')
    print('  void restart_service(string service_name)')
    print('  bool start_service_stopped(string service_name)')
    print('  void restart_all_services()')
    print('  bool detect_services( svcs)')
    print('  void ck_stop_services(ncCKNode node)')
    print('   get_avaliable_storage_paths(string parent_path, i32 type)')
    print('  string volume_is_exist(string volume_name, string volume_type, string raid_name)')
    print('  double get_volume_total_size(string path)')
    print('  double get_volume_free_size(string path)')
    print('  string get_nodename(string nodeIp)')
    print('   get_device_infos()')
    print('   get_node_infos()')
    print('  ncNodeInfoReply get_node_info_by_ip(string ip)')
    print('  ncNodeInfoReply get_node_info(ncNodeInfoRequest request)')
    print('  string get_cluster_id_by_vip(string vip)')
    print('  ncClusterLinkInfo create_cluster(ncClusterInfo c_info, string self_ip)')
    print('  ncClusterDetailInfo get_cluster_detailinfo()')
    print('  void update_cluster(ncClusterInfo c_info)')
    print('  void cluster_connection()')
    print('  void certify_cluster(ncCertifyStatus state, string vip, string link_id)')
    print('  ncClusterLinkResponse get_cluster(string link_id, string vip, i64 proxy_set)')
    print('  ncClusterLinkResponse get_cluster_link_info(string id)')
    print('  void delete_cluster(string vip, string link_id)')
    print('   get_clusters( vips)')
    print('   get_clusters_by_ids( ids)')
    print('  ncRaidCard get_raidcard(string raidtype)')
    print('   get_raids(string raidtype, string node_id)')
    print('  string get_raidsname(string raidtype)')
    print('  bool post_raid(string raidname, i64 stripsize, i32 level,  disklist, i32 readcache, i32 writecache, string raidtype, i32 subGroup)')
    print('  void delete_raid(string raidname, string node_id, string raidtype)')
    print('  void put_raid(string raidname, i32 readcache, i32 writecache, string raidtype)')
    print('  void put_rebuild_raid(string raidname,  diskidlist, string raidtype, string node_id)')
    print('  void post_dedicated_spare(string raidname,  disklist, string raidtype, string node_id)')
    print('   get_raids_volume(string node_id, string raidtype)')
    print('   get_local_raids_volume(string raid_name)')
    print('  void delete_raid_spare(string raidname)')
    print('   get_disks(string raidtype, string node_id)')
    print('  void put_disk(string slot, string raidtype, string node_id)')
    print('  void post_spare(string slot, string raidname, string raidtype)')
    print('  void delete_spare( slot, string raidtype)')
    print('   get_ideldisks(string raid_name, string raidtype, string node_id)')
    print('  string create_lvm(string raid_path, string raidname, string volume_name, i64 size_Mb)')
    print('  void remove_umount(string volume_path, string raid_name)')
    print('  void delete_vg_pv(string raid_name, string raid_path)')
    print('  string get_raid_useable(string raid_name, string raidtype)')
    print('  string get_sshd_status()')
    print('  string start_sshd_service()')
    print('  string stop_sshd_service()')
    print('  string get_raid_type()')
    print('   get_volume_info()')
    print('  void write_config(string volume_path, string mount_point, string volume_name, string node_id, string desc, i32 type, i64 pathSize, string raidname, i64 raid_total, i32 raid_type, i64 raid_usable, i32 storage_type, string cloud_block_name)')
    print('  void put_write_config(string volume_name, string desc, i32 type, double pathsize)')
    print('  void delete_config(string volume_name, i32 type)')
    print('   get_hba_infos()')
    print('  string get_raid_path(i32 newid)')
    print('  void set_lvextend(string raidName, string volume_name, i64 size)')
    print('  string get_data_for_ams(string kwargs)')
    print('   get_freesize_by_israid()')
    print('  i32 get_disk_count()')
    print('  void get_path_files_count(string volume_path)')
    print('  void set_lvextend_common(string dev_name, string volume_name, i64 size)')
    print('  ncVolumeCaption get_volume_caption(string path, string cloud_pool_id, string volume_name)')
    print('   get_used_disk_part()')
    print('  void remove_umount_common(string volume_path, string dev_name)')
    print('  i32 check_lvm_status(string volume_name)')
    print('   get_available_volume(string ip, string volume)')
    print('  string get_install_config()')
    print('   get_bridge_counts()')
    print('  void add_new_bridge(ncBridge infos)')
    print('  void edit_old_bridge(ncBridge infos)')
    print('  void delete_old_bridge(ncBridge infos)')
    print('   get_iso_counts()')
    print('  void delete_iso_img(string kwargs)')
    print('   get_net_card()')
    print('  ncCreateLvmRes create_or_put_volume_func(ncCreateLvmReq createLvmReq)')
    print('  string create_mount_fs(string dev_path, string volume_name)')
    print('  string create_sftp_mount_fs(string dev_path, string volume_path)')
    print('  string create_mount_fs_failedover(string dev_path, string volume_name)')
    print('  void remove_umount_fs(string dev_path, string volume_name)')
    print('  void remove_umount_fs_by_path(string dev_path, string volume_path)')
    print('  ncVolumeMappingReply create_volume_mapping(ncVolumeMappingRequest request)')
    print('  bool get_volume_mapping(ncVolumeMappingRequest request)')
    print('  void delete_volume_mapping(ncVolumeMappingRequest request)')
    print('  string get_target_wwn(string server_ip)')
    print('  string get_fs_target_wwn(string server_ip, string cloud_pool_id)')
    print('   get_fs_all_target_wwn(string cloud_pool_id)')
    print('  string get_fs_ip_by_pool_id(string cloud_pool_id)')
    print('   get_service_status( service_type_list)')
    print('  void stop_service( service_type_list)')
    print('  void volumes_failedover(ncMigrationRequest request)')
    print('  string get_target_fc_wwn_map(string host_wwn)')
    print('  void delete_fs_snap_volumes( request)')
    print('  void grant_authority(string volume_path)')
    print('  void grant_authority_failedover(string volume_path)')
    print('  ncMDiskInfoList get_mdisk_infos()')
    print('   get_hardtype()')
    print('  void create_self_volume(string volume_path)')
    print('   get_volume_caption_self(string volume_path)')
    print('  ncVolumeMappingReply create_link(ncVolumeMappingRequest request)')
    print('  void delete_link(string link_id)')
    print('  ncVolumeMappingReply update_link(ncVolumeMappingRequest request)')
    print('  bool check_link(string link_id)')
    print('  bool check_mount_point(string mount_point)')
    print('   get_fc()')
    print('  ncLinkInfo get_link_info(string link_id)')
    print('   select_link(ncLinkInfo request, i32 num)')
    print('   select_fs_link(ncLinkInfo request, i32 num)')
    print('  void switch_language(string code)')
    print('  ncSftpReply create_sftp_user(string user, bool permission, i32 storagetype, string upload_file)')
    print('  ncSftpReply delete_sftp_user(string user)')
    print('  ncSftpReply cancel_sftp_permission(string user)')
    print('  ncSftpReply add_sftp_permission(string user)')
    print('  ncSftpReply change_sftp_password(string user, string password)')
    print('  ncSftpReply chown_user_file(string user, string upload_file)')
    print('  ncSftpReply switch_sftp(string action)')
    print('  ncDataSource get_sftp_file(string user, string node_ip)')
    print('  ncSftpVolUserReponse get_sftp_users(ncSftpVolUserRequest req)')
    print('  bool check_sftp_connection(string user)')
    print('   get_node_monitor_infos(i64 begin_time, i64 end_time)')
    print('  bool check_volume_status(ncCheckVolumeStatusRequest request)')
    print('   get_fs_node_ip(string pool_id)')
    print('   get_proxy_white()')
    print('  void sync_keeplive_conf(string ip, string ip_ex)')
    print('  ncResult commit_db_conf_update(i32 update_mode, string password, string service_name, i32 version, bool is_sync, string file)')
    print('  ncResult reload_services( reload_services)')
    print('   check_service( services)')
    print('  ncDBConfigInfo get_db_config_version_info()')
    print('  string get_db_config_file()')
    print('  bool rollback_db_config()')
    print('  ncCKNodeListReply get_service_info(i32 svc_type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncClusterSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
    if len(args) != 0:
        print('microprobe requires 0 args')
        sys.exit(1)
    pp.pprint(client.microprobe())

elif cmd == 'add_upstream':
    if len(args) != 0:
        print('add_upstream requires 0 args')
        sys.exit(1)
    pp.pprint(client.add_upstream())

elif cmd == 'get_cloud_pools':
    if len(args) != 0:
        print('get_cloud_pools requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cloud_pools())

elif cmd == 'get_cloud_pool':
    if len(args) != 1:
        print('get_cloud_pool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cloud_pool(args[0],))

elif cmd == 'get_cloud_pool_portals':
    if len(args) != 1:
        print('get_cloud_pool_portals requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cloud_pool_portals(args[0],))

elif cmd == 'get_fs_volume_info':
    if len(args) != 2:
        print('get_fs_volume_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_fs_volume_info(args[0], args[1],))

elif cmd == 'create_fs_base_volume':
    if len(args) != 1:
        print('create_fs_base_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_fs_base_volume(eval(args[0]),))

elif cmd == 'delete_fs_volumes':
    if len(args) != 1:
        print('delete_fs_volumes requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_fs_volumes(eval(args[0]),))

elif cmd == 'get_host_by_name':
    if len(args) != 1:
        print('get_host_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_host_by_name(eval(args[0]),))

elif cmd == 'create_host':
    if len(args) != 1:
        print('create_host requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_host(eval(args[0]),))

elif cmd == 'get_portname':
    if len(args) != 1:
        print('get_portname requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_portname(eval(args[0]),))

elif cmd == 'create_driver':
    if len(args) != 1:
        print('create_driver requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_driver(eval(args[0]),))

elif cmd == 'get_mapping_by_port':
    if len(args) != 1:
        print('get_mapping_by_port requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_mapping_by_port(eval(args[0]),))

elif cmd == 'create_driver_host_mapping':
    if len(args) != 1:
        print('create_driver_host_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_driver_host_mapping(eval(args[0]),))

elif cmd == 'create_fs_volume_mapping':
    if len(args) != 1:
        print('create_fs_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_fs_volume_mapping(eval(args[0]),))

elif cmd == 'get_fs_volume_mapping':
    if len(args) != 1:
        print('get_fs_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fs_volume_mapping(eval(args[0]),))

elif cmd == 'get_vbs_volume_mapping':
    if len(args) != 1:
        print('get_vbs_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vbs_volume_mapping(eval(args[0]),))

elif cmd == 'delete_fs_volume_mapping':
    if len(args) != 1:
        print('delete_fs_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_fs_volume_mapping(eval(args[0]),))

elif cmd == 'create_fs_snap_volume':
    if len(args) != 1:
        print('create_fs_snap_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_fs_snap_volume(eval(args[0]),))

elif cmd == 'get_fs_snap_volume_info':
    if len(args) != 2:
        print('get_fs_snap_volume_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_fs_snap_volume_info(args[0], args[1],))

elif cmd == 'create_fs_clone_volume':
    if len(args) != 1:
        print('create_fs_clone_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_fs_clone_volume(eval(args[0]),))

elif cmd == 'register_node':
    if len(args) != 1:
        print('register_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.register_node(eval(args[0]),))

elif cmd == 'get_node_detail_realtime':
    if len(args) != 0:
        print('get_node_detail_realtime requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_detail_realtime())

elif cmd == 'get_node_details':
    if len(args) != 0:
        print('get_node_details requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_details())

elif cmd == 'get_node_detail_hour':
    if len(args) != 0:
        print('get_node_detail_hour requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_detail_hour())

elif cmd == 'restart_service':
    if len(args) != 1:
        print('restart_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart_service(args[0],))

elif cmd == 'start_service_stopped':
    if len(args) != 1:
        print('start_service_stopped requires 1 args')
        sys.exit(1)
    pp.pprint(client.start_service_stopped(args[0],))

elif cmd == 'restart_all_services':
    if len(args) != 0:
        print('restart_all_services requires 0 args')
        sys.exit(1)
    pp.pprint(client.restart_all_services())

elif cmd == 'detect_services':
    if len(args) != 1:
        print('detect_services requires 1 args')
        sys.exit(1)
    pp.pprint(client.detect_services(eval(args[0]),))

elif cmd == 'ck_stop_services':
    if len(args) != 1:
        print('ck_stop_services requires 1 args')
        sys.exit(1)
    pp.pprint(client.ck_stop_services(eval(args[0]),))

elif cmd == 'get_avaliable_storage_paths':
    if len(args) != 2:
        print('get_avaliable_storage_paths requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_avaliable_storage_paths(args[0], eval(args[1]),))

elif cmd == 'volume_is_exist':
    if len(args) != 3:
        print('volume_is_exist requires 3 args')
        sys.exit(1)
    pp.pprint(client.volume_is_exist(args[0], args[1], args[2],))

elif cmd == 'get_volume_total_size':
    if len(args) != 1:
        print('get_volume_total_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume_total_size(args[0],))

elif cmd == 'get_volume_free_size':
    if len(args) != 1:
        print('get_volume_free_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume_free_size(args[0],))

elif cmd == 'get_nodename':
    if len(args) != 1:
        print('get_nodename requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_nodename(args[0],))

elif cmd == 'get_device_infos':
    if len(args) != 0:
        print('get_device_infos requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_device_infos())

elif cmd == 'get_node_infos':
    if len(args) != 0:
        print('get_node_infos requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_node_infos())

elif cmd == 'get_node_info_by_ip':
    if len(args) != 1:
        print('get_node_info_by_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_node_info_by_ip(args[0],))

elif cmd == 'get_node_info':
    if len(args) != 1:
        print('get_node_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_node_info(eval(args[0]),))

elif cmd == 'get_cluster_id_by_vip':
    if len(args) != 1:
        print('get_cluster_id_by_vip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_id_by_vip(args[0],))

elif cmd == 'create_cluster':
    if len(args) != 2:
        print('create_cluster requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_cluster(eval(args[0]), args[1],))

elif cmd == 'get_cluster_detailinfo':
    if len(args) != 0:
        print('get_cluster_detailinfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_detailinfo())

elif cmd == 'update_cluster':
    if len(args) != 1:
        print('update_cluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_cluster(eval(args[0]),))

elif cmd == 'cluster_connection':
    if len(args) != 0:
        print('cluster_connection requires 0 args')
        sys.exit(1)
    pp.pprint(client.cluster_connection())

elif cmd == 'certify_cluster':
    if len(args) != 3:
        print('certify_cluster requires 3 args')
        sys.exit(1)
    pp.pprint(client.certify_cluster(eval(args[0]), args[1], args[2],))

elif cmd == 'get_cluster':
    if len(args) != 3:
        print('get_cluster requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_cluster(args[0], args[1], eval(args[2]),))

elif cmd == 'get_cluster_link_info':
    if len(args) != 1:
        print('get_cluster_link_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_link_info(args[0],))

elif cmd == 'delete_cluster':
    if len(args) != 2:
        print('delete_cluster requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_cluster(args[0], args[1],))

elif cmd == 'get_clusters':
    if len(args) != 1:
        print('get_clusters requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clusters(eval(args[0]),))

elif cmd == 'get_clusters_by_ids':
    if len(args) != 1:
        print('get_clusters_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_clusters_by_ids(eval(args[0]),))

elif cmd == 'get_raidcard':
    if len(args) != 1:
        print('get_raidcard requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raidcard(args[0],))

elif cmd == 'get_raids':
    if len(args) != 2:
        print('get_raids requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_raids(args[0], args[1],))

elif cmd == 'get_raidsname':
    if len(args) != 1:
        print('get_raidsname requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raidsname(args[0],))

elif cmd == 'post_raid':
    if len(args) != 8:
        print('post_raid requires 8 args')
        sys.exit(1)
    pp.pprint(client.post_raid(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), args[6], eval(args[7]),))

elif cmd == 'delete_raid':
    if len(args) != 3:
        print('delete_raid requires 3 args')
        sys.exit(1)
    pp.pprint(client.delete_raid(args[0], args[1], args[2],))

elif cmd == 'put_raid':
    if len(args) != 4:
        print('put_raid requires 4 args')
        sys.exit(1)
    pp.pprint(client.put_raid(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'put_rebuild_raid':
    if len(args) != 4:
        print('put_rebuild_raid requires 4 args')
        sys.exit(1)
    pp.pprint(client.put_rebuild_raid(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'post_dedicated_spare':
    if len(args) != 4:
        print('post_dedicated_spare requires 4 args')
        sys.exit(1)
    pp.pprint(client.post_dedicated_spare(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'get_raids_volume':
    if len(args) != 2:
        print('get_raids_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_raids_volume(args[0], args[1],))

elif cmd == 'get_local_raids_volume':
    if len(args) != 1:
        print('get_local_raids_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_local_raids_volume(args[0],))

elif cmd == 'delete_raid_spare':
    if len(args) != 1:
        print('delete_raid_spare requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_raid_spare(args[0],))

elif cmd == 'get_disks':
    if len(args) != 2:
        print('get_disks requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_disks(args[0], args[1],))

elif cmd == 'put_disk':
    if len(args) != 3:
        print('put_disk requires 3 args')
        sys.exit(1)
    pp.pprint(client.put_disk(args[0], args[1], args[2],))

elif cmd == 'post_spare':
    if len(args) != 3:
        print('post_spare requires 3 args')
        sys.exit(1)
    pp.pprint(client.post_spare(args[0], args[1], args[2],))

elif cmd == 'delete_spare':
    if len(args) != 2:
        print('delete_spare requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_spare(eval(args[0]), args[1],))

elif cmd == 'get_ideldisks':
    if len(args) != 3:
        print('get_ideldisks requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_ideldisks(args[0], args[1], args[2],))

elif cmd == 'create_lvm':
    if len(args) != 4:
        print('create_lvm requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_lvm(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'remove_umount':
    if len(args) != 2:
        print('remove_umount requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_umount(args[0], args[1],))

elif cmd == 'delete_vg_pv':
    if len(args) != 2:
        print('delete_vg_pv requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_vg_pv(args[0], args[1],))

elif cmd == 'get_raid_useable':
    if len(args) != 2:
        print('get_raid_useable requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_raid_useable(args[0], args[1],))

elif cmd == 'get_sshd_status':
    if len(args) != 0:
        print('get_sshd_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sshd_status())

elif cmd == 'start_sshd_service':
    if len(args) != 0:
        print('start_sshd_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.start_sshd_service())

elif cmd == 'stop_sshd_service':
    if len(args) != 0:
        print('stop_sshd_service requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_sshd_service())

elif cmd == 'get_raid_type':
    if len(args) != 0:
        print('get_raid_type requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_raid_type())

elif cmd == 'get_volume_info':
    if len(args) != 0:
        print('get_volume_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_volume_info())

elif cmd == 'write_config':
    if len(args) != 13:
        print('write_config requires 13 args')
        sys.exit(1)
    pp.pprint(client.write_config(args[0], args[1], args[2], args[3], args[4], eval(args[5]), eval(args[6]), args[7], eval(args[8]), eval(args[9]), eval(args[10]), eval(args[11]), args[12],))

elif cmd == 'put_write_config':
    if len(args) != 4:
        print('put_write_config requires 4 args')
        sys.exit(1)
    pp.pprint(client.put_write_config(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'delete_config':
    if len(args) != 2:
        print('delete_config requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_config(args[0], eval(args[1]),))

elif cmd == 'get_hba_infos':
    if len(args) != 0:
        print('get_hba_infos requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_hba_infos())

elif cmd == 'get_raid_path':
    if len(args) != 1:
        print('get_raid_path requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_raid_path(eval(args[0]),))

elif cmd == 'set_lvextend':
    if len(args) != 3:
        print('set_lvextend requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_lvextend(args[0], args[1], eval(args[2]),))

elif cmd == 'get_data_for_ams':
    if len(args) != 1:
        print('get_data_for_ams requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'get_freesize_by_israid':
    if len(args) != 0:
        print('get_freesize_by_israid requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_freesize_by_israid())

elif cmd == 'get_disk_count':
    if len(args) != 0:
        print('get_disk_count requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_disk_count())

elif cmd == 'get_path_files_count':
    if len(args) != 1:
        print('get_path_files_count requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_path_files_count(args[0],))

elif cmd == 'set_lvextend_common':
    if len(args) != 3:
        print('set_lvextend_common requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_lvextend_common(args[0], args[1], eval(args[2]),))

elif cmd == 'get_volume_caption':
    if len(args) != 3:
        print('get_volume_caption requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_volume_caption(args[0], args[1], args[2],))

elif cmd == 'get_used_disk_part':
    if len(args) != 0:
        print('get_used_disk_part requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_used_disk_part())

elif cmd == 'remove_umount_common':
    if len(args) != 2:
        print('remove_umount_common requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_umount_common(args[0], args[1],))

elif cmd == 'check_lvm_status':
    if len(args) != 1:
        print('check_lvm_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_lvm_status(args[0],))

elif cmd == 'get_available_volume':
    if len(args) != 2:
        print('get_available_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_available_volume(args[0], args[1],))

elif cmd == 'get_install_config':
    if len(args) != 0:
        print('get_install_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_install_config())

elif cmd == 'get_bridge_counts':
    if len(args) != 0:
        print('get_bridge_counts requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_bridge_counts())

elif cmd == 'add_new_bridge':
    if len(args) != 1:
        print('add_new_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_new_bridge(eval(args[0]),))

elif cmd == 'edit_old_bridge':
    if len(args) != 1:
        print('edit_old_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.edit_old_bridge(eval(args[0]),))

elif cmd == 'delete_old_bridge':
    if len(args) != 1:
        print('delete_old_bridge requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_old_bridge(eval(args[0]),))

elif cmd == 'get_iso_counts':
    if len(args) != 0:
        print('get_iso_counts requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_iso_counts())

elif cmd == 'delete_iso_img':
    if len(args) != 1:
        print('delete_iso_img requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_iso_img(args[0],))

elif cmd == 'get_net_card':
    if len(args) != 0:
        print('get_net_card requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_net_card())

elif cmd == 'create_or_put_volume_func':
    if len(args) != 1:
        print('create_or_put_volume_func requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_or_put_volume_func(eval(args[0]),))

elif cmd == 'create_mount_fs':
    if len(args) != 2:
        print('create_mount_fs requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_mount_fs(args[0], args[1],))

elif cmd == 'create_sftp_mount_fs':
    if len(args) != 2:
        print('create_sftp_mount_fs requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_sftp_mount_fs(args[0], args[1],))

elif cmd == 'create_mount_fs_failedover':
    if len(args) != 2:
        print('create_mount_fs_failedover requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_mount_fs_failedover(args[0], args[1],))

elif cmd == 'remove_umount_fs':
    if len(args) != 2:
        print('remove_umount_fs requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_umount_fs(args[0], args[1],))

elif cmd == 'remove_umount_fs_by_path':
    if len(args) != 2:
        print('remove_umount_fs_by_path requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_umount_fs_by_path(args[0], args[1],))

elif cmd == 'create_volume_mapping':
    if len(args) != 1:
        print('create_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_volume_mapping(eval(args[0]),))

elif cmd == 'get_volume_mapping':
    if len(args) != 1:
        print('get_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume_mapping(eval(args[0]),))

elif cmd == 'delete_volume_mapping':
    if len(args) != 1:
        print('delete_volume_mapping requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_volume_mapping(eval(args[0]),))

elif cmd == 'get_target_wwn':
    if len(args) != 1:
        print('get_target_wwn requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_target_wwn(args[0],))

elif cmd == 'get_fs_target_wwn':
    if len(args) != 2:
        print('get_fs_target_wwn requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_fs_target_wwn(args[0], args[1],))

elif cmd == 'get_fs_all_target_wwn':
    if len(args) != 1:
        print('get_fs_all_target_wwn requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fs_all_target_wwn(args[0],))

elif cmd == 'get_fs_ip_by_pool_id':
    if len(args) != 1:
        print('get_fs_ip_by_pool_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fs_ip_by_pool_id(args[0],))

elif cmd == 'get_service_status':
    if len(args) != 1:
        print('get_service_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_status(eval(args[0]),))

elif cmd == 'stop_service':
    if len(args) != 1:
        print('stop_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_service(eval(args[0]),))

elif cmd == 'volumes_failedover':
    if len(args) != 1:
        print('volumes_failedover requires 1 args')
        sys.exit(1)
    pp.pprint(client.volumes_failedover(eval(args[0]),))

elif cmd == 'get_target_fc_wwn_map':
    if len(args) != 1:
        print('get_target_fc_wwn_map requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_target_fc_wwn_map(args[0],))

elif cmd == 'delete_fs_snap_volumes':
    if len(args) != 1:
        print('delete_fs_snap_volumes requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_fs_snap_volumes(eval(args[0]),))

elif cmd == 'grant_authority':
    if len(args) != 1:
        print('grant_authority requires 1 args')
        sys.exit(1)
    pp.pprint(client.grant_authority(args[0],))

elif cmd == 'grant_authority_failedover':
    if len(args) != 1:
        print('grant_authority_failedover requires 1 args')
        sys.exit(1)
    pp.pprint(client.grant_authority_failedover(args[0],))

elif cmd == 'get_mdisk_infos':
    if len(args) != 0:
        print('get_mdisk_infos requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_mdisk_infos())

elif cmd == 'get_hardtype':
    if len(args) != 0:
        print('get_hardtype requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_hardtype())

elif cmd == 'create_self_volume':
    if len(args) != 1:
        print('create_self_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_self_volume(args[0],))

elif cmd == 'get_volume_caption_self':
    if len(args) != 1:
        print('get_volume_caption_self requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume_caption_self(args[0],))

elif cmd == 'create_link':
    if len(args) != 1:
        print('create_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_link(eval(args[0]),))

elif cmd == 'delete_link':
    if len(args) != 1:
        print('delete_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_link(args[0],))

elif cmd == 'update_link':
    if len(args) != 1:
        print('update_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_link(eval(args[0]),))

elif cmd == 'check_link':
    if len(args) != 1:
        print('check_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_link(args[0],))

elif cmd == 'check_mount_point':
    if len(args) != 1:
        print('check_mount_point requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_mount_point(args[0],))

elif cmd == 'get_fc':
    if len(args) != 0:
        print('get_fc requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_fc())

elif cmd == 'get_link_info':
    if len(args) != 1:
        print('get_link_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_link_info(args[0],))

elif cmd == 'select_link':
    if len(args) != 2:
        print('select_link requires 2 args')
        sys.exit(1)
    pp.pprint(client.select_link(eval(args[0]), eval(args[1]),))

elif cmd == 'select_fs_link':
    if len(args) != 2:
        print('select_fs_link requires 2 args')
        sys.exit(1)
    pp.pprint(client.select_fs_link(eval(args[0]), eval(args[1]),))

elif cmd == 'switch_language':
    if len(args) != 1:
        print('switch_language requires 1 args')
        sys.exit(1)
    pp.pprint(client.switch_language(args[0],))

elif cmd == 'create_sftp_user':
    if len(args) != 4:
        print('create_sftp_user requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_sftp_user(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'delete_sftp_user':
    if len(args) != 1:
        print('delete_sftp_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_sftp_user(args[0],))

elif cmd == 'cancel_sftp_permission':
    if len(args) != 1:
        print('cancel_sftp_permission requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancel_sftp_permission(args[0],))

elif cmd == 'add_sftp_permission':
    if len(args) != 1:
        print('add_sftp_permission requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_sftp_permission(args[0],))

elif cmd == 'change_sftp_password':
    if len(args) != 2:
        print('change_sftp_password requires 2 args')
        sys.exit(1)
    pp.pprint(client.change_sftp_password(args[0], args[1],))

elif cmd == 'chown_user_file':
    if len(args) != 2:
        print('chown_user_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.chown_user_file(args[0], args[1],))

elif cmd == 'switch_sftp':
    if len(args) != 1:
        print('switch_sftp requires 1 args')
        sys.exit(1)
    pp.pprint(client.switch_sftp(args[0],))

elif cmd == 'get_sftp_file':
    if len(args) != 2:
        print('get_sftp_file requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_sftp_file(args[0], args[1],))

elif cmd == 'get_sftp_users':
    if len(args) != 1:
        print('get_sftp_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sftp_users(eval(args[0]),))

elif cmd == 'check_sftp_connection':
    if len(args) != 1:
        print('check_sftp_connection requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_sftp_connection(args[0],))

elif cmd == 'get_node_monitor_infos':
    if len(args) != 2:
        print('get_node_monitor_infos requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_node_monitor_infos(eval(args[0]), eval(args[1]),))

elif cmd == 'check_volume_status':
    if len(args) != 1:
        print('check_volume_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_volume_status(eval(args[0]),))

elif cmd == 'get_fs_node_ip':
    if len(args) != 1:
        print('get_fs_node_ip requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fs_node_ip(args[0],))

elif cmd == 'get_proxy_white':
    if len(args) != 0:
        print('get_proxy_white requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_proxy_white())

elif cmd == 'sync_keeplive_conf':
    if len(args) != 2:
        print('sync_keeplive_conf requires 2 args')
        sys.exit(1)
    pp.pprint(client.sync_keeplive_conf(args[0], args[1],))

elif cmd == 'commit_db_conf_update':
    if len(args) != 6:
        print('commit_db_conf_update requires 6 args')
        sys.exit(1)
    pp.pprint(client.commit_db_conf_update(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'reload_services':
    if len(args) != 1:
        print('reload_services requires 1 args')
        sys.exit(1)
    pp.pprint(client.reload_services(eval(args[0]),))

elif cmd == 'check_service':
    if len(args) != 1:
        print('check_service requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_service(eval(args[0]),))

elif cmd == 'get_db_config_version_info':
    if len(args) != 0:
        print('get_db_config_version_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_db_config_version_info())

elif cmd == 'get_db_config_file':
    if len(args) != 0:
        print('get_db_config_file requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_db_config_file())

elif cmd == 'rollback_db_config':
    if len(args) != 0:
        print('rollback_db_config requires 0 args')
        sys.exit(1)
    pp.pprint(client.rollback_db_config())

elif cmd == 'get_service_info':
    if len(args) != 1:
        print('get_service_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_info(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
