# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncDBInstanceRequest(object):
    """
    Attributes:
     - instanceName
     - clientMac
     - clientId
     - jobType
     - osUser

    """


    def __init__(self, instanceName=None, clientMac=None, clientId=None, jobType=None, osUser=None,):
        self.instanceName = instanceName
        self.clientMac = clientMac
        self.clientId = clientId
        self.jobType = jobType
        self.osUser = osUser

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.osUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBInstanceRequest')
        if self.instanceName is not None:
            oprot.writeFieldBegin('instanceName', TType.STRING, 1)
            oprot.writeString(self.instanceName.encode('utf-8') if sys.version_info[0] == 2 else self.instanceName)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 2)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 3)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 4)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.osUser is not None:
            oprot.writeFieldBegin('osUser', TType.STRING, 5)
            oprot.writeString(self.osUser.encode('utf-8') if sys.version_info[0] == 2 else self.osUser)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.instanceName is None:
            raise TProtocolException(message='Required field instanceName is unset!')
        if self.clientId is None:
            raise TProtocolException(message='Required field clientId is unset!')
        if self.jobType is None:
            raise TProtocolException(message='Required field jobType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDBInstanceResponse(object):
    """
    Attributes:
     - instanceName
     - username
     - password
     - port
     - customer
     - osUserName
     - instance_organization

    """


    def __init__(self, instanceName=None, username=None, password=None, port=None, customer=None, osUserName=None, instance_organization=None,):
        self.instanceName = instanceName
        self.username = username
        self.password = password
        self.port = port
        self.customer = customer
        self.osUserName = osUserName
        self.instance_organization = instance_organization

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.instanceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.osUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.instance_organization = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBInstanceResponse')
        if self.instanceName is not None:
            oprot.writeFieldBegin('instanceName', TType.STRING, 1)
            oprot.writeString(self.instanceName.encode('utf-8') if sys.version_info[0] == 2 else self.instanceName)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 4)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 5)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.osUserName is not None:
            oprot.writeFieldBegin('osUserName', TType.STRING, 6)
            oprot.writeString(self.osUserName.encode('utf-8') if sys.version_info[0] == 2 else self.osUserName)
            oprot.writeFieldEnd()
        if self.instance_organization is not None:
            oprot.writeFieldBegin('instance_organization', TType.STRING, 7)
            oprot.writeString(self.instance_organization.encode('utf-8') if sys.version_info[0] == 2 else self.instance_organization)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.instanceName is None:
            raise TProtocolException(message='Required field instanceName is unset!')
        if self.username is None:
            raise TProtocolException(message='Required field username is unset!')
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncDBInstancesResponse(object):
    """
    Attributes:
     - insts

    """


    def __init__(self, insts=None,):
        self.insts = insts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.insts = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncDBInstanceResponse()
                        _elem5.read(iprot)
                        self.insts.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncDBInstancesResponse')
        if self.insts is not None:
            oprot.writeFieldBegin('insts', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.insts))
            for iter6 in self.insts:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.insts is None:
            raise TProtocolException(message='Required field insts is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncDBInstanceRequest)
ncDBInstanceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientMac', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'clientId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'jobType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'osUser', 'UTF8', None, ),  # 5
)
all_structs.append(ncDBInstanceResponse)
ncDBInstanceResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'instanceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'port', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'customer', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'osUserName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'instance_organization', 'UTF8', None, ),  # 7
)
all_structs.append(ncDBInstancesResponse)
ncDBInstancesResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'insts', (TType.STRUCT, [ncDBInstanceResponse, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
