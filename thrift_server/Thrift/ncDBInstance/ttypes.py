#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncDBInstanceRequest(object):
  """
  Attributes:
   - instanceName
   - clientMac
   - clientId
   - jobType
   - osUser
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceName', None, None, ), # 1
    (2, TType.STRING, 'clientMac', None, None, ), # 2
    (3, TType.STRING, 'clientId', None, None, ), # 3
    (4, TType.STRING, 'jobType', None, None, ), # 4
    (5, TType.STRING, 'osUser', None, None, ), # 5
  )

  def __init__(self, instanceName=None, clientMac=None, clientId=None, jobType=None, osUser=None,):
    self.instanceName = instanceName
    self.clientMac = clientMac
    self.clientId = clientId
    self.jobType = jobType
    self.osUser = osUser

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.osUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDBInstanceRequest')
    if self.instanceName is not None:
      oprot.writeFieldBegin('instanceName', TType.STRING, 1)
      oprot.writeString(self.instanceName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 2)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 3)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 4)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osUser is not None:
      oprot.writeFieldBegin('osUser', TType.STRING, 5)
      oprot.writeString(self.osUser.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instanceName is None:
      raise TProtocol.TProtocolException(message='Required field instanceName is unset!')
    if self.clientId is None:
      raise TProtocol.TProtocolException(message='Required field clientId is unset!')
    if self.jobType is None:
      raise TProtocol.TProtocolException(message='Required field jobType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.instanceName)
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.osUser)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDBInstanceResponse(object):
  """
  Attributes:
   - instanceName
   - username
   - password
   - port
   - customer
   - osUserName
   - instance_organization
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceName', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.STRING, 'port', None, None, ), # 4
    (5, TType.STRING, 'customer', None, None, ), # 5
    (6, TType.STRING, 'osUserName', None, None, ), # 6
    (7, TType.STRING, 'instance_organization', None, None, ), # 7
  )

  def __init__(self, instanceName=None, username=None, password=None, port=None, customer=None, osUserName=None, instance_organization=None,):
    self.instanceName = instanceName
    self.username = username
    self.password = password
    self.port = port
    self.customer = customer
    self.osUserName = osUserName
    self.instance_organization = instance_organization

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.port = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.osUserName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.instance_organization = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDBInstanceResponse')
    if self.instanceName is not None:
      oprot.writeFieldBegin('instanceName', TType.STRING, 1)
      oprot.writeString(self.instanceName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.STRING, 4)
      oprot.writeString(self.port.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 5)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osUserName is not None:
      oprot.writeFieldBegin('osUserName', TType.STRING, 6)
      oprot.writeString(self.osUserName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instance_organization is not None:
      oprot.writeFieldBegin('instance_organization', TType.STRING, 7)
      oprot.writeString(self.instance_organization.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instanceName is None:
      raise TProtocol.TProtocolException(message='Required field instanceName is unset!')
    if self.username is None:
      raise TProtocol.TProtocolException(message='Required field username is unset!')
    if self.password is None:
      raise TProtocol.TProtocolException(message='Required field password is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.instanceName)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.osUserName)
    value = (value * 31) ^ hash(self.instance_organization)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDBInstancesResponse(object):
  """
  Attributes:
   - insts
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'insts', (TType.STRUCT,(ncDBInstanceResponse, ncDBInstanceResponse.thrift_spec)), None, ), # 1
  )

  def __init__(self, insts=None,):
    self.insts = insts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.insts = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncDBInstanceResponse()
            _elem5.read(iprot)
            self.insts.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDBInstancesResponse')
    if self.insts is not None:
      oprot.writeFieldBegin('insts', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.insts))
      for iter6 in self.insts:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.insts is None:
      raise TProtocol.TProtocolException(message='Required field insts is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.insts)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
