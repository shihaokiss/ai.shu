#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncSnapStoreMgmSvc import ncSnapStoreMgmSvc
from ncSnapStoreMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void Microprobe()')
  print('  ncGetSnapPoolListResponse GetSnapPoolList(ncGetSnapPoolListRequest request)')
  print('  ncGetSnapPoolResponse GetSnapPool(ncGetSnapPoolRequest request)')
  print('  ncCreateSnapPoolResponse CreateSnapPool(ncCreateSnapPoolRequest request)')
  print('  void ModifySnapPool(ncModifySnapPoolRequest request)')
  print('  ncMDiskInfoList GetDiskInfosOfSnapPool(string snappoolUuid)')
  print('  ncBaseVolumeInfoList GetBaseVolumeInfosOfSnapPool(string snappoolUuid)')
  print('  ncSnapPoolSpaceInfo GetSpaceInfoOfSnapPool(string snappoolUuid)')
  print('  void DelSnapPool(string snappoolUuid)')
  print('  ncCreateBaseVolumeResponse CreateBaseVolumes(ncCreateBaseVolumeRequest request)')
  print('  void DelBaseVolumes(ncCreateBaseVolumeRequest request)')
  print('  ncCreateSnapVolumeResponse CreateSnapVolume(ncCreateSnapVolumeRequest request)')
  print('  void DelSnapVolumes(ncDelSnapVolumeRequest request)')
  print('  ncCreateCloneVolumeResponse CreateCloneVolume(ncCreateCloneVolumeRequest request)')
  print('  void DelCloneVolumes(ncDelCloneVolumeRequest request)')
  print('  ncVolumeSpaceInfo StatBaseVolume(ncStatBaseVolumeRequest request)')
  print('  ncVolumeSpaceInfo StatSnapVolume(ncStatSnapVolumeRequest request)')
  print('  ncVolumeSpaceInfo StatCloneVolume(ncStatCloneVolumeRequest request)')
  print('  ncGetBaseVolumeListResponse GetBaseVolumeList(ncGetBaseVolumeListRequest request)')
  print('  ncGetSnapVolumeListResponse GetSnapVolumeList(ncGetSnapVolumeListRequest request)')
  print('  ncGetCloneVolumeListResponse GetCloneVolumeList(ncGetCloneVolumeListRequest request)')
  print('  ncCleanBaseVolumeResponse CleanBaseVolume(ncCleanBaseVolumeRequest request)')
  print('  string CommitSyncTask(ncSyncSnapVolumeTask request)')
  print('  void StopSyncTask(string taskId)')
  print('  ncSyncSnapVolumeProgress QuerySyncTaskProgress(string taskId)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncSnapStoreMgmSvc.Client(protocol)
transport.open()

if cmd == 'Microprobe':
  if len(args) != 0:
    print('Microprobe requires 0 args')
    sys.exit(1)
  pp.pprint(client.Microprobe())

elif cmd == 'GetSnapPoolList':
  if len(args) != 1:
    print('GetSnapPoolList requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSnapPoolList(eval(args[0]),))

elif cmd == 'GetSnapPool':
  if len(args) != 1:
    print('GetSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSnapPool(eval(args[0]),))

elif cmd == 'CreateSnapPool':
  if len(args) != 1:
    print('CreateSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.CreateSnapPool(eval(args[0]),))

elif cmd == 'ModifySnapPool':
  if len(args) != 1:
    print('ModifySnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.ModifySnapPool(eval(args[0]),))

elif cmd == 'GetDiskInfosOfSnapPool':
  if len(args) != 1:
    print('GetDiskInfosOfSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetDiskInfosOfSnapPool(args[0],))

elif cmd == 'GetBaseVolumeInfosOfSnapPool':
  if len(args) != 1:
    print('GetBaseVolumeInfosOfSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetBaseVolumeInfosOfSnapPool(args[0],))

elif cmd == 'GetSpaceInfoOfSnapPool':
  if len(args) != 1:
    print('GetSpaceInfoOfSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSpaceInfoOfSnapPool(args[0],))

elif cmd == 'DelSnapPool':
  if len(args) != 1:
    print('DelSnapPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.DelSnapPool(args[0],))

elif cmd == 'CreateBaseVolumes':
  if len(args) != 1:
    print('CreateBaseVolumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.CreateBaseVolumes(eval(args[0]),))

elif cmd == 'DelBaseVolumes':
  if len(args) != 1:
    print('DelBaseVolumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.DelBaseVolumes(eval(args[0]),))

elif cmd == 'CreateSnapVolume':
  if len(args) != 1:
    print('CreateSnapVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.CreateSnapVolume(eval(args[0]),))

elif cmd == 'DelSnapVolumes':
  if len(args) != 1:
    print('DelSnapVolumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.DelSnapVolumes(eval(args[0]),))

elif cmd == 'CreateCloneVolume':
  if len(args) != 1:
    print('CreateCloneVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.CreateCloneVolume(eval(args[0]),))

elif cmd == 'DelCloneVolumes':
  if len(args) != 1:
    print('DelCloneVolumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.DelCloneVolumes(eval(args[0]),))

elif cmd == 'StatBaseVolume':
  if len(args) != 1:
    print('StatBaseVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.StatBaseVolume(eval(args[0]),))

elif cmd == 'StatSnapVolume':
  if len(args) != 1:
    print('StatSnapVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.StatSnapVolume(eval(args[0]),))

elif cmd == 'StatCloneVolume':
  if len(args) != 1:
    print('StatCloneVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.StatCloneVolume(eval(args[0]),))

elif cmd == 'GetBaseVolumeList':
  if len(args) != 1:
    print('GetBaseVolumeList requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetBaseVolumeList(eval(args[0]),))

elif cmd == 'GetSnapVolumeList':
  if len(args) != 1:
    print('GetSnapVolumeList requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSnapVolumeList(eval(args[0]),))

elif cmd == 'GetCloneVolumeList':
  if len(args) != 1:
    print('GetCloneVolumeList requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetCloneVolumeList(eval(args[0]),))

elif cmd == 'CleanBaseVolume':
  if len(args) != 1:
    print('CleanBaseVolume requires 1 args')
    sys.exit(1)
  pp.pprint(client.CleanBaseVolume(eval(args[0]),))

elif cmd == 'CommitSyncTask':
  if len(args) != 1:
    print('CommitSyncTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.CommitSyncTask(eval(args[0]),))

elif cmd == 'StopSyncTask':
  if len(args) != 1:
    print('StopSyncTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.StopSyncTask(args[0],))

elif cmd == 'QuerySyncTaskProgress':
  if len(args) != 1:
    print('QuerySyncTaskProgress requires 1 args')
    sys.exit(1)
  pp.pprint(client.QuerySyncTaskProgress(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
