#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncDataSource.ttypes
import ncEEFJobBase.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncDSReqForEPMS(object):
  """
  epms客户端向epms服务端发送结构体
  emps服务端将dataSourceRequest转发给clientId对应的客户端


  Attributes:
   - clientId
   - dataSourceRequest
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'dataSourceRequest', (ncDataSource.ttypes.ncDataSourceRequest, ncDataSource.ttypes.ncDataSourceRequest.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, dataSourceRequest=None,):
    self.clientId = clientId
    self.dataSourceRequest = dataSourceRequest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dataSourceRequest = ncDataSource.ttypes.ncDataSourceRequest()
          self.dataSourceRequest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDSReqForEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dataSourceRequest is not None:
      oprot.writeFieldBegin('dataSourceRequest', TType.STRUCT, 2)
      self.dataSourceRequest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.dataSourceRequest)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCheckProcessForEPMS(object):
  """
  epms客户端向epms服务端发送结构体


  Attributes:
   - clientId
   - connInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'connInfo', (ncEEFJobBase.ttypes.ncEEFConnectionInfo, ncEEFJobBase.ttypes.ncEEFConnectionInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, connInfo=None,):
    self.clientId = clientId
    self.connInfo = connInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.connInfo = ncEEFJobBase.ttypes.ncEEFConnectionInfo()
          self.connInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCheckProcessForEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.connInfo is not None:
      oprot.writeFieldBegin('connInfo', TType.STRUCT, 2)
      self.connInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.connInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncJobBaseForEPMS(object):
  """
  epms客户端向epms服务端发送结构体
  emps服务端将dataSourceRequest转发给clientId对应的客户端


  Attributes:
   - clientId
   - baseInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'baseInfo', (ncEEFJobBase.ttypes.ncEEFBase, ncEEFJobBase.ttypes.ncEEFBase.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, baseInfo=None,):
    self.clientId = clientId
    self.baseInfo = baseInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseInfo = ncEEFJobBase.ttypes.ncEEFBase()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncJobBaseForEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 2)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.baseInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataConfigInfoSetForEPMS(object):
  """
  Attributes:
   - clientId
   - dataConfigInfoSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'dataConfigInfoSet', (ncDataSource.ttypes.ncDataConfigInfoSet, ncDataSource.ttypes.ncDataConfigInfoSet.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, dataConfigInfoSet=None,):
    self.clientId = clientId
    self.dataConfigInfoSet = dataConfigInfoSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dataConfigInfoSet = ncDataSource.ttypes.ncDataConfigInfoSet()
          self.dataConfigInfoSet.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataConfigInfoSetForEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dataConfigInfoSet is not None:
      oprot.writeFieldBegin('dataConfigInfoSet', TType.STRUCT, 2)
      self.dataConfigInfoSet.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.dataConfigInfoSet)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientMetaInfo(object):
  """
  Attributes:
   - machine_code
   - client_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'machine_code', None, None, ), # 1
    (2, TType.STRING, 'client_id', None, None, ), # 2
  )

  def __init__(self, machine_code=None, client_id=None,):
    self.machine_code = machine_code
    self.client_id = client_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.machine_code = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientMetaInfo')
    if self.machine_code is not None:
      oprot.writeFieldBegin('machine_code', TType.STRING, 1)
      oprot.writeString(self.machine_code.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 2)
      oprot.writeString(self.client_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.machine_code is None:
      raise TProtocol.TProtocolException(message='Required field machine_code is unset!')
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.machine_code)
    value = (value * 31) ^ hash(self.client_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataConfigInfoSetWrapper(object):
  """
  Attributes:
   - client_meta
   - data_config_info_set
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'client_meta', (ncClientMetaInfo, ncClientMetaInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'data_config_info_set', (ncDataSource.ttypes.ncDataConfigInfoSet, ncDataSource.ttypes.ncDataConfigInfoSet.thrift_spec), None, ), # 2
  )

  def __init__(self, client_meta=None, data_config_info_set=None,):
    self.client_meta = client_meta
    self.data_config_info_set = data_config_info_set

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.client_meta = ncClientMetaInfo()
          self.client_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.data_config_info_set = ncDataSource.ttypes.ncDataConfigInfoSet()
          self.data_config_info_set.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataConfigInfoSetWrapper')
    if self.client_meta is not None:
      oprot.writeFieldBegin('client_meta', TType.STRUCT, 1)
      self.client_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.data_config_info_set is not None:
      oprot.writeFieldBegin('data_config_info_set', TType.STRUCT, 2)
      self.data_config_info_set.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_meta is None:
      raise TProtocol.TProtocolException(message='Required field client_meta is unset!')
    if self.data_config_info_set is None:
      raise TProtocol.TProtocolException(message='Required field data_config_info_set is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_meta)
    value = (value * 31) ^ hash(self.data_config_info_set)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCheckPathParEPMS(object):
  """
  Attributes:
   - clientId
   - cPath
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'cPath', (ncDataSource.ttypes.ncCheckPathPar, ncDataSource.ttypes.ncCheckPathPar.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, cPath=None,):
    self.clientId = clientId
    self.cPath = cPath

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cPath = ncDataSource.ttypes.ncCheckPathPar()
          self.cPath.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCheckPathParEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cPath is not None:
      oprot.writeFieldBegin('cPath', TType.STRUCT, 2)
      self.cPath.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.cPath)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientDbUsersEPMS(object):
  """
  Attributes:
   - clientId
   - users
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRUCT, 'users', (ncDataSource.ttypes.ncOSUSersInfoSet, ncDataSource.ttypes.ncOSUSersInfoSet.thrift_spec), None, ), # 2
  )

  def __init__(self, clientId=None, users=None,):
    self.clientId = clientId
    self.users = users

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.users = ncDataSource.ttypes.ncOSUSersInfoSet()
          self.users.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientDbUsersEPMS')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.users is not None:
      oprot.writeFieldBegin('users', TType.STRUCT, 2)
      self.users.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.users)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
