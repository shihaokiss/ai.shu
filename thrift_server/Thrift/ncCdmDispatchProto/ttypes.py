#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncScheTask_Var.ttypes
import ncCdmDispatchCommon.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncTimePointStatus(object):
  UNFINISH = 0
  FINISH = 1
  DELETE = 2

  _VALUES_TO_NAMES = {
    0: "UNFINISH",
    1: "FINISH",
    2: "DELETE",
  }

  _NAMES_TO_VALUES = {
    "UNFINISH": 0,
    "FINISH": 1,
    "DELETE": 2,
  }


class ncImage(object):
  """
  Attributes:
   - id
   - type
   - name
   - status
   - size
   - poolId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.I64, 'size', None, None, ), # 5
    (6, TType.STRING, 'poolId', None, None, ), # 6
  )

  def __init__(self, id=None, type=None, name=None, status=None, size=None, poolId=None,):
    self.id = id
    self.type = type
    self.name = name
    self.status = status
    self.size = size
    self.poolId = poolId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.size = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.poolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncImage')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I64, 5)
      oprot.writeI64(self.size)
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.STRING, 6)
      oprot.writeString(self.poolId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.poolId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncThriftCdmLunInfo(object):
  """
  基本卷信息

  Attributes:
   - lunId
   - totalSize
   - usedSize
   - fullPath
   - lunConfig
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lunId', None, None, ), # 1
    (2, TType.I64, 'totalSize', None, None, ), # 2
    (3, TType.I64, 'usedSize', None, None, ), # 3
    (4, TType.STRING, 'fullPath', None, None, ), # 4
    (5, TType.STRING, 'lunConfig', None, None, ), # 5
  )

  def __init__(self, lunId=None, totalSize=None, usedSize=None, fullPath=None, lunConfig=None,):
    self.lunId = lunId
    self.totalSize = totalSize
    self.usedSize = usedSize
    self.fullPath = fullPath
    self.lunConfig = lunConfig

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.lunId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.totalSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.usedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fullPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lunConfig = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncThriftCdmLunInfo')
    if self.lunId is not None:
      oprot.writeFieldBegin('lunId', TType.STRING, 1)
      oprot.writeString(self.lunId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalSize is not None:
      oprot.writeFieldBegin('totalSize', TType.I64, 2)
      oprot.writeI64(self.totalSize)
      oprot.writeFieldEnd()
    if self.usedSize is not None:
      oprot.writeFieldBegin('usedSize', TType.I64, 3)
      oprot.writeI64(self.usedSize)
      oprot.writeFieldEnd()
    if self.fullPath is not None:
      oprot.writeFieldBegin('fullPath', TType.STRING, 4)
      oprot.writeString(self.fullPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.lunConfig is not None:
      oprot.writeFieldBegin('lunConfig', TType.STRING, 5)
      oprot.writeString(self.lunConfig.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lunId)
    value = (value * 31) ^ hash(self.totalSize)
    value = (value * 31) ^ hash(self.usedSize)
    value = (value * 31) ^ hash(self.fullPath)
    value = (value * 31) ^ hash(self.lunConfig)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCdmLunInfoList(object):
  """
  基本卷列表

  Attributes:
   - cdmLunInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cdmLunInfoList', (TType.STRUCT,(ncThriftCdmLunInfo, ncThriftCdmLunInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, cdmLunInfoList=None,):
    self.cdmLunInfoList = cdmLunInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cdmLunInfoList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncThriftCdmLunInfo()
            _elem5.read(iprot)
            self.cdmLunInfoList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCdmLunInfoList')
    if self.cdmLunInfoList is not None:
      oprot.writeFieldBegin('cdmLunInfoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cdmLunInfoList))
      for iter6 in self.cdmLunInfoList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cdmLunInfoList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncThriftVmInfo(object):
  """
  虚拟机信息

  Attributes:
   - srcVmId
   - srcVmName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'srcVmId', None, None, ), # 1
    (2, TType.STRING, 'srcVmName', None, None, ), # 2
  )

  def __init__(self, srcVmId=None, srcVmName=None,):
    self.srcVmId = srcVmId
    self.srcVmName = srcVmName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.srcVmId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.srcVmName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncThriftVmInfo')
    if self.srcVmId is not None:
      oprot.writeFieldBegin('srcVmId', TType.STRING, 1)
      oprot.writeString(self.srcVmId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcVmName is not None:
      oprot.writeFieldBegin('srcVmName', TType.STRING, 2)
      oprot.writeString(self.srcVmName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.srcVmId)
    value = (value * 31) ^ hash(self.srcVmName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncThriftVmVolumeInfo(object):
  """
  虚拟磁盘备份位置信息

  Attributes:
   - srcVmId
   - srcVmName
   - basevolume
   - disp_path
   - vmInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'srcVmId', None, None, ), # 1
    (2, TType.STRING, 'srcVmName', None, None, ), # 2
    (3, TType.STRING, 'basevolume', None, None, ), # 3
    (4, TType.STRING, 'disp_path', None, None, ), # 4
    (5, TType.STRING, 'vmInfo', None, None, ), # 5
  )

  def __init__(self, srcVmId=None, srcVmName=None, basevolume=None, disp_path=None, vmInfo=None,):
    self.srcVmId = srcVmId
    self.srcVmName = srcVmName
    self.basevolume = basevolume
    self.disp_path = disp_path
    self.vmInfo = vmInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.srcVmId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.srcVmName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.basevolume = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.disp_path = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.vmInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncThriftVmVolumeInfo')
    if self.srcVmId is not None:
      oprot.writeFieldBegin('srcVmId', TType.STRING, 1)
      oprot.writeString(self.srcVmId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.srcVmName is not None:
      oprot.writeFieldBegin('srcVmName', TType.STRING, 2)
      oprot.writeString(self.srcVmName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.basevolume is not None:
      oprot.writeFieldBegin('basevolume', TType.STRING, 3)
      oprot.writeString(self.basevolume.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.disp_path is not None:
      oprot.writeFieldBegin('disp_path', TType.STRING, 4)
      oprot.writeString(self.disp_path.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vmInfo is not None:
      oprot.writeFieldBegin('vmInfo', TType.STRING, 5)
      oprot.writeString(self.vmInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.srcVmId)
    value = (value * 31) ^ hash(self.srcVmName)
    value = (value * 31) ^ hash(self.basevolume)
    value = (value * 31) ^ hash(self.disp_path)
    value = (value * 31) ^ hash(self.vmInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncRequestVmInfo(object):
  """
  创建虚拟机时间点

  Attributes:
   - vmInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'vmInfos', (TType.STRUCT,(ncThriftVmInfo, ncThriftVmInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, vmInfos=None,):
    self.vmInfos = vmInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vmInfos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncThriftVmInfo()
            _elem12.read(iprot)
            self.vmInfos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncRequestVmInfo')
    if self.vmInfos is not None:
      oprot.writeFieldBegin('vmInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.vmInfos))
      for iter13 in self.vmInfos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vmInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncRequestVmVolumeInfo(object):
  """
  Attributes:
   - vmVolumes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'vmVolumes', (TType.STRUCT,(ncThriftVmVolumeInfo, ncThriftVmVolumeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, vmVolumes=None,):
    self.vmVolumes = vmVolumes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vmVolumes = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = ncThriftVmVolumeInfo()
            _elem19.read(iprot)
            self.vmVolumes.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncRequestVmVolumeInfo')
    if self.vmVolumes is not None:
      oprot.writeFieldBegin('vmVolumes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.vmVolumes))
      for iter20 in self.vmVolumes:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vmVolumes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncLinkConfig(object):
  """
  任务链路信息

  Attributes:
   - linkType
   - hostWwn
   - hostId
   - jobId
   - configId
   - linkId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'linkType', None, None, ), # 1
    (2, TType.STRING, 'hostWwn', None, None, ), # 2
    (3, TType.STRING, 'hostId', None, None, ), # 3
    (4, TType.STRING, 'jobId', None, None, ), # 4
    (5, TType.STRING, 'configId', None, None, ), # 5
    (6, TType.STRING, 'linkId', None, None, ), # 6
  )

  def __init__(self, linkType=None, hostWwn=None, hostId=None, jobId=None, configId=None, linkId=None,):
    self.linkType = linkType
    self.hostWwn = hostWwn
    self.hostId = hostId
    self.jobId = jobId
    self.configId = configId
    self.linkId = linkId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.linkType = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostWwn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hostId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.configId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.linkId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncLinkConfig')
    if self.linkType is not None:
      oprot.writeFieldBegin('linkType', TType.I64, 1)
      oprot.writeI64(self.linkType)
      oprot.writeFieldEnd()
    if self.hostWwn is not None:
      oprot.writeFieldBegin('hostWwn', TType.STRING, 2)
      oprot.writeString(self.hostWwn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostId is not None:
      oprot.writeFieldBegin('hostId', TType.STRING, 3)
      oprot.writeString(self.hostId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 4)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.configId is not None:
      oprot.writeFieldBegin('configId', TType.STRING, 5)
      oprot.writeString(self.configId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.linkId is not None:
      oprot.writeFieldBegin('linkId', TType.STRING, 6)
      oprot.writeString(self.linkId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.linkType)
    value = (value * 31) ^ hash(self.hostWwn)
    value = (value * 31) ^ hash(self.hostId)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.configId)
    value = (value * 31) ^ hash(self.linkId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataSource(object):
  """
  任务数据源信息

  Attributes:
   - fullPath
   - dispPath
   - customer
   - sourceUuid
   - dbRunUserName
   - createTime
   - updateTime
   - jobId
   - clientId
   - nodeType
   - baseVolume
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fullPath', None, None, ), # 1
    (2, TType.STRING, 'dispPath', None, None, ), # 2
    (3, TType.STRING, 'customer', None, None, ), # 3
    (4, TType.STRING, 'sourceUuid', None, None, ), # 4
    (5, TType.STRING, 'dbRunUserName', None, None, ), # 5
    (6, TType.I64, 'createTime', None, None, ), # 6
    (7, TType.I64, 'updateTime', None, None, ), # 7
    (8, TType.STRING, 'jobId', None, None, ), # 8
    (9, TType.STRING, 'clientId', None, None, ), # 9
    (10, TType.I16, 'nodeType', None, None, ), # 10
    (11, TType.STRING, 'baseVolume', None, None, ), # 11
  )

  def __init__(self, fullPath=None, dispPath=None, customer=None, sourceUuid=None, dbRunUserName=None, createTime=None, updateTime=None, jobId=None, clientId=None, nodeType=None, baseVolume=None,):
    self.fullPath = fullPath
    self.dispPath = dispPath
    self.customer = customer
    self.sourceUuid = sourceUuid
    self.dbRunUserName = dbRunUserName
    self.createTime = createTime
    self.updateTime = updateTime
    self.jobId = jobId
    self.clientId = clientId
    self.nodeType = nodeType
    self.baseVolume = baseVolume

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fullPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dispPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sourceUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.dbRunUserName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.createTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.nodeType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.baseVolume = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataSource')
    if self.fullPath is not None:
      oprot.writeFieldBegin('fullPath', TType.STRING, 1)
      oprot.writeString(self.fullPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dispPath is not None:
      oprot.writeFieldBegin('dispPath', TType.STRING, 2)
      oprot.writeString(self.dispPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 3)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceUuid is not None:
      oprot.writeFieldBegin('sourceUuid', TType.STRING, 4)
      oprot.writeString(self.sourceUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dbRunUserName is not None:
      oprot.writeFieldBegin('dbRunUserName', TType.STRING, 5)
      oprot.writeString(self.dbRunUserName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 6)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 7)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 8)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 9)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodeType is not None:
      oprot.writeFieldBegin('nodeType', TType.I16, 10)
      oprot.writeI16(self.nodeType)
      oprot.writeFieldEnd()
    if self.baseVolume is not None:
      oprot.writeFieldBegin('baseVolume', TType.STRING, 11)
      oprot.writeString(self.baseVolume.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fullPath)
    value = (value * 31) ^ hash(self.dispPath)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.sourceUuid)
    value = (value * 31) ^ hash(self.dbRunUserName)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.nodeType)
    value = (value * 31) ^ hash(self.baseVolume)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAdvParameter(object):
  """
  任务高级参数

  Attributes:
   - key
   - value
   - jobId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
    (3, TType.STRING, 'jobId', None, None, ), # 3
  )

  def __init__(self, key=None, value=None, jobId=None,):
    self.key = key
    self.value = value
    self.jobId = jobId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAdvParameter')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 3)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.jobId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncJobMapVolume(object):
  """
  任务和卷的信息

  Attributes:
   - jobId
   - volumeId
   - poolId
   - poolType
   - volumeName
   - volumeWwn
   - volumeSize
   - volumeUsedSize
   - volumeMountSize
   - volumeAppType
   - volumeType
   - volumeMountPoint
   - relevantMountPoint
   - lunConfig
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'volumeId', None, None, ), # 2
    (3, TType.STRING, 'poolId', None, None, ), # 3
    (4, TType.I16, 'poolType', None, None, ), # 4
    (5, TType.STRING, 'volumeName', None, None, ), # 5
    (6, TType.STRING, 'volumeWwn', None, None, ), # 6
    (7, TType.I64, 'volumeSize', None, None, ), # 7
    (8, TType.I64, 'volumeUsedSize', None, None, ), # 8
    (9, TType.I64, 'volumeMountSize', None, None, ), # 9
    (10, TType.I16, 'volumeAppType', None, None, ), # 10
    (11, TType.I16, 'volumeType', None, None, ), # 11
    (12, TType.STRING, 'volumeMountPoint', None, None, ), # 12
    (13, TType.STRING, 'relevantMountPoint', None, None, ), # 13
    (14, TType.STRING, 'lunConfig', None, None, ), # 14
  )

  def __init__(self, jobId=None, volumeId=None, poolId=None, poolType=None, volumeName=None, volumeWwn=None, volumeSize=None, volumeUsedSize=None, volumeMountSize=None, volumeAppType=None, volumeType=None, volumeMountPoint=None, relevantMountPoint=None, lunConfig=None,):
    self.jobId = jobId
    self.volumeId = volumeId
    self.poolId = poolId
    self.poolType = poolType
    self.volumeName = volumeName
    self.volumeWwn = volumeWwn
    self.volumeSize = volumeSize
    self.volumeUsedSize = volumeUsedSize
    self.volumeMountSize = volumeMountSize
    self.volumeAppType = volumeAppType
    self.volumeType = volumeType
    self.volumeMountPoint = volumeMountPoint
    self.relevantMountPoint = relevantMountPoint
    self.lunConfig = lunConfig

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.volumeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.poolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.poolType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.volumeName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.volumeWwn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.volumeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.volumeUsedSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.volumeMountSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.volumeAppType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.volumeType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.volumeMountPoint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.relevantMountPoint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.lunConfig = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncJobMapVolume')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeId is not None:
      oprot.writeFieldBegin('volumeId', TType.STRING, 2)
      oprot.writeString(self.volumeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.STRING, 3)
      oprot.writeString(self.poolId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolType is not None:
      oprot.writeFieldBegin('poolType', TType.I16, 4)
      oprot.writeI16(self.poolType)
      oprot.writeFieldEnd()
    if self.volumeName is not None:
      oprot.writeFieldBegin('volumeName', TType.STRING, 5)
      oprot.writeString(self.volumeName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeWwn is not None:
      oprot.writeFieldBegin('volumeWwn', TType.STRING, 6)
      oprot.writeString(self.volumeWwn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeSize is not None:
      oprot.writeFieldBegin('volumeSize', TType.I64, 7)
      oprot.writeI64(self.volumeSize)
      oprot.writeFieldEnd()
    if self.volumeUsedSize is not None:
      oprot.writeFieldBegin('volumeUsedSize', TType.I64, 8)
      oprot.writeI64(self.volumeUsedSize)
      oprot.writeFieldEnd()
    if self.volumeMountSize is not None:
      oprot.writeFieldBegin('volumeMountSize', TType.I64, 9)
      oprot.writeI64(self.volumeMountSize)
      oprot.writeFieldEnd()
    if self.volumeAppType is not None:
      oprot.writeFieldBegin('volumeAppType', TType.I16, 10)
      oprot.writeI16(self.volumeAppType)
      oprot.writeFieldEnd()
    if self.volumeType is not None:
      oprot.writeFieldBegin('volumeType', TType.I16, 11)
      oprot.writeI16(self.volumeType)
      oprot.writeFieldEnd()
    if self.volumeMountPoint is not None:
      oprot.writeFieldBegin('volumeMountPoint', TType.STRING, 12)
      oprot.writeString(self.volumeMountPoint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.relevantMountPoint is not None:
      oprot.writeFieldBegin('relevantMountPoint', TType.STRING, 13)
      oprot.writeString(self.relevantMountPoint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.lunConfig is not None:
      oprot.writeFieldBegin('lunConfig', TType.STRING, 14)
      oprot.writeString(self.lunConfig.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.volumeId)
    value = (value * 31) ^ hash(self.poolId)
    value = (value * 31) ^ hash(self.poolType)
    value = (value * 31) ^ hash(self.volumeName)
    value = (value * 31) ^ hash(self.volumeWwn)
    value = (value * 31) ^ hash(self.volumeSize)
    value = (value * 31) ^ hash(self.volumeUsedSize)
    value = (value * 31) ^ hash(self.volumeMountSize)
    value = (value * 31) ^ hash(self.volumeAppType)
    value = (value * 31) ^ hash(self.volumeType)
    value = (value * 31) ^ hash(self.volumeMountPoint)
    value = (value * 31) ^ hash(self.relevantMountPoint)
    value = (value * 31) ^ hash(self.lunConfig)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncExtraMetaData(object):
  """
  任务扩展数据

  Attributes:
   - jobId
   - timePoint
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.I64, 'timePoint', None, None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.STRING, 'value', None, None, ), # 4
  )

  def __init__(self, jobId=None, timePoint=None, key=None, value=None,):
    self.jobId = jobId
    self.timePoint = timePoint
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timePoint = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.value = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncExtraMetaData')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.timePoint is not None:
      oprot.writeFieldBegin('timePoint', TType.I64, 2)
      oprot.writeI64(self.timePoint)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 4)
      oprot.writeString(self.value.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.timePoint)
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncOriginJob(object):
  """
  CDM 远程复制源端选择的任务信息

  Attributes:
   - id
   - name
   - type
   - status
   - lastStartTime
   - nextStartTime
   - createTime
   - updateTime
   - isDeleted
   - isBacked
   - desc
   - snapPoolSize
   - dedupPoolSize
   - cloudPoolSize
   - hostId
   - poolId
   - poolType
   - baseVolumeId
   - strategyId
   - userId
   - jobVplatformId
   - jobVplatformIp
   - jobVplatformName
   - lastMetaDataTimePoint
   - syncType
   - isSync
   - linkConfigs
   - dataSources
   - advParams
   - jobMapVolumes
   - originId
   - originClientInfo
   - customer
   - storageType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.I16, 'status', None, None, ), # 4
    (5, TType.I64, 'lastStartTime', None, None, ), # 5
    (6, TType.I64, 'nextStartTime', None, None, ), # 6
    (7, TType.I64, 'createTime', None, None, ), # 7
    (8, TType.I64, 'updateTime', None, None, ), # 8
    (9, TType.I16, 'isDeleted', None, None, ), # 9
    (10, TType.I16, 'isBacked', None, None, ), # 10
    (11, TType.STRING, 'desc', None, None, ), # 11
    (12, TType.I64, 'snapPoolSize', None, None, ), # 12
    (13, TType.I64, 'dedupPoolSize', None, None, ), # 13
    (14, TType.I64, 'cloudPoolSize', None, None, ), # 14
    (15, TType.STRING, 'hostId', None, None, ), # 15
    (16, TType.STRING, 'poolId', None, None, ), # 16
    (17, TType.I16, 'poolType', None, None, ), # 17
    (18, TType.STRING, 'baseVolumeId', None, None, ), # 18
    (19, TType.STRING, 'strategyId', None, None, ), # 19
    (20, TType.STRING, 'userId', None, None, ), # 20
    (21, TType.STRING, 'jobVplatformId', None, None, ), # 21
    (22, TType.STRING, 'jobVplatformIp', None, None, ), # 22
    (23, TType.STRING, 'jobVplatformName', None, None, ), # 23
    (24, TType.I64, 'lastMetaDataTimePoint', None, None, ), # 24
    (25, TType.I32, 'syncType', None, None, ), # 25
    (26, TType.BOOL, 'isSync', None, None, ), # 26
    (27, TType.LIST, 'linkConfigs', (TType.STRUCT,(ncLinkConfig, ncLinkConfig.thrift_spec)), None, ), # 27
    (28, TType.LIST, 'dataSources', (TType.STRUCT,(ncDataSource, ncDataSource.thrift_spec)), None, ), # 28
    (29, TType.LIST, 'advParams', (TType.STRUCT,(ncAdvParameter, ncAdvParameter.thrift_spec)), None, ), # 29
    (30, TType.LIST, 'jobMapVolumes', (TType.STRUCT,(ncJobMapVolume, ncJobMapVolume.thrift_spec)), None, ), # 30
    (31, TType.STRING, 'originId', None, None, ), # 31
    (32, TType.STRING, 'originClientInfo', None, None, ), # 32
    (33, TType.STRING, 'customer', None, None, ), # 33
    (34, TType.I16, 'storageType', None, None, ), # 34
  )

  def __init__(self, id=None, name=None, type=None, status=None, lastStartTime=None, nextStartTime=None, createTime=None, updateTime=None, isDeleted=None, isBacked=None, desc=None, snapPoolSize=None, dedupPoolSize=None, cloudPoolSize=None, hostId=None, poolId=None, poolType=None, baseVolumeId=None, strategyId=None, userId=None, jobVplatformId=None, jobVplatformIp=None, jobVplatformName=None, lastMetaDataTimePoint=None, syncType=None, isSync=None, linkConfigs=None, dataSources=None, advParams=None, jobMapVolumes=None, originId=None, originClientInfo=None, customer=None, storageType=None,):
    self.id = id
    self.name = name
    self.type = type
    self.status = status
    self.lastStartTime = lastStartTime
    self.nextStartTime = nextStartTime
    self.createTime = createTime
    self.updateTime = updateTime
    self.isDeleted = isDeleted
    self.isBacked = isBacked
    self.desc = desc
    self.snapPoolSize = snapPoolSize
    self.dedupPoolSize = dedupPoolSize
    self.cloudPoolSize = cloudPoolSize
    self.hostId = hostId
    self.poolId = poolId
    self.poolType = poolType
    self.baseVolumeId = baseVolumeId
    self.strategyId = strategyId
    self.userId = userId
    self.jobVplatformId = jobVplatformId
    self.jobVplatformIp = jobVplatformIp
    self.jobVplatformName = jobVplatformName
    self.lastMetaDataTimePoint = lastMetaDataTimePoint
    self.syncType = syncType
    self.isSync = isSync
    self.linkConfigs = linkConfigs
    self.dataSources = dataSources
    self.advParams = advParams
    self.jobMapVolumes = jobMapVolumes
    self.originId = originId
    self.originClientInfo = originClientInfo
    self.customer = customer
    self.storageType = storageType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastStartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.nextStartTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.isDeleted = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.isBacked = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.desc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.snapPoolSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.dedupPoolSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.cloudPoolSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.hostId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.poolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          self.poolType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.baseVolumeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.strategyId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.jobVplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.jobVplatformIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.jobVplatformName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.lastMetaDataTimePoint = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.syncType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.linkConfigs = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ncLinkConfig()
            _elem26.read(iprot)
            self.linkConfigs.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.dataSources = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = ncDataSource()
            _elem32.read(iprot)
            self.dataSources.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.LIST:
          self.advParams = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = ncAdvParameter()
            _elem38.read(iprot)
            self.advParams.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.LIST:
          self.jobMapVolumes = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = ncJobMapVolume()
            _elem44.read(iprot)
            self.jobMapVolumes.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.originId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.originClientInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I16:
          self.storageType = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncOriginJob')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 4)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.lastStartTime is not None:
      oprot.writeFieldBegin('lastStartTime', TType.I64, 5)
      oprot.writeI64(self.lastStartTime)
      oprot.writeFieldEnd()
    if self.nextStartTime is not None:
      oprot.writeFieldBegin('nextStartTime', TType.I64, 6)
      oprot.writeI64(self.nextStartTime)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 7)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 8)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.isDeleted is not None:
      oprot.writeFieldBegin('isDeleted', TType.I16, 9)
      oprot.writeI16(self.isDeleted)
      oprot.writeFieldEnd()
    if self.isBacked is not None:
      oprot.writeFieldBegin('isBacked', TType.I16, 10)
      oprot.writeI16(self.isBacked)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 11)
      oprot.writeString(self.desc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapPoolSize is not None:
      oprot.writeFieldBegin('snapPoolSize', TType.I64, 12)
      oprot.writeI64(self.snapPoolSize)
      oprot.writeFieldEnd()
    if self.dedupPoolSize is not None:
      oprot.writeFieldBegin('dedupPoolSize', TType.I64, 13)
      oprot.writeI64(self.dedupPoolSize)
      oprot.writeFieldEnd()
    if self.cloudPoolSize is not None:
      oprot.writeFieldBegin('cloudPoolSize', TType.I64, 14)
      oprot.writeI64(self.cloudPoolSize)
      oprot.writeFieldEnd()
    if self.hostId is not None:
      oprot.writeFieldBegin('hostId', TType.STRING, 15)
      oprot.writeString(self.hostId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.STRING, 16)
      oprot.writeString(self.poolId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolType is not None:
      oprot.writeFieldBegin('poolType', TType.I16, 17)
      oprot.writeI16(self.poolType)
      oprot.writeFieldEnd()
    if self.baseVolumeId is not None:
      oprot.writeFieldBegin('baseVolumeId', TType.STRING, 18)
      oprot.writeString(self.baseVolumeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.strategyId is not None:
      oprot.writeFieldBegin('strategyId', TType.STRING, 19)
      oprot.writeString(self.strategyId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 20)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobVplatformId is not None:
      oprot.writeFieldBegin('jobVplatformId', TType.STRING, 21)
      oprot.writeString(self.jobVplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobVplatformIp is not None:
      oprot.writeFieldBegin('jobVplatformIp', TType.STRING, 22)
      oprot.writeString(self.jobVplatformIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobVplatformName is not None:
      oprot.writeFieldBegin('jobVplatformName', TType.STRING, 23)
      oprot.writeString(self.jobVplatformName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.lastMetaDataTimePoint is not None:
      oprot.writeFieldBegin('lastMetaDataTimePoint', TType.I64, 24)
      oprot.writeI64(self.lastMetaDataTimePoint)
      oprot.writeFieldEnd()
    if self.syncType is not None:
      oprot.writeFieldBegin('syncType', TType.I32, 25)
      oprot.writeI32(self.syncType)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 26)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.linkConfigs is not None:
      oprot.writeFieldBegin('linkConfigs', TType.LIST, 27)
      oprot.writeListBegin(TType.STRUCT, len(self.linkConfigs))
      for iter45 in self.linkConfigs:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dataSources is not None:
      oprot.writeFieldBegin('dataSources', TType.LIST, 28)
      oprot.writeListBegin(TType.STRUCT, len(self.dataSources))
      for iter46 in self.dataSources:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.advParams is not None:
      oprot.writeFieldBegin('advParams', TType.LIST, 29)
      oprot.writeListBegin(TType.STRUCT, len(self.advParams))
      for iter47 in self.advParams:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobMapVolumes is not None:
      oprot.writeFieldBegin('jobMapVolumes', TType.LIST, 30)
      oprot.writeListBegin(TType.STRUCT, len(self.jobMapVolumes))
      for iter48 in self.jobMapVolumes:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.originId is not None:
      oprot.writeFieldBegin('originId', TType.STRING, 31)
      oprot.writeString(self.originId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.originClientInfo is not None:
      oprot.writeFieldBegin('originClientInfo', TType.STRING, 32)
      oprot.writeString(self.originClientInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 33)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.storageType is not None:
      oprot.writeFieldBegin('storageType', TType.I16, 34)
      oprot.writeI16(self.storageType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.lastStartTime)
    value = (value * 31) ^ hash(self.nextStartTime)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.isDeleted)
    value = (value * 31) ^ hash(self.isBacked)
    value = (value * 31) ^ hash(self.desc)
    value = (value * 31) ^ hash(self.snapPoolSize)
    value = (value * 31) ^ hash(self.dedupPoolSize)
    value = (value * 31) ^ hash(self.cloudPoolSize)
    value = (value * 31) ^ hash(self.hostId)
    value = (value * 31) ^ hash(self.poolId)
    value = (value * 31) ^ hash(self.poolType)
    value = (value * 31) ^ hash(self.baseVolumeId)
    value = (value * 31) ^ hash(self.strategyId)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.jobVplatformId)
    value = (value * 31) ^ hash(self.jobVplatformIp)
    value = (value * 31) ^ hash(self.jobVplatformName)
    value = (value * 31) ^ hash(self.lastMetaDataTimePoint)
    value = (value * 31) ^ hash(self.syncType)
    value = (value * 31) ^ hash(self.isSync)
    value = (value * 31) ^ hash(self.linkConfigs)
    value = (value * 31) ^ hash(self.dataSources)
    value = (value * 31) ^ hash(self.advParams)
    value = (value * 31) ^ hash(self.jobMapVolumes)
    value = (value * 31) ^ hash(self.originId)
    value = (value * 31) ^ hash(self.originClientInfo)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.storageType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointVolumeInfo(object):
  """
  时间点对应的卷信息

  Attributes:
   - snapVolumeId
   - snapVolumeUuid
   - snapVolumeSize
   - baseVolumeId
   - baseVolumeUuid
   - baseVolumeName
   - baseVolumeAppType
   - baseVolumeMountPoint
   - baseVolumeSize
   - poolId
   - poolType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snapVolumeId', None, None, ), # 1
    (2, TType.STRING, 'snapVolumeUuid', None, None, ), # 2
    (3, TType.I64, 'snapVolumeSize', None, None, ), # 3
    (4, TType.STRING, 'baseVolumeId', None, None, ), # 4
    (5, TType.STRING, 'baseVolumeUuid', None, None, ), # 5
    (6, TType.STRING, 'baseVolumeName', None, None, ), # 6
    (7, TType.I16, 'baseVolumeAppType', None, None, ), # 7
    (8, TType.STRING, 'baseVolumeMountPoint', None, None, ), # 8
    (9, TType.I64, 'baseVolumeSize', None, None, ), # 9
    (10, TType.STRING, 'poolId', None, None, ), # 10
    (11, TType.I16, 'poolType', None, None, ), # 11
  )

  def __init__(self, snapVolumeId=None, snapVolumeUuid=None, snapVolumeSize=None, baseVolumeId=None, baseVolumeUuid=None, baseVolumeName=None, baseVolumeAppType=None, baseVolumeMountPoint=None, baseVolumeSize=None, poolId=None, poolType=None,):
    self.snapVolumeId = snapVolumeId
    self.snapVolumeUuid = snapVolumeUuid
    self.snapVolumeSize = snapVolumeSize
    self.baseVolumeId = baseVolumeId
    self.baseVolumeUuid = baseVolumeUuid
    self.baseVolumeName = baseVolumeName
    self.baseVolumeAppType = baseVolumeAppType
    self.baseVolumeMountPoint = baseVolumeMountPoint
    self.baseVolumeSize = baseVolumeSize
    self.poolId = poolId
    self.poolType = poolType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snapVolumeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snapVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.snapVolumeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.baseVolumeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.baseVolumeUuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.baseVolumeName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.baseVolumeAppType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.baseVolumeMountPoint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.baseVolumeSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.poolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.poolType = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointVolumeInfo')
    if self.snapVolumeId is not None:
      oprot.writeFieldBegin('snapVolumeId', TType.STRING, 1)
      oprot.writeString(self.snapVolumeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeUuid is not None:
      oprot.writeFieldBegin('snapVolumeUuid', TType.STRING, 2)
      oprot.writeString(self.snapVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.snapVolumeSize is not None:
      oprot.writeFieldBegin('snapVolumeSize', TType.I64, 3)
      oprot.writeI64(self.snapVolumeSize)
      oprot.writeFieldEnd()
    if self.baseVolumeId is not None:
      oprot.writeFieldBegin('baseVolumeId', TType.STRING, 4)
      oprot.writeString(self.baseVolumeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeUuid is not None:
      oprot.writeFieldBegin('baseVolumeUuid', TType.STRING, 5)
      oprot.writeString(self.baseVolumeUuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeName is not None:
      oprot.writeFieldBegin('baseVolumeName', TType.STRING, 6)
      oprot.writeString(self.baseVolumeName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeAppType is not None:
      oprot.writeFieldBegin('baseVolumeAppType', TType.I16, 7)
      oprot.writeI16(self.baseVolumeAppType)
      oprot.writeFieldEnd()
    if self.baseVolumeMountPoint is not None:
      oprot.writeFieldBegin('baseVolumeMountPoint', TType.STRING, 8)
      oprot.writeString(self.baseVolumeMountPoint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseVolumeSize is not None:
      oprot.writeFieldBegin('baseVolumeSize', TType.I64, 9)
      oprot.writeI64(self.baseVolumeSize)
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.STRING, 10)
      oprot.writeString(self.poolId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolType is not None:
      oprot.writeFieldBegin('poolType', TType.I16, 11)
      oprot.writeI16(self.poolType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.snapVolumeId)
    value = (value * 31) ^ hash(self.snapVolumeUuid)
    value = (value * 31) ^ hash(self.snapVolumeSize)
    value = (value * 31) ^ hash(self.baseVolumeId)
    value = (value * 31) ^ hash(self.baseVolumeUuid)
    value = (value * 31) ^ hash(self.baseVolumeName)
    value = (value * 31) ^ hash(self.baseVolumeAppType)
    value = (value * 31) ^ hash(self.baseVolumeMountPoint)
    value = (value * 31) ^ hash(self.baseVolumeSize)
    value = (value * 31) ^ hash(self.poolId)
    value = (value * 31) ^ hash(self.poolType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointExtra(object):
  """
  时间点对应的扩展信息

  Attributes:
   - extraId
   - name
   - distName
   - luns
   - config
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'extraId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'distName', None, None, ), # 3
    (4, TType.STRING, 'luns', None, None, ), # 4
    (5, TType.STRING, 'config', None, None, ), # 5
  )

  def __init__(self, extraId=None, name=None, distName=None, luns=None, config=None,):
    self.extraId = extraId
    self.name = name
    self.distName = distName
    self.luns = luns
    self.config = config

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.extraId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.distName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.luns = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.config = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointExtra')
    if self.extraId is not None:
      oprot.writeFieldBegin('extraId', TType.STRING, 1)
      oprot.writeString(self.extraId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.distName is not None:
      oprot.writeFieldBegin('distName', TType.STRING, 3)
      oprot.writeString(self.distName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.luns is not None:
      oprot.writeFieldBegin('luns', TType.STRING, 4)
      oprot.writeString(self.luns.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.config is not None:
      oprot.writeFieldBegin('config', TType.STRING, 5)
      oprot.writeString(self.config.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.extraId)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.distName)
    value = (value * 31) ^ hash(self.luns)
    value = (value * 31) ^ hash(self.config)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointInfo(object):
  """
  时间点信息

  Attributes:
   - jobId
   - jobType
   - jobInstanceId
   - startTime
   - endTime
   - dataSize
   - timePointType
   - volumeInfos
   - timePointExtras
   - extraMetaDatas
   - capSize
   - status
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.I16, 'jobType', None, None, ), # 2
    (3, TType.STRING, 'jobInstanceId', None, None, ), # 3
    (4, TType.I64, 'startTime', None, None, ), # 4
    (5, TType.I64, 'endTime', None, None, ), # 5
    (6, TType.I64, 'dataSize', None, None, ), # 6
    (7, TType.I16, 'timePointType', None, None, ), # 7
    (8, TType.LIST, 'volumeInfos', (TType.STRUCT,(ncTimePointVolumeInfo, ncTimePointVolumeInfo.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'timePointExtras', (TType.STRUCT,(ncTimePointExtra, ncTimePointExtra.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'extraMetaDatas', (TType.STRUCT,(ncExtraMetaData, ncExtraMetaData.thrift_spec)), None, ), # 10
    (11, TType.I64, 'capSize', None, None, ), # 11
    (12, TType.I32, 'status', None, None, ), # 12
    (13, TType.STRING, 'id', None, None, ), # 13
  )

  def __init__(self, jobId=None, jobType=None, jobInstanceId=None, startTime=None, endTime=None, dataSize=None, timePointType=None, volumeInfos=None, timePointExtras=None, extraMetaDatas=None, capSize=None, status=None, id=None,):
    self.jobId = jobId
    self.jobType = jobType
    self.jobInstanceId = jobInstanceId
    self.startTime = startTime
    self.endTime = endTime
    self.dataSize = dataSize
    self.timePointType = timePointType
    self.volumeInfos = volumeInfos
    self.timePointExtras = timePointExtras
    self.extraMetaDatas = extraMetaDatas
    self.capSize = capSize
    self.status = status
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.jobType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobInstanceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.dataSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.timePointType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.volumeInfos = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = ncTimePointVolumeInfo()
            _elem54.read(iprot)
            self.volumeInfos.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.timePointExtras = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = ncTimePointExtra()
            _elem60.read(iprot)
            self.timePointExtras.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.extraMetaDatas = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = ncExtraMetaData()
            _elem66.read(iprot)
            self.extraMetaDatas.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.capSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointInfo')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.I16, 2)
      oprot.writeI16(self.jobType)
      oprot.writeFieldEnd()
    if self.jobInstanceId is not None:
      oprot.writeFieldBegin('jobInstanceId', TType.STRING, 3)
      oprot.writeString(self.jobInstanceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 4)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 5)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.dataSize is not None:
      oprot.writeFieldBegin('dataSize', TType.I64, 6)
      oprot.writeI64(self.dataSize)
      oprot.writeFieldEnd()
    if self.timePointType is not None:
      oprot.writeFieldBegin('timePointType', TType.I16, 7)
      oprot.writeI16(self.timePointType)
      oprot.writeFieldEnd()
    if self.volumeInfos is not None:
      oprot.writeFieldBegin('volumeInfos', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.volumeInfos))
      for iter67 in self.volumeInfos:
        iter67.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timePointExtras is not None:
      oprot.writeFieldBegin('timePointExtras', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.timePointExtras))
      for iter68 in self.timePointExtras:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extraMetaDatas is not None:
      oprot.writeFieldBegin('extraMetaDatas', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.extraMetaDatas))
      for iter69 in self.extraMetaDatas:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.capSize is not None:
      oprot.writeFieldBegin('capSize', TType.I64, 11)
      oprot.writeI64(self.capSize)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 12)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 13)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.jobInstanceId)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.dataSize)
    value = (value * 31) ^ hash(self.timePointType)
    value = (value * 31) ^ hash(self.volumeInfos)
    value = (value * 31) ^ hash(self.timePointExtras)
    value = (value * 31) ^ hash(self.extraMetaDatas)
    value = (value * 31) ^ hash(self.capSize)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAuthUserInfo(object):
  """
  用户信息


  Attributes:
   - userName
   - clusterGuid
   - clusterIp
   - verifyCode
   - jobId
   - level
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userName', None, None, ), # 1
    (2, TType.STRING, 'clusterGuid', None, None, ), # 2
    (3, TType.STRING, 'clusterIp', None, None, ), # 3
    (4, TType.STRING, 'verifyCode', None, None, ), # 4
    (5, TType.STRING, 'jobId', None, None, ), # 5
    (6, TType.I16, 'level', None, None, ), # 6
  )

  def __init__(self, userName=None, clusterGuid=None, clusterIp=None, verifyCode=None, jobId=None, level=None,):
    self.userName = userName
    self.clusterGuid = clusterGuid
    self.clusterIp = clusterIp
    self.verifyCode = verifyCode
    self.jobId = jobId
    self.level = level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterGuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clusterIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.verifyCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAuthUserInfo')
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 1)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterGuid is not None:
      oprot.writeFieldBegin('clusterGuid', TType.STRING, 2)
      oprot.writeString(self.clusterGuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterIp is not None:
      oprot.writeFieldBegin('clusterIp', TType.STRING, 3)
      oprot.writeString(self.clusterIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.verifyCode is not None:
      oprot.writeFieldBegin('verifyCode', TType.STRING, 4)
      oprot.writeString(self.verifyCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 5)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 6)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.clusterGuid)
    value = (value * 31) ^ hash(self.clusterIp)
    value = (value * 31) ^ hash(self.verifyCode)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncReservedTime(object):
  """
  保留周期


  Attributes:
   - unit
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'unit', None, None, ), # 1
    (2, TType.I16, 'time', None, None, ), # 2
  )

  def __init__(self, unit=None, time=None,):
    self.unit = unit
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.unit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.time = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncReservedTime')
    if self.unit is not None:
      oprot.writeFieldBegin('unit', TType.I32, 1)
      oprot.writeI32(self.unit)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I16, 2)
      oprot.writeI16(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unit)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSyncJobRequest(object):
  """
  创建sync任务的请求体


  Attributes:
   - originJob
   - orginalInfo
   - senderInfo
   - recipientInfo
   - reservedTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'originJob', (ncOriginJob, ncOriginJob.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'orginalInfo', (ncAuthUserInfo, ncAuthUserInfo.thrift_spec), None, ), # 2
    (3, TType.LIST, 'senderInfo', (TType.STRUCT,(ncAuthUserInfo, ncAuthUserInfo.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'recipientInfo', (TType.STRUCT,(ncAuthUserInfo, ncAuthUserInfo.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'reservedTime', (ncReservedTime, ncReservedTime.thrift_spec), None, ), # 5
  )

  def __init__(self, originJob=None, orginalInfo=None, senderInfo=None, recipientInfo=None, reservedTime=None,):
    self.originJob = originJob
    self.orginalInfo = orginalInfo
    self.senderInfo = senderInfo
    self.recipientInfo = recipientInfo
    self.reservedTime = reservedTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.originJob = ncOriginJob()
          self.originJob.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.orginalInfo = ncAuthUserInfo()
          self.orginalInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.senderInfo = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = ncAuthUserInfo()
            _elem75.read(iprot)
            self.senderInfo.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.recipientInfo = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = ncAuthUserInfo()
            _elem81.read(iprot)
            self.recipientInfo.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.reservedTime = ncReservedTime()
          self.reservedTime.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSyncJobRequest')
    if self.originJob is not None:
      oprot.writeFieldBegin('originJob', TType.STRUCT, 1)
      self.originJob.write(oprot)
      oprot.writeFieldEnd()
    if self.orginalInfo is not None:
      oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 2)
      self.orginalInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.senderInfo is not None:
      oprot.writeFieldBegin('senderInfo', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.senderInfo))
      for iter82 in self.senderInfo:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recipientInfo is not None:
      oprot.writeFieldBegin('recipientInfo', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.recipientInfo))
      for iter83 in self.recipientInfo:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reservedTime is not None:
      oprot.writeFieldBegin('reservedTime', TType.STRUCT, 5)
      self.reservedTime.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.originJob)
    value = (value * 31) ^ hash(self.orginalInfo)
    value = (value * 31) ^ hash(self.senderInfo)
    value = (value * 31) ^ hash(self.recipientInfo)
    value = (value * 31) ^ hash(self.reservedTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCanSyncJobRequest(object):
  """
  获取sync任务的请求体


  Attributes:
   - index
   - count
   - userId
   - userName
   - filterType
   - senderJobId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'index', None, None, ), # 1
    (2, TType.I16, 'count', None, None, ), # 2
    (3, TType.STRING, 'userId', None, None, ), # 3
    (4, TType.STRING, 'userName', None, None, ), # 4
    (5, TType.I32, 'filterType', None, None, ), # 5
    (6, TType.STRING, 'senderJobId', None, None, ), # 6
  )

  def __init__(self, index=None, count=None, userId=None, userName=None, filterType=None, senderJobId=None,):
    self.index = index
    self.count = count
    self.userId = userId
    self.userName = userName
    self.filterType = filterType
    self.senderJobId = senderJobId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.index = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.count = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.filterType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.senderJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCanSyncJobRequest')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I16, 1)
      oprot.writeI16(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I16, 2)
      oprot.writeI16(self.count)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 3)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 4)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.filterType is not None:
      oprot.writeFieldBegin('filterType', TType.I32, 5)
      oprot.writeI32(self.filterType)
      oprot.writeFieldEnd()
    if self.senderJobId is not None:
      oprot.writeFieldBegin('senderJobId', TType.STRING, 6)
      oprot.writeString(self.senderJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.filterType)
    value = (value * 31) ^ hash(self.senderJobId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCanSyncJobResponseData(object):
  """
  获取sync任务的返回体数据


  Attributes:
   - originJob
   - orginalInfo
   - senderInfo
   - recipientInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'originJob', (ncOriginJob, ncOriginJob.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.STRUCT, 'orginalInfo', (ncAuthUserInfo, ncAuthUserInfo.thrift_spec), None, ), # 3
    (4, TType.LIST, 'senderInfo', (TType.STRUCT,(ncAuthUserInfo, ncAuthUserInfo.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'recipientInfo', (TType.STRUCT,(ncAuthUserInfo, ncAuthUserInfo.thrift_spec)), None, ), # 5
  )

  def __init__(self, originJob=None, orginalInfo=None, senderInfo=None, recipientInfo=None,):
    self.originJob = originJob
    self.orginalInfo = orginalInfo
    self.senderInfo = senderInfo
    self.recipientInfo = recipientInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.originJob = ncOriginJob()
          self.originJob.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.orginalInfo = ncAuthUserInfo()
          self.orginalInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.senderInfo = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = ncAuthUserInfo()
            _elem89.read(iprot)
            self.senderInfo.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.recipientInfo = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = ncAuthUserInfo()
            _elem95.read(iprot)
            self.recipientInfo.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCanSyncJobResponseData')
    if self.originJob is not None:
      oprot.writeFieldBegin('originJob', TType.STRUCT, 1)
      self.originJob.write(oprot)
      oprot.writeFieldEnd()
    if self.orginalInfo is not None:
      oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 3)
      self.orginalInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.senderInfo is not None:
      oprot.writeFieldBegin('senderInfo', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.senderInfo))
      for iter96 in self.senderInfo:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recipientInfo is not None:
      oprot.writeFieldBegin('recipientInfo', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.recipientInfo))
      for iter97 in self.recipientInfo:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.originJob)
    value = (value * 31) ^ hash(self.orginalInfo)
    value = (value * 31) ^ hash(self.senderInfo)
    value = (value * 31) ^ hash(self.recipientInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCanSyncJobResponse(object):
  """
  获取sync任务的返回体


  Attributes:
   - totalNum
   - datas
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'datas', (TType.STRUCT,(ncCanSyncJobResponseData, ncCanSyncJobResponseData.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, datas=None,):
    self.totalNum = totalNum
    self.datas = datas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.totalNum = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.datas = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = ncCanSyncJobResponseData()
            _elem103.read(iprot)
            self.datas.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCanSyncJobResponse')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I16, 1)
      oprot.writeI16(self.totalNum)
      oprot.writeFieldEnd()
    if self.datas is not None:
      oprot.writeFieldBegin('datas', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.datas))
      for iter104 in self.datas:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.datas)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSyncTimePointRequest(object):
  """
  创建同步任务的时间点的请求体

  Attributes:
   - timePointInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'timePointInfos', (TType.STRUCT,(ncTimePointInfo, ncTimePointInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, timePointInfos=None,):
    self.timePointInfos = timePointInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.timePointInfos = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = ncTimePointInfo()
            _elem110.read(iprot)
            self.timePointInfos.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSyncTimePointRequest')
    if self.timePointInfos is not None:
      oprot.writeFieldBegin('timePointInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.timePointInfos))
      for iter111 in self.timePointInfos:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timePointInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointId(object):
  """
  时间点id的信息

  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointId')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCreateSyncTimePointResponse(object):
  """
  创建同步任务的时间点的返回体


  Attributes:
   - TimePointIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'TimePointIds', (TType.STRUCT,(ncTimePointId, ncTimePointId.thrift_spec)), None, ), # 1
  )

  def __init__(self, TimePointIds=None,):
    self.TimePointIds = TimePointIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.TimePointIds = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = ncTimePointId()
            _elem117.read(iprot)
            self.TimePointIds.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCreateSyncTimePointResponse')
    if self.TimePointIds is not None:
      oprot.writeFieldBegin('TimePointIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.TimePointIds))
      for iter118 in self.TimePointIds:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.TimePointIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUpdateSyncTimePointRequest(object):
  """
  更新同步任务时间点的请求体

  Attributes:
   - timePointIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'timePointIds', (TType.STRUCT,(ncTimePointId, ncTimePointId.thrift_spec)), None, ), # 1
  )

  def __init__(self, timePointIds=None,):
    self.timePointIds = timePointIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.timePointIds = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = ncTimePointId()
            _elem124.read(iprot)
            self.timePointIds.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUpdateSyncTimePointRequest')
    if self.timePointIds is not None:
      oprot.writeFieldBegin('timePointIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.timePointIds))
      for iter125 in self.timePointIds:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timePointIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSyncTimePointVolume(object):
  """
  同步任务时间点快照卷的信息

  Attributes:
   - timePointId
   - volumeInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'timePointId', None, None, ), # 1
    (2, TType.LIST, 'volumeInfos', (TType.STRUCT,(ncTimePointVolumeInfo, ncTimePointVolumeInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, timePointId=None, volumeInfos=None,):
    self.timePointId = timePointId
    self.volumeInfos = volumeInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.timePointId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.volumeInfos = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = ncTimePointVolumeInfo()
            _elem131.read(iprot)
            self.volumeInfos.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSyncTimePointVolume')
    if self.timePointId is not None:
      oprot.writeFieldBegin('timePointId', TType.STRING, 1)
      oprot.writeString(self.timePointId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.volumeInfos is not None:
      oprot.writeFieldBegin('volumeInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.volumeInfos))
      for iter132 in self.volumeInfos:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timePointId)
    value = (value * 31) ^ hash(self.volumeInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUpdateSyncTimePointVolumeRequest(object):
  """
  更新同步任务时间点快照卷的请求体

  Attributes:
   - syncTimePointVolumes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'syncTimePointVolumes', (TType.STRUCT,(ncSyncTimePointVolume, ncSyncTimePointVolume.thrift_spec)), None, ), # 1
  )

  def __init__(self, syncTimePointVolumes=None,):
    self.syncTimePointVolumes = syncTimePointVolumes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.syncTimePointVolumes = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = ncSyncTimePointVolume()
            _elem138.read(iprot)
            self.syncTimePointVolumes.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUpdateSyncTimePointVolumeRequest')
    if self.syncTimePointVolumes is not None:
      oprot.writeFieldBegin('syncTimePointVolumes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.syncTimePointVolumes))
      for iter139 in self.syncTimePointVolumes:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.syncTimePointVolumes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDeleteSyncTimePointRequest(object):
  """
  删除同步任务时间点的请求体

  Attributes:
   - timePointIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'timePointIds', (TType.STRUCT,(ncTimePointId, ncTimePointId.thrift_spec)), None, ), # 1
  )

  def __init__(self, timePointIds=None,):
    self.timePointIds = timePointIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.timePointIds = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = ncTimePointId()
            _elem145.read(iprot)
            self.timePointIds.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDeleteSyncTimePointRequest')
    if self.timePointIds is not None:
      oprot.writeFieldBegin('timePointIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.timePointIds))
      for iter146 in self.timePointIds:
        iter146.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timePointIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncErrorInformation(object):
  """
  删除同步任务时间点的错误信息

  Attributes:
   - jobId
   - tpId
   - startTime
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'tpId', None, None, ), # 2
    (3, TType.I64, 'startTime', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
  )

  def __init__(self, jobId=None, tpId=None, startTime=None, reason=None,):
    self.jobId = jobId
    self.tpId = tpId
    self.startTime = startTime
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tpId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncErrorInformation')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.tpId is not None:
      oprot.writeFieldBegin('tpId', TType.STRING, 2)
      oprot.writeString(self.tpId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 3)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.tpId)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.reason)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDeleteSyncTimePointResponse(object):
  """
  删除同步任务时间点的返回体


  Attributes:
   - ErrorInformations
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ErrorInformations', (TType.STRUCT,(ncErrorInformation, ncErrorInformation.thrift_spec)), None, ), # 1
  )

  def __init__(self, ErrorInformations=None,):
    self.ErrorInformations = ErrorInformations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ErrorInformations = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = ncErrorInformation()
            _elem152.read(iprot)
            self.ErrorInformations.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDeleteSyncTimePointResponse')
    if self.ErrorInformations is not None:
      oprot.writeFieldBegin('ErrorInformations', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ErrorInformations))
      for iter153 in self.ErrorInformations:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ErrorInformations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncJobInfo(object):
  """
  远程复制同步任务的信息

  Attributes:
   - OriginJobId
   - status
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'OriginJobId', None, None, ), # 1
    (2, TType.I16, 'status', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
  )

  def __init__(self, OriginJobId=None, status=None, name=None,):
    self.OriginJobId = OriginJobId
    self.status = status
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.OriginJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncJobInfo')
    if self.OriginJobId is not None:
      oprot.writeFieldBegin('OriginJobId', TType.STRING, 1)
      oprot.writeString(self.OriginJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.OriginJobId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncUpdateJobStatusRequest(object):
  """
  更新同步任务的状态请求体


  Attributes:
   - jobInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'jobInfo', (TType.STRUCT,(ncJobInfo, ncJobInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, jobInfo=None,):
    self.jobInfo = jobInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.jobInfo = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = ncJobInfo()
            _elem159.read(iprot)
            self.jobInfo.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncUpdateJobStatusRequest')
    if self.jobInfo is not None:
      oprot.writeFieldBegin('jobInfo', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.jobInfo))
      for iter160 in self.jobInfo:
        iter160.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncJobCountInfo(object):
  """
  任务数


  Attributes:
   - success
   - failed
   - running
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'success', None, None, ), # 1
    (2, TType.I32, 'failed', None, None, ), # 2
    (3, TType.I32, 'running', None, None, ), # 3
  )

  def __init__(self, success=None, failed=None, running=None,):
    self.success = success
    self.failed = failed
    self.running = running

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.failed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.running = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncJobCountInfo')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 1)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.I32, 2)
      oprot.writeI32(self.failed)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.I32, 3)
      oprot.writeI32(self.running)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.running)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointsRequest(object):
  """
  获取备份任务对应的所有时间点的请求体


  Attributes:
   - originJobId
   - index
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'originJobId', None, None, ), # 1
    (2, TType.I16, 'index', None, 0, ), # 2
    (3, TType.I16, 'count', None, 15, ), # 3
  )

  def __init__(self, originJobId=None, index=thrift_spec[2][4], count=thrift_spec[3][4],):
    self.originJobId = originJobId
    self.index = index
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.originJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.index = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.count = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointsRequest')
    if self.originJobId is not None:
      oprot.writeFieldBegin('originJobId', TType.STRING, 1)
      oprot.writeString(self.originJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I16, 2)
      oprot.writeI16(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I16, 3)
      oprot.writeI16(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.originJobId)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimePointsResponse(object):
  """
  获取备份任务对应的所有时间点的返回体


  Attributes:
   - totalNum
   - datas
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'datas', (TType.STRUCT,(ncTimePointInfo, ncTimePointInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, datas=None,):
    self.totalNum = totalNum
    self.datas = datas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.totalNum = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.datas = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = ncTimePointInfo()
            _elem166.read(iprot)
            self.datas.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimePointsResponse')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I16, 1)
      oprot.writeI16(self.totalNum)
      oprot.writeFieldEnd()
    if self.datas is not None:
      oprot.writeFieldBegin('datas', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.datas))
      for iter167 in self.datas:
        iter167.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.datas)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
