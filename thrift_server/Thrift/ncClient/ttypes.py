# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncClienntOsKinds(object):
    NORMAL_WINDOWS = 1
    NORMAL_LINUX = 2
    PE_WINDOWS = 4
    PE_LINUX = 8
    Drill_Machine = 16

    _VALUES_TO_NAMES = {
        1: "NORMAL_WINDOWS",
        2: "NORMAL_LINUX",
        4: "PE_WINDOWS",
        8: "PE_LINUX",
        16: "Drill_Machine",
    }

    _NAMES_TO_VALUES = {
        "NORMAL_WINDOWS": 1,
        "NORMAL_LINUX": 2,
        "PE_WINDOWS": 4,
        "PE_LINUX": 8,
        "Drill_Machine": 16,
    }


class ncAuthorOper(object):
    DISTRIBUTE = 1
    RECOVER = 0

    _VALUES_TO_NAMES = {
        1: "DISTRIBUTE",
        0: "RECOVER",
    }

    _NAMES_TO_VALUES = {
        "DISTRIBUTE": 1,
        "RECOVER": 0,
    }


class ncTClient(object):
    """
    Attributes:
     - clientMac
     - clientIp
     - clientStatus
     - clientName
     - clientAlias
     - clientOS
     - clientType
     - clientVersion
     - clientDesc
     - clientCPUCoreNum
     - clientArch
     - clientId
     - clientServerIP
     - clientOsType
     - authUsers
     - clientGroupId
     - platformPort
     - clientServerId
     - platformIp
     - customer
     - clientUsername
     - clientIsDeleted
     - clientIsBuiltin
     - isEmail
     - isHidden
     - clientOsTypeStr
     - clientOsKind
     - clientBinds
     - port
     - clusterPort

    """


    def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientAlias=None, clientOS=None, clientType=None, clientVersion=None, clientDesc=None, clientCPUCoreNum=None, clientArch=None, clientId=None, clientServerIP=None, clientOsType=None, authUsers=None, clientGroupId=None, platformPort=None, clientServerId=None, platformIp=None, customer=None, clientUsername=None, clientIsDeleted=None, clientIsBuiltin=None, isEmail=None, isHidden=None, clientOsTypeStr="", clientOsKind=None, clientBinds=None, port=None, clusterPort=None,):
        self.clientMac = clientMac
        self.clientIp = clientIp
        self.clientStatus = clientStatus
        self.clientName = clientName
        self.clientAlias = clientAlias
        self.clientOS = clientOS
        self.clientType = clientType
        self.clientVersion = clientVersion
        self.clientDesc = clientDesc
        self.clientCPUCoreNum = clientCPUCoreNum
        self.clientArch = clientArch
        self.clientId = clientId
        self.clientServerIP = clientServerIP
        self.clientOsType = clientOsType
        self.authUsers = authUsers
        self.clientGroupId = clientGroupId
        self.platformPort = platformPort
        self.clientServerId = clientServerId
        self.platformIp = platformIp
        self.customer = customer
        self.clientUsername = clientUsername
        self.clientIsDeleted = clientIsDeleted
        self.clientIsBuiltin = clientIsBuiltin
        self.isEmail = isEmail
        self.isHidden = isHidden
        self.clientOsTypeStr = clientOsTypeStr
        self.clientOsKind = clientOsKind
        self.clientBinds = clientBinds
        self.port = port
        self.clusterPort = clusterPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.clientStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientAlias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientOS = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.clientDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.clientCPUCoreNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.clientArch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.clientServerIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.clientOsType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.authUsers = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.authUsers.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.clientGroupId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.platformPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.clientServerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.platformIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.clientUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.clientIsDeleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.clientIsBuiltin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.isEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.isHidden = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.clientOsTypeStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.clientOsKind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.LIST:
                    self.clientBinds = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.clientBinds.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.clusterPort = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTClient')
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 1)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 2)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.clientStatus is not None:
            oprot.writeFieldBegin('clientStatus', TType.I32, 3)
            oprot.writeI32(self.clientStatus)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 4)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.clientAlias is not None:
            oprot.writeFieldBegin('clientAlias', TType.STRING, 5)
            oprot.writeString(self.clientAlias.encode('utf-8') if sys.version_info[0] == 2 else self.clientAlias)
            oprot.writeFieldEnd()
        if self.clientOS is not None:
            oprot.writeFieldBegin('clientOS', TType.STRING, 6)
            oprot.writeString(self.clientOS.encode('utf-8') if sys.version_info[0] == 2 else self.clientOS)
            oprot.writeFieldEnd()
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 7)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.clientDesc is not None:
            oprot.writeFieldBegin('clientDesc', TType.STRING, 9)
            oprot.writeString(self.clientDesc.encode('utf-8') if sys.version_info[0] == 2 else self.clientDesc)
            oprot.writeFieldEnd()
        if self.clientCPUCoreNum is not None:
            oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
            oprot.writeI32(self.clientCPUCoreNum)
            oprot.writeFieldEnd()
        if self.clientArch is not None:
            oprot.writeFieldBegin('clientArch', TType.I32, 11)
            oprot.writeI32(self.clientArch)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 12)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.clientServerIP is not None:
            oprot.writeFieldBegin('clientServerIP', TType.STRING, 13)
            oprot.writeString(self.clientServerIP.encode('utf-8') if sys.version_info[0] == 2 else self.clientServerIP)
            oprot.writeFieldEnd()
        if self.clientOsType is not None:
            oprot.writeFieldBegin('clientOsType', TType.I32, 14)
            oprot.writeI32(self.clientOsType)
            oprot.writeFieldEnd()
        if self.authUsers is not None:
            oprot.writeFieldBegin('authUsers', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.authUsers))
            for iter12 in self.authUsers:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clientGroupId is not None:
            oprot.writeFieldBegin('clientGroupId', TType.STRING, 16)
            oprot.writeString(self.clientGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.clientGroupId)
            oprot.writeFieldEnd()
        if self.platformPort is not None:
            oprot.writeFieldBegin('platformPort', TType.I32, 17)
            oprot.writeI32(self.platformPort)
            oprot.writeFieldEnd()
        if self.clientServerId is not None:
            oprot.writeFieldBegin('clientServerId', TType.STRING, 18)
            oprot.writeString(self.clientServerId.encode('utf-8') if sys.version_info[0] == 2 else self.clientServerId)
            oprot.writeFieldEnd()
        if self.platformIp is not None:
            oprot.writeFieldBegin('platformIp', TType.STRING, 19)
            oprot.writeString(self.platformIp.encode('utf-8') if sys.version_info[0] == 2 else self.platformIp)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 20)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.clientUsername is not None:
            oprot.writeFieldBegin('clientUsername', TType.STRING, 21)
            oprot.writeString(self.clientUsername.encode('utf-8') if sys.version_info[0] == 2 else self.clientUsername)
            oprot.writeFieldEnd()
        if self.clientIsDeleted is not None:
            oprot.writeFieldBegin('clientIsDeleted', TType.BOOL, 22)
            oprot.writeBool(self.clientIsDeleted)
            oprot.writeFieldEnd()
        if self.clientIsBuiltin is not None:
            oprot.writeFieldBegin('clientIsBuiltin', TType.BOOL, 23)
            oprot.writeBool(self.clientIsBuiltin)
            oprot.writeFieldEnd()
        if self.isEmail is not None:
            oprot.writeFieldBegin('isEmail', TType.BOOL, 24)
            oprot.writeBool(self.isEmail)
            oprot.writeFieldEnd()
        if self.isHidden is not None:
            oprot.writeFieldBegin('isHidden', TType.I32, 25)
            oprot.writeI32(self.isHidden)
            oprot.writeFieldEnd()
        if self.clientOsTypeStr is not None:
            oprot.writeFieldBegin('clientOsTypeStr', TType.STRING, 26)
            oprot.writeString(self.clientOsTypeStr.encode('utf-8') if sys.version_info[0] == 2 else self.clientOsTypeStr)
            oprot.writeFieldEnd()
        if self.clientOsKind is not None:
            oprot.writeFieldBegin('clientOsKind', TType.I32, 27)
            oprot.writeI32(self.clientOsKind)
            oprot.writeFieldEnd()
        if self.clientBinds is not None:
            oprot.writeFieldBegin('clientBinds', TType.LIST, 28)
            oprot.writeListBegin(TType.STRING, len(self.clientBinds))
            for iter13 in self.clientBinds:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 29)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.clusterPort is not None:
            oprot.writeFieldBegin('clusterPort', TType.STRING, 30)
            oprot.writeString(self.clusterPort.encode('utf-8') if sys.version_info[0] == 2 else self.clusterPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncParentClient(object):
    """
    父客户端(一般为虚拟客户端)

    Attributes:
     - id

    """


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncParentClient')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncChildClientFilterParameter(object):
    """
    向CommonService要子客户端时, 可以提供某种筛选条件

    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncChildClientFilterParameter')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 1)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientHadoopInfo(object):
    """
    Attributes:
     - name_node_ip
     - name_node_port
     - username
     - protection
     - childclientid_to_kbtpath

    """


    def __init__(self, name_node_ip=None, name_node_port=None, username=None, protection=None, childclientid_to_kbtpath=None,):
        self.name_node_ip = name_node_ip
        self.name_node_port = name_node_port
        self.username = username
        self.protection = protection
        self.childclientid_to_kbtpath = childclientid_to_kbtpath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name_node_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.name_node_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.protection = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.childclientid_to_kbtpath = {}
                    (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                    for _i18 in range(_size14):
                        _key19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val20 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.childclientid_to_kbtpath[_key19] = _val20
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientHadoopInfo')
        if self.name_node_ip is not None:
            oprot.writeFieldBegin('name_node_ip', TType.STRING, 1)
            oprot.writeString(self.name_node_ip.encode('utf-8') if sys.version_info[0] == 2 else self.name_node_ip)
            oprot.writeFieldEnd()
        if self.name_node_port is not None:
            oprot.writeFieldBegin('name_node_port', TType.I32, 2)
            oprot.writeI32(self.name_node_port)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 3)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.protection is not None:
            oprot.writeFieldBegin('protection', TType.STRING, 4)
            oprot.writeString(self.protection.encode('utf-8') if sys.version_info[0] == 2 else self.protection)
            oprot.writeFieldEnd()
        if self.childclientid_to_kbtpath is not None:
            oprot.writeFieldBegin('childclientid_to_kbtpath', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.childclientid_to_kbtpath))
            for kiter21, viter22 in self.childclientid_to_kbtpath.items():
                oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncMongodbClientInfo(object):
    """
    Attributes:
     - nodeType
     - nodePort

    """


    def __init__(self, nodeType=None, nodePort=None,):
        self.nodeType = nodeType
        self.nodePort = nodePort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodePort = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncMongodbClientInfo')
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.STRING, 1)
            oprot.writeString(self.nodeType.encode('utf-8') if sys.version_info[0] == 2 else self.nodeType)
            oprot.writeFieldEnd()
        if self.nodePort is not None:
            oprot.writeFieldBegin('nodePort', TType.STRING, 2)
            oprot.writeString(self.nodePort.encode('utf-8') if sys.version_info[0] == 2 else self.nodePort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientAddDetails(object):
    """
    Attributes:
     - clientSolts
     - clientCores
     - clientMemory
     - clientNetmask
     - clientGateway
     - clientDns
     - clientMacAddress
     - languageCode

    """


    def __init__(self, clientSolts=None, clientCores=None, clientMemory=None, clientNetmask=None, clientGateway=None, clientDns=None, clientMacAddress=None, languageCode=None,):
        self.clientSolts = clientSolts
        self.clientCores = clientCores
        self.clientMemory = clientMemory
        self.clientNetmask = clientNetmask
        self.clientGateway = clientGateway
        self.clientDns = clientDns
        self.clientMacAddress = clientMacAddress
        self.languageCode = languageCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clientSolts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.clientCores = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.clientMemory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientNetmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientGateway = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientDns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.clientMacAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.languageCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientAddDetails')
        if self.clientSolts is not None:
            oprot.writeFieldBegin('clientSolts', TType.I32, 1)
            oprot.writeI32(self.clientSolts)
            oprot.writeFieldEnd()
        if self.clientCores is not None:
            oprot.writeFieldBegin('clientCores', TType.I32, 2)
            oprot.writeI32(self.clientCores)
            oprot.writeFieldEnd()
        if self.clientMemory is not None:
            oprot.writeFieldBegin('clientMemory', TType.I64, 3)
            oprot.writeI64(self.clientMemory)
            oprot.writeFieldEnd()
        if self.clientNetmask is not None:
            oprot.writeFieldBegin('clientNetmask', TType.STRING, 4)
            oprot.writeString(self.clientNetmask.encode('utf-8') if sys.version_info[0] == 2 else self.clientNetmask)
            oprot.writeFieldEnd()
        if self.clientGateway is not None:
            oprot.writeFieldBegin('clientGateway', TType.STRING, 5)
            oprot.writeString(self.clientGateway.encode('utf-8') if sys.version_info[0] == 2 else self.clientGateway)
            oprot.writeFieldEnd()
        if self.clientDns is not None:
            oprot.writeFieldBegin('clientDns', TType.STRING, 6)
            oprot.writeString(self.clientDns.encode('utf-8') if sys.version_info[0] == 2 else self.clientDns)
            oprot.writeFieldEnd()
        if self.clientMacAddress is not None:
            oprot.writeFieldBegin('clientMacAddress', TType.STRING, 7)
            oprot.writeString(self.clientMacAddress.encode('utf-8') if sys.version_info[0] == 2 else self.clientMacAddress)
            oprot.writeFieldEnd()
        if self.languageCode is not None:
            oprot.writeFieldBegin('languageCode', TType.STRING, 8)
            oprot.writeString(self.languageCode.encode('utf-8') if sys.version_info[0] == 2 else self.languageCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientNetworks(object):
    """
    Attributes:
     - ipAddress
     - Netmask
     - Gateway
     - MacAddress
     - deviceName

    """


    def __init__(self, ipAddress=None, Netmask=None, Gateway=None, MacAddress=None, deviceName=None,):
        self.ipAddress = ipAddress
        self.Netmask = Netmask
        self.Gateway = Gateway
        self.MacAddress = MacAddress
        self.deviceName = deviceName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ipAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Netmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Gateway = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.MacAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.deviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientNetworks')
        if self.ipAddress is not None:
            oprot.writeFieldBegin('ipAddress', TType.STRING, 1)
            oprot.writeString(self.ipAddress.encode('utf-8') if sys.version_info[0] == 2 else self.ipAddress)
            oprot.writeFieldEnd()
        if self.Netmask is not None:
            oprot.writeFieldBegin('Netmask', TType.STRING, 2)
            oprot.writeString(self.Netmask.encode('utf-8') if sys.version_info[0] == 2 else self.Netmask)
            oprot.writeFieldEnd()
        if self.Gateway is not None:
            oprot.writeFieldBegin('Gateway', TType.STRING, 3)
            oprot.writeString(self.Gateway.encode('utf-8') if sys.version_info[0] == 2 else self.Gateway)
            oprot.writeFieldEnd()
        if self.MacAddress is not None:
            oprot.writeFieldBegin('MacAddress', TType.STRING, 4)
            oprot.writeString(self.MacAddress.encode('utf-8') if sys.version_info[0] == 2 else self.MacAddress)
            oprot.writeFieldEnd()
        if self.deviceName is not None:
            oprot.writeFieldBegin('deviceName', TType.STRING, 5)
            oprot.writeString(self.deviceName.encode('utf-8') if sys.version_info[0] == 2 else self.deviceName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientNetworksList(object):
    """
    Attributes:
     - networks

    """


    def __init__(self, networks=None,):
        self.networks = networks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.networks = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = ncClientNetworks()
                        _elem28.read(iprot)
                        self.networks.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientNetworksList')
        if self.networks is not None:
            oprot.writeFieldBegin('networks', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.networks))
            for iter29 in self.networks:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientRequest(object):
    """
    Attributes:
     - clientId

    """


    def __init__(self, clientId=None,):
        self.clientId = clientId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientRequest')
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 1)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClient(object):
    """
    Attributes:
     - clientMac
     - clientIp
     - clientStatus
     - clientName
     - clientAlias
     - clientOS
     - clientType
     - clientVersion
     - clientDesc
     - clientCPUCoreNum
     - clientArch
     - isReconnect
     - processId
     - processName
     - ipList
     - macList
     - userName
     - clientOsType
     - operUsername
     - operPassword
     - clientOsKind
     - clientAddDetails
     - cloudHostInfo

    """


    def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientAlias=None, clientOS=None, clientType=None, clientVersion=None, clientDesc=None, clientCPUCoreNum=None, clientArch=None, isReconnect=False, processId=0, processName=None, ipList=None, macList=None, userName=None, clientOsType=None, operUsername=None, operPassword=None, clientOsKind=None, clientAddDetails=None, cloudHostInfo=None,):
        self.clientMac = clientMac
        self.clientIp = clientIp
        self.clientStatus = clientStatus
        self.clientName = clientName
        self.clientAlias = clientAlias
        self.clientOS = clientOS
        self.clientType = clientType
        self.clientVersion = clientVersion
        self.clientDesc = clientDesc
        self.clientCPUCoreNum = clientCPUCoreNum
        self.clientArch = clientArch
        self.isReconnect = isReconnect
        self.processId = processId
        self.processName = processName
        self.ipList = ipList
        self.macList = macList
        self.userName = userName
        self.clientOsType = clientOsType
        self.operUsername = operUsername
        self.operPassword = operPassword
        self.clientOsKind = clientOsKind
        self.clientAddDetails = clientAddDetails
        self.cloudHostInfo = cloudHostInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.clientStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.clientAlias = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientOS = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.clientDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.clientCPUCoreNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.clientArch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.isReconnect = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.processId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.processName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.ipList = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ipList.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.macList = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.macList.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.clientOsType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.operUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.operPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.clientOsKind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.clientAddDetails = ncClientAddDetails()
                    self.clientAddDetails.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.cloudHostInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClient')
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 1)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 2)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.clientStatus is not None:
            oprot.writeFieldBegin('clientStatus', TType.I32, 3)
            oprot.writeI32(self.clientStatus)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 4)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.clientAlias is not None:
            oprot.writeFieldBegin('clientAlias', TType.STRING, 5)
            oprot.writeString(self.clientAlias.encode('utf-8') if sys.version_info[0] == 2 else self.clientAlias)
            oprot.writeFieldEnd()
        if self.clientOS is not None:
            oprot.writeFieldBegin('clientOS', TType.STRING, 6)
            oprot.writeString(self.clientOS.encode('utf-8') if sys.version_info[0] == 2 else self.clientOS)
            oprot.writeFieldEnd()
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 7)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.clientDesc is not None:
            oprot.writeFieldBegin('clientDesc', TType.STRING, 9)
            oprot.writeString(self.clientDesc.encode('utf-8') if sys.version_info[0] == 2 else self.clientDesc)
            oprot.writeFieldEnd()
        if self.clientCPUCoreNum is not None:
            oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
            oprot.writeI32(self.clientCPUCoreNum)
            oprot.writeFieldEnd()
        if self.clientArch is not None:
            oprot.writeFieldBegin('clientArch', TType.I32, 11)
            oprot.writeI32(self.clientArch)
            oprot.writeFieldEnd()
        if self.isReconnect is not None:
            oprot.writeFieldBegin('isReconnect', TType.BOOL, 12)
            oprot.writeBool(self.isReconnect)
            oprot.writeFieldEnd()
        if self.processId is not None:
            oprot.writeFieldBegin('processId', TType.I64, 13)
            oprot.writeI64(self.processId)
            oprot.writeFieldEnd()
        if self.processName is not None:
            oprot.writeFieldBegin('processName', TType.STRING, 14)
            oprot.writeString(self.processName.encode('utf-8') if sys.version_info[0] == 2 else self.processName)
            oprot.writeFieldEnd()
        if self.ipList is not None:
            oprot.writeFieldBegin('ipList', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.ipList))
            for iter42 in self.ipList:
                oprot.writeString(iter42.encode('utf-8') if sys.version_info[0] == 2 else iter42)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.macList is not None:
            oprot.writeFieldBegin('macList', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.macList))
            for iter43 in self.macList:
                oprot.writeString(iter43.encode('utf-8') if sys.version_info[0] == 2 else iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 17)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.clientOsType is not None:
            oprot.writeFieldBegin('clientOsType', TType.I32, 18)
            oprot.writeI32(self.clientOsType)
            oprot.writeFieldEnd()
        if self.operUsername is not None:
            oprot.writeFieldBegin('operUsername', TType.STRING, 19)
            oprot.writeString(self.operUsername.encode('utf-8') if sys.version_info[0] == 2 else self.operUsername)
            oprot.writeFieldEnd()
        if self.operPassword is not None:
            oprot.writeFieldBegin('operPassword', TType.STRING, 20)
            oprot.writeString(self.operPassword.encode('utf-8') if sys.version_info[0] == 2 else self.operPassword)
            oprot.writeFieldEnd()
        if self.clientOsKind is not None:
            oprot.writeFieldBegin('clientOsKind', TType.I32, 21)
            oprot.writeI32(self.clientOsKind)
            oprot.writeFieldEnd()
        if self.clientAddDetails is not None:
            oprot.writeFieldBegin('clientAddDetails', TType.STRUCT, 22)
            self.clientAddDetails.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudHostInfo is not None:
            oprot.writeFieldBegin('cloudHostInfo', TType.STRING, 23)
            oprot.writeString(self.cloudHostInfo.encode('utf-8') if sys.version_info[0] == 2 else self.cloudHostInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientCheck(object):
    """
    Attributes:
     - result
     - clientMac
     - processId
     - processName
     - ipList
     - macList

    """


    def __init__(self, result=True, clientMac=None, processId=None, processName=None, ipList=None, macList=None,):
        self.result = result
        self.clientMac = clientMac
        self.processId = processId
        self.processName = processName
        self.ipList = ipList
        self.macList = macList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.processId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.processName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ipList = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ipList.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.macList = []
                    (_etype53, _size50) = iprot.readListBegin()
                    for _i54 in range(_size50):
                        _elem55 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.macList.append(_elem55)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientCheck')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 1)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 2)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.processId is not None:
            oprot.writeFieldBegin('processId', TType.I64, 3)
            oprot.writeI64(self.processId)
            oprot.writeFieldEnd()
        if self.processName is not None:
            oprot.writeFieldBegin('processName', TType.STRING, 4)
            oprot.writeString(self.processName.encode('utf-8') if sys.version_info[0] == 2 else self.processName)
            oprot.writeFieldEnd()
        if self.ipList is not None:
            oprot.writeFieldBegin('ipList', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.ipList))
            for iter56 in self.ipList:
                oprot.writeString(iter56.encode('utf-8') if sys.version_info[0] == 2 else iter56)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.macList is not None:
            oprot.writeFieldBegin('macList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.macList))
            for iter57 in self.macList:
                oprot.writeString(iter57.encode('utf-8') if sys.version_info[0] == 2 else iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientConfig(object):
    """
    Attributes:
     - targetIp
     - selfIp
     - targetPort
     - detectTime
     - operUsername
     - cloudHostInfo

    """


    def __init__(self, targetIp=None, selfIp=None, targetPort=None, detectTime=None, operUsername=None, cloudHostInfo=None,):
        self.targetIp = targetIp
        self.selfIp = selfIp
        self.targetPort = targetPort
        self.detectTime = detectTime
        self.operUsername = operUsername
        self.cloudHostInfo = cloudHostInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.targetIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.selfIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.targetPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.detectTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.operUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cloudHostInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientConfig')
        if self.targetIp is not None:
            oprot.writeFieldBegin('targetIp', TType.STRING, 1)
            oprot.writeString(self.targetIp.encode('utf-8') if sys.version_info[0] == 2 else self.targetIp)
            oprot.writeFieldEnd()
        if self.selfIp is not None:
            oprot.writeFieldBegin('selfIp', TType.STRING, 2)
            oprot.writeString(self.selfIp.encode('utf-8') if sys.version_info[0] == 2 else self.selfIp)
            oprot.writeFieldEnd()
        if self.targetPort is not None:
            oprot.writeFieldBegin('targetPort', TType.I32, 3)
            oprot.writeI32(self.targetPort)
            oprot.writeFieldEnd()
        if self.detectTime is not None:
            oprot.writeFieldBegin('detectTime', TType.I32, 4)
            oprot.writeI32(self.detectTime)
            oprot.writeFieldEnd()
        if self.operUsername is not None:
            oprot.writeFieldBegin('operUsername', TType.STRING, 5)
            oprot.writeString(self.operUsername.encode('utf-8') if sys.version_info[0] == 2 else self.operUsername)
            oprot.writeFieldEnd()
        if self.cloudHostInfo is not None:
            oprot.writeFieldBegin('cloudHostInfo', TType.STRING, 6)
            oprot.writeString(self.cloudHostInfo.encode('utf-8') if sys.version_info[0] == 2 else self.cloudHostInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTClientConfig(object):
    """
    Attributes:
     - osUser
     - osPort
     - osCustomer
     - physicalName
     - physicalSignal
     - physicalPath
     - physicalCustomer
     - jobType
     - upperLayer
     - instanceName
     - instanceUser
     - instancePwd
     - instancePath
     - instancePort
     - instanceOrganization
     - instanceCustomer
     - isManual
     - customer
     - id

    """


    def __init__(self, osUser=None, osPort=None, osCustomer=None, physicalName=None, physicalSignal=None, physicalPath=None, physicalCustomer=None, jobType=None, upperLayer=None, instanceName=None, instanceUser=None, instancePwd=None, instancePath=None, instancePort=None, instanceOrganization=None, instanceCustomer=None, isManual=None, customer=None, id=None,):
        self.osUser = osUser
        self.osPort = osPort
        self.osCustomer = osCustomer
        self.physicalName = physicalName
        self.physicalSignal = physicalSignal
        self.physicalPath = physicalPath
        self.physicalCustomer = physicalCustomer
        self.jobType = jobType
        self.upperLayer = upperLayer
        self.instanceName = instanceName
        self.instanceUser = instanceUser
        self.instancePwd = instancePwd
        self.instancePath = instancePath
        self.instancePort = instancePort
        self.instanceOrganization = instanceOrganization
        self.instanceCustomer = instanceCustomer
        self.isManual = isManual
        self.customer = customer
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.osUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.osPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.osCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.physicalName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.physicalSignal = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.physicalPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.physicalCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.upperLayer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.instanceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.instanceUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.instancePwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.instancePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.instancePort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.instanceOrganization = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.instanceCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.isManual = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTClientConfig')
        if self.osUser is not None:
            oprot.writeFieldBegin('osUser', TType.STRING, 1)
            oprot.writeString(self.osUser.encode('utf-8') if sys.version_info[0] == 2 else self.osUser)
            oprot.writeFieldEnd()
        if self.osPort is not None:
            oprot.writeFieldBegin('osPort', TType.I32, 2)
            oprot.writeI32(self.osPort)
            oprot.writeFieldEnd()
        if self.osCustomer is not None:
            oprot.writeFieldBegin('osCustomer', TType.STRING, 3)
            oprot.writeString(self.osCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.osCustomer)
            oprot.writeFieldEnd()
        if self.physicalName is not None:
            oprot.writeFieldBegin('physicalName', TType.STRING, 4)
            oprot.writeString(self.physicalName.encode('utf-8') if sys.version_info[0] == 2 else self.physicalName)
            oprot.writeFieldEnd()
        if self.physicalSignal is not None:
            oprot.writeFieldBegin('physicalSignal', TType.STRING, 5)
            oprot.writeString(self.physicalSignal.encode('utf-8') if sys.version_info[0] == 2 else self.physicalSignal)
            oprot.writeFieldEnd()
        if self.physicalPath is not None:
            oprot.writeFieldBegin('physicalPath', TType.STRING, 6)
            oprot.writeString(self.physicalPath.encode('utf-8') if sys.version_info[0] == 2 else self.physicalPath)
            oprot.writeFieldEnd()
        if self.physicalCustomer is not None:
            oprot.writeFieldBegin('physicalCustomer', TType.STRING, 7)
            oprot.writeString(self.physicalCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.physicalCustomer)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 8)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.upperLayer is not None:
            oprot.writeFieldBegin('upperLayer', TType.STRING, 9)
            oprot.writeString(self.upperLayer.encode('utf-8') if sys.version_info[0] == 2 else self.upperLayer)
            oprot.writeFieldEnd()
        if self.instanceName is not None:
            oprot.writeFieldBegin('instanceName', TType.STRING, 10)
            oprot.writeString(self.instanceName.encode('utf-8') if sys.version_info[0] == 2 else self.instanceName)
            oprot.writeFieldEnd()
        if self.instanceUser is not None:
            oprot.writeFieldBegin('instanceUser', TType.STRING, 11)
            oprot.writeString(self.instanceUser.encode('utf-8') if sys.version_info[0] == 2 else self.instanceUser)
            oprot.writeFieldEnd()
        if self.instancePwd is not None:
            oprot.writeFieldBegin('instancePwd', TType.STRING, 12)
            oprot.writeString(self.instancePwd.encode('utf-8') if sys.version_info[0] == 2 else self.instancePwd)
            oprot.writeFieldEnd()
        if self.instancePath is not None:
            oprot.writeFieldBegin('instancePath', TType.STRING, 13)
            oprot.writeString(self.instancePath.encode('utf-8') if sys.version_info[0] == 2 else self.instancePath)
            oprot.writeFieldEnd()
        if self.instancePort is not None:
            oprot.writeFieldBegin('instancePort', TType.I32, 14)
            oprot.writeI32(self.instancePort)
            oprot.writeFieldEnd()
        if self.instanceOrganization is not None:
            oprot.writeFieldBegin('instanceOrganization', TType.STRING, 15)
            oprot.writeString(self.instanceOrganization.encode('utf-8') if sys.version_info[0] == 2 else self.instanceOrganization)
            oprot.writeFieldEnd()
        if self.instanceCustomer is not None:
            oprot.writeFieldBegin('instanceCustomer', TType.STRING, 16)
            oprot.writeString(self.instanceCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.instanceCustomer)
            oprot.writeFieldEnd()
        if self.isManual is not None:
            oprot.writeFieldBegin('isManual', TType.BOOL, 17)
            oprot.writeBool(self.isManual)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 18)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 19)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetSvcIpReq(object):
    """
    Attributes:
     - selfIp
     - machineCode
     - osUser
     - customer
     - serverType

    """


    def __init__(self, selfIp=None, machineCode=None, osUser=None, customer=None, serverType=None,):
        self.selfIp = selfIp
        self.machineCode = machineCode
        self.osUser = osUser
        self.customer = customer
        self.serverType = serverType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.selfIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.osUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.serverType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetSvcIpReq')
        if self.selfIp is not None:
            oprot.writeFieldBegin('selfIp', TType.STRING, 1)
            oprot.writeString(self.selfIp.encode('utf-8') if sys.version_info[0] == 2 else self.selfIp)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 2)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.osUser is not None:
            oprot.writeFieldBegin('osUser', TType.STRING, 3)
            oprot.writeString(self.osUser.encode('utf-8') if sys.version_info[0] == 2 else self.osUser)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 4)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.serverType is not None:
            oprot.writeFieldBegin('serverType', TType.I32, 5)
            oprot.writeI32(self.serverType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncConnSvcIP(object):
    """
    Attributes:
     - svcIp

    """


    def __init__(self, svcIp=None,):
        self.svcIp = svcIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.svcIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncConnSvcIP')
        if self.svcIp is not None:
            oprot.writeFieldBegin('svcIp', TType.STRING, 1)
            oprot.writeString(self.svcIp.encode('utf-8') if sys.version_info[0] == 2 else self.svcIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientDistriReq(object):
    """
    Attributes:
     - requestId
     - clientIds
     - users
     - oper
     - role

    """


    def __init__(self, requestId=None, clientIds=None, users=None, oper=None, role=None,):
        self.requestId = requestId
        self.clientIds = clientIds
        self.users = users
        self.oper = oper
        self.role = role

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.clientIds = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.clientIds.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype67, _size64) = iprot.readListBegin()
                    for _i68 in range(_size64):
                        _elem69 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.append(_elem69)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.oper = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientDistriReq')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.clientIds is not None:
            oprot.writeFieldBegin('clientIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.clientIds))
            for iter70 in self.clientIds:
                oprot.writeString(iter70.encode('utf-8') if sys.version_info[0] == 2 else iter70)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.users))
            for iter71 in self.users:
                oprot.writeString(iter71.encode('utf-8') if sys.version_info[0] == 2 else iter71)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.oper is not None:
            oprot.writeFieldBegin('oper', TType.I32, 4)
            oprot.writeI32(self.oper)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 5)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientDistriRes(object):
    """
    Attributes:
     - requestId
     - nodeIp
     - isFinished
     - oper
     - isErr
     - errs

    """


    def __init__(self, requestId=None, nodeIp=None, isFinished=None, oper=None, isErr=None, errs=None,):
        self.requestId = requestId
        self.nodeIp = nodeIp
        self.isFinished = isFinished
        self.oper = oper
        self.isErr = isErr
        self.errs = errs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.oper = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.errs = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.errs.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientDistriRes')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 3)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.oper is not None:
            oprot.writeFieldBegin('oper', TType.I32, 4)
            oprot.writeI32(self.oper)
            oprot.writeFieldEnd()
        if self.isErr is not None:
            oprot.writeFieldBegin('isErr', TType.BOOL, 5)
            oprot.writeBool(self.isErr)
            oprot.writeFieldEnd()
        if self.errs is not None:
            oprot.writeFieldBegin('errs', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.errs))
            for iter78 in self.errs:
                oprot.writeString(iter78.encode('utf-8') if sys.version_info[0] == 2 else iter78)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientAuthReq(object):
    """
    Attributes:
     - requestId
     - operDesc
     - authUsers

    """


    def __init__(self, requestId=None, operDesc=None, authUsers=None,):
        self.requestId = requestId
        self.operDesc = operDesc
        self.authUsers = authUsers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.operDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.authUsers = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.authUsers.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientAuthReq')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        if self.operDesc is not None:
            oprot.writeFieldBegin('operDesc', TType.STRING, 2)
            oprot.writeString(self.operDesc.encode('utf-8') if sys.version_info[0] == 2 else self.operDesc)
            oprot.writeFieldEnd()
        if self.authUsers is not None:
            oprot.writeFieldBegin('authUsers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.authUsers))
            for iter85 in self.authUsers:
                oprot.writeString(iter85.encode('utf-8') if sys.version_info[0] == 2 else iter85)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientAuthRes(object):
    """
    Attributes:
     - isErr
     - errs
     - operDesc
     - exincludeAuthers
     - nodeIp
     - isFinished
     - requestId

    """


    def __init__(self, isErr=None, errs=None, operDesc=None, exincludeAuthers=None, nodeIp=None, isFinished=None, requestId=None,):
        self.isErr = isErr
        self.errs = errs
        self.operDesc = operDesc
        self.exincludeAuthers = exincludeAuthers
        self.nodeIp = nodeIp
        self.isFinished = isFinished
        self.requestId = requestId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isErr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.errs = []
                    (_etype89, _size86) = iprot.readListBegin()
                    for _i90 in range(_size86):
                        _elem91 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.errs.append(_elem91)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.operDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.exincludeAuthers = []
                    (_etype95, _size92) = iprot.readListBegin()
                    for _i96 in range(_size92):
                        _elem97 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exincludeAuthers.append(_elem97)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isFinished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientAuthRes')
        if self.isErr is not None:
            oprot.writeFieldBegin('isErr', TType.BOOL, 1)
            oprot.writeBool(self.isErr)
            oprot.writeFieldEnd()
        if self.errs is not None:
            oprot.writeFieldBegin('errs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.errs))
            for iter98 in self.errs:
                oprot.writeString(iter98.encode('utf-8') if sys.version_info[0] == 2 else iter98)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.operDesc is not None:
            oprot.writeFieldBegin('operDesc', TType.STRING, 3)
            oprot.writeString(self.operDesc.encode('utf-8') if sys.version_info[0] == 2 else self.operDesc)
            oprot.writeFieldEnd()
        if self.exincludeAuthers is not None:
            oprot.writeFieldBegin('exincludeAuthers', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.exincludeAuthers))
            for iter99 in self.exincludeAuthers:
                oprot.writeString(iter99.encode('utf-8') if sys.version_info[0] == 2 else iter99)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 5)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.isFinished is not None:
            oprot.writeFieldBegin('isFinished', TType.BOOL, 6)
            oprot.writeBool(self.isFinished)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 7)
            oprot.writeString(self.requestId.encode('utf-8') if sys.version_info[0] == 2 else self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientFilterRequest(object):
    """
    Attributes:
     - client_ids
     - status
     - server_ip

    """


    def __init__(self, client_ids=None, status=None, server_ip=None,):
        self.client_ids = client_ids
        self.status = status
        self.server_ip = server_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.client_ids = set()
                    (_etype103, _size100) = iprot.readSetBegin()
                    for _i104 in range(_size100):
                        _elem105 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.client_ids.add(_elem105)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.server_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientFilterRequest')
        if self.client_ids is not None:
            oprot.writeFieldBegin('client_ids', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.client_ids))
            for iter106 in self.client_ids:
                oprot.writeString(iter106.encode('utf-8') if sys.version_info[0] == 2 else iter106)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 2)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.server_ip is not None:
            oprot.writeFieldBegin('server_ip', TType.STRING, 3)
            oprot.writeString(self.server_ip.encode('utf-8') if sys.version_info[0] == 2 else self.server_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_ids is None:
            raise TProtocolException(message='Required field client_ids is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncContentCloudResourceQueryRequest(object):
    """
    Attributes:
     - contentcloud_resource_ids

    """


    def __init__(self, contentcloud_resource_ids=None,):
        self.contentcloud_resource_ids = contentcloud_resource_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.contentcloud_resource_ids = set()
                    (_etype110, _size107) = iprot.readSetBegin()
                    for _i111 in range(_size107):
                        _elem112 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.contentcloud_resource_ids.add(_elem112)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncContentCloudResourceQueryRequest')
        if self.contentcloud_resource_ids is not None:
            oprot.writeFieldBegin('contentcloud_resource_ids', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.contentcloud_resource_ids))
            for iter113 in self.contentcloud_resource_ids:
                oprot.writeString(iter113.encode('utf-8') if sys.version_info[0] == 2 else iter113)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.contentcloud_resource_ids is None:
            raise TProtocolException(message='Required field contentcloud_resource_ids is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncContentCloudResourceResponse(object):
    """
    Attributes:
     - contentcloud_resource_id
     - auth_user
     - has_assigned
     - site_type
     - multi_site_type
     - name
     - ip_or_domain
     - username
     - password
     - sub_site_ip_or_domain

    """


    def __init__(self, contentcloud_resource_id=None, auth_user=None, has_assigned=None, site_type=None, multi_site_type=None, name=None, ip_or_domain=None, username=None, password=None, sub_site_ip_or_domain=None,):
        self.contentcloud_resource_id = contentcloud_resource_id
        self.auth_user = auth_user
        self.has_assigned = has_assigned
        self.site_type = site_type
        self.multi_site_type = multi_site_type
        self.name = name
        self.ip_or_domain = ip_or_domain
        self.username = username
        self.password = password
        self.sub_site_ip_or_domain = sub_site_ip_or_domain

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.contentcloud_resource_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.auth_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.has_assigned = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.site_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.multi_site_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.ip_or_domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.sub_site_ip_or_domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncContentCloudResourceResponse')
        if self.contentcloud_resource_id is not None:
            oprot.writeFieldBegin('contentcloud_resource_id', TType.STRING, 1)
            oprot.writeString(self.contentcloud_resource_id.encode('utf-8') if sys.version_info[0] == 2 else self.contentcloud_resource_id)
            oprot.writeFieldEnd()
        if self.auth_user is not None:
            oprot.writeFieldBegin('auth_user', TType.STRING, 2)
            oprot.writeString(self.auth_user.encode('utf-8') if sys.version_info[0] == 2 else self.auth_user)
            oprot.writeFieldEnd()
        if self.has_assigned is not None:
            oprot.writeFieldBegin('has_assigned', TType.BOOL, 3)
            oprot.writeBool(self.has_assigned)
            oprot.writeFieldEnd()
        if self.site_type is not None:
            oprot.writeFieldBegin('site_type', TType.STRING, 4)
            oprot.writeString(self.site_type.encode('utf-8') if sys.version_info[0] == 2 else self.site_type)
            oprot.writeFieldEnd()
        if self.multi_site_type is not None:
            oprot.writeFieldBegin('multi_site_type', TType.STRING, 5)
            oprot.writeString(self.multi_site_type.encode('utf-8') if sys.version_info[0] == 2 else self.multi_site_type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 6)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ip_or_domain is not None:
            oprot.writeFieldBegin('ip_or_domain', TType.STRING, 7)
            oprot.writeString(self.ip_or_domain.encode('utf-8') if sys.version_info[0] == 2 else self.ip_or_domain)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 8)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 9)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.sub_site_ip_or_domain is not None:
            oprot.writeFieldBegin('sub_site_ip_or_domain', TType.STRING, 10)
            oprot.writeString(self.sub_site_ip_or_domain.encode('utf-8') if sys.version_info[0] == 2 else self.sub_site_ip_or_domain)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.contentcloud_resource_id is None:
            raise TProtocolException(message='Required field contentcloud_resource_id is unset!')
        if self.auth_user is None:
            raise TProtocolException(message='Required field auth_user is unset!')
        if self.has_assigned is None:
            raise TProtocolException(message='Required field has_assigned is unset!')
        if self.site_type is None:
            raise TProtocolException(message='Required field site_type is unset!')
        if self.multi_site_type is None:
            raise TProtocolException(message='Required field multi_site_type is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.ip_or_domain is None:
            raise TProtocolException(message='Required field ip_or_domain is unset!')
        if self.username is None:
            raise TProtocolException(message='Required field username is unset!')
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        if self.sub_site_ip_or_domain is None:
            raise TProtocolException(message='Required field sub_site_ip_or_domain is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTClientDetails(object):
    """
    Attributes:
     - clientMac
     - clientIp
     - clientStatus
     - clientName
     - clientOS
     - clientType
     - clientVersion
     - clientOsType
     - clientCPUCoreNum
     - clientArch
     - clientId
     - clientServerIP
     - isEmail
     - isHidden
     - authUsers
     - clientSolts
     - clientCores
     - clientMemory
     - clientNetmask
     - clientGateway
     - clientDns
     - clientMacAddress

    """


    def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientOS=None, clientType=None, clientVersion=None, clientOsType=None, clientCPUCoreNum=None, clientArch=None, clientId=None, clientServerIP=None, isEmail=None, isHidden=None, authUsers=None, clientSolts=None, clientCores=None, clientMemory=None, clientNetmask=None, clientGateway=None, clientDns=None, clientMacAddress=None,):
        self.clientMac = clientMac
        self.clientIp = clientIp
        self.clientStatus = clientStatus
        self.clientName = clientName
        self.clientOS = clientOS
        self.clientType = clientType
        self.clientVersion = clientVersion
        self.clientOsType = clientOsType
        self.clientCPUCoreNum = clientCPUCoreNum
        self.clientArch = clientArch
        self.clientId = clientId
        self.clientServerIP = clientServerIP
        self.isEmail = isEmail
        self.isHidden = isHidden
        self.authUsers = authUsers
        self.clientSolts = clientSolts
        self.clientCores = clientCores
        self.clientMemory = clientMemory
        self.clientNetmask = clientNetmask
        self.clientGateway = clientGateway
        self.clientDns = clientDns
        self.clientMacAddress = clientMacAddress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.clientStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientOS = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.clientType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.clientOsType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.clientCPUCoreNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.clientArch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.clientServerIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.isEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.isHidden = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.authUsers = []
                    (_etype117, _size114) = iprot.readListBegin()
                    for _i118 in range(_size114):
                        _elem119 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.authUsers.append(_elem119)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.clientSolts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.clientCores = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.clientMemory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.clientNetmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.clientGateway = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.clientDns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.clientMacAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTClientDetails')
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 1)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 2)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.clientStatus is not None:
            oprot.writeFieldBegin('clientStatus', TType.I32, 3)
            oprot.writeI32(self.clientStatus)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 4)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.clientOS is not None:
            oprot.writeFieldBegin('clientOS', TType.STRING, 6)
            oprot.writeString(self.clientOS.encode('utf-8') if sys.version_info[0] == 2 else self.clientOS)
            oprot.writeFieldEnd()
        if self.clientType is not None:
            oprot.writeFieldBegin('clientType', TType.I32, 7)
            oprot.writeI32(self.clientType)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.clientOsType is not None:
            oprot.writeFieldBegin('clientOsType', TType.I32, 9)
            oprot.writeI32(self.clientOsType)
            oprot.writeFieldEnd()
        if self.clientCPUCoreNum is not None:
            oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
            oprot.writeI32(self.clientCPUCoreNum)
            oprot.writeFieldEnd()
        if self.clientArch is not None:
            oprot.writeFieldBegin('clientArch', TType.I32, 11)
            oprot.writeI32(self.clientArch)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 12)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.clientServerIP is not None:
            oprot.writeFieldBegin('clientServerIP', TType.STRING, 13)
            oprot.writeString(self.clientServerIP.encode('utf-8') if sys.version_info[0] == 2 else self.clientServerIP)
            oprot.writeFieldEnd()
        if self.isEmail is not None:
            oprot.writeFieldBegin('isEmail', TType.BOOL, 14)
            oprot.writeBool(self.isEmail)
            oprot.writeFieldEnd()
        if self.isHidden is not None:
            oprot.writeFieldBegin('isHidden', TType.I32, 15)
            oprot.writeI32(self.isHidden)
            oprot.writeFieldEnd()
        if self.authUsers is not None:
            oprot.writeFieldBegin('authUsers', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.authUsers))
            for iter120 in self.authUsers:
                oprot.writeString(iter120.encode('utf-8') if sys.version_info[0] == 2 else iter120)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clientSolts is not None:
            oprot.writeFieldBegin('clientSolts', TType.I32, 17)
            oprot.writeI32(self.clientSolts)
            oprot.writeFieldEnd()
        if self.clientCores is not None:
            oprot.writeFieldBegin('clientCores', TType.I32, 18)
            oprot.writeI32(self.clientCores)
            oprot.writeFieldEnd()
        if self.clientMemory is not None:
            oprot.writeFieldBegin('clientMemory', TType.I64, 19)
            oprot.writeI64(self.clientMemory)
            oprot.writeFieldEnd()
        if self.clientNetmask is not None:
            oprot.writeFieldBegin('clientNetmask', TType.STRING, 20)
            oprot.writeString(self.clientNetmask.encode('utf-8') if sys.version_info[0] == 2 else self.clientNetmask)
            oprot.writeFieldEnd()
        if self.clientGateway is not None:
            oprot.writeFieldBegin('clientGateway', TType.STRING, 21)
            oprot.writeString(self.clientGateway.encode('utf-8') if sys.version_info[0] == 2 else self.clientGateway)
            oprot.writeFieldEnd()
        if self.clientDns is not None:
            oprot.writeFieldBegin('clientDns', TType.STRING, 22)
            oprot.writeString(self.clientDns.encode('utf-8') if sys.version_info[0] == 2 else self.clientDns)
            oprot.writeFieldEnd()
        if self.clientMacAddress is not None:
            oprot.writeFieldBegin('clientMacAddress', TType.STRING, 23)
            oprot.writeString(self.clientMacAddress.encode('utf-8') if sys.version_info[0] == 2 else self.clientMacAddress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncMetadataRestoreStatus(object):
    """
    Attributes:
     - isOver

    """


    def __init__(self, isOver=None,):
        self.isOver = isOver

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isOver = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncMetadataRestoreStatus')
        if self.isOver is not None:
            oprot.writeFieldBegin('isOver', TType.BOOL, 1)
            oprot.writeBool(self.isOver)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncSource(object):
    """
    Attributes:
     - sourceId
     - clientId
     - cloudStorageName

    """


    def __init__(self, sourceId=None, clientId=None, cloudStorageName=None,):
        self.sourceId = sourceId
        self.clientId = clientId
        self.cloudStorageName = cloudStorageName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cloudStorageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncSource')
        if self.sourceId is not None:
            oprot.writeFieldBegin('sourceId', TType.STRING, 1)
            oprot.writeString(self.sourceId.encode('utf-8') if sys.version_info[0] == 2 else self.sourceId)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 2)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.cloudStorageName is not None:
            oprot.writeFieldBegin('cloudStorageName', TType.STRING, 3)
            oprot.writeString(self.cloudStorageName.encode('utf-8') if sys.version_info[0] == 2 else self.cloudStorageName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFingerPoorInfo(object):
    """
    Attributes:
     - fpId
     - nodeIPs

    """


    def __init__(self, fpId=None, nodeIPs=None,):
        self.fpId = fpId
        self.nodeIPs = nodeIPs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fpId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nodeIPs = []
                    (_etype124, _size121) = iprot.readListBegin()
                    for _i125 in range(_size121):
                        _elem126 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.nodeIPs.append(_elem126)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFingerPoorInfo')
        if self.fpId is not None:
            oprot.writeFieldBegin('fpId', TType.STRING, 1)
            oprot.writeString(self.fpId.encode('utf-8') if sys.version_info[0] == 2 else self.fpId)
            oprot.writeFieldEnd()
        if self.nodeIPs is not None:
            oprot.writeFieldBegin('nodeIPs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.nodeIPs))
            for iter127 in self.nodeIPs:
                oprot.writeString(iter127.encode('utf-8') if sys.version_info[0] == 2 else iter127)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetServerInfo(object):
    """
    Attributes:
     - selfIp
     - machineCode
     - serverType

    """


    def __init__(self, selfIp=None, machineCode=None, serverType=None,):
        self.selfIp = selfIp
        self.machineCode = machineCode
        self.serverType = serverType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.selfIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.serverType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetServerInfo')
        if self.selfIp is not None:
            oprot.writeFieldBegin('selfIp', TType.STRING, 1)
            oprot.writeString(self.selfIp.encode('utf-8') if sys.version_info[0] == 2 else self.selfIp)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 2)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.serverType is not None:
            oprot.writeFieldBegin('serverType', TType.I32, 3)
            oprot.writeI32(self.serverType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncServerInfo(object):
    """
    Attributes:
     - language
     - version

    """


    def __init__(self, language=None, version=None,):
        self.language = language
        self.version = version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncServerInfo')
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 1)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncProtectObjectCountInfo(object):
    """
    Attributes:
     - client
     - vmPlatform
     - cloudPlatform
     - cloudStorage

    """


    def __init__(self, client=None, vmPlatform=None, cloudPlatform=None, cloudStorage=None,):
        self.client = client
        self.vmPlatform = vmPlatform
        self.cloudPlatform = cloudPlatform
        self.cloudStorage = cloudStorage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.client = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vmPlatform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.cloudPlatform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cloudStorage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncProtectObjectCountInfo')
        if self.client is not None:
            oprot.writeFieldBegin('client', TType.I32, 1)
            oprot.writeI32(self.client)
            oprot.writeFieldEnd()
        if self.vmPlatform is not None:
            oprot.writeFieldBegin('vmPlatform', TType.I32, 2)
            oprot.writeI32(self.vmPlatform)
            oprot.writeFieldEnd()
        if self.cloudPlatform is not None:
            oprot.writeFieldBegin('cloudPlatform', TType.I32, 3)
            oprot.writeI32(self.cloudPlatform)
            oprot.writeFieldEnd()
        if self.cloudStorage is not None:
            oprot.writeFieldBegin('cloudStorage', TType.I32, 4)
            oprot.writeI32(self.cloudStorage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncFingerPoorsData(object):
    """
    Attributes:
     - fpName
     - createUser
     - primaryKeyId

    """


    def __init__(self, fpName=None, createUser=None, primaryKeyId=None,):
        self.fpName = fpName
        self.createUser = createUser
        self.primaryKeyId = primaryKeyId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fpName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.createUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.primaryKeyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncFingerPoorsData')
        if self.fpName is not None:
            oprot.writeFieldBegin('fpName', TType.STRING, 1)
            oprot.writeString(self.fpName.encode('utf-8') if sys.version_info[0] == 2 else self.fpName)
            oprot.writeFieldEnd()
        if self.createUser is not None:
            oprot.writeFieldBegin('createUser', TType.STRING, 2)
            oprot.writeString(self.createUser.encode('utf-8') if sys.version_info[0] == 2 else self.createUser)
            oprot.writeFieldEnd()
        if self.primaryKeyId is not None:
            oprot.writeFieldBegin('primaryKeyId', TType.STRING, 3)
            oprot.writeString(self.primaryKeyId.encode('utf-8') if sys.version_info[0] == 2 else self.primaryKeyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncProtectObjectInfo(object):
    """
    Attributes:
     - type
     - name
     - host
     - status

    """


    def __init__(self, type=None, name=None, host=None, status=None,):
        self.type = type
        self.name = name
        self.host = host
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncProtectObjectInfo')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 3)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientCAReportReq(object):
    """
    Attributes:
     - clientIp
     - capemDays
     - clientpemDays
     - caPemExpired
     - clientPemExpired

    """


    def __init__(self, clientIp=None, capemDays=None, clientpemDays=None, caPemExpired=None, clientPemExpired=None,):
        self.clientIp = clientIp
        self.capemDays = capemDays
        self.clientpemDays = clientpemDays
        self.caPemExpired = caPemExpired
        self.clientPemExpired = clientPemExpired

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.capemDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.clientpemDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.caPemExpired = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.clientPemExpired = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientCAReportReq')
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 1)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.capemDays is not None:
            oprot.writeFieldBegin('capemDays', TType.I32, 2)
            oprot.writeI32(self.capemDays)
            oprot.writeFieldEnd()
        if self.clientpemDays is not None:
            oprot.writeFieldBegin('clientpemDays', TType.I32, 3)
            oprot.writeI32(self.clientpemDays)
            oprot.writeFieldEnd()
        if self.caPemExpired is not None:
            oprot.writeFieldBegin('caPemExpired', TType.I32, 4)
            oprot.writeI32(self.caPemExpired)
            oprot.writeFieldEnd()
        if self.clientPemExpired is not None:
            oprot.writeFieldBegin('clientPemExpired', TType.I32, 5)
            oprot.writeI32(self.clientPemExpired)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientCAReportRes(object):
    """
    Attributes:
     - reportResult

    """


    def __init__(self, reportResult=None,):
        self.reportResult = reportResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reportResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientCAReportRes')
        if self.reportResult is not None:
            oprot.writeFieldBegin('reportResult', TType.I32, 1)
            oprot.writeI32(self.reportResult)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientReConnectResult(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientReConnectResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientLoadBalanceInfo(object):
    """
    Attributes:
     - number
     - isOneLoadBalance

    """


    def __init__(self, number=None, isOneLoadBalance=None,):
        self.number = number
        self.isOneLoadBalance = isOneLoadBalance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.isOneLoadBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientLoadBalanceInfo')
        if self.number is not None:
            oprot.writeFieldBegin('number', TType.I32, 1)
            oprot.writeI32(self.number)
            oprot.writeFieldEnd()
        if self.isOneLoadBalance is not None:
            oprot.writeFieldBegin('isOneLoadBalance', TType.I32, 2)
            oprot.writeI32(self.isOneLoadBalance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncClientLoadBalanceResult(object):
    """
    Attributes:
     - reveiceMsg
     - detail

    """


    def __init__(self, reveiceMsg=None, detail=None,):
        self.reveiceMsg = reveiceMsg
        self.detail = detail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reveiceMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.detail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncClientLoadBalanceResult')
        if self.reveiceMsg is not None:
            oprot.writeFieldBegin('reveiceMsg', TType.STRING, 1)
            oprot.writeString(self.reveiceMsg.encode('utf-8') if sys.version_info[0] == 2 else self.reveiceMsg)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRING, 2)
            oprot.writeString(self.detail.encode('utf-8') if sys.version_info[0] == 2 else self.detail)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTClient)
ncTClient.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientMac', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'clientStatus', None, None, ),  # 3
    (4, TType.STRING, 'clientName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'clientAlias', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientOS', 'UTF8', None, ),  # 6
    (7, TType.I32, 'clientType', None, None, ),  # 7
    (8, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'clientDesc', 'UTF8', None, ),  # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ),  # 10
    (11, TType.I32, 'clientArch', None, None, ),  # 11
    (12, TType.STRING, 'clientId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'clientServerIP', 'UTF8', None, ),  # 13
    (14, TType.I32, 'clientOsType', None, None, ),  # 14
    (15, TType.LIST, 'authUsers', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.STRING, 'clientGroupId', 'UTF8', None, ),  # 16
    (17, TType.I32, 'platformPort', None, None, ),  # 17
    (18, TType.STRING, 'clientServerId', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'platformIp', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'customer', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'clientUsername', 'UTF8', None, ),  # 21
    (22, TType.BOOL, 'clientIsDeleted', None, None, ),  # 22
    (23, TType.BOOL, 'clientIsBuiltin', None, None, ),  # 23
    (24, TType.BOOL, 'isEmail', None, None, ),  # 24
    (25, TType.I32, 'isHidden', None, None, ),  # 25
    (26, TType.STRING, 'clientOsTypeStr', 'UTF8', "", ),  # 26
    (27, TType.I32, 'clientOsKind', None, None, ),  # 27
    (28, TType.LIST, 'clientBinds', (TType.STRING, 'UTF8', False), None, ),  # 28
    (29, TType.I32, 'port', None, None, ),  # 29
    (30, TType.STRING, 'clusterPort', 'UTF8', None, ),  # 30
)
all_structs.append(ncParentClient)
ncParentClient.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
)
all_structs.append(ncChildClientFilterParameter)
ncChildClientFilterParameter.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'status', None, None, ),  # 1
)
all_structs.append(ncClientHadoopInfo)
ncClientHadoopInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name_node_ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'name_node_port', None, None, ),  # 2
    (3, TType.STRING, 'username', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'protection', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'childclientid_to_kbtpath', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(ncMongodbClientInfo)
ncMongodbClientInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodePort', 'UTF8', None, ),  # 2
)
all_structs.append(ncClientAddDetails)
ncClientAddDetails.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clientSolts', None, None, ),  # 1
    (2, TType.I32, 'clientCores', None, None, ),  # 2
    (3, TType.I64, 'clientMemory', None, None, ),  # 3
    (4, TType.STRING, 'clientNetmask', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'clientGateway', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientDns', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'clientMacAddress', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'languageCode', 'UTF8', None, ),  # 8
)
all_structs.append(ncClientNetworks)
ncClientNetworks.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ipAddress', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Netmask', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Gateway', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'MacAddress', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'deviceName', 'UTF8', None, ),  # 5
)
all_structs.append(ncClientNetworksList)
ncClientNetworksList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'networks', (TType.STRUCT, [ncClientNetworks, None], False), None, ),  # 1
)
all_structs.append(ncClientRequest)
ncClientRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientId', 'UTF8', None, ),  # 1
)
all_structs.append(ncClient)
ncClient.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientMac', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'clientStatus', None, None, ),  # 3
    (4, TType.STRING, 'clientName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'clientAlias', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientOS', 'UTF8', None, ),  # 6
    (7, TType.I32, 'clientType', None, None, ),  # 7
    (8, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'clientDesc', 'UTF8', None, ),  # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ),  # 10
    (11, TType.I32, 'clientArch', None, None, ),  # 11
    (12, TType.BOOL, 'isReconnect', None, False, ),  # 12
    (13, TType.I64, 'processId', None, 0, ),  # 13
    (14, TType.STRING, 'processName', 'UTF8', None, ),  # 14
    (15, TType.LIST, 'ipList', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.LIST, 'macList', (TType.STRING, 'UTF8', False), None, ),  # 16
    (17, TType.STRING, 'userName', 'UTF8', None, ),  # 17
    (18, TType.I32, 'clientOsType', None, None, ),  # 18
    (19, TType.STRING, 'operUsername', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'operPassword', 'UTF8', None, ),  # 20
    (21, TType.I32, 'clientOsKind', None, None, ),  # 21
    (22, TType.STRUCT, 'clientAddDetails', [ncClientAddDetails, None], None, ),  # 22
    (23, TType.STRING, 'cloudHostInfo', 'UTF8', None, ),  # 23
)
all_structs.append(ncClientCheck)
ncClientCheck.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'result', None, True, ),  # 1
    (2, TType.STRING, 'clientMac', 'UTF8', None, ),  # 2
    (3, TType.I64, 'processId', None, None, ),  # 3
    (4, TType.STRING, 'processName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'ipList', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'macList', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(ncClientConfig)
ncClientConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'targetIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'selfIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'targetPort', None, None, ),  # 3
    (4, TType.I32, 'detectTime', None, None, ),  # 4
    (5, TType.STRING, 'operUsername', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'cloudHostInfo', 'UTF8', None, ),  # 6
)
all_structs.append(ncTClientConfig)
ncTClientConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'osUser', 'UTF8', None, ),  # 1
    (2, TType.I32, 'osPort', None, None, ),  # 2
    (3, TType.STRING, 'osCustomer', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'physicalName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'physicalSignal', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'physicalPath', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'physicalCustomer', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'jobType', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'upperLayer', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'instanceName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'instanceUser', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'instancePwd', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'instancePath', 'UTF8', None, ),  # 13
    (14, TType.I32, 'instancePort', None, None, ),  # 14
    (15, TType.STRING, 'instanceOrganization', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'instanceCustomer', 'UTF8', None, ),  # 16
    (17, TType.BOOL, 'isManual', None, None, ),  # 17
    (18, TType.STRING, 'customer', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'id', 'UTF8', None, ),  # 19
)
all_structs.append(ncGetSvcIpReq)
ncGetSvcIpReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'selfIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'machineCode', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'osUser', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'customer', 'UTF8', None, ),  # 4
    (5, TType.I32, 'serverType', None, None, ),  # 5
)
all_structs.append(ncConnSvcIP)
ncConnSvcIP.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'svcIp', 'UTF8', None, ),  # 1
)
all_structs.append(ncClientDistriReq)
ncClientDistriReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'clientIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'users', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.I32, 'oper', None, None, ),  # 4
    (5, TType.I32, 'role', None, None, ),  # 5
)
all_structs.append(ncClientDistriRes)
ncClientDistriRes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isFinished', None, None, ),  # 3
    (4, TType.I32, 'oper', None, None, ),  # 4
    (5, TType.BOOL, 'isErr', None, None, ),  # 5
    (6, TType.LIST, 'errs', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(ncClientAuthReq)
ncClientAuthReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'operDesc', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'authUsers', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncClientAuthRes)
ncClientAuthRes.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isErr', None, None, ),  # 1
    (2, TType.LIST, 'errs', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'operDesc', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'exincludeAuthers', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'isFinished', None, None, ),  # 6
    (7, TType.STRING, 'requestId', 'UTF8', None, ),  # 7
)
all_structs.append(ncClientFilterRequest)
ncClientFilterRequest.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'client_ids', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.BOOL, 'status', None, None, ),  # 2
    (3, TType.STRING, 'server_ip', 'UTF8', None, ),  # 3
)
all_structs.append(ncContentCloudResourceQueryRequest)
ncContentCloudResourceQueryRequest.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'contentcloud_resource_ids', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ncContentCloudResourceResponse)
ncContentCloudResourceResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'contentcloud_resource_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'auth_user', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'has_assigned', None, None, ),  # 3
    (4, TType.STRING, 'site_type', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'multi_site_type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'ip_or_domain', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'username', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'password', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'sub_site_ip_or_domain', 'UTF8', None, ),  # 10
)
all_structs.append(ncTClientDetails)
ncTClientDetails.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientMac', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'clientStatus', None, None, ),  # 3
    (4, TType.STRING, 'clientName', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.STRING, 'clientOS', 'UTF8', None, ),  # 6
    (7, TType.I32, 'clientType', None, None, ),  # 7
    (8, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 8
    (9, TType.I32, 'clientOsType', None, None, ),  # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ),  # 10
    (11, TType.I32, 'clientArch', None, None, ),  # 11
    (12, TType.STRING, 'clientId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'clientServerIP', 'UTF8', None, ),  # 13
    (14, TType.BOOL, 'isEmail', None, None, ),  # 14
    (15, TType.I32, 'isHidden', None, None, ),  # 15
    (16, TType.LIST, 'authUsers', (TType.STRING, 'UTF8', False), None, ),  # 16
    (17, TType.I32, 'clientSolts', None, None, ),  # 17
    (18, TType.I32, 'clientCores', None, None, ),  # 18
    (19, TType.I64, 'clientMemory', None, None, ),  # 19
    (20, TType.STRING, 'clientNetmask', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'clientGateway', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'clientDns', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'clientMacAddress', 'UTF8', None, ),  # 23
)
all_structs.append(ncMetadataRestoreStatus)
ncMetadataRestoreStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isOver', None, None, ),  # 1
)
all_structs.append(ncSource)
ncSource.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cloudStorageName', 'UTF8', None, ),  # 3
)
all_structs.append(ncFingerPoorInfo)
ncFingerPoorInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fpId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'nodeIPs', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ncGetServerInfo)
ncGetServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'selfIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'machineCode', 'UTF8', None, ),  # 2
    (3, TType.I32, 'serverType', None, None, ),  # 3
)
all_structs.append(ncServerInfo)
ncServerInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'language', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
)
all_structs.append(ncProtectObjectCountInfo)
ncProtectObjectCountInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'client', None, None, ),  # 1
    (2, TType.I32, 'vmPlatform', None, None, ),  # 2
    (3, TType.I32, 'cloudPlatform', None, None, ),  # 3
    (4, TType.I32, 'cloudStorage', None, None, ),  # 4
)
all_structs.append(ncFingerPoorsData)
ncFingerPoorsData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fpName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'createUser', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'primaryKeyId', 'UTF8', None, ),  # 3
)
all_structs.append(ncProtectObjectInfo)
ncProtectObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'host', 'UTF8', None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
)
all_structs.append(ncClientCAReportReq)
ncClientCAReportReq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientIp', 'UTF8', None, ),  # 1
    (2, TType.I32, 'capemDays', None, None, ),  # 2
    (3, TType.I32, 'clientpemDays', None, None, ),  # 3
    (4, TType.I32, 'caPemExpired', None, None, ),  # 4
    (5, TType.I32, 'clientPemExpired', None, None, ),  # 5
)
all_structs.append(ncClientCAReportRes)
ncClientCAReportRes.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reportResult', None, None, ),  # 1
)
all_structs.append(ncClientReConnectResult)
ncClientReConnectResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
)
all_structs.append(ncClientLoadBalanceInfo)
ncClientLoadBalanceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'number', None, None, ),  # 1
    (2, TType.I32, 'isOneLoadBalance', None, None, ),  # 2
)
all_structs.append(ncClientLoadBalanceResult)
ncClientLoadBalanceResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'reveiceMsg', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'detail', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
