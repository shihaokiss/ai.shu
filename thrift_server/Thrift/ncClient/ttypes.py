#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCommonType_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncClienntOsKinds(object):
  NORMAL_WINDOWS = 1
  NORMAL_LINUX = 2
  PE_WINDOWS = 4
  PE_LINUX = 8
  Drill_Machine = 16

  _VALUES_TO_NAMES = {
    1: "NORMAL_WINDOWS",
    2: "NORMAL_LINUX",
    4: "PE_WINDOWS",
    8: "PE_LINUX",
    16: "Drill_Machine",
  }

  _NAMES_TO_VALUES = {
    "NORMAL_WINDOWS": 1,
    "NORMAL_LINUX": 2,
    "PE_WINDOWS": 4,
    "PE_LINUX": 8,
    "Drill_Machine": 16,
  }

class ncAuthorOper(object):
  DISTRIBUTE = 1
  RECOVER = 0

  _VALUES_TO_NAMES = {
    1: "DISTRIBUTE",
    0: "RECOVER",
  }

  _NAMES_TO_VALUES = {
    "DISTRIBUTE": 1,
    "RECOVER": 0,
  }


class ncTClient(object):
  """
  Attributes:
   - clientMac
   - clientIp
   - clientStatus
   - clientName
   - clientAlias
   - clientOS
   - clientType
   - clientVersion
   - clientDesc
   - clientCPUCoreNum
   - clientArch
   - clientId
   - clientServerIP
   - clientOsType
   - authUsers
   - clientGroupId
   - platformPort
   - clientServerId
   - platformIp
   - customer
   - clientUsername
   - clientIsDeleted
   - clientIsBuiltin
   - isEmail
   - isHidden
   - clientOsTypeStr
   - clientOsKind
   - clientBinds
   - port
   - clusterPort
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientMac', None, None, ), # 1
    (2, TType.STRING, 'clientIp', None, None, ), # 2
    (3, TType.I32, 'clientStatus', None, None, ), # 3
    (4, TType.STRING, 'clientName', None, None, ), # 4
    (5, TType.STRING, 'clientAlias', None, None, ), # 5
    (6, TType.STRING, 'clientOS', None, None, ), # 6
    (7, TType.I32, 'clientType', None, None, ), # 7
    (8, TType.STRING, 'clientVersion', None, None, ), # 8
    (9, TType.STRING, 'clientDesc', None, None, ), # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ), # 10
    (11, TType.I32, 'clientArch', None, None, ), # 11
    (12, TType.STRING, 'clientId', None, None, ), # 12
    (13, TType.STRING, 'clientServerIP', None, None, ), # 13
    (14, TType.I32, 'clientOsType', None, None, ), # 14
    (15, TType.LIST, 'authUsers', (TType.STRING,None), None, ), # 15
    (16, TType.STRING, 'clientGroupId', None, None, ), # 16
    (17, TType.I32, 'platformPort', None, None, ), # 17
    (18, TType.STRING, 'clientServerId', None, None, ), # 18
    (19, TType.STRING, 'platformIp', None, None, ), # 19
    (20, TType.STRING, 'customer', None, None, ), # 20
    (21, TType.STRING, 'clientUsername', None, None, ), # 21
    (22, TType.BOOL, 'clientIsDeleted', None, None, ), # 22
    (23, TType.BOOL, 'clientIsBuiltin', None, None, ), # 23
    (24, TType.BOOL, 'isEmail', None, None, ), # 24
    (25, TType.I32, 'isHidden', None, None, ), # 25
    (26, TType.STRING, 'clientOsTypeStr', None, "", ), # 26
    (27, TType.I32, 'clientOsKind', None, None, ), # 27
    (28, TType.LIST, 'clientBinds', (TType.STRING,None), None, ), # 28
    (29, TType.I32, 'port', None, None, ), # 29
    (30, TType.STRING, 'clusterPort', None, None, ), # 30
  )

  def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientAlias=None, clientOS=None, clientType=None, clientVersion=None, clientDesc=None, clientCPUCoreNum=None, clientArch=None, clientId=None, clientServerIP=None, clientOsType=None, authUsers=None, clientGroupId=None, platformPort=None, clientServerId=None, platformIp=None, customer=None, clientUsername=None, clientIsDeleted=None, clientIsBuiltin=None, isEmail=None, isHidden=None, clientOsTypeStr=thrift_spec[26][4], clientOsKind=None, clientBinds=None, port=None, clusterPort=None,):
    self.clientMac = clientMac
    self.clientIp = clientIp
    self.clientStatus = clientStatus
    self.clientName = clientName
    self.clientAlias = clientAlias
    self.clientOS = clientOS
    self.clientType = clientType
    self.clientVersion = clientVersion
    self.clientDesc = clientDesc
    self.clientCPUCoreNum = clientCPUCoreNum
    self.clientArch = clientArch
    self.clientId = clientId
    self.clientServerIP = clientServerIP
    self.clientOsType = clientOsType
    self.authUsers = authUsers
    self.clientGroupId = clientGroupId
    self.platformPort = platformPort
    self.clientServerId = clientServerId
    self.platformIp = platformIp
    self.customer = customer
    self.clientUsername = clientUsername
    self.clientIsDeleted = clientIsDeleted
    self.clientIsBuiltin = clientIsBuiltin
    self.isEmail = isEmail
    self.isHidden = isHidden
    self.clientOsTypeStr = clientOsTypeStr
    self.clientOsKind = clientOsKind
    self.clientBinds = clientBinds
    self.port = port
    self.clusterPort = clusterPort

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clientStatus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clientAlias = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientOS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clientType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.clientVersion = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.clientDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.clientCPUCoreNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.clientArch = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.clientServerIP = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.clientOsType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.authUsers = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.authUsers.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.clientGroupId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.platformPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.clientServerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.platformIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.clientUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.clientIsDeleted = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.clientIsBuiltin = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.isEmail = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.isHidden = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.clientOsTypeStr = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.clientOsKind = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.clientBinds = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.clientBinds.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.clusterPort = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTClient')
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 1)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 2)
      oprot.writeString(self.clientIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientStatus is not None:
      oprot.writeFieldBegin('clientStatus', TType.I32, 3)
      oprot.writeI32(self.clientStatus)
      oprot.writeFieldEnd()
    if self.clientName is not None:
      oprot.writeFieldBegin('clientName', TType.STRING, 4)
      oprot.writeString(self.clientName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientAlias is not None:
      oprot.writeFieldBegin('clientAlias', TType.STRING, 5)
      oprot.writeString(self.clientAlias.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOS is not None:
      oprot.writeFieldBegin('clientOS', TType.STRING, 6)
      oprot.writeString(self.clientOS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientType is not None:
      oprot.writeFieldBegin('clientType', TType.I32, 7)
      oprot.writeI32(self.clientType)
      oprot.writeFieldEnd()
    if self.clientVersion is not None:
      oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
      oprot.writeString(self.clientVersion.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientDesc is not None:
      oprot.writeFieldBegin('clientDesc', TType.STRING, 9)
      oprot.writeString(self.clientDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientCPUCoreNum is not None:
      oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
      oprot.writeI32(self.clientCPUCoreNum)
      oprot.writeFieldEnd()
    if self.clientArch is not None:
      oprot.writeFieldBegin('clientArch', TType.I32, 11)
      oprot.writeI32(self.clientArch)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 12)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientServerIP is not None:
      oprot.writeFieldBegin('clientServerIP', TType.STRING, 13)
      oprot.writeString(self.clientServerIP.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOsType is not None:
      oprot.writeFieldBegin('clientOsType', TType.I32, 14)
      oprot.writeI32(self.clientOsType)
      oprot.writeFieldEnd()
    if self.authUsers is not None:
      oprot.writeFieldBegin('authUsers', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.authUsers))
      for iter12 in self.authUsers:
        oprot.writeString(iter12.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.clientGroupId is not None:
      oprot.writeFieldBegin('clientGroupId', TType.STRING, 16)
      oprot.writeString(self.clientGroupId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.platformPort is not None:
      oprot.writeFieldBegin('platformPort', TType.I32, 17)
      oprot.writeI32(self.platformPort)
      oprot.writeFieldEnd()
    if self.clientServerId is not None:
      oprot.writeFieldBegin('clientServerId', TType.STRING, 18)
      oprot.writeString(self.clientServerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.platformIp is not None:
      oprot.writeFieldBegin('platformIp', TType.STRING, 19)
      oprot.writeString(self.platformIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 20)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientUsername is not None:
      oprot.writeFieldBegin('clientUsername', TType.STRING, 21)
      oprot.writeString(self.clientUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientIsDeleted is not None:
      oprot.writeFieldBegin('clientIsDeleted', TType.BOOL, 22)
      oprot.writeBool(self.clientIsDeleted)
      oprot.writeFieldEnd()
    if self.clientIsBuiltin is not None:
      oprot.writeFieldBegin('clientIsBuiltin', TType.BOOL, 23)
      oprot.writeBool(self.clientIsBuiltin)
      oprot.writeFieldEnd()
    if self.isEmail is not None:
      oprot.writeFieldBegin('isEmail', TType.BOOL, 24)
      oprot.writeBool(self.isEmail)
      oprot.writeFieldEnd()
    if self.isHidden is not None:
      oprot.writeFieldBegin('isHidden', TType.I32, 25)
      oprot.writeI32(self.isHidden)
      oprot.writeFieldEnd()
    if self.clientOsTypeStr is not None:
      oprot.writeFieldBegin('clientOsTypeStr', TType.STRING, 26)
      oprot.writeString(self.clientOsTypeStr.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOsKind is not None:
      oprot.writeFieldBegin('clientOsKind', TType.I32, 27)
      oprot.writeI32(self.clientOsKind)
      oprot.writeFieldEnd()
    if self.clientBinds is not None:
      oprot.writeFieldBegin('clientBinds', TType.LIST, 28)
      oprot.writeListBegin(TType.STRING, len(self.clientBinds))
      for iter13 in self.clientBinds:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 29)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.clusterPort is not None:
      oprot.writeFieldBegin('clusterPort', TType.STRING, 30)
      oprot.writeString(self.clusterPort.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientIp)
    value = (value * 31) ^ hash(self.clientStatus)
    value = (value * 31) ^ hash(self.clientName)
    value = (value * 31) ^ hash(self.clientAlias)
    value = (value * 31) ^ hash(self.clientOS)
    value = (value * 31) ^ hash(self.clientType)
    value = (value * 31) ^ hash(self.clientVersion)
    value = (value * 31) ^ hash(self.clientDesc)
    value = (value * 31) ^ hash(self.clientCPUCoreNum)
    value = (value * 31) ^ hash(self.clientArch)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.clientServerIP)
    value = (value * 31) ^ hash(self.clientOsType)
    value = (value * 31) ^ hash(self.authUsers)
    value = (value * 31) ^ hash(self.clientGroupId)
    value = (value * 31) ^ hash(self.platformPort)
    value = (value * 31) ^ hash(self.clientServerId)
    value = (value * 31) ^ hash(self.platformIp)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.clientUsername)
    value = (value * 31) ^ hash(self.clientIsDeleted)
    value = (value * 31) ^ hash(self.clientIsBuiltin)
    value = (value * 31) ^ hash(self.isEmail)
    value = (value * 31) ^ hash(self.isHidden)
    value = (value * 31) ^ hash(self.clientOsTypeStr)
    value = (value * 31) ^ hash(self.clientOsKind)
    value = (value * 31) ^ hash(self.clientBinds)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.clusterPort)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncParentClient(object):
  """
  父客户端(一般为虚拟客户端)

  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncParentClient')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncChildClientFilterParameter(object):
  """
  向CommonService要子客户端时, 可以提供某种筛选条件

  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'status', None, None, ), # 1
  )

  def __init__(self, status=None,):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.status = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncChildClientFilterParameter')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.BOOL, 1)
      oprot.writeBool(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientHadoopInfo(object):
  """
  Attributes:
   - name_node_ip
   - name_node_port
   - username
   - childclientid_to_kbtpath
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name_node_ip', None, None, ), # 1
    (2, TType.I32, 'name_node_port', None, None, ), # 2
    (3, TType.STRING, 'username', None, None, ), # 3
    (4, TType.MAP, 'childclientid_to_kbtpath', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, name_node_ip=None, name_node_port=None, username=None, childclientid_to_kbtpath=None,):
    self.name_node_ip = name_node_ip
    self.name_node_port = name_node_port
    self.username = username
    self.childclientid_to_kbtpath = childclientid_to_kbtpath

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name_node_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.name_node_port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.username = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.childclientid_to_kbtpath = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readString().decode('utf-8')
            _val20 = iprot.readString().decode('utf-8')
            self.childclientid_to_kbtpath[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientHadoopInfo')
    if self.name_node_ip is not None:
      oprot.writeFieldBegin('name_node_ip', TType.STRING, 1)
      oprot.writeString(self.name_node_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name_node_port is not None:
      oprot.writeFieldBegin('name_node_port', TType.I32, 2)
      oprot.writeI32(self.name_node_port)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 3)
      oprot.writeString(self.username.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.childclientid_to_kbtpath is not None:
      oprot.writeFieldBegin('childclientid_to_kbtpath', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.childclientid_to_kbtpath))
      for kiter21,viter22 in self.childclientid_to_kbtpath.items():
        oprot.writeString(kiter21.encode('utf-8'))
        oprot.writeString(viter22.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name_node_ip)
    value = (value * 31) ^ hash(self.name_node_port)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.childclientid_to_kbtpath)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientAddDetails(object):
  """
  Attributes:
   - clientSolts
   - clientCores
   - clientMemory
   - clientNetmask
   - clientGateway
   - clientDns
   - clientMacAddress
   - languageCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'clientSolts', None, None, ), # 1
    (2, TType.I32, 'clientCores', None, None, ), # 2
    (3, TType.I64, 'clientMemory', None, None, ), # 3
    (4, TType.STRING, 'clientNetmask', None, None, ), # 4
    (5, TType.STRING, 'clientGateway', None, None, ), # 5
    (6, TType.STRING, 'clientDns', None, None, ), # 6
    (7, TType.STRING, 'clientMacAddress', None, None, ), # 7
    (8, TType.STRING, 'languageCode', None, None, ), # 8
  )

  def __init__(self, clientSolts=None, clientCores=None, clientMemory=None, clientNetmask=None, clientGateway=None, clientDns=None, clientMacAddress=None, languageCode=None,):
    self.clientSolts = clientSolts
    self.clientCores = clientCores
    self.clientMemory = clientMemory
    self.clientNetmask = clientNetmask
    self.clientGateway = clientGateway
    self.clientDns = clientDns
    self.clientMacAddress = clientMacAddress
    self.languageCode = languageCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.clientSolts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.clientCores = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.clientMemory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientNetmask = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clientGateway = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientDns = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.clientMacAddress = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.languageCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientAddDetails')
    if self.clientSolts is not None:
      oprot.writeFieldBegin('clientSolts', TType.I32, 1)
      oprot.writeI32(self.clientSolts)
      oprot.writeFieldEnd()
    if self.clientCores is not None:
      oprot.writeFieldBegin('clientCores', TType.I32, 2)
      oprot.writeI32(self.clientCores)
      oprot.writeFieldEnd()
    if self.clientMemory is not None:
      oprot.writeFieldBegin('clientMemory', TType.I64, 3)
      oprot.writeI64(self.clientMemory)
      oprot.writeFieldEnd()
    if self.clientNetmask is not None:
      oprot.writeFieldBegin('clientNetmask', TType.STRING, 4)
      oprot.writeString(self.clientNetmask.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientGateway is not None:
      oprot.writeFieldBegin('clientGateway', TType.STRING, 5)
      oprot.writeString(self.clientGateway.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientDns is not None:
      oprot.writeFieldBegin('clientDns', TType.STRING, 6)
      oprot.writeString(self.clientDns.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMacAddress is not None:
      oprot.writeFieldBegin('clientMacAddress', TType.STRING, 7)
      oprot.writeString(self.clientMacAddress.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.languageCode is not None:
      oprot.writeFieldBegin('languageCode', TType.STRING, 8)
      oprot.writeString(self.languageCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientSolts)
    value = (value * 31) ^ hash(self.clientCores)
    value = (value * 31) ^ hash(self.clientMemory)
    value = (value * 31) ^ hash(self.clientNetmask)
    value = (value * 31) ^ hash(self.clientGateway)
    value = (value * 31) ^ hash(self.clientDns)
    value = (value * 31) ^ hash(self.clientMacAddress)
    value = (value * 31) ^ hash(self.languageCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClient(object):
  """
  Attributes:
   - clientMac
   - clientIp
   - clientStatus
   - clientName
   - clientAlias
   - clientOS
   - clientType
   - clientVersion
   - clientDesc
   - clientCPUCoreNum
   - clientArch
   - isReconnect
   - processId
   - processName
   - ipList
   - macList
   - userName
   - clientOsType
   - operUsername
   - operPassword
   - clientOsKind
   - clientAddDetails
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientMac', None, None, ), # 1
    (2, TType.STRING, 'clientIp', None, None, ), # 2
    (3, TType.I32, 'clientStatus', None, None, ), # 3
    (4, TType.STRING, 'clientName', None, None, ), # 4
    (5, TType.STRING, 'clientAlias', None, None, ), # 5
    (6, TType.STRING, 'clientOS', None, None, ), # 6
    (7, TType.I32, 'clientType', None, None, ), # 7
    (8, TType.STRING, 'clientVersion', None, None, ), # 8
    (9, TType.STRING, 'clientDesc', None, None, ), # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ), # 10
    (11, TType.I32, 'clientArch', None, None, ), # 11
    (12, TType.BOOL, 'isReconnect', None, False, ), # 12
    (13, TType.I64, 'processId', None, 0, ), # 13
    (14, TType.STRING, 'processName', None, None, ), # 14
    (15, TType.LIST, 'ipList', (TType.STRING,None), None, ), # 15
    (16, TType.LIST, 'macList', (TType.STRING,None), None, ), # 16
    (17, TType.STRING, 'userName', None, None, ), # 17
    (18, TType.I32, 'clientOsType', None, None, ), # 18
    (19, TType.STRING, 'operUsername', None, None, ), # 19
    (20, TType.STRING, 'operPassword', None, None, ), # 20
    (21, TType.I32, 'clientOsKind', None, None, ), # 21
    (22, TType.STRUCT, 'clientAddDetails', (ncClientAddDetails, ncClientAddDetails.thrift_spec), None, ), # 22
  )

  def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientAlias=None, clientOS=None, clientType=None, clientVersion=None, clientDesc=None, clientCPUCoreNum=None, clientArch=None, isReconnect=thrift_spec[12][4], processId=thrift_spec[13][4], processName=None, ipList=None, macList=None, userName=None, clientOsType=None, operUsername=None, operPassword=None, clientOsKind=None, clientAddDetails=None,):
    self.clientMac = clientMac
    self.clientIp = clientIp
    self.clientStatus = clientStatus
    self.clientName = clientName
    self.clientAlias = clientAlias
    self.clientOS = clientOS
    self.clientType = clientType
    self.clientVersion = clientVersion
    self.clientDesc = clientDesc
    self.clientCPUCoreNum = clientCPUCoreNum
    self.clientArch = clientArch
    self.isReconnect = isReconnect
    self.processId = processId
    self.processName = processName
    self.ipList = ipList
    self.macList = macList
    self.userName = userName
    self.clientOsType = clientOsType
    self.operUsername = operUsername
    self.operPassword = operPassword
    self.clientOsKind = clientOsKind
    self.clientAddDetails = clientAddDetails

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clientStatus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clientAlias = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientOS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clientType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.clientVersion = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.clientDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.clientCPUCoreNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.clientArch = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isReconnect = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.processId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.processName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.ipList = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString().decode('utf-8')
            self.ipList.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.macList = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = iprot.readString().decode('utf-8')
            self.macList.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.clientOsType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.operUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.operPassword = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.clientOsKind = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.clientAddDetails = ncClientAddDetails()
          self.clientAddDetails.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClient')
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 1)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 2)
      oprot.writeString(self.clientIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientStatus is not None:
      oprot.writeFieldBegin('clientStatus', TType.I32, 3)
      oprot.writeI32(self.clientStatus)
      oprot.writeFieldEnd()
    if self.clientName is not None:
      oprot.writeFieldBegin('clientName', TType.STRING, 4)
      oprot.writeString(self.clientName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientAlias is not None:
      oprot.writeFieldBegin('clientAlias', TType.STRING, 5)
      oprot.writeString(self.clientAlias.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOS is not None:
      oprot.writeFieldBegin('clientOS', TType.STRING, 6)
      oprot.writeString(self.clientOS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientType is not None:
      oprot.writeFieldBegin('clientType', TType.I32, 7)
      oprot.writeI32(self.clientType)
      oprot.writeFieldEnd()
    if self.clientVersion is not None:
      oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
      oprot.writeString(self.clientVersion.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientDesc is not None:
      oprot.writeFieldBegin('clientDesc', TType.STRING, 9)
      oprot.writeString(self.clientDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientCPUCoreNum is not None:
      oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
      oprot.writeI32(self.clientCPUCoreNum)
      oprot.writeFieldEnd()
    if self.clientArch is not None:
      oprot.writeFieldBegin('clientArch', TType.I32, 11)
      oprot.writeI32(self.clientArch)
      oprot.writeFieldEnd()
    if self.isReconnect is not None:
      oprot.writeFieldBegin('isReconnect', TType.BOOL, 12)
      oprot.writeBool(self.isReconnect)
      oprot.writeFieldEnd()
    if self.processId is not None:
      oprot.writeFieldBegin('processId', TType.I64, 13)
      oprot.writeI64(self.processId)
      oprot.writeFieldEnd()
    if self.processName is not None:
      oprot.writeFieldBegin('processName', TType.STRING, 14)
      oprot.writeString(self.processName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ipList is not None:
      oprot.writeFieldBegin('ipList', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.ipList))
      for iter35 in self.ipList:
        oprot.writeString(iter35.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.macList is not None:
      oprot.writeFieldBegin('macList', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.macList))
      for iter36 in self.macList:
        oprot.writeString(iter36.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 17)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOsType is not None:
      oprot.writeFieldBegin('clientOsType', TType.I32, 18)
      oprot.writeI32(self.clientOsType)
      oprot.writeFieldEnd()
    if self.operUsername is not None:
      oprot.writeFieldBegin('operUsername', TType.STRING, 19)
      oprot.writeString(self.operUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.operPassword is not None:
      oprot.writeFieldBegin('operPassword', TType.STRING, 20)
      oprot.writeString(self.operPassword.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOsKind is not None:
      oprot.writeFieldBegin('clientOsKind', TType.I32, 21)
      oprot.writeI32(self.clientOsKind)
      oprot.writeFieldEnd()
    if self.clientAddDetails is not None:
      oprot.writeFieldBegin('clientAddDetails', TType.STRUCT, 22)
      self.clientAddDetails.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientIp)
    value = (value * 31) ^ hash(self.clientStatus)
    value = (value * 31) ^ hash(self.clientName)
    value = (value * 31) ^ hash(self.clientAlias)
    value = (value * 31) ^ hash(self.clientOS)
    value = (value * 31) ^ hash(self.clientType)
    value = (value * 31) ^ hash(self.clientVersion)
    value = (value * 31) ^ hash(self.clientDesc)
    value = (value * 31) ^ hash(self.clientCPUCoreNum)
    value = (value * 31) ^ hash(self.clientArch)
    value = (value * 31) ^ hash(self.isReconnect)
    value = (value * 31) ^ hash(self.processId)
    value = (value * 31) ^ hash(self.processName)
    value = (value * 31) ^ hash(self.ipList)
    value = (value * 31) ^ hash(self.macList)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.clientOsType)
    value = (value * 31) ^ hash(self.operUsername)
    value = (value * 31) ^ hash(self.operPassword)
    value = (value * 31) ^ hash(self.clientOsKind)
    value = (value * 31) ^ hash(self.clientAddDetails)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientCheck(object):
  """
  Attributes:
   - result
   - clientMac
   - processId
   - processName
   - ipList
   - macList
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'result', None, True, ), # 1
    (2, TType.STRING, 'clientMac', None, None, ), # 2
    (3, TType.I64, 'processId', None, None, ), # 3
    (4, TType.STRING, 'processName', None, None, ), # 4
    (5, TType.LIST, 'ipList', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'macList', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, result=thrift_spec[1][4], clientMac=None, processId=None, processName=None, ipList=None, macList=None,):
    self.result = result
    self.clientMac = clientMac
    self.processId = processId
    self.processName = processName
    self.ipList = ipList
    self.macList = macList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.result = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.processId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.processName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.ipList = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = iprot.readString().decode('utf-8')
            self.ipList.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.macList = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in xrange(_size43):
            _elem48 = iprot.readString().decode('utf-8')
            self.macList.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientCheck')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.BOOL, 1)
      oprot.writeBool(self.result)
      oprot.writeFieldEnd()
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 2)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.processId is not None:
      oprot.writeFieldBegin('processId', TType.I64, 3)
      oprot.writeI64(self.processId)
      oprot.writeFieldEnd()
    if self.processName is not None:
      oprot.writeFieldBegin('processName', TType.STRING, 4)
      oprot.writeString(self.processName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ipList is not None:
      oprot.writeFieldBegin('ipList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.ipList))
      for iter49 in self.ipList:
        oprot.writeString(iter49.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.macList is not None:
      oprot.writeFieldBegin('macList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.macList))
      for iter50 in self.macList:
        oprot.writeString(iter50.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.processId)
    value = (value * 31) ^ hash(self.processName)
    value = (value * 31) ^ hash(self.ipList)
    value = (value * 31) ^ hash(self.macList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientConfig(object):
  """
  Attributes:
   - targetIp
   - selfIp
   - targetPort
   - detectTime
   - operUsername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'targetIp', None, None, ), # 1
    (2, TType.STRING, 'selfIp', None, None, ), # 2
    (3, TType.I32, 'targetPort', None, None, ), # 3
    (4, TType.I32, 'detectTime', None, None, ), # 4
    (5, TType.STRING, 'operUsername', None, None, ), # 5
  )

  def __init__(self, targetIp=None, selfIp=None, targetPort=None, detectTime=None, operUsername=None,):
    self.targetIp = targetIp
    self.selfIp = selfIp
    self.targetPort = targetPort
    self.detectTime = detectTime
    self.operUsername = operUsername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.targetIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.selfIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.detectTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.operUsername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientConfig')
    if self.targetIp is not None:
      oprot.writeFieldBegin('targetIp', TType.STRING, 1)
      oprot.writeString(self.targetIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.selfIp is not None:
      oprot.writeFieldBegin('selfIp', TType.STRING, 2)
      oprot.writeString(self.selfIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.targetPort is not None:
      oprot.writeFieldBegin('targetPort', TType.I32, 3)
      oprot.writeI32(self.targetPort)
      oprot.writeFieldEnd()
    if self.detectTime is not None:
      oprot.writeFieldBegin('detectTime', TType.I32, 4)
      oprot.writeI32(self.detectTime)
      oprot.writeFieldEnd()
    if self.operUsername is not None:
      oprot.writeFieldBegin('operUsername', TType.STRING, 5)
      oprot.writeString(self.operUsername.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.targetIp)
    value = (value * 31) ^ hash(self.selfIp)
    value = (value * 31) ^ hash(self.targetPort)
    value = (value * 31) ^ hash(self.detectTime)
    value = (value * 31) ^ hash(self.operUsername)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTClientConfig(object):
  """
  Attributes:
   - osUser
   - osPort
   - osCustomer
   - physicalName
   - physicalSignal
   - physicalPath
   - physicalCustomer
   - jobType
   - upperLayer
   - instanceName
   - instanceUser
   - instancePwd
   - instancePath
   - instancePort
   - instanceOrganization
   - instanceCustomer
   - isManual
   - customer
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'osUser', None, None, ), # 1
    (2, TType.I32, 'osPort', None, None, ), # 2
    (3, TType.STRING, 'osCustomer', None, None, ), # 3
    (4, TType.STRING, 'physicalName', None, None, ), # 4
    (5, TType.STRING, 'physicalSignal', None, None, ), # 5
    (6, TType.STRING, 'physicalPath', None, None, ), # 6
    (7, TType.STRING, 'physicalCustomer', None, None, ), # 7
    (8, TType.STRING, 'jobType', None, None, ), # 8
    (9, TType.STRING, 'upperLayer', None, None, ), # 9
    (10, TType.STRING, 'instanceName', None, None, ), # 10
    (11, TType.STRING, 'instanceUser', None, None, ), # 11
    (12, TType.STRING, 'instancePwd', None, None, ), # 12
    (13, TType.STRING, 'instancePath', None, None, ), # 13
    (14, TType.I32, 'instancePort', None, None, ), # 14
    (15, TType.STRING, 'instanceOrganization', None, None, ), # 15
    (16, TType.STRING, 'instanceCustomer', None, None, ), # 16
    (17, TType.BOOL, 'isManual', None, None, ), # 17
    (18, TType.STRING, 'customer', None, None, ), # 18
    (19, TType.STRING, 'id', None, None, ), # 19
  )

  def __init__(self, osUser=None, osPort=None, osCustomer=None, physicalName=None, physicalSignal=None, physicalPath=None, physicalCustomer=None, jobType=None, upperLayer=None, instanceName=None, instanceUser=None, instancePwd=None, instancePath=None, instancePort=None, instanceOrganization=None, instanceCustomer=None, isManual=None, customer=None, id=None,):
    self.osUser = osUser
    self.osPort = osPort
    self.osCustomer = osCustomer
    self.physicalName = physicalName
    self.physicalSignal = physicalSignal
    self.physicalPath = physicalPath
    self.physicalCustomer = physicalCustomer
    self.jobType = jobType
    self.upperLayer = upperLayer
    self.instanceName = instanceName
    self.instanceUser = instanceUser
    self.instancePwd = instancePwd
    self.instancePath = instancePath
    self.instancePort = instancePort
    self.instanceOrganization = instanceOrganization
    self.instanceCustomer = instanceCustomer
    self.isManual = isManual
    self.customer = customer
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.osUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.osPort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.osCustomer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.physicalName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.physicalSignal = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.physicalPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.physicalCustomer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.upperLayer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.instanceName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.instanceUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.instancePwd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.instancePath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.instancePort = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.instanceOrganization = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.instanceCustomer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.isManual = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTClientConfig')
    if self.osUser is not None:
      oprot.writeFieldBegin('osUser', TType.STRING, 1)
      oprot.writeString(self.osUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osPort is not None:
      oprot.writeFieldBegin('osPort', TType.I32, 2)
      oprot.writeI32(self.osPort)
      oprot.writeFieldEnd()
    if self.osCustomer is not None:
      oprot.writeFieldBegin('osCustomer', TType.STRING, 3)
      oprot.writeString(self.osCustomer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.physicalName is not None:
      oprot.writeFieldBegin('physicalName', TType.STRING, 4)
      oprot.writeString(self.physicalName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.physicalSignal is not None:
      oprot.writeFieldBegin('physicalSignal', TType.STRING, 5)
      oprot.writeString(self.physicalSignal.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.physicalPath is not None:
      oprot.writeFieldBegin('physicalPath', TType.STRING, 6)
      oprot.writeString(self.physicalPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.physicalCustomer is not None:
      oprot.writeFieldBegin('physicalCustomer', TType.STRING, 7)
      oprot.writeString(self.physicalCustomer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 8)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.upperLayer is not None:
      oprot.writeFieldBegin('upperLayer', TType.STRING, 9)
      oprot.writeString(self.upperLayer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instanceName is not None:
      oprot.writeFieldBegin('instanceName', TType.STRING, 10)
      oprot.writeString(self.instanceName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instanceUser is not None:
      oprot.writeFieldBegin('instanceUser', TType.STRING, 11)
      oprot.writeString(self.instanceUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instancePwd is not None:
      oprot.writeFieldBegin('instancePwd', TType.STRING, 12)
      oprot.writeString(self.instancePwd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instancePath is not None:
      oprot.writeFieldBegin('instancePath', TType.STRING, 13)
      oprot.writeString(self.instancePath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instancePort is not None:
      oprot.writeFieldBegin('instancePort', TType.I32, 14)
      oprot.writeI32(self.instancePort)
      oprot.writeFieldEnd()
    if self.instanceOrganization is not None:
      oprot.writeFieldBegin('instanceOrganization', TType.STRING, 15)
      oprot.writeString(self.instanceOrganization.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.instanceCustomer is not None:
      oprot.writeFieldBegin('instanceCustomer', TType.STRING, 16)
      oprot.writeString(self.instanceCustomer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isManual is not None:
      oprot.writeFieldBegin('isManual', TType.BOOL, 17)
      oprot.writeBool(self.isManual)
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 18)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 19)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.osUser)
    value = (value * 31) ^ hash(self.osPort)
    value = (value * 31) ^ hash(self.osCustomer)
    value = (value * 31) ^ hash(self.physicalName)
    value = (value * 31) ^ hash(self.physicalSignal)
    value = (value * 31) ^ hash(self.physicalPath)
    value = (value * 31) ^ hash(self.physicalCustomer)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.upperLayer)
    value = (value * 31) ^ hash(self.instanceName)
    value = (value * 31) ^ hash(self.instanceUser)
    value = (value * 31) ^ hash(self.instancePwd)
    value = (value * 31) ^ hash(self.instancePath)
    value = (value * 31) ^ hash(self.instancePort)
    value = (value * 31) ^ hash(self.instanceOrganization)
    value = (value * 31) ^ hash(self.instanceCustomer)
    value = (value * 31) ^ hash(self.isManual)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetSvcIpReq(object):
  """
  Attributes:
   - selfIp
   - machineCode
   - osUser
   - customer
   - serverType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'selfIp', None, None, ), # 1
    (2, TType.STRING, 'machineCode', None, None, ), # 2
    (3, TType.STRING, 'osUser', None, None, ), # 3
    (4, TType.STRING, 'customer', None, None, ), # 4
    (5, TType.I32, 'serverType', None, None, ), # 5
  )

  def __init__(self, selfIp=None, machineCode=None, osUser=None, customer=None, serverType=None,):
    self.selfIp = selfIp
    self.machineCode = machineCode
    self.osUser = osUser
    self.customer = customer
    self.serverType = serverType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.selfIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.machineCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.osUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.serverType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetSvcIpReq')
    if self.selfIp is not None:
      oprot.writeFieldBegin('selfIp', TType.STRING, 1)
      oprot.writeString(self.selfIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.machineCode is not None:
      oprot.writeFieldBegin('machineCode', TType.STRING, 2)
      oprot.writeString(self.machineCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osUser is not None:
      oprot.writeFieldBegin('osUser', TType.STRING, 3)
      oprot.writeString(self.osUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 4)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.I32, 5)
      oprot.writeI32(self.serverType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.selfIp)
    value = (value * 31) ^ hash(self.machineCode)
    value = (value * 31) ^ hash(self.osUser)
    value = (value * 31) ^ hash(self.customer)
    value = (value * 31) ^ hash(self.serverType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncConnSvcIP(object):
  """
  Attributes:
   - svcIp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'svcIp', None, None, ), # 1
  )

  def __init__(self, svcIp=None,):
    self.svcIp = svcIp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.svcIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncConnSvcIP')
    if self.svcIp is not None:
      oprot.writeFieldBegin('svcIp', TType.STRING, 1)
      oprot.writeString(self.svcIp.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.svcIp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientDistriReq(object):
  """
  Attributes:
   - requestId
   - clientIds
   - users
   - oper
   - role
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.LIST, 'clientIds', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'users', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'oper', None, None, ), # 4
    (5, TType.I32, 'role', None, None, ), # 5
  )

  def __init__(self, requestId=None, clientIds=None, users=None, oper=None, role=None,):
    self.requestId = requestId
    self.clientIds = clientIds
    self.users = users
    self.oper = oper
    self.role = role

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.clientIds = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readString().decode('utf-8')
            self.clientIds.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.users = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = iprot.readString().decode('utf-8')
            self.users.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.oper = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.role = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientDistriReq')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientIds is not None:
      oprot.writeFieldBegin('clientIds', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.clientIds))
      for iter63 in self.clientIds:
        oprot.writeString(iter63.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.users is not None:
      oprot.writeFieldBegin('users', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.users))
      for iter64 in self.users:
        oprot.writeString(iter64.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.oper is not None:
      oprot.writeFieldBegin('oper', TType.I32, 4)
      oprot.writeI32(self.oper)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 5)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.clientIds)
    value = (value * 31) ^ hash(self.users)
    value = (value * 31) ^ hash(self.oper)
    value = (value * 31) ^ hash(self.role)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientDistriRes(object):
  """
  Attributes:
   - requestId
   - nodeIp
   - isFinished
   - oper
   - isErr
   - errs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRING, 'nodeIp', None, None, ), # 2
    (3, TType.BOOL, 'isFinished', None, None, ), # 3
    (4, TType.I32, 'oper', None, None, ), # 4
    (5, TType.BOOL, 'isErr', None, None, ), # 5
    (6, TType.LIST, 'errs', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, requestId=None, nodeIp=None, isFinished=None, oper=None, isErr=None, errs=None,):
    self.requestId = requestId
    self.nodeIp = nodeIp
    self.isFinished = isFinished
    self.oper = oper
    self.isErr = isErr
    self.errs = errs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isFinished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.oper = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isErr = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.errs = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = iprot.readString().decode('utf-8')
            self.errs.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientDistriRes')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
      oprot.writeString(self.nodeIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isFinished is not None:
      oprot.writeFieldBegin('isFinished', TType.BOOL, 3)
      oprot.writeBool(self.isFinished)
      oprot.writeFieldEnd()
    if self.oper is not None:
      oprot.writeFieldBegin('oper', TType.I32, 4)
      oprot.writeI32(self.oper)
      oprot.writeFieldEnd()
    if self.isErr is not None:
      oprot.writeFieldBegin('isErr', TType.BOOL, 5)
      oprot.writeBool(self.isErr)
      oprot.writeFieldEnd()
    if self.errs is not None:
      oprot.writeFieldBegin('errs', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.errs))
      for iter71 in self.errs:
        oprot.writeString(iter71.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.nodeIp)
    value = (value * 31) ^ hash(self.isFinished)
    value = (value * 31) ^ hash(self.oper)
    value = (value * 31) ^ hash(self.isErr)
    value = (value * 31) ^ hash(self.errs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientAuthReq(object):
  """
  Attributes:
   - requestId
   - operDesc
   - authUsers
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRING, 'operDesc', None, None, ), # 2
    (3, TType.LIST, 'authUsers', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, requestId=None, operDesc=None, authUsers=None,):
    self.requestId = requestId
    self.operDesc = operDesc
    self.authUsers = authUsers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.authUsers = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = iprot.readString().decode('utf-8')
            self.authUsers.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientAuthReq')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.operDesc is not None:
      oprot.writeFieldBegin('operDesc', TType.STRING, 2)
      oprot.writeString(self.operDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.authUsers is not None:
      oprot.writeFieldBegin('authUsers', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.authUsers))
      for iter78 in self.authUsers:
        oprot.writeString(iter78.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.operDesc)
    value = (value * 31) ^ hash(self.authUsers)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientAuthRes(object):
  """
  Attributes:
   - isErr
   - errs
   - operDesc
   - exincludeAuthers
   - nodeIp
   - isFinished
   - requestId
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'isErr', None, None, ), # 1
    (2, TType.LIST, 'errs', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'operDesc', None, None, ), # 3
    (4, TType.LIST, 'exincludeAuthers', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'nodeIp', None, None, ), # 5
    (6, TType.BOOL, 'isFinished', None, None, ), # 6
    (7, TType.STRING, 'requestId', None, None, ), # 7
  )

  def __init__(self, isErr=None, errs=None, operDesc=None, exincludeAuthers=None, nodeIp=None, isFinished=None, requestId=None,):
    self.isErr = isErr
    self.errs = errs
    self.operDesc = operDesc
    self.exincludeAuthers = exincludeAuthers
    self.nodeIp = nodeIp
    self.isFinished = isFinished
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isErr = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.errs = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = iprot.readString().decode('utf-8')
            self.errs.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.operDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.exincludeAuthers = []
          (_etype88, _size85) = iprot.readListBegin()
          for _i89 in xrange(_size85):
            _elem90 = iprot.readString().decode('utf-8')
            self.exincludeAuthers.append(_elem90)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.isFinished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientAuthRes')
    if self.isErr is not None:
      oprot.writeFieldBegin('isErr', TType.BOOL, 1)
      oprot.writeBool(self.isErr)
      oprot.writeFieldEnd()
    if self.errs is not None:
      oprot.writeFieldBegin('errs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.errs))
      for iter91 in self.errs:
        oprot.writeString(iter91.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operDesc is not None:
      oprot.writeFieldBegin('operDesc', TType.STRING, 3)
      oprot.writeString(self.operDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.exincludeAuthers is not None:
      oprot.writeFieldBegin('exincludeAuthers', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.exincludeAuthers))
      for iter92 in self.exincludeAuthers:
        oprot.writeString(iter92.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 5)
      oprot.writeString(self.nodeIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isFinished is not None:
      oprot.writeFieldBegin('isFinished', TType.BOOL, 6)
      oprot.writeBool(self.isFinished)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 7)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.isErr)
    value = (value * 31) ^ hash(self.errs)
    value = (value * 31) ^ hash(self.operDesc)
    value = (value * 31) ^ hash(self.exincludeAuthers)
    value = (value * 31) ^ hash(self.nodeIp)
    value = (value * 31) ^ hash(self.isFinished)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncClientFilterRequest(object):
  """
  Attributes:
   - client_ids
   - status
   - server_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'client_ids', (TType.STRING,None), None, ), # 1
    (2, TType.BOOL, 'status', None, None, ), # 2
    (3, TType.STRING, 'server_ip', None, None, ), # 3
  )

  def __init__(self, client_ids=None, status=None, server_ip=None,):
    self.client_ids = client_ids
    self.status = status
    self.server_ip = server_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.client_ids = set()
          (_etype96, _size93) = iprot.readSetBegin()
          for _i97 in xrange(_size93):
            _elem98 = iprot.readString().decode('utf-8')
            self.client_ids.add(_elem98)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.status = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.server_ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncClientFilterRequest')
    if self.client_ids is not None:
      oprot.writeFieldBegin('client_ids', TType.SET, 1)
      oprot.writeSetBegin(TType.STRING, len(self.client_ids))
      for iter99 in self.client_ids:
        oprot.writeString(iter99.encode('utf-8'))
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.BOOL, 2)
      oprot.writeBool(self.status)
      oprot.writeFieldEnd()
    if self.server_ip is not None:
      oprot.writeFieldBegin('server_ip', TType.STRING, 3)
      oprot.writeString(self.server_ip.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_ids is None:
      raise TProtocol.TProtocolException(message='Required field client_ids is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_ids)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.server_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAnyShareResourceQueryRequest(object):
  """
  Attributes:
   - anyshare_resource_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'anyshare_resource_ids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, anyshare_resource_ids=None,):
    self.anyshare_resource_ids = anyshare_resource_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.anyshare_resource_ids = set()
          (_etype103, _size100) = iprot.readSetBegin()
          for _i104 in xrange(_size100):
            _elem105 = iprot.readString().decode('utf-8')
            self.anyshare_resource_ids.add(_elem105)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAnyShareResourceQueryRequest')
    if self.anyshare_resource_ids is not None:
      oprot.writeFieldBegin('anyshare_resource_ids', TType.SET, 1)
      oprot.writeSetBegin(TType.STRING, len(self.anyshare_resource_ids))
      for iter106 in self.anyshare_resource_ids:
        oprot.writeString(iter106.encode('utf-8'))
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.anyshare_resource_ids is None:
      raise TProtocol.TProtocolException(message='Required field anyshare_resource_ids is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.anyshare_resource_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAnyShareResourceResponse(object):
  """
  Attributes:
   - anyshare_resource_id
   - auth_user
   - has_assigned
   - site_type
   - multi_site_type
   - name
   - ip_or_domain
   - username
   - password
   - sub_site_ip_or_domain
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'anyshare_resource_id', None, None, ), # 1
    (2, TType.STRING, 'auth_user', None, None, ), # 2
    (3, TType.BOOL, 'has_assigned', None, None, ), # 3
    (4, TType.STRING, 'site_type', None, None, ), # 4
    (5, TType.STRING, 'multi_site_type', None, None, ), # 5
    (6, TType.STRING, 'name', None, None, ), # 6
    (7, TType.STRING, 'ip_or_domain', None, None, ), # 7
    (8, TType.STRING, 'username', None, None, ), # 8
    (9, TType.STRING, 'password', None, None, ), # 9
    (10, TType.STRING, 'sub_site_ip_or_domain', None, None, ), # 10
  )

  def __init__(self, anyshare_resource_id=None, auth_user=None, has_assigned=None, site_type=None, multi_site_type=None, name=None, ip_or_domain=None, username=None, password=None, sub_site_ip_or_domain=None,):
    self.anyshare_resource_id = anyshare_resource_id
    self.auth_user = auth_user
    self.has_assigned = has_assigned
    self.site_type = site_type
    self.multi_site_type = multi_site_type
    self.name = name
    self.ip_or_domain = ip_or_domain
    self.username = username
    self.password = password
    self.sub_site_ip_or_domain = sub_site_ip_or_domain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.anyshare_resource_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auth_user = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.has_assigned = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.site_type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.multi_site_type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ip_or_domain = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.username = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.password = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.sub_site_ip_or_domain = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAnyShareResourceResponse')
    if self.anyshare_resource_id is not None:
      oprot.writeFieldBegin('anyshare_resource_id', TType.STRING, 1)
      oprot.writeString(self.anyshare_resource_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.auth_user is not None:
      oprot.writeFieldBegin('auth_user', TType.STRING, 2)
      oprot.writeString(self.auth_user.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.has_assigned is not None:
      oprot.writeFieldBegin('has_assigned', TType.BOOL, 3)
      oprot.writeBool(self.has_assigned)
      oprot.writeFieldEnd()
    if self.site_type is not None:
      oprot.writeFieldBegin('site_type', TType.STRING, 4)
      oprot.writeString(self.site_type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.multi_site_type is not None:
      oprot.writeFieldBegin('multi_site_type', TType.STRING, 5)
      oprot.writeString(self.multi_site_type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 6)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ip_or_domain is not None:
      oprot.writeFieldBegin('ip_or_domain', TType.STRING, 7)
      oprot.writeString(self.ip_or_domain.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 8)
      oprot.writeString(self.username.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 9)
      oprot.writeString(self.password.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sub_site_ip_or_domain is not None:
      oprot.writeFieldBegin('sub_site_ip_or_domain', TType.STRING, 10)
      oprot.writeString(self.sub_site_ip_or_domain.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.anyshare_resource_id is None:
      raise TProtocol.TProtocolException(message='Required field anyshare_resource_id is unset!')
    if self.auth_user is None:
      raise TProtocol.TProtocolException(message='Required field auth_user is unset!')
    if self.has_assigned is None:
      raise TProtocol.TProtocolException(message='Required field has_assigned is unset!')
    if self.site_type is None:
      raise TProtocol.TProtocolException(message='Required field site_type is unset!')
    if self.multi_site_type is None:
      raise TProtocol.TProtocolException(message='Required field multi_site_type is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.ip_or_domain is None:
      raise TProtocol.TProtocolException(message='Required field ip_or_domain is unset!')
    if self.username is None:
      raise TProtocol.TProtocolException(message='Required field username is unset!')
    if self.password is None:
      raise TProtocol.TProtocolException(message='Required field password is unset!')
    if self.sub_site_ip_or_domain is None:
      raise TProtocol.TProtocolException(message='Required field sub_site_ip_or_domain is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.anyshare_resource_id)
    value = (value * 31) ^ hash(self.auth_user)
    value = (value * 31) ^ hash(self.has_assigned)
    value = (value * 31) ^ hash(self.site_type)
    value = (value * 31) ^ hash(self.multi_site_type)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.ip_or_domain)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.sub_site_ip_or_domain)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTClientDetails(object):
  """
  Attributes:
   - clientMac
   - clientIp
   - clientStatus
   - clientName
   - clientOS
   - clientType
   - clientVersion
   - clientOsType
   - clientCPUCoreNum
   - clientArch
   - clientId
   - clientServerIP
   - isEmail
   - isHidden
   - authUsers
   - clientSolts
   - clientCores
   - clientMemory
   - clientNetmask
   - clientGateway
   - clientDns
   - clientMacAddress
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientMac', None, None, ), # 1
    (2, TType.STRING, 'clientIp', None, None, ), # 2
    (3, TType.I32, 'clientStatus', None, None, ), # 3
    (4, TType.STRING, 'clientName', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'clientOS', None, None, ), # 6
    (7, TType.I32, 'clientType', None, None, ), # 7
    (8, TType.STRING, 'clientVersion', None, None, ), # 8
    (9, TType.I32, 'clientOsType', None, None, ), # 9
    (10, TType.I32, 'clientCPUCoreNum', None, None, ), # 10
    (11, TType.I32, 'clientArch', None, None, ), # 11
    (12, TType.STRING, 'clientId', None, None, ), # 12
    (13, TType.STRING, 'clientServerIP', None, None, ), # 13
    (14, TType.BOOL, 'isEmail', None, None, ), # 14
    (15, TType.I32, 'isHidden', None, None, ), # 15
    (16, TType.LIST, 'authUsers', (TType.STRING,None), None, ), # 16
    (17, TType.I32, 'clientSolts', None, None, ), # 17
    (18, TType.I32, 'clientCores', None, None, ), # 18
    (19, TType.I64, 'clientMemory', None, None, ), # 19
    (20, TType.STRING, 'clientNetmask', None, None, ), # 20
    (21, TType.STRING, 'clientGateway', None, None, ), # 21
    (22, TType.STRING, 'clientDns', None, None, ), # 22
    (23, TType.STRING, 'clientMacAddress', None, None, ), # 23
  )

  def __init__(self, clientMac=None, clientIp=None, clientStatus=None, clientName=None, clientOS=None, clientType=None, clientVersion=None, clientOsType=None, clientCPUCoreNum=None, clientArch=None, clientId=None, clientServerIP=None, isEmail=None, isHidden=None, authUsers=None, clientSolts=None, clientCores=None, clientMemory=None, clientNetmask=None, clientGateway=None, clientDns=None, clientMacAddress=None,):
    self.clientMac = clientMac
    self.clientIp = clientIp
    self.clientStatus = clientStatus
    self.clientName = clientName
    self.clientOS = clientOS
    self.clientType = clientType
    self.clientVersion = clientVersion
    self.clientOsType = clientOsType
    self.clientCPUCoreNum = clientCPUCoreNum
    self.clientArch = clientArch
    self.clientId = clientId
    self.clientServerIP = clientServerIP
    self.isEmail = isEmail
    self.isHidden = isHidden
    self.authUsers = authUsers
    self.clientSolts = clientSolts
    self.clientCores = clientCores
    self.clientMemory = clientMemory
    self.clientNetmask = clientNetmask
    self.clientGateway = clientGateway
    self.clientDns = clientDns
    self.clientMacAddress = clientMacAddress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clientStatus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientOS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clientType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.clientVersion = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.clientOsType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.clientCPUCoreNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.clientArch = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.clientServerIP = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.isEmail = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.isHidden = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.authUsers = []
          (_etype110, _size107) = iprot.readListBegin()
          for _i111 in xrange(_size107):
            _elem112 = iprot.readString().decode('utf-8')
            self.authUsers.append(_elem112)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.clientSolts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.clientCores = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.clientMemory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.clientNetmask = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.clientGateway = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.clientDns = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.clientMacAddress = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTClientDetails')
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 1)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 2)
      oprot.writeString(self.clientIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientStatus is not None:
      oprot.writeFieldBegin('clientStatus', TType.I32, 3)
      oprot.writeI32(self.clientStatus)
      oprot.writeFieldEnd()
    if self.clientName is not None:
      oprot.writeFieldBegin('clientName', TType.STRING, 4)
      oprot.writeString(self.clientName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOS is not None:
      oprot.writeFieldBegin('clientOS', TType.STRING, 6)
      oprot.writeString(self.clientOS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientType is not None:
      oprot.writeFieldBegin('clientType', TType.I32, 7)
      oprot.writeI32(self.clientType)
      oprot.writeFieldEnd()
    if self.clientVersion is not None:
      oprot.writeFieldBegin('clientVersion', TType.STRING, 8)
      oprot.writeString(self.clientVersion.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientOsType is not None:
      oprot.writeFieldBegin('clientOsType', TType.I32, 9)
      oprot.writeI32(self.clientOsType)
      oprot.writeFieldEnd()
    if self.clientCPUCoreNum is not None:
      oprot.writeFieldBegin('clientCPUCoreNum', TType.I32, 10)
      oprot.writeI32(self.clientCPUCoreNum)
      oprot.writeFieldEnd()
    if self.clientArch is not None:
      oprot.writeFieldBegin('clientArch', TType.I32, 11)
      oprot.writeI32(self.clientArch)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 12)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientServerIP is not None:
      oprot.writeFieldBegin('clientServerIP', TType.STRING, 13)
      oprot.writeString(self.clientServerIP.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.isEmail is not None:
      oprot.writeFieldBegin('isEmail', TType.BOOL, 14)
      oprot.writeBool(self.isEmail)
      oprot.writeFieldEnd()
    if self.isHidden is not None:
      oprot.writeFieldBegin('isHidden', TType.I32, 15)
      oprot.writeI32(self.isHidden)
      oprot.writeFieldEnd()
    if self.authUsers is not None:
      oprot.writeFieldBegin('authUsers', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.authUsers))
      for iter113 in self.authUsers:
        oprot.writeString(iter113.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.clientSolts is not None:
      oprot.writeFieldBegin('clientSolts', TType.I32, 17)
      oprot.writeI32(self.clientSolts)
      oprot.writeFieldEnd()
    if self.clientCores is not None:
      oprot.writeFieldBegin('clientCores', TType.I32, 18)
      oprot.writeI32(self.clientCores)
      oprot.writeFieldEnd()
    if self.clientMemory is not None:
      oprot.writeFieldBegin('clientMemory', TType.I64, 19)
      oprot.writeI64(self.clientMemory)
      oprot.writeFieldEnd()
    if self.clientNetmask is not None:
      oprot.writeFieldBegin('clientNetmask', TType.STRING, 20)
      oprot.writeString(self.clientNetmask.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientGateway is not None:
      oprot.writeFieldBegin('clientGateway', TType.STRING, 21)
      oprot.writeString(self.clientGateway.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientDns is not None:
      oprot.writeFieldBegin('clientDns', TType.STRING, 22)
      oprot.writeString(self.clientDns.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMacAddress is not None:
      oprot.writeFieldBegin('clientMacAddress', TType.STRING, 23)
      oprot.writeString(self.clientMacAddress.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientIp)
    value = (value * 31) ^ hash(self.clientStatus)
    value = (value * 31) ^ hash(self.clientName)
    value = (value * 31) ^ hash(self.clientOS)
    value = (value * 31) ^ hash(self.clientType)
    value = (value * 31) ^ hash(self.clientVersion)
    value = (value * 31) ^ hash(self.clientOsType)
    value = (value * 31) ^ hash(self.clientCPUCoreNum)
    value = (value * 31) ^ hash(self.clientArch)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.clientServerIP)
    value = (value * 31) ^ hash(self.isEmail)
    value = (value * 31) ^ hash(self.isHidden)
    value = (value * 31) ^ hash(self.authUsers)
    value = (value * 31) ^ hash(self.clientSolts)
    value = (value * 31) ^ hash(self.clientCores)
    value = (value * 31) ^ hash(self.clientMemory)
    value = (value * 31) ^ hash(self.clientNetmask)
    value = (value * 31) ^ hash(self.clientGateway)
    value = (value * 31) ^ hash(self.clientDns)
    value = (value * 31) ^ hash(self.clientMacAddress)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncMetadataRestoreStatus(object):
  """
  Attributes:
   - isOver
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'isOver', None, None, ), # 1
  )

  def __init__(self, isOver=None,):
    self.isOver = isOver

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isOver = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncMetadataRestoreStatus')
    if self.isOver is not None:
      oprot.writeFieldBegin('isOver', TType.BOOL, 1)
      oprot.writeBool(self.isOver)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.isOver)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSource(object):
  """
  Attributes:
   - sourceId
   - clientId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sourceId', None, None, ), # 1
    (2, TType.STRING, 'clientId', None, None, ), # 2
  )

  def __init__(self, sourceId=None, clientId=None,):
    self.sourceId = sourceId
    self.clientId = clientId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sourceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSource')
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.STRING, 1)
      oprot.writeString(self.sourceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 2)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sourceId)
    value = (value * 31) ^ hash(self.clientId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFingerPoorInfo(object):
  """
  Attributes:
   - fpId
   - nodeIPs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fpId', None, None, ), # 1
    (2, TType.LIST, 'nodeIPs', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, fpId=None, nodeIPs=None,):
    self.fpId = fpId
    self.nodeIPs = nodeIPs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fpId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.nodeIPs = []
          (_etype117, _size114) = iprot.readListBegin()
          for _i118 in xrange(_size114):
            _elem119 = iprot.readString().decode('utf-8')
            self.nodeIPs.append(_elem119)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFingerPoorInfo')
    if self.fpId is not None:
      oprot.writeFieldBegin('fpId', TType.STRING, 1)
      oprot.writeString(self.fpId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodeIPs is not None:
      oprot.writeFieldBegin('nodeIPs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.nodeIPs))
      for iter120 in self.nodeIPs:
        oprot.writeString(iter120.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fpId)
    value = (value * 31) ^ hash(self.nodeIPs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGetServerInfo(object):
  """
  Attributes:
   - selfIp
   - machineCode
   - serverType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'selfIp', None, None, ), # 1
    (2, TType.STRING, 'machineCode', None, None, ), # 2
    (3, TType.I32, 'serverType', None, None, ), # 3
  )

  def __init__(self, selfIp=None, machineCode=None, serverType=None,):
    self.selfIp = selfIp
    self.machineCode = machineCode
    self.serverType = serverType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.selfIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.machineCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.serverType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGetServerInfo')
    if self.selfIp is not None:
      oprot.writeFieldBegin('selfIp', TType.STRING, 1)
      oprot.writeString(self.selfIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.machineCode is not None:
      oprot.writeFieldBegin('machineCode', TType.STRING, 2)
      oprot.writeString(self.machineCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.I32, 3)
      oprot.writeI32(self.serverType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.selfIp)
    value = (value * 31) ^ hash(self.machineCode)
    value = (value * 31) ^ hash(self.serverType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncServerInfo(object):
  """
  Attributes:
   - language
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'language', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
  )

  def __init__(self, language=None, version=None,):
    self.language = language
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.language = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncServerInfo')
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 1)
      oprot.writeString(self.language.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncProtectObjectCountInfo(object):
  """
  Attributes:
   - client
   - vmPlatform
   - cloudPlatform
   - anyshare
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'client', None, None, ), # 1
    (2, TType.I32, 'vmPlatform', None, None, ), # 2
    (3, TType.I32, 'cloudPlatform', None, None, ), # 3
    (4, TType.I32, 'anyshare', None, None, ), # 4
  )

  def __init__(self, client=None, vmPlatform=None, cloudPlatform=None, anyshare=None,):
    self.client = client
    self.vmPlatform = vmPlatform
    self.cloudPlatform = cloudPlatform
    self.anyshare = anyshare

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.client = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.vmPlatform = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cloudPlatform = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.anyshare = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncProtectObjectCountInfo')
    if self.client is not None:
      oprot.writeFieldBegin('client', TType.I32, 1)
      oprot.writeI32(self.client)
      oprot.writeFieldEnd()
    if self.vmPlatform is not None:
      oprot.writeFieldBegin('vmPlatform', TType.I32, 2)
      oprot.writeI32(self.vmPlatform)
      oprot.writeFieldEnd()
    if self.cloudPlatform is not None:
      oprot.writeFieldBegin('cloudPlatform', TType.I32, 3)
      oprot.writeI32(self.cloudPlatform)
      oprot.writeFieldEnd()
    if self.anyshare is not None:
      oprot.writeFieldBegin('anyshare', TType.I32, 4)
      oprot.writeI32(self.anyshare)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client)
    value = (value * 31) ^ hash(self.vmPlatform)
    value = (value * 31) ^ hash(self.cloudPlatform)
    value = (value * 31) ^ hash(self.anyshare)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFingerPoorsData(object):
  """
  Attributes:
   - fpName
   - createUser
   - primaryKeyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fpName', None, None, ), # 1
    (2, TType.STRING, 'createUser', None, None, ), # 2
    (3, TType.STRING, 'primaryKeyId', None, None, ), # 3
  )

  def __init__(self, fpName=None, createUser=None, primaryKeyId=None,):
    self.fpName = fpName
    self.createUser = createUser
    self.primaryKeyId = primaryKeyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fpName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.createUser = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.primaryKeyId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFingerPoorsData')
    if self.fpName is not None:
      oprot.writeFieldBegin('fpName', TType.STRING, 1)
      oprot.writeString(self.fpName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.createUser is not None:
      oprot.writeFieldBegin('createUser', TType.STRING, 2)
      oprot.writeString(self.createUser.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.primaryKeyId is not None:
      oprot.writeFieldBegin('primaryKeyId', TType.STRING, 3)
      oprot.writeString(self.primaryKeyId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fpName)
    value = (value * 31) ^ hash(self.createUser)
    value = (value * 31) ^ hash(self.primaryKeyId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
