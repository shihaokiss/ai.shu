# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncCloudCertMode(object):
    NO_CHECK = 0
    ENABLE_NO_FINGERPRINT = 1
    ENABLE_WITH_FINGERPRINT = 2

    _VALUES_TO_NAMES = {
        0: "NO_CHECK",
        1: "ENABLE_NO_FINGERPRINT",
        2: "ENABLE_WITH_FINGERPRINT",
    }

    _NAMES_TO_VALUES = {
        "NO_CHECK": 0,
        "ENABLE_NO_FINGERPRINT": 1,
        "ENABLE_WITH_FINGERPRINT": 2,
    }


class ncCloudStorage(object):
    """
    Attributes:
     - createTime
     - updateTtime
     - deleteTime
     - isDeleted
     - creatorId
     - name
     - cloudType
     - indexBucket
     - stgBucket
     - backupData
     - restoreData
     - status
     - ip
     - hostId
     - password
     - needSSL
     - description
     - usernames
     - cloudId
     - useType
     - certMode
     - fingerprint

    """


    def __init__(self, createTime=None, updateTtime=None, deleteTime=None, isDeleted=None, creatorId=None, name=None, cloudType=None, indexBucket=None, stgBucket=None, backupData=None, restoreData=None, status=None, ip=None, hostId=None, password=None, needSSL=None, description=None, usernames=None, cloudId=None, useType=None, certMode=None, fingerprint=None,):
        self.createTime = createTime
        self.updateTtime = updateTtime
        self.deleteTime = deleteTime
        self.isDeleted = isDeleted
        self.creatorId = creatorId
        self.name = name
        self.cloudType = cloudType
        self.indexBucket = indexBucket
        self.stgBucket = stgBucket
        self.backupData = backupData
        self.restoreData = restoreData
        self.status = status
        self.ip = ip
        self.hostId = hostId
        self.password = password
        self.needSSL = needSSL
        self.description = description
        self.usernames = usernames
        self.cloudId = cloudId
        self.useType = useType
        self.certMode = certMode
        self.fingerprint = fingerprint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updateTtime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.deleteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isDeleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.creatorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.cloudType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.indexBucket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.stgBucket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.backupData = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.restoreData = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.hostId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.needSSL = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.usernames = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.usernames.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.cloudId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.useType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.certMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.fingerprint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloudStorage')
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 1)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.updateTtime is not None:
            oprot.writeFieldBegin('updateTtime', TType.I64, 2)
            oprot.writeI64(self.updateTtime)
            oprot.writeFieldEnd()
        if self.deleteTime is not None:
            oprot.writeFieldBegin('deleteTime', TType.I64, 3)
            oprot.writeI64(self.deleteTime)
            oprot.writeFieldEnd()
        if self.isDeleted is not None:
            oprot.writeFieldBegin('isDeleted', TType.BOOL, 4)
            oprot.writeBool(self.isDeleted)
            oprot.writeFieldEnd()
        if self.creatorId is not None:
            oprot.writeFieldBegin('creatorId', TType.STRING, 5)
            oprot.writeString(self.creatorId.encode('utf-8') if sys.version_info[0] == 2 else self.creatorId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 6)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.cloudType is not None:
            oprot.writeFieldBegin('cloudType', TType.I32, 7)
            oprot.writeI32(self.cloudType)
            oprot.writeFieldEnd()
        if self.indexBucket is not None:
            oprot.writeFieldBegin('indexBucket', TType.STRING, 8)
            oprot.writeString(self.indexBucket.encode('utf-8') if sys.version_info[0] == 2 else self.indexBucket)
            oprot.writeFieldEnd()
        if self.stgBucket is not None:
            oprot.writeFieldBegin('stgBucket', TType.STRING, 9)
            oprot.writeString(self.stgBucket.encode('utf-8') if sys.version_info[0] == 2 else self.stgBucket)
            oprot.writeFieldEnd()
        if self.backupData is not None:
            oprot.writeFieldBegin('backupData', TType.DOUBLE, 10)
            oprot.writeDouble(self.backupData)
            oprot.writeFieldEnd()
        if self.restoreData is not None:
            oprot.writeFieldBegin('restoreData', TType.DOUBLE, 11)
            oprot.writeDouble(self.restoreData)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 12)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 13)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.hostId is not None:
            oprot.writeFieldBegin('hostId', TType.STRING, 14)
            oprot.writeString(self.hostId.encode('utf-8') if sys.version_info[0] == 2 else self.hostId)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 15)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.needSSL is not None:
            oprot.writeFieldBegin('needSSL', TType.BOOL, 16)
            oprot.writeBool(self.needSSL)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 17)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.usernames is not None:
            oprot.writeFieldBegin('usernames', TType.LIST, 18)
            oprot.writeListBegin(TType.STRING, len(self.usernames))
            for iter6 in self.usernames:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cloudId is not None:
            oprot.writeFieldBegin('cloudId', TType.STRING, 19)
            oprot.writeString(self.cloudId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudId)
            oprot.writeFieldEnd()
        if self.useType is not None:
            oprot.writeFieldBegin('useType', TType.I32, 20)
            oprot.writeI32(self.useType)
            oprot.writeFieldEnd()
        if self.certMode is not None:
            oprot.writeFieldBegin('certMode', TType.I32, 21)
            oprot.writeI32(self.certMode)
            oprot.writeFieldEnd()
        if self.fingerprint is not None:
            oprot.writeFieldBegin('fingerprint', TType.STRING, 22)
            oprot.writeString(self.fingerprint.encode('utf-8') if sys.version_info[0] == 2 else self.fingerprint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCloudTask(object):
    """
    Attributes:
     - jobId
     - userId

    """


    def __init__(self, jobId=None, userId=None,):
        self.jobId = jobId
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCloudTask')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncCloudStorage)
ncCloudStorage.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'createTime', None, None, ),  # 1
    (2, TType.I64, 'updateTtime', None, None, ),  # 2
    (3, TType.I64, 'deleteTime', None, None, ),  # 3
    (4, TType.BOOL, 'isDeleted', None, None, ),  # 4
    (5, TType.STRING, 'creatorId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'name', 'UTF8', None, ),  # 6
    (7, TType.I32, 'cloudType', None, None, ),  # 7
    (8, TType.STRING, 'indexBucket', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'stgBucket', 'UTF8', None, ),  # 9
    (10, TType.DOUBLE, 'backupData', None, None, ),  # 10
    (11, TType.DOUBLE, 'restoreData', None, None, ),  # 11
    (12, TType.I32, 'status', None, None, ),  # 12
    (13, TType.STRING, 'ip', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'hostId', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'password', 'UTF8', None, ),  # 15
    (16, TType.BOOL, 'needSSL', None, None, ),  # 16
    (17, TType.STRING, 'description', 'UTF8', None, ),  # 17
    (18, TType.LIST, 'usernames', (TType.STRING, 'UTF8', False), None, ),  # 18
    (19, TType.STRING, 'cloudId', 'UTF8', None, ),  # 19
    (20, TType.I32, 'useType', None, None, ),  # 20
    (21, TType.I32, 'certMode', None, None, ),  # 21
    (22, TType.STRING, 'fingerprint', 'UTF8', None, ),  # 22
)
all_structs.append(ncCloudTask)
ncCloudTask.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
