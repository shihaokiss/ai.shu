#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncBackupSvc import ncBackupSvc
from ncBackupSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void microprobe()')
  print('   get_all_jobs()')
  print('   get_all_jobs_for_ams()')
  print('  ncJobLog get_task_log_message_by_id(string instanceId)')
  print('   get_jobs_log_for_ams()')
  print('   get_job_info_by_id(string jobId)')
  print('   get_all_clean_jobs()')
  print('  ncTJob get_job(string jobId)')
  print('  void update_jobs_nstart_time( jobs_params)')
  print('   get_jobs_like_for_schedule(string jobName,  clientIds)')
  print('   get_jobs_for_schedule_by_ids( jobIds)')
  print('  void commit_job(string jobId, string customer, i32 backupType, string desc, bool is_auto_execute, i64 nstart_time, string strategy_id)')
  print('   get_support_backup_type(string job_id)')
  print('   get_jobs_by_instance_name(string instance_name)')
  print('   get_jobs_by_fpguid(string fpGuid)')
  print('  bool client_exsit_job(string clientId)')
  print('   get_jobs_by_cloud_storage_id(string cloud_storage_id)')
  print('   get_db_job_instances(ncDBJobInstanceRequest request)')
  print('   get_db_job_mappings(ncDBJobInstanceRequest request)')
  print('   get_anyshare_datasource_job_names(ncASDatasourceMappingRequest request)')
  print('   get_jobs_by_filter(ncJobFilterRequest filter_request)')
  print('   get_cloud_backup_jobs(bool query_all)')
  print('  void update_jobs( requests)')
  print('  void update_data_sources(ncUpdateDatasourceRequest request)')
  print('  ncTwoStringList remove_all_jobs_by_client_ids( clientIds)')
  print('   get_datasource_jobs(ncBackupSvcDataSourceRequest request)')
  print('  ncTwoStringList remove_all_jobs_by_vplatform_ids( vplatformIds)')
  print('  ncTwoStringList remove_all_jobs_by_backup_media_and_username( usernames, string cloud_storage_name)')
  print('  void remove_all_jobs_by_anyshare_resources( anyshare_resource_ids)')
  print('   get_datasource_by_client(string client_id, string job_is_backup)')
  print('   add_schedule_jobs( ids)')
  print('   modify_schedule_jobs( ids)')
  print('   get_schedule_jobs()')
  print('  void online_reload(string ip)')
  print('  void offline_reload(string ip)')
  print('  void migrate_node_vibration( ip_to_state)')
  print('  void app_ctrl_push( req)')
  print('  string get_data_for_ams(string kwargs)')
  print('  bool is_exists_running_job_on_client(string clientId)')
  print('  bool client_exsit_volume_job(string clientId)')
  print('  string do_operation_from_ams(string target, string method, string kwargs)')
  print('   get_jobs_status_by_anyshare_resources( ids)')
  print('   get_jobs_by_sourceId(ncSourceType sourceType, ncServiceType svcType, string sourceId, ncRelationStatus relation)')
  print('  ncKmsKeyMaterial GetKeyMaterial(string KeyId, string DeviceId)')
  print('   get_dict_export( body, string jobInstanceId, ncUserInfo user)')
  print('   get_jobs_by_datasource(string datasource, string clientId, string dbRunUserName)')
  print('  bool get_backup_jobs_by_node_ip(string node_ip)')
  print('  bool get_backup_jobs_by_volume_id(string volume_id)')
  print('   check_user_has_data( user_list)')
  print('  ncBackupJobCountInfo get_job_count_info(i64 startTime, string userId)')
  print('   get_strategy_export( strategy_ids, string user_name)')
  print('  ncTwoStringList remove_all_jobs_by_cloud_storage_name_and_username( usernames, string cloud_storage_name)')
  print('  void delete_extra_resource_by_username( user_names)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncBackupSvc.Client(protocol)
transport.open()

if cmd == 'microprobe':
  if len(args) != 0:
    print('microprobe requires 0 args')
    sys.exit(1)
  pp.pprint(client.microprobe())

elif cmd == 'get_all_jobs':
  if len(args) != 0:
    print('get_all_jobs requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_all_jobs())

elif cmd == 'get_all_jobs_for_ams':
  if len(args) != 0:
    print('get_all_jobs_for_ams requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_all_jobs_for_ams())

elif cmd == 'get_task_log_message_by_id':
  if len(args) != 1:
    print('get_task_log_message_by_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_task_log_message_by_id(args[0],))

elif cmd == 'get_jobs_log_for_ams':
  if len(args) != 0:
    print('get_jobs_log_for_ams requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_log_for_ams())

elif cmd == 'get_job_info_by_id':
  if len(args) != 1:
    print('get_job_info_by_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_job_info_by_id(args[0],))

elif cmd == 'get_all_clean_jobs':
  if len(args) != 0:
    print('get_all_clean_jobs requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_all_clean_jobs())

elif cmd == 'get_job':
  if len(args) != 1:
    print('get_job requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_job(args[0],))

elif cmd == 'update_jobs_nstart_time':
  if len(args) != 1:
    print('update_jobs_nstart_time requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_jobs_nstart_time(eval(args[0]),))

elif cmd == 'get_jobs_like_for_schedule':
  if len(args) != 2:
    print('get_jobs_like_for_schedule requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_like_for_schedule(args[0],eval(args[1]),))

elif cmd == 'get_jobs_for_schedule_by_ids':
  if len(args) != 1:
    print('get_jobs_for_schedule_by_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_for_schedule_by_ids(eval(args[0]),))

elif cmd == 'commit_job':
  if len(args) != 7:
    print('commit_job requires 7 args')
    sys.exit(1)
  pp.pprint(client.commit_job(args[0],args[1],eval(args[2]),args[3],eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'get_support_backup_type':
  if len(args) != 1:
    print('get_support_backup_type requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_support_backup_type(args[0],))

elif cmd == 'get_jobs_by_instance_name':
  if len(args) != 1:
    print('get_jobs_by_instance_name requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_instance_name(args[0],))

elif cmd == 'get_jobs_by_fpguid':
  if len(args) != 1:
    print('get_jobs_by_fpguid requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_fpguid(args[0],))

elif cmd == 'client_exsit_job':
  if len(args) != 1:
    print('client_exsit_job requires 1 args')
    sys.exit(1)
  pp.pprint(client.client_exsit_job(args[0],))

elif cmd == 'get_jobs_by_cloud_storage_id':
  if len(args) != 1:
    print('get_jobs_by_cloud_storage_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_cloud_storage_id(args[0],))

elif cmd == 'get_db_job_instances':
  if len(args) != 1:
    print('get_db_job_instances requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_db_job_instances(eval(args[0]),))

elif cmd == 'get_db_job_mappings':
  if len(args) != 1:
    print('get_db_job_mappings requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_db_job_mappings(eval(args[0]),))

elif cmd == 'get_anyshare_datasource_job_names':
  if len(args) != 1:
    print('get_anyshare_datasource_job_names requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_anyshare_datasource_job_names(eval(args[0]),))

elif cmd == 'get_jobs_by_filter':
  if len(args) != 1:
    print('get_jobs_by_filter requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_filter(eval(args[0]),))

elif cmd == 'get_cloud_backup_jobs':
  if len(args) != 1:
    print('get_cloud_backup_jobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_cloud_backup_jobs(eval(args[0]),))

elif cmd == 'update_jobs':
  if len(args) != 1:
    print('update_jobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_jobs(eval(args[0]),))

elif cmd == 'update_data_sources':
  if len(args) != 1:
    print('update_data_sources requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_data_sources(eval(args[0]),))

elif cmd == 'remove_all_jobs_by_client_ids':
  if len(args) != 1:
    print('remove_all_jobs_by_client_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.remove_all_jobs_by_client_ids(eval(args[0]),))

elif cmd == 'get_datasource_jobs':
  if len(args) != 1:
    print('get_datasource_jobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_datasource_jobs(eval(args[0]),))

elif cmd == 'remove_all_jobs_by_vplatform_ids':
  if len(args) != 1:
    print('remove_all_jobs_by_vplatform_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.remove_all_jobs_by_vplatform_ids(eval(args[0]),))

elif cmd == 'remove_all_jobs_by_backup_media_and_username':
  if len(args) != 2:
    print('remove_all_jobs_by_backup_media_and_username requires 2 args')
    sys.exit(1)
  pp.pprint(client.remove_all_jobs_by_backup_media_and_username(eval(args[0]),args[1],))

elif cmd == 'remove_all_jobs_by_anyshare_resources':
  if len(args) != 1:
    print('remove_all_jobs_by_anyshare_resources requires 1 args')
    sys.exit(1)
  pp.pprint(client.remove_all_jobs_by_anyshare_resources(eval(args[0]),))

elif cmd == 'get_datasource_by_client':
  if len(args) != 2:
    print('get_datasource_by_client requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_datasource_by_client(args[0],args[1],))

elif cmd == 'add_schedule_jobs':
  if len(args) != 1:
    print('add_schedule_jobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_schedule_jobs(eval(args[0]),))

elif cmd == 'modify_schedule_jobs':
  if len(args) != 1:
    print('modify_schedule_jobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.modify_schedule_jobs(eval(args[0]),))

elif cmd == 'get_schedule_jobs':
  if len(args) != 0:
    print('get_schedule_jobs requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_schedule_jobs())

elif cmd == 'online_reload':
  if len(args) != 1:
    print('online_reload requires 1 args')
    sys.exit(1)
  pp.pprint(client.online_reload(args[0],))

elif cmd == 'offline_reload':
  if len(args) != 1:
    print('offline_reload requires 1 args')
    sys.exit(1)
  pp.pprint(client.offline_reload(args[0],))

elif cmd == 'migrate_node_vibration':
  if len(args) != 1:
    print('migrate_node_vibration requires 1 args')
    sys.exit(1)
  pp.pprint(client.migrate_node_vibration(eval(args[0]),))

elif cmd == 'app_ctrl_push':
  if len(args) != 1:
    print('app_ctrl_push requires 1 args')
    sys.exit(1)
  pp.pprint(client.app_ctrl_push(eval(args[0]),))

elif cmd == 'get_data_for_ams':
  if len(args) != 1:
    print('get_data_for_ams requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'is_exists_running_job_on_client':
  if len(args) != 1:
    print('is_exists_running_job_on_client requires 1 args')
    sys.exit(1)
  pp.pprint(client.is_exists_running_job_on_client(args[0],))

elif cmd == 'client_exsit_volume_job':
  if len(args) != 1:
    print('client_exsit_volume_job requires 1 args')
    sys.exit(1)
  pp.pprint(client.client_exsit_volume_job(args[0],))

elif cmd == 'do_operation_from_ams':
  if len(args) != 3:
    print('do_operation_from_ams requires 3 args')
    sys.exit(1)
  pp.pprint(client.do_operation_from_ams(args[0],args[1],args[2],))

elif cmd == 'get_jobs_status_by_anyshare_resources':
  if len(args) != 1:
    print('get_jobs_status_by_anyshare_resources requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_status_by_anyshare_resources(eval(args[0]),))

elif cmd == 'get_jobs_by_sourceId':
  if len(args) != 4:
    print('get_jobs_by_sourceId requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_sourceId(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'GetKeyMaterial':
  if len(args) != 2:
    print('GetKeyMaterial requires 2 args')
    sys.exit(1)
  pp.pprint(client.GetKeyMaterial(args[0],args[1],))

elif cmd == 'get_dict_export':
  if len(args) != 3:
    print('get_dict_export requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_dict_export(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'get_jobs_by_datasource':
  if len(args) != 3:
    print('get_jobs_by_datasource requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_jobs_by_datasource(args[0],args[1],args[2],))

elif cmd == 'get_backup_jobs_by_node_ip':
  if len(args) != 1:
    print('get_backup_jobs_by_node_ip requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_backup_jobs_by_node_ip(args[0],))

elif cmd == 'get_backup_jobs_by_volume_id':
  if len(args) != 1:
    print('get_backup_jobs_by_volume_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_backup_jobs_by_volume_id(args[0],))

elif cmd == 'check_user_has_data':
  if len(args) != 1:
    print('check_user_has_data requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_user_has_data(eval(args[0]),))

elif cmd == 'get_job_count_info':
  if len(args) != 2:
    print('get_job_count_info requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_job_count_info(eval(args[0]),args[1],))

elif cmd == 'get_strategy_export':
  if len(args) != 2:
    print('get_strategy_export requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_strategy_export(eval(args[0]),args[1],))

elif cmd == 'remove_all_jobs_by_cloud_storage_name_and_username':
  if len(args) != 2:
    print('remove_all_jobs_by_cloud_storage_name_and_username requires 2 args')
    sys.exit(1)
  pp.pprint(client.remove_all_jobs_by_cloud_storage_name_and_username(eval(args[0]),args[1],))

elif cmd == 'delete_extra_resource_by_username':
  if len(args) != 1:
    print('delete_extra_resource_by_username requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_extra_resource_by_username(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
