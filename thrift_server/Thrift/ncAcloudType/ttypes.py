# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncAcloudNodeType(object):
    NC_ACLOUD_NODE_TYPE_PLAT = 0
    NC_ACLOUD_NODE_TYPE_GROUP = 1
    NC_ACLOUD_NODE_TYPE_VM = 2

    _VALUES_TO_NAMES = {
        0: "NC_ACLOUD_NODE_TYPE_PLAT",
        1: "NC_ACLOUD_NODE_TYPE_GROUP",
        2: "NC_ACLOUD_NODE_TYPE_VM",
    }

    _NAMES_TO_VALUES = {
        "NC_ACLOUD_NODE_TYPE_PLAT": 0,
        "NC_ACLOUD_NODE_TYPE_GROUP": 1,
        "NC_ACLOUD_NODE_TYPE_VM": 2,
    }


class ncAcloudLoginInfoRq(object):
    """
    Attributes:
     - serverIP
     - username
     - password
     - verification

    """


    def __init__(self, serverIP=None, username=None, password=None, verification=None,):
        self.serverIP = serverIP
        self.username = username
        self.password = password
        self.verification = verification

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.verification = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudLoginInfoRq')
        if self.serverIP is not None:
            oprot.writeFieldBegin('serverIP', TType.STRING, 1)
            oprot.writeString(self.serverIP.encode('utf-8') if sys.version_info[0] == 2 else self.serverIP)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.verification is not None:
            oprot.writeFieldBegin('verification', TType.STRING, 4)
            oprot.writeString(self.verification.encode('utf-8') if sys.version_info[0] == 2 else self.verification)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetAcloudLoginInfo(object):
    """
    Attributes:
     - loginInfo
     - reqClientId

    """


    def __init__(self, loginInfo=None, reqClientId=None,):
        self.loginInfo = loginInfo
        self.reqClientId = reqClientId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reqClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetAcloudLoginInfo')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.reqClientId is not None:
            oprot.writeFieldBegin('reqClientId', TType.STRING, 2)
            oprot.writeString(self.reqClientId.encode('utf-8') if sys.version_info[0] == 2 else self.reqClientId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudHostInfo(object):
    """
    Attributes:
     - id
     - ip
     - name

    """


    def __init__(self, id=None, ip=None, name=None,):
        self.id = id
        self.ip = ip
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudHostInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudHostInfoSet(object):
    """
    Attributes:
     - acloudHostInfos

    """


    def __init__(self, acloudHostInfos=None,):
        self.acloudHostInfos = acloudHostInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.acloudHostInfos = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncAcloudHostInfo()
                        _elem5.read(iprot)
                        self.acloudHostInfos.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudHostInfoSet')
        if self.acloudHostInfos is not None:
            oprot.writeFieldBegin('acloudHostInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.acloudHostInfos))
            for iter6 in self.acloudHostInfos:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudNodeReq(object):
    """
    Attributes:
     - loginInfo
     - nodeType
     - nodeId

    """


    def __init__(self, loginInfo=None, nodeType=None, nodeId=None,):
        self.loginInfo = loginInfo
        self.nodeType = nodeType
        self.nodeId = nodeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.nodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudNodeReq')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.I32, 2)
            oprot.writeI32(self.nodeType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 3)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudNodeObj(object):
    """
    Attributes:
     - type
     - nodeId
     - displayName
     - path

    """


    def __init__(self, type=None, nodeId=None, displayName=None, path=None,):
        self.type = type
        self.nodeId = nodeId
        self.displayName = displayName
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudNodeObj')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 2)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 3)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 4)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudNodeObjSet(object):
    """
    Attributes:
     - acloudNodeObjs

    """


    def __init__(self, acloudNodeObjs=None,):
        self.acloudNodeObjs = acloudNodeObjs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.acloudNodeObjs = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncAcloudNodeObj()
                        _elem12.read(iprot)
                        self.acloudNodeObjs.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudNodeObjSet')
        if self.acloudNodeObjs is not None:
            oprot.writeFieldBegin('acloudNodeObjs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.acloudNodeObjs))
            for iter13 in self.acloudNodeObjs:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudStoragePoolReq(object):
    """
    Attributes:
     - loginInfo
     - hostId

    """


    def __init__(self, loginInfo=None, hostId=None,):
        self.loginInfo = loginInfo
        self.hostId = hostId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudStoragePoolReq')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.hostId is not None:
            oprot.writeFieldBegin('hostId', TType.STRING, 2)
            oprot.writeString(self.hostId.encode('utf-8') if sys.version_info[0] == 2 else self.hostId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudStoragePool(object):
    """
    Attributes:
     - name
     - id
     - type
     - totalSize
     - freeSize

    """


    def __init__(self, name=None, id=None, type=None, totalSize=None, freeSize=None,):
        self.name = name
        self.id = id
        self.type = type
        self.totalSize = totalSize
        self.freeSize = freeSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.freeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudStoragePool')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 4)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.freeSize is not None:
            oprot.writeFieldBegin('freeSize', TType.I64, 5)
            oprot.writeI64(self.freeSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudStoragePoolSet(object):
    """
    Attributes:
     - dsPools

    """


    def __init__(self, dsPools=None,):
        self.dsPools = dsPools

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dsPools = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncAcloudStoragePool()
                        _elem19.read(iprot)
                        self.dsPools.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudStoragePoolSet')
        if self.dsPools is not None:
            oprot.writeFieldBegin('dsPools', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.dsPools))
            for iter20 in self.dsPools:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudVSwitchReq(object):
    """
    Attributes:
     - loginInfo
     - hostId

    """


    def __init__(self, loginInfo=None, hostId=None,):
        self.loginInfo = loginInfo
        self.hostId = hostId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudVSwitchReq')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.hostId is not None:
            oprot.writeFieldBegin('hostId', TType.STRING, 2)
            oprot.writeString(self.hostId.encode('utf-8') if sys.version_info[0] == 2 else self.hostId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudVSwitch(object):
    """
    Attributes:
     - id
     - name
     - groupName
     - type

    """


    def __init__(self, id=None, name=None, groupName=None, type=None,):
        self.id = id
        self.name = name
        self.groupName = groupName
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudVSwitch')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 3)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 4)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudVSwitchSet(object):
    """
    Attributes:
     - vSwitchs

    """


    def __init__(self, vSwitchs=None,):
        self.vSwitchs = vSwitchs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.vSwitchs = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncAcloudVSwitch()
                        _elem26.read(iprot)
                        self.vSwitchs.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudVSwitchSet')
        if self.vSwitchs is not None:
            oprot.writeFieldBegin('vSwitchs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.vSwitchs))
            for iter27 in self.vSwitchs:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudDataSource(object):
    """
    Attributes:
     - nodeType
     - fullPath

    """


    def __init__(self, nodeType=None, fullPath=None,):
        self.nodeType = nodeType
        self.fullPath = fullPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fullPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudDataSource')
        if self.nodeType is not None:
            oprot.writeFieldBegin('nodeType', TType.STRING, 1)
            oprot.writeString(self.nodeType.encode('utf-8') if sys.version_info[0] == 2 else self.nodeType)
            oprot.writeFieldEnd()
        if self.fullPath is not None:
            oprot.writeFieldBegin('fullPath', TType.STRING, 2)
            oprot.writeString(self.fullPath.encode('utf-8') if sys.version_info[0] == 2 else self.fullPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudDataSourceSet(object):
    """
    Attributes:
     - acloudDataSources

    """


    def __init__(self, acloudDataSources=None,):
        self.acloudDataSources = acloudDataSources

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.acloudDataSources = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ncAcloudDataSource()
                        _elem33.read(iprot)
                        self.acloudDataSources.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudDataSourceSet')
        if self.acloudDataSources is not None:
            oprot.writeFieldBegin('acloudDataSources', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.acloudDataSources))
            for iter34 in self.acloudDataSources:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudDataSourceReq(object):
    """
    Attributes:
     - loginInfo
     - acloudDataSourceList
     - bindIPSet

    """


    def __init__(self, loginInfo=None, acloudDataSourceList=None, bindIPSet=None,):
        self.loginInfo = loginInfo
        self.acloudDataSourceList = acloudDataSourceList
        self.bindIPSet = bindIPSet

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.acloudDataSourceList = ncAcloudDataSourceSet()
                    self.acloudDataSourceList.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.bindIPSet = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.bindIPSet.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudDataSourceReq')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.acloudDataSourceList is not None:
            oprot.writeFieldBegin('acloudDataSourceList', TType.STRUCT, 2)
            self.acloudDataSourceList.write(oprot)
            oprot.writeFieldEnd()
        if self.bindIPSet is not None:
            oprot.writeFieldBegin('bindIPSet', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.bindIPSet))
            for iter41 in self.bindIPSet:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudJobClientRequest(object):
    """
    Attributes:
     - clientIp
     - vplatformId
     - acloudDataSourceList

    """


    def __init__(self, clientIp=None, vplatformId=None, acloudDataSourceList=None,):
        self.clientIp = clientIp
        self.vplatformId = vplatformId
        self.acloudDataSourceList = acloudDataSourceList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.acloudDataSourceList = ncAcloudDataSourceSet()
                    self.acloudDataSourceList.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudJobClientRequest')
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 1)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.acloudDataSourceList is not None:
            oprot.writeFieldBegin('acloudDataSourceList', TType.STRUCT, 3)
            self.acloudDataSourceList.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudRecoverDataSourceReq(object):
    """
    Attributes:
     - loginInfo
     - dsPools
     - bindIPSet

    """


    def __init__(self, loginInfo=None, dsPools=None, bindIPSet=None,):
        self.loginInfo = loginInfo
        self.dsPools = dsPools
        self.bindIPSet = bindIPSet

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.loginInfo = ncAcloudLoginInfoRq()
                    self.loginInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dsPools = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = ncAcloudStoragePool()
                        _elem47.read(iprot)
                        self.dsPools.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.bindIPSet = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.bindIPSet.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudRecoverDataSourceReq')
        if self.loginInfo is not None:
            oprot.writeFieldBegin('loginInfo', TType.STRUCT, 1)
            self.loginInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.dsPools is not None:
            oprot.writeFieldBegin('dsPools', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.dsPools))
            for iter54 in self.dsPools:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bindIPSet is not None:
            oprot.writeFieldBegin('bindIPSet', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.bindIPSet))
            for iter55 in self.bindIPSet:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudRecoverJobClientRequest(object):
    """
    Attributes:
     - clientIp
     - vplatformId
     - dsPools

    """


    def __init__(self, clientIp=None, vplatformId=None, dsPools=None,):
        self.clientIp = clientIp
        self.vplatformId = vplatformId
        self.dsPools = dsPools

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dsPools = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = ncAcloudStoragePool()
                        _elem61.read(iprot)
                        self.dsPools.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudRecoverJobClientRequest')
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 1)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.dsPools is not None:
            oprot.writeFieldBegin('dsPools', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.dsPools))
            for iter62 in self.dsPools:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudStorageHosts(object):
    """
    Attributes:
     - storage
     - acloudHostInfos

    """


    def __init__(self, storage=None, acloudHostInfos=None,):
        self.storage = storage
        self.acloudHostInfos = acloudHostInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.storage = ncAcloudStoragePool()
                    self.storage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.acloudHostInfos = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = ncAcloudHostInfo()
                        _elem68.read(iprot)
                        self.acloudHostInfos.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudStorageHosts')
        if self.storage is not None:
            oprot.writeFieldBegin('storage', TType.STRUCT, 1)
            self.storage.write(oprot)
            oprot.writeFieldEnd()
        if self.acloudHostInfos is not None:
            oprot.writeFieldBegin('acloudHostInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.acloudHostInfos))
            for iter69 in self.acloudHostInfos:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudStorageHostSet(object):
    """
    Attributes:
     - acloudStorageHosts

    """


    def __init__(self, acloudStorageHosts=None,):
        self.acloudStorageHosts = acloudStorageHosts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.acloudStorageHosts = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = ncAcloudStorageHosts()
                        _elem75.read(iprot)
                        self.acloudStorageHosts.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudStorageHostSet')
        if self.acloudStorageHosts is not None:
            oprot.writeFieldBegin('acloudStorageHosts', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.acloudStorageHosts))
            for iter76 in self.acloudStorageHosts:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncAcloudLoginInfoRq)
ncAcloudLoginInfoRq.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serverIP', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'verification', 'UTF8', None, ),  # 4
)
all_structs.append(ncGetAcloudLoginInfo)
ncGetAcloudLoginInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.STRING, 'reqClientId', 'UTF8', None, ),  # 2
)
all_structs.append(ncAcloudHostInfo)
ncAcloudHostInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)
all_structs.append(ncAcloudHostInfoSet)
ncAcloudHostInfoSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'acloudHostInfos', (TType.STRUCT, [ncAcloudHostInfo, None], False), None, ),  # 1
)
all_structs.append(ncAcloudNodeReq)
ncAcloudNodeReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.I32, 'nodeType', None, None, ),  # 2
    (3, TType.STRING, 'nodeId', 'UTF8', None, ),  # 3
)
all_structs.append(ncAcloudNodeObj)
ncAcloudNodeObj.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'nodeId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'displayName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'path', 'UTF8', None, ),  # 4
)
all_structs.append(ncAcloudNodeObjSet)
ncAcloudNodeObjSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'acloudNodeObjs', (TType.STRUCT, [ncAcloudNodeObj, None], False), None, ),  # 1
)
all_structs.append(ncAcloudStoragePoolReq)
ncAcloudStoragePoolReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.STRING, 'hostId', 'UTF8', None, ),  # 2
)
all_structs.append(ncAcloudStoragePool)
ncAcloudStoragePool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I64, 'totalSize', None, None, ),  # 4
    (5, TType.I64, 'freeSize', None, None, ),  # 5
)
all_structs.append(ncAcloudStoragePoolSet)
ncAcloudStoragePoolSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dsPools', (TType.STRUCT, [ncAcloudStoragePool, None], False), None, ),  # 1
)
all_structs.append(ncAcloudVSwitchReq)
ncAcloudVSwitchReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.STRING, 'hostId', 'UTF8', None, ),  # 2
)
all_structs.append(ncAcloudVSwitch)
ncAcloudVSwitch.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'groupName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'type', 'UTF8', None, ),  # 4
)
all_structs.append(ncAcloudVSwitchSet)
ncAcloudVSwitchSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'vSwitchs', (TType.STRUCT, [ncAcloudVSwitch, None], False), None, ),  # 1
)
all_structs.append(ncAcloudDataSource)
ncAcloudDataSource.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fullPath', 'UTF8', None, ),  # 2
)
all_structs.append(ncAcloudDataSourceSet)
ncAcloudDataSourceSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'acloudDataSources', (TType.STRUCT, [ncAcloudDataSource, None], False), None, ),  # 1
)
all_structs.append(ncAcloudDataSourceReq)
ncAcloudDataSourceReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.STRUCT, 'acloudDataSourceList', [ncAcloudDataSourceSet, None], None, ),  # 2
    (3, TType.LIST, 'bindIPSet', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncAcloudJobClientRequest)
ncAcloudJobClientRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'acloudDataSourceList', [ncAcloudDataSourceSet, None], None, ),  # 3
)
all_structs.append(ncAcloudRecoverDataSourceReq)
ncAcloudRecoverDataSourceReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'loginInfo', [ncAcloudLoginInfoRq, None], None, ),  # 1
    (2, TType.LIST, 'dsPools', (TType.STRUCT, [ncAcloudStoragePool, None], False), None, ),  # 2
    (3, TType.LIST, 'bindIPSet', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncAcloudRecoverJobClientRequest)
ncAcloudRecoverJobClientRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'dsPools', (TType.STRUCT, [ncAcloudStoragePool, None], False), None, ),  # 3
)
all_structs.append(ncAcloudStorageHosts)
ncAcloudStorageHosts.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'storage', [ncAcloudStoragePool, None], None, ),  # 1
    (2, TType.LIST, 'acloudHostInfos', (TType.STRUCT, [ncAcloudHostInfo, None], False), None, ),  # 2
)
all_structs.append(ncAcloudStorageHostSet)
ncAcloudStorageHostSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'acloudStorageHosts', (TType.STRUCT, [ncAcloudStorageHosts, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
