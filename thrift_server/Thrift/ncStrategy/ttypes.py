#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncStrategy_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncStrategyInfo(object):
  """
  Attributes:
   - id
   - name
   - type
   - dataProtectTime
   - dataProtectUnit
   - logProtectTime
   - logProtectUnit
   - durationEnable
   - durationTime
   - durationUnit
   - retentionTime
   - retentionUnit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I64, 'dataProtectTime', None, None, ), # 4
    (5, TType.I32, 'dataProtectUnit', None, None, ), # 5
    (6, TType.I64, 'logProtectTime', None, None, ), # 6
    (7, TType.I32, 'logProtectUnit', None, None, ), # 7
    (8, TType.I32, 'durationEnable', None, None, ), # 8
    (9, TType.I64, 'durationTime', None, None, ), # 9
    (10, TType.I32, 'durationUnit', None, None, ), # 10
    (11, TType.I64, 'retentionTime', None, None, ), # 11
    (12, TType.I32, 'retentionUnit', None, None, ), # 12
  )

  def __init__(self, id=None, name=None, type=None, dataProtectTime=None, dataProtectUnit=None, logProtectTime=None, logProtectUnit=None, durationEnable=None, durationTime=None, durationUnit=None, retentionTime=None, retentionUnit=None,):
    self.id = id
    self.name = name
    self.type = type
    self.dataProtectTime = dataProtectTime
    self.dataProtectUnit = dataProtectUnit
    self.logProtectTime = logProtectTime
    self.logProtectUnit = logProtectUnit
    self.durationEnable = durationEnable
    self.durationTime = durationTime
    self.durationUnit = durationUnit
    self.retentionTime = retentionTime
    self.retentionUnit = retentionUnit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.dataProtectTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.dataProtectUnit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.logProtectTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.logProtectUnit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.durationEnable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.durationTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.durationUnit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.retentionTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.retentionUnit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStrategyInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.dataProtectTime is not None:
      oprot.writeFieldBegin('dataProtectTime', TType.I64, 4)
      oprot.writeI64(self.dataProtectTime)
      oprot.writeFieldEnd()
    if self.dataProtectUnit is not None:
      oprot.writeFieldBegin('dataProtectUnit', TType.I32, 5)
      oprot.writeI32(self.dataProtectUnit)
      oprot.writeFieldEnd()
    if self.logProtectTime is not None:
      oprot.writeFieldBegin('logProtectTime', TType.I64, 6)
      oprot.writeI64(self.logProtectTime)
      oprot.writeFieldEnd()
    if self.logProtectUnit is not None:
      oprot.writeFieldBegin('logProtectUnit', TType.I32, 7)
      oprot.writeI32(self.logProtectUnit)
      oprot.writeFieldEnd()
    if self.durationEnable is not None:
      oprot.writeFieldBegin('durationEnable', TType.I32, 8)
      oprot.writeI32(self.durationEnable)
      oprot.writeFieldEnd()
    if self.durationTime is not None:
      oprot.writeFieldBegin('durationTime', TType.I64, 9)
      oprot.writeI64(self.durationTime)
      oprot.writeFieldEnd()
    if self.durationUnit is not None:
      oprot.writeFieldBegin('durationUnit', TType.I32, 10)
      oprot.writeI32(self.durationUnit)
      oprot.writeFieldEnd()
    if self.retentionTime is not None:
      oprot.writeFieldBegin('retentionTime', TType.I64, 11)
      oprot.writeI64(self.retentionTime)
      oprot.writeFieldEnd()
    if self.retentionUnit is not None:
      oprot.writeFieldBegin('retentionUnit', TType.I32, 12)
      oprot.writeI32(self.retentionUnit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.dataProtectTime)
    value = (value * 31) ^ hash(self.dataProtectUnit)
    value = (value * 31) ^ hash(self.logProtectTime)
    value = (value * 31) ^ hash(self.logProtectUnit)
    value = (value * 31) ^ hash(self.durationEnable)
    value = (value * 31) ^ hash(self.durationTime)
    value = (value * 31) ^ hash(self.durationUnit)
    value = (value * 31) ^ hash(self.retentionTime)
    value = (value * 31) ^ hash(self.retentionUnit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
