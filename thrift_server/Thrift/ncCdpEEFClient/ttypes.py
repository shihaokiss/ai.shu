# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncEEFComm_Var.ttypes
import ncCommonType.ttypes
import ncCommonType_Var.ttypes
import ncCdpEEFClient_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncEEFEventInfo(object):
    """
    Attributes:
     - eventCID
     - clientMac
     - params
     - eventType
     - execId
     - engineType

    """


    def __init__(self, eventCID=None, clientMac=None, params=None, eventType=1, execId=None, engineType=None,):
        self.eventCID = eventCID
        self.clientMac = clientMac
        self.params = params
        self.eventType = eventType
        self.execId = execId
        self.engineType = engineType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventCID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clientMac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncCommonType.ttypes.ncKeyValue()
                        _elem5.read(iprot)
                        self.params.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.eventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.execId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFEventInfo')
        if self.eventCID is not None:
            oprot.writeFieldBegin('eventCID', TType.STRING, 1)
            oprot.writeString(self.eventCID.encode('utf-8') if sys.version_info[0] == 2 else self.eventCID)
            oprot.writeFieldEnd()
        if self.clientMac is not None:
            oprot.writeFieldBegin('clientMac', TType.STRING, 2)
            oprot.writeString(self.clientMac.encode('utf-8') if sys.version_info[0] == 2 else self.clientMac)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter6 in self.params:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 4)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        if self.execId is not None:
            oprot.writeFieldBegin('execId', TType.STRING, 5)
            oprot.writeString(self.execId.encode('utf-8') if sys.version_info[0] == 2 else self.execId)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 6)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncEEFEventInfo)
ncEEFEventInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eventCID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clientMac', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'params', (TType.STRUCT, [ncCommonType.ttypes.ncKeyValue, None], False), None, ),  # 3
    (4, TType.I32, 'eventType', None, 1, ),  # 4
    (5, TType.STRING, 'execId', 'UTF8', None, ),  # 5
    (6, TType.I32, 'engineType', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
