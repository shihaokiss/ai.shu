#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncEEFComm_Var.ttypes
import ncCommonType.ttypes
import ncCommonType_Var.ttypes
import ncCdpEEFClient_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncEEFEventInfo(object):
  """
  Attributes:
   - eventCID
   - clientMac
   - params
   - eventType
   - execId
   - engineType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'eventCID', None, None, ), # 1
    (2, TType.STRING, 'clientMac', None, None, ), # 2
    (3, TType.LIST, 'params', (TType.STRUCT,(ncCommonType.ttypes.ncKeyValue, ncCommonType.ttypes.ncKeyValue.thrift_spec)), None, ), # 3
    (4, TType.I32, 'eventType', None,     1, ), # 4
    (5, TType.STRING, 'execId', None, None, ), # 5
    (6, TType.I32, 'engineType', None, None, ), # 6
  )

  def __init__(self, eventCID=None, clientMac=None, params=None, eventType=thrift_spec[4][4], execId=None, engineType=None,):
    self.eventCID = eventCID
    self.clientMac = clientMac
    self.params = params
    self.eventType = eventType
    self.execId = execId
    self.engineType = engineType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.eventCID = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.params = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ncCommonType.ttypes.ncKeyValue()
            _elem5.read(iprot)
            self.params.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.eventType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.execId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncEEFEventInfo')
    if self.eventCID is not None:
      oprot.writeFieldBegin('eventCID', TType.STRING, 1)
      oprot.writeString(self.eventCID.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 2)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.params))
      for iter6 in self.params:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.eventType is not None:
      oprot.writeFieldBegin('eventType', TType.I32, 4)
      oprot.writeI32(self.eventType)
      oprot.writeFieldEnd()
    if self.execId is not None:
      oprot.writeFieldBegin('execId', TType.STRING, 5)
      oprot.writeString(self.execId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 6)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.eventCID)
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.params)
    value = (value * 31) ^ hash(self.eventType)
    value = (value * 31) ^ hash(self.execId)
    value = (value * 31) ^ hash(self.engineType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
