#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCommonType_Var.ttypes
import ncEEFComm_Var.ttypes
import ncClusterMeta_Var.ttypes
import ncCdmStoreMgmCommon.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncCertifiedStatus(object):
  NOTACCEPTED = 0
  ACCEPTED = 1
  UNKNOWN = -1

  _VALUES_TO_NAMES = {
    0: "NOTACCEPTED",
    1: "ACCEPTED",
    -1: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "NOTACCEPTED": 0,
    "ACCEPTED": 1,
    "UNKNOWN": -1,
  }


class ncSnapSyncCertifyRequest(object):
  """
  Attributes:
   - sourceClusterIp
   - sourceClusterId
   - sourceJobId
   - sourceJobName
   - sourceUserName
   - destRecvUserName
   - poolType
   - customer
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sourceClusterIp', None, None, ), # 1
    (2, TType.STRING, 'sourceClusterId', None, None, ), # 2
    (3, TType.STRING, 'sourceJobId', None, None, ), # 3
    (4, TType.STRING, 'sourceJobName', None, None, ), # 4
    (5, TType.STRING, 'sourceUserName', None, None, ), # 5
    (6, TType.STRING, 'destRecvUserName', None, None, ), # 6
    (7, TType.I32, 'poolType', None,     1, ), # 7
    (8, TType.STRING, 'customer', None, None, ), # 8
  )

  def __init__(self, sourceClusterIp=None, sourceClusterId=None, sourceJobId=None, sourceJobName=None, sourceUserName=None, destRecvUserName=None, poolType=thrift_spec[7][4], customer=None,):
    self.sourceClusterIp = sourceClusterIp
    self.sourceClusterId = sourceClusterId
    self.sourceJobId = sourceJobId
    self.sourceJobName = sourceJobName
    self.sourceUserName = sourceUserName
    self.destRecvUserName = destRecvUserName
    self.poolType = poolType
    self.customer = customer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sourceClusterIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceClusterId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sourceJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sourceJobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sourceUserName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.destRecvUserName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.poolType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.customer = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapSyncCertifyRequest')
    if self.sourceClusterIp is not None:
      oprot.writeFieldBegin('sourceClusterIp', TType.STRING, 1)
      oprot.writeString(self.sourceClusterIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceClusterId is not None:
      oprot.writeFieldBegin('sourceClusterId', TType.STRING, 2)
      oprot.writeString(self.sourceClusterId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceJobId is not None:
      oprot.writeFieldBegin('sourceJobId', TType.STRING, 3)
      oprot.writeString(self.sourceJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceJobName is not None:
      oprot.writeFieldBegin('sourceJobName', TType.STRING, 4)
      oprot.writeString(self.sourceJobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceUserName is not None:
      oprot.writeFieldBegin('sourceUserName', TType.STRING, 5)
      oprot.writeString(self.sourceUserName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.destRecvUserName is not None:
      oprot.writeFieldBegin('destRecvUserName', TType.STRING, 6)
      oprot.writeString(self.destRecvUserName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.poolType is not None:
      oprot.writeFieldBegin('poolType', TType.I32, 7)
      oprot.writeI32(self.poolType)
      oprot.writeFieldEnd()
    if self.customer is not None:
      oprot.writeFieldBegin('customer', TType.STRING, 8)
      oprot.writeString(self.customer.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sourceClusterIp)
    value = (value * 31) ^ hash(self.sourceClusterId)
    value = (value * 31) ^ hash(self.sourceJobId)
    value = (value * 31) ^ hash(self.sourceJobName)
    value = (value * 31) ^ hash(self.sourceUserName)
    value = (value * 31) ^ hash(self.destRecvUserName)
    value = (value * 31) ^ hash(self.poolType)
    value = (value * 31) ^ hash(self.customer)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapSyncJobStatusInfo(object):
  """
  Attributes:
   - jobId
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
  )

  def __init__(self, jobId=None, status=None,):
    self.jobId = jobId
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapSyncJobStatusInfo')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapSyncCertifyResult(object):
  """
  Attributes:
   - certifyId
   - status
   - poolId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'certifyId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.STRING, 'poolId', None, None, ), # 3
  )

  def __init__(self, certifyId=None, status=None, poolId=None,):
    self.certifyId = certifyId
    self.status = status
    self.poolId = poolId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.certifyId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.poolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapSyncCertifyResult')
    if self.certifyId is not None:
      oprot.writeFieldBegin('certifyId', TType.STRING, 1)
      oprot.writeString(self.certifyId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.STRING, 3)
      oprot.writeString(self.poolId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.certifyId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.poolId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAppJobReportInfo(object):
  """
  Attributes:
   - user
   - jobId
   - jobClusterId
   - jobAppType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user', None, None, ), # 1
    (2, TType.STRING, 'jobId', None, None, ), # 2
    (3, TType.STRING, 'jobClusterId', None, None, ), # 3
    (4, TType.I32, 'jobAppType', None, None, ), # 4
  )

  def __init__(self, user=None, jobId=None, jobClusterId=None, jobAppType=None,):
    self.user = user
    self.jobId = jobId
    self.jobClusterId = jobClusterId
    self.jobAppType = jobAppType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobClusterId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.jobAppType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAppJobReportInfo')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 1)
      oprot.writeString(self.user.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 2)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobClusterId is not None:
      oprot.writeFieldBegin('jobClusterId', TType.STRING, 3)
      oprot.writeString(self.jobClusterId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobAppType is not None:
      oprot.writeFieldBegin('jobAppType', TType.I32, 4)
      oprot.writeI32(self.jobAppType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobClusterId)
    value = (value * 31) ^ hash(self.jobAppType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapSyncAppJobReverseExtra(object):
  """
  Attributes:
   - appJobId
   - appJobReverseId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appJobId', None, None, ), # 1
    (2, TType.STRING, 'appJobReverseId', None, None, ), # 2
  )

  def __init__(self, appJobId=None, appJobReverseId=None,):
    self.appJobId = appJobId
    self.appJobReverseId = appJobReverseId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appJobReverseId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapSyncAppJobReverseExtra')
    if self.appJobId is not None:
      oprot.writeFieldBegin('appJobId', TType.STRING, 1)
      oprot.writeString(self.appJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.appJobReverseId is not None:
      oprot.writeFieldBegin('appJobReverseId', TType.STRING, 2)
      oprot.writeString(self.appJobReverseId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appJobId)
    value = (value * 31) ^ hash(self.appJobReverseId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncSnapSyncJobCountInfo(object):
  """
  Attributes:
   - stopped
   - abnormal
   - running
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'stopped', None, None, ), # 1
    (2, TType.I32, 'abnormal', None, None, ), # 2
    (3, TType.I32, 'running', None, None, ), # 3
  )

  def __init__(self, stopped=None, abnormal=None, running=None,):
    self.stopped = stopped
    self.abnormal = abnormal
    self.running = running

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.stopped = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.abnormal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.running = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncSnapSyncJobCountInfo')
    if self.stopped is not None:
      oprot.writeFieldBegin('stopped', TType.I32, 1)
      oprot.writeI32(self.stopped)
      oprot.writeFieldEnd()
    if self.abnormal is not None:
      oprot.writeFieldBegin('abnormal', TType.I32, 2)
      oprot.writeI32(self.abnormal)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.I32, 3)
      oprot.writeI32(self.running)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stopped)
    value = (value * 31) ^ hash(self.abnormal)
    value = (value * 31) ^ hash(self.running)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
