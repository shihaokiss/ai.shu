# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncScheTask_Var.ttypes
import ncCommonType_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncJobInfo(object):
    """
    Attributes:
     - jobId
     - execType
     - customer
     - jobName

    """


    def __init__(self, jobId=None, execType=None, customer=None, jobName=None,):
        self.jobId = jobId
        self.execType = execType
        self.customer = customer
        self.jobName = jobName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.execType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.customer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.jobName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncJobInfo')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.execType is not None:
            oprot.writeFieldBegin('execType', TType.I32, 2)
            oprot.writeI32(self.execType)
            oprot.writeFieldEnd()
        if self.customer is not None:
            oprot.writeFieldBegin('customer', TType.STRING, 3)
            oprot.writeString(self.customer.encode('utf-8') if sys.version_info[0] == 2 else self.customer)
            oprot.writeFieldEnd()
        if self.jobName is not None:
            oprot.writeFieldBegin('jobName', TType.STRING, 4)
            oprot.writeString(self.jobName.encode('utf-8') if sys.version_info[0] == 2 else self.jobName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncStrategy(object):
    """
    Attributes:
     - id
     - name
     - type
     - duration
     - frequency
     - params
     - durationUnit
     - frequencyUnit
     - needInterval

    """


    def __init__(self, id=None, name=None, type=None, duration=None, frequency=None, params=None, durationUnit=None, frequencyUnit=None, needInterval=0,):
        self.id = id
        self.name = name
        self.type = type
        self.duration = duration
        self.frequency = frequency
        self.params = params
        self.durationUnit = durationUnit
        self.frequencyUnit = frequencyUnit
        self.needInterval = needInterval

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.duration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.frequency = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.params.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.durationUnit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.frequencyUnit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.needInterval = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncStrategy')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I64, 4)
            oprot.writeI64(self.duration)
            oprot.writeFieldEnd()
        if self.frequency is not None:
            oprot.writeFieldBegin('frequency', TType.I64, 5)
            oprot.writeI64(self.frequency)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.params))
            for iter6 in self.params:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.durationUnit is not None:
            oprot.writeFieldBegin('durationUnit', TType.I32, 7)
            oprot.writeI32(self.durationUnit)
            oprot.writeFieldEnd()
        if self.frequencyUnit is not None:
            oprot.writeFieldBegin('frequencyUnit', TType.I32, 8)
            oprot.writeI32(self.frequencyUnit)
            oprot.writeFieldEnd()
        if self.needInterval is not None:
            oprot.writeFieldBegin('needInterval', TType.I32, 9)
            oprot.writeI32(self.needInterval)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncScheExtendInfo(object):
    """
    Attributes:
     - scheDesc
     - scheCustomer

    """


    def __init__(self, scheDesc=None, scheCustomer=None,):
        self.scheDesc = scheDesc
        self.scheCustomer = scheCustomer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scheDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.scheCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncScheExtendInfo')
        if self.scheDesc is not None:
            oprot.writeFieldBegin('scheDesc', TType.STRING, 1)
            oprot.writeString(self.scheDesc.encode('utf-8') if sys.version_info[0] == 2 else self.scheDesc)
            oprot.writeFieldEnd()
        if self.scheCustomer is not None:
            oprot.writeFieldBegin('scheCustomer', TType.STRING, 2)
            oprot.writeString(self.scheCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.scheCustomer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTScheTaskResult(object):
    """
    Attributes:
     - id
     - state
     - job

    """


    def __init__(self, id=None, state=None, job=None,):
        self.id = id
        self.state = state
        self.job = job

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.job = ncJobInfo()
                    self.job.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTScheTaskResult')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.job is not None:
            oprot.writeFieldBegin('job', TType.STRUCT, 3)
            self.job.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNextSche(object):
    """
    Attributes:
     - jobId
     - svcType
     - scheCount
     - nextRunTime

    """


    def __init__(self, jobId=None, svcType=None, scheCount=None, nextRunTime=None,):
        self.jobId = jobId
        self.svcType = svcType
        self.scheCount = scheCount
        self.nextRunTime = nextRunTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.svcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.scheCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.nextRunTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNextSche')
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 1)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.svcType is not None:
            oprot.writeFieldBegin('svcType', TType.I32, 2)
            oprot.writeI32(self.svcType)
            oprot.writeFieldEnd()
        if self.scheCount is not None:
            oprot.writeFieldBegin('scheCount', TType.I64, 3)
            oprot.writeI64(self.scheCount)
            oprot.writeFieldEnd()
        if self.nextRunTime is not None:
            oprot.writeFieldBegin('nextRunTime', TType.I64, 4)
            oprot.writeI64(self.nextRunTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncNextScheResult(object):
    """
    Attributes:
     - sches

    """


    def __init__(self, sches=None,):
        self.sches = sches

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.sches = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncNextSche()
                        _elem12.read(iprot)
                        self.sches.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncNextScheResult')
        if self.sches is not None:
            oprot.writeFieldBegin('sches', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.sches))
            for iter13 in self.sches:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncScheTaskInfo(object):
    """
    Attributes:
     - id
     - state
     - job
     - beignRunTime
     - nextRunTime
     - strategy
     - extendInfo
     - slotId
     - params
     - oldId

    """


    def __init__(self, id=None, state=1, job=None, beignRunTime=None, nextRunTime=None, strategy=None, extendInfo=None, slotId=None, params=None, oldId=None,):
        self.id = id
        self.state = state
        self.job = job
        self.beignRunTime = beignRunTime
        self.nextRunTime = nextRunTime
        self.strategy = strategy
        self.extendInfo = extendInfo
        self.slotId = slotId
        self.params = params
        self.oldId = oldId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.job = ncJobInfo()
                    self.job.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.beignRunTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.nextRunTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.strategy = ncStrategy()
                    self.strategy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.extendInfo = ncScheExtendInfo()
                    self.extendInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.slotId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.params = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.oldId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncScheTaskInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.job is not None:
            oprot.writeFieldBegin('job', TType.STRUCT, 3)
            self.job.write(oprot)
            oprot.writeFieldEnd()
        if self.beignRunTime is not None:
            oprot.writeFieldBegin('beignRunTime', TType.I64, 4)
            oprot.writeI64(self.beignRunTime)
            oprot.writeFieldEnd()
        if self.nextRunTime is not None:
            oprot.writeFieldBegin('nextRunTime', TType.I64, 5)
            oprot.writeI64(self.nextRunTime)
            oprot.writeFieldEnd()
        if self.strategy is not None:
            oprot.writeFieldBegin('strategy', TType.STRUCT, 6)
            self.strategy.write(oprot)
            oprot.writeFieldEnd()
        if self.extendInfo is not None:
            oprot.writeFieldBegin('extendInfo', TType.STRUCT, 7)
            self.extendInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.slotId is not None:
            oprot.writeFieldBegin('slotId', TType.STRING, 8)
            oprot.writeString(self.slotId.encode('utf-8') if sys.version_info[0] == 2 else self.slotId)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRING, 9)
            oprot.writeString(self.params.encode('utf-8') if sys.version_info[0] == 2 else self.params)
            oprot.writeFieldEnd()
        if self.oldId is not None:
            oprot.writeFieldBegin('oldId', TType.STRING, 10)
            oprot.writeString(self.oldId.encode('utf-8') if sys.version_info[0] == 2 else self.oldId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncToolScheInfo(object):
    """
    Attributes:
     - scheObj
     - shouldSlotId
     - shouldSlotIP
     - realSlotId
     - realSlotIp

    """


    def __init__(self, scheObj=None, shouldSlotId=None, shouldSlotIP=None, realSlotId=None, realSlotIp=None,):
        self.scheObj = scheObj
        self.shouldSlotId = shouldSlotId
        self.shouldSlotIP = shouldSlotIP
        self.realSlotId = realSlotId
        self.realSlotIp = realSlotIp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.scheObj = ncScheTaskInfo()
                    self.scheObj.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shouldSlotId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.shouldSlotIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.realSlotId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.realSlotIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncToolScheInfo')
        if self.scheObj is not None:
            oprot.writeFieldBegin('scheObj', TType.STRUCT, 1)
            self.scheObj.write(oprot)
            oprot.writeFieldEnd()
        if self.shouldSlotId is not None:
            oprot.writeFieldBegin('shouldSlotId', TType.STRING, 2)
            oprot.writeString(self.shouldSlotId.encode('utf-8') if sys.version_info[0] == 2 else self.shouldSlotId)
            oprot.writeFieldEnd()
        if self.shouldSlotIP is not None:
            oprot.writeFieldBegin('shouldSlotIP', TType.STRING, 3)
            oprot.writeString(self.shouldSlotIP.encode('utf-8') if sys.version_info[0] == 2 else self.shouldSlotIP)
            oprot.writeFieldEnd()
        if self.realSlotId is not None:
            oprot.writeFieldBegin('realSlotId', TType.STRING, 4)
            oprot.writeString(self.realSlotId.encode('utf-8') if sys.version_info[0] == 2 else self.realSlotId)
            oprot.writeFieldEnd()
        if self.realSlotIp is not None:
            oprot.writeFieldBegin('realSlotIp', TType.STRING, 5)
            oprot.writeString(self.realSlotIp.encode('utf-8') if sys.version_info[0] == 2 else self.realSlotIp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncJobInfo)
ncJobInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'execType', None, None, ),  # 2
    (3, TType.STRING, 'customer', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'jobName', 'UTF8', None, ),  # 4
)
all_structs.append(ncStrategy)
ncStrategy.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I64, 'duration', None, None, ),  # 4
    (5, TType.I64, 'frequency', None, None, ),  # 5
    (6, TType.LIST, 'params', (TType.I32, None, False), None, ),  # 6
    (7, TType.I32, 'durationUnit', None, None, ),  # 7
    (8, TType.I32, 'frequencyUnit', None, None, ),  # 8
    (9, TType.I32, 'needInterval', None, 0, ),  # 9
)
all_structs.append(ncScheExtendInfo)
ncScheExtendInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scheDesc', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'scheCustomer', 'UTF8', None, ),  # 2
)
all_structs.append(ncTScheTaskResult)
ncTScheTaskResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
    (3, TType.STRUCT, 'job', [ncJobInfo, None], None, ),  # 3
)
all_structs.append(ncNextSche)
ncNextSche.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'jobId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'svcType', None, None, ),  # 2
    (3, TType.I64, 'scheCount', None, None, ),  # 3
    (4, TType.I64, 'nextRunTime', None, None, ),  # 4
)
all_structs.append(ncNextScheResult)
ncNextScheResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'sches', (TType.STRUCT, [ncNextSche, None], False), None, ),  # 1
)
all_structs.append(ncScheTaskInfo)
ncScheTaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'state', None, 1, ),  # 2
    (3, TType.STRUCT, 'job', [ncJobInfo, None], None, ),  # 3
    (4, TType.I64, 'beignRunTime', None, None, ),  # 4
    (5, TType.I64, 'nextRunTime', None, None, ),  # 5
    (6, TType.STRUCT, 'strategy', [ncStrategy, None], None, ),  # 6
    (7, TType.STRUCT, 'extendInfo', [ncScheExtendInfo, None], None, ),  # 7
    (8, TType.STRING, 'slotId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'params', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'oldId', 'UTF8', None, ),  # 10
)
all_structs.append(ncToolScheInfo)
ncToolScheInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'scheObj', [ncScheTaskInfo, None], None, ),  # 1
    (2, TType.STRING, 'shouldSlotId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'shouldSlotIP', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'realSlotId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'realSlotIp', 'UTF8', None, ),  # 5
)
fix_spec(all_structs)
del all_structs
