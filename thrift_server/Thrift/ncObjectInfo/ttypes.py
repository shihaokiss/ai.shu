#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ncCommonType_Var.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncCIDAuthFilter(object):
  NONE_FILTER = 65535
  LOCAL = 1
  SYNC = 2
  RESYNC = 4

  _VALUES_TO_NAMES = {
    65535: "NONE_FILTER",
    1: "LOCAL",
    2: "SYNC",
    4: "RESYNC",
  }

  _NAMES_TO_VALUES = {
    "NONE_FILTER": 65535,
    "LOCAL": 1,
    "SYNC": 2,
    "RESYNC": 4,
  }

class ncTimepointFilter(object):
  NONE_TP_FILTER = 0
  ALL_FULL_TP_FILTER = 1
  ALL_NEWEST_FULL_TP_FILTER = 2
  NEWEST_TP_FILTER = 3
  NEWEST_FULL_TP_FILTER = 4

  _VALUES_TO_NAMES = {
    0: "NONE_TP_FILTER",
    1: "ALL_FULL_TP_FILTER",
    2: "ALL_NEWEST_FULL_TP_FILTER",
    3: "NEWEST_TP_FILTER",
    4: "NEWEST_FULL_TP_FILTER",
  }

  _NAMES_TO_VALUES = {
    "NONE_TP_FILTER": 0,
    "ALL_FULL_TP_FILTER": 1,
    "ALL_NEWEST_FULL_TP_FILTER": 2,
    "NEWEST_TP_FILTER": 3,
    "NEWEST_FULL_TP_FILTER": 4,
  }


class ncGNSObjectSetRequest(object):
  """
  获取指定GNS对象集请求信息

  Attributes:
   - requestId
   - gnsPaths
   - engineType
   - needMetadata
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.LIST, 'gnsPaths', (TType.STRING,None), None, ), # 2
    (3, TType.BOOL, 'needMetadata', None, None, ), # 3
    (4, TType.I32, 'engineType', None, None, ), # 4
  )

  def __init__(self, requestId=None, gnsPaths=None, engineType=None, needMetadata=None,):
    self.requestId = requestId
    self.gnsPaths = gnsPaths
    self.engineType = engineType
    self.needMetadata = needMetadata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.gnsPaths = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.gnsPaths.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.needMetadata = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGNSObjectSetRequest')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPaths is not None:
      oprot.writeFieldBegin('gnsPaths', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.gnsPaths))
      for iter6 in self.gnsPaths:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.needMetadata is not None:
      oprot.writeFieldBegin('needMetadata', TType.BOOL, 3)
      oprot.writeBool(self.needMetadata)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 4)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.gnsPaths)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.needMetadata)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGNSObjectRequest(object):
  """
  GNS对象请求信息

  Attributes:
   - requstId
   - gnsPath
   - index
   - count
   - engineType
   - needMetadata
   - hint
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requstId', None, None, ), # 1
    (2, TType.STRING, 'gnsPath', None, None, ), # 2
    (3, TType.I64, 'index', None, None, ), # 3
    (4, TType.I32, 'count', None, None, ), # 4
    (5, TType.I32, 'engineType', None, None, ), # 5
    (6, TType.BOOL, 'needMetadata', None, None, ), # 6
    (7, TType.STRING, 'hint', None, None, ), # 7
  )

  def __init__(self, requstId=None, gnsPath=None, index=None, count=None, engineType=None, needMetadata=None, hint=None,):
    self.requstId = requstId
    self.gnsPath = gnsPath
    self.index = index
    self.count = count
    self.engineType = engineType
    self.needMetadata = needMetadata
    self.hint = hint

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requstId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.needMetadata = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.hint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGNSObjectRequest')
    if self.requstId is not None:
      oprot.writeFieldBegin('requstId', TType.STRING, 1)
      oprot.writeString(self.requstId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 3)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 5)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    if self.needMetadata is not None:
      oprot.writeFieldBegin('needMetadata', TType.BOOL, 6)
      oprot.writeBool(self.needMetadata)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 7)
      oprot.writeString(self.hint.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requstId)
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.needMetadata)
    value = (value * 31) ^ hash(self.hint)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGNSObjectInfo(object):
  """
  GNS对象信息

  Attributes:
   - gnsPath
   - attributes
   - objectSize
   - nodeType
   - displayName
   - expandedFlag
   - displayFlag
   - checked
   - checkable
   - extAttributes
   - metadata
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gnsPath', None, None, ), # 1
    (2, TType.I32, 'attributes', None, None, ), # 2
    (3, TType.I64, 'objectSize', None, None, ), # 3
    (4, TType.I32, 'nodeType', None, None, ), # 4
    (5, TType.STRING, 'displayName', None, None, ), # 5
    (6, TType.BOOL, 'expandedFlag', None, None, ), # 6
    (7, TType.BOOL, 'displayFlag', None, None, ), # 7
    (8, TType.BOOL, 'checked', None, None, ), # 8
    (9, TType.BOOL, 'checkable', None, None, ), # 9
    (10, TType.I32, 'extAttributes', None, None, ), # 10
    (11, TType.STRING, 'metadata', None, None, ), # 11
    (12, TType.STRING, 'signature', None, None, ), # 12
  )

  def __init__(self, gnsPath=None, attributes=None, objectSize=None, nodeType=None, displayName=None, expandedFlag=None, displayFlag=None, checked=None, checkable=None, extAttributes=None, metadata=None, signature=None,):
    self.gnsPath = gnsPath
    self.attributes = attributes
    self.objectSize = objectSize
    self.nodeType = nodeType
    self.displayName = displayName
    self.expandedFlag = expandedFlag
    self.displayFlag = displayFlag
    self.checked = checked
    self.checkable = checkable
    self.extAttributes = extAttributes
    self.metadata = metadata
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.attributes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.objectSize = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nodeType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.displayName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.expandedFlag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.displayFlag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.checked = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.checkable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.extAttributes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.metadata = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.signature = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGNSObjectInfo')
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.I32, 2)
      oprot.writeI32(self.attributes)
      oprot.writeFieldEnd()
    if self.objectSize is not None:
      oprot.writeFieldBegin('objectSize', TType.I64, 3)
      oprot.writeI64(self.objectSize)
      oprot.writeFieldEnd()
    if self.nodeType is not None:
      oprot.writeFieldBegin('nodeType', TType.I32, 4)
      oprot.writeI32(self.nodeType)
      oprot.writeFieldEnd()
    if self.displayName is not None:
      oprot.writeFieldBegin('displayName', TType.STRING, 5)
      oprot.writeString(self.displayName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expandedFlag is not None:
      oprot.writeFieldBegin('expandedFlag', TType.BOOL, 6)
      oprot.writeBool(self.expandedFlag)
      oprot.writeFieldEnd()
    if self.displayFlag is not None:
      oprot.writeFieldBegin('displayFlag', TType.BOOL, 7)
      oprot.writeBool(self.displayFlag)
      oprot.writeFieldEnd()
    if self.checked is not None:
      oprot.writeFieldBegin('checked', TType.BOOL, 8)
      oprot.writeBool(self.checked)
      oprot.writeFieldEnd()
    if self.checkable is not None:
      oprot.writeFieldBegin('checkable', TType.BOOL, 9)
      oprot.writeBool(self.checkable)
      oprot.writeFieldEnd()
    if self.extAttributes is not None:
      oprot.writeFieldBegin('extAttributes', TType.I32, 10)
      oprot.writeI32(self.extAttributes)
      oprot.writeFieldEnd()
    if self.metadata is not None:
      oprot.writeFieldBegin('metadata', TType.STRING, 11)
      oprot.writeString(self.metadata)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 12)
      oprot.writeString(self.signature.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.objectSize)
    value = (value * 31) ^ hash(self.nodeType)
    value = (value * 31) ^ hash(self.displayName)
    value = (value * 31) ^ hash(self.expandedFlag)
    value = (value * 31) ^ hash(self.displayFlag)
    value = (value * 31) ^ hash(self.checked)
    value = (value * 31) ^ hash(self.checkable)
    value = (value * 31) ^ hash(self.extAttributes)
    value = (value * 31) ^ hash(self.metadata)
    value = (value * 31) ^ hash(self.signature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncGNSObjectInfoSet(object):
  """
  GNS对象信息集

  Attributes:
   - data
   - requestId
   - totalNum
   - finished
   - exist
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'data', (TType.STRUCT,(ncGNSObjectInfo, ncGNSObjectInfo.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.I32, 'totalNum', None, None, ), # 3
    (4, TType.BOOL, 'finished', None, None, ), # 4
    (5, TType.BOOL, 'exist', None, True, ), # 5
  )

  def __init__(self, data=None, requestId=None, totalNum=None, finished=None, exist=thrift_spec[5][4],):
    self.data = data
    self.requestId = requestId
    self.totalNum = totalNum
    self.finished = finished
    self.exist = exist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.data = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ncGNSObjectInfo()
            _elem12.read(iprot)
            self.data.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.exist = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncGNSObjectInfoSet')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter13 in self.data:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 3)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 4)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    if self.exist is not None:
      oprot.writeFieldBegin('exist', TType.BOOL, 5)
      oprot.writeBool(self.exist)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.finished)
    value = (value * 31) ^ hash(self.exist)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDAuthInfo(object):
  """
  Attributes:
   - user
   - clusterGuid
   - clusterIp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user', None, None, ), # 1
    (2, TType.STRING, 'clusterGuid', None, None, ), # 2
    (3, TType.STRING, 'clusterIp', None, None, ), # 3
  )

  def __init__(self, user=None, clusterGuid=None, clusterIp=None,):
    self.user = user
    self.clusterGuid = clusterGuid
    self.clusterIp = clusterIp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterGuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clusterIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDAuthInfo')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 1)
      oprot.writeString(self.user.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterGuid is not None:
      oprot.writeFieldBegin('clusterGuid', TType.STRING, 2)
      oprot.writeString(self.clusterGuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clusterIp is not None:
      oprot.writeFieldBegin('clusterIp', TType.STRING, 3)
      oprot.writeString(self.clusterIp.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.clusterGuid)
    value = (value * 31) ^ hash(self.clusterIp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectRequestEx(object):
  """
  CID对象请求信息

  Attributes:
   - requestId
   - clientId
   - syncJobId
   - authInfos
   - index
   - count
   - filterEmpty
   - hint
   - authFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRING, 'clientId', None, None, ), # 2
    (3, TType.STRING, 'syncJobId', None, None, ), # 3
    (4, TType.LIST, 'authInfos', (TType.STRUCT,(ncCIDAuthInfo, ncCIDAuthInfo.thrift_spec)), None, ), # 4
    (5, TType.I64, 'index', None, None, ), # 5
    (6, TType.I32, 'count', None, None, ), # 6
    (7, TType.BOOL, 'filterEmpty', None, True, ), # 7
    (8, TType.STRING, 'hint', None, None, ), # 8
    (9, TType.I32, 'authFilter', None, 65535, ), # 9
  )

  def __init__(self, requestId=None, clientId=None, syncJobId=None, authInfos=None, index=None, count=None, filterEmpty=thrift_spec[7][4], hint=None, authFilter=thrift_spec[9][4],):
    self.requestId = requestId
    self.clientId = clientId
    self.syncJobId = syncJobId
    self.authInfos = authInfos
    self.index = index
    self.count = count
    self.filterEmpty = filterEmpty
    self.hint = hint
    self.authFilter = authFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.syncJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.authInfos = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = ncCIDAuthInfo()
            _elem19.read(iprot)
            self.authInfos.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.filterEmpty = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.hint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.authFilter = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectRequestEx')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 2)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.syncJobId is not None:
      oprot.writeFieldBegin('syncJobId', TType.STRING, 3)
      oprot.writeString(self.syncJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.authInfos is not None:
      oprot.writeFieldBegin('authInfos', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.authInfos))
      for iter20 in self.authInfos:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 5)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 6)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.filterEmpty is not None:
      oprot.writeFieldBegin('filterEmpty', TType.BOOL, 7)
      oprot.writeBool(self.filterEmpty)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 8)
      oprot.writeString(self.hint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.authFilter is not None:
      oprot.writeFieldBegin('authFilter', TType.I32, 9)
      oprot.writeI32(self.authFilter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.syncJobId)
    value = (value * 31) ^ hash(self.authInfos)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.filterEmpty)
    value = (value * 31) ^ hash(self.hint)
    value = (value * 31) ^ hash(self.authFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectRequest(object):
  """
  CID对象请求信息

  Attributes:
   - requestId
   - clientId
   - index
   - count
   - filterEmpty
   - hint
   - gnsPath
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRING, 'clientId', None, None, ), # 2
    (3, TType.I64, 'index', None, None, ), # 3
    (4, TType.I32, 'count', None, None, ), # 4
    (5, TType.BOOL, 'filterEmpty', None, True, ), # 5
    None, # 6
    None, # 7
    (8, TType.STRING, 'hint', None, None, ), # 8
    (9, TType.STRING, 'gnsPath', None, None, ), # 9
    (10, TType.STRING, 'userName', None, None, ), # 10
  )

  def __init__(self, requestId=None, clientId=None, index=None, count=None, filterEmpty=thrift_spec[5][4], hint=None, gnsPath=None, userName=None,):
    self.requestId = requestId
    self.clientId = clientId
    self.index = index
    self.count = count
    self.filterEmpty = filterEmpty
    self.hint = hint
    self.gnsPath = gnsPath
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.filterEmpty = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.hint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectRequest')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 2)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 3)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.filterEmpty is not None:
      oprot.writeFieldBegin('filterEmpty', TType.BOOL, 5)
      oprot.writeBool(self.filterEmpty)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 8)
      oprot.writeString(self.hint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 9)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 10)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.filterEmpty)
    value = (value * 31) ^ hash(self.hint)
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectInfo(object):
  """
  CID对象信息

  Attributes:
   - gnsPath
   - jobId
   - jobName
   - jobType
   - clientId
   - clientMac
   - clientType
   - engineType
   - nodeId
   - secretKey
   - dedupPoolId
   - userName
   - sourceIp
   - orginalInfo
   - syncJobId
   - senderInfo
   - recipientInfo
   - encryptAlgo
   - compressAlgo
   - custom
   - clientName
   - osInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gnsPath', None, None, ), # 1
    (2, TType.STRING, 'jobId', None, None, ), # 2
    (3, TType.STRING, 'jobName', None, None, ), # 3
    (4, TType.STRING, 'jobType', None, None, ), # 4
    (5, TType.STRING, 'clientId', None, None, ), # 5
    (6, TType.STRING, 'clientMac', None, None, ), # 6
    (7, TType.I32, 'clientType', None, None, ), # 7
    (8, TType.I32, 'engineType', None, None, ), # 8
    (9, TType.STRING, 'nodeId', None, None, ), # 9
    (10, TType.STRING, 'secretKey', None, None, ), # 10
    (11, TType.STRING, 'dedupPoolId', None, None, ), # 11
    (12, TType.STRING, 'userName', None, None, ), # 12
    (13, TType.STRING, 'sourceIp', None, None, ), # 13
    (14, TType.STRUCT, 'orginalInfo', (ncCIDAuthInfo, ncCIDAuthInfo.thrift_spec), None, ), # 14
    (15, TType.STRING, 'syncJobId', None, None, ), # 15
    (16, TType.STRUCT, 'senderInfo', (ncCIDAuthInfo, ncCIDAuthInfo.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'recipientInfo', (ncCIDAuthInfo, ncCIDAuthInfo.thrift_spec), None, ), # 17
    (18, TType.STRING, 'encryptAlgo', None, None, ), # 18
    (19, TType.STRING, 'compressAlgo', None, None, ), # 19
    (20, TType.STRING, 'custom', None, None, ), # 20
    (21, TType.STRING, 'clientName', None, None, ), # 21
    (22, TType.STRING, 'osInfo', None, None, ), # 22
  )

  def __init__(self, gnsPath=None, jobId=None, jobName=None, jobType=None, clientId=None, clientMac=None, clientType=None, engineType=None, nodeId=None, secretKey=None, dedupPoolId=None, userName=None, sourceIp=None, orginalInfo=None, syncJobId=None, senderInfo=None, recipientInfo=None, encryptAlgo=None, compressAlgo=None, custom=None, clientName=None, osInfo=None,):
    self.gnsPath = gnsPath
    self.jobId = jobId
    self.jobName = jobName
    self.jobType = jobType
    self.clientId = clientId
    self.clientMac = clientMac
    self.clientType = clientType
    self.engineType = engineType
    self.nodeId = nodeId
    self.secretKey = secretKey
    self.dedupPoolId = dedupPoolId
    self.userName = userName
    self.sourceIp = sourceIp
    self.orginalInfo = orginalInfo
    self.syncJobId = syncJobId
    self.senderInfo = senderInfo
    self.recipientInfo = recipientInfo
    self.encryptAlgo = encryptAlgo
    self.compressAlgo = compressAlgo
    self.custom = custom
    self.clientName = clientName
    self.osInfo = osInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clientType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.secretKey = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.dedupPoolId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.sourceIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.orginalInfo = ncCIDAuthInfo()
          self.orginalInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.syncJobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.senderInfo = ncCIDAuthInfo()
          self.senderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.recipientInfo = ncCIDAuthInfo()
          self.recipientInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.encryptAlgo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.compressAlgo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.custom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.clientName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.osInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectInfo')
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 2)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 3)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 4)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 5)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 6)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientType is not None:
      oprot.writeFieldBegin('clientType', TType.I32, 7)
      oprot.writeI32(self.clientType)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 8)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 9)
      oprot.writeString(self.nodeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.secretKey is not None:
      oprot.writeFieldBegin('secretKey', TType.STRING, 10)
      oprot.writeString(self.secretKey.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dedupPoolId is not None:
      oprot.writeFieldBegin('dedupPoolId', TType.STRING, 11)
      oprot.writeString(self.dedupPoolId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 12)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceIp is not None:
      oprot.writeFieldBegin('sourceIp', TType.STRING, 13)
      oprot.writeString(self.sourceIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.orginalInfo is not None:
      oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 14)
      self.orginalInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.syncJobId is not None:
      oprot.writeFieldBegin('syncJobId', TType.STRING, 15)
      oprot.writeString(self.syncJobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.senderInfo is not None:
      oprot.writeFieldBegin('senderInfo', TType.STRUCT, 16)
      self.senderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.recipientInfo is not None:
      oprot.writeFieldBegin('recipientInfo', TType.STRUCT, 17)
      self.recipientInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.encryptAlgo is not None:
      oprot.writeFieldBegin('encryptAlgo', TType.STRING, 18)
      oprot.writeString(self.encryptAlgo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.compressAlgo is not None:
      oprot.writeFieldBegin('compressAlgo', TType.STRING, 19)
      oprot.writeString(self.compressAlgo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.custom is not None:
      oprot.writeFieldBegin('custom', TType.STRING, 20)
      oprot.writeString(self.custom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientName is not None:
      oprot.writeFieldBegin('clientName', TType.STRING, 21)
      oprot.writeString(self.clientName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osInfo is not None:
      oprot.writeFieldBegin('osInfo', TType.STRING, 22)
      oprot.writeString(self.osInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientType)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.nodeId)
    value = (value * 31) ^ hash(self.secretKey)
    value = (value * 31) ^ hash(self.dedupPoolId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.sourceIp)
    value = (value * 31) ^ hash(self.orginalInfo)
    value = (value * 31) ^ hash(self.syncJobId)
    value = (value * 31) ^ hash(self.senderInfo)
    value = (value * 31) ^ hash(self.recipientInfo)
    value = (value * 31) ^ hash(self.encryptAlgo)
    value = (value * 31) ^ hash(self.compressAlgo)
    value = (value * 31) ^ hash(self.custom)
    value = (value * 31) ^ hash(self.clientName)
    value = (value * 31) ^ hash(self.osInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTapeCIDObjectInfo(object):
  """
  磁带CID对象信息

  Attributes:
   - gnsPath
   - jobId
   - jobName
   - jobType
   - clientId
   - clientMac
   - clientType
   - engineType
   - nodeId
   - userName
   - sourceIp
   - orginalInfo
   - custom
   - clientName
   - osInfo
   - mediaSetName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gnsPath', None, None, ), # 1
    (2, TType.STRING, 'jobId', None, None, ), # 2
    (3, TType.STRING, 'jobName', None, None, ), # 3
    (4, TType.STRING, 'jobType', None, None, ), # 4
    (5, TType.STRING, 'clientId', None, None, ), # 5
    (6, TType.STRING, 'clientMac', None, None, ), # 6
    (7, TType.I32, 'clientType', None, None, ), # 7
    (8, TType.I32, 'engineType', None, None, ), # 8
    (9, TType.STRING, 'nodeId', None, None, ), # 9
    (10, TType.STRING, 'userName', None, None, ), # 10
    (11, TType.STRING, 'sourceIp', None, None, ), # 11
    (12, TType.STRUCT, 'orginalInfo', (ncCIDAuthInfo, ncCIDAuthInfo.thrift_spec), None, ), # 12
    (13, TType.STRING, 'custom', None, None, ), # 13
    (14, TType.STRING, 'clientName', None, None, ), # 14
    (15, TType.STRING, 'osInfo', None, None, ), # 15
    (16, TType.STRING, 'mediaSetName', None, None, ), # 16
  )

  def __init__(self, gnsPath=None, jobId=None, jobName=None, jobType=None, clientId=None, clientMac=None, clientType=None, engineType=None, nodeId=None, userName=None, sourceIp=None, orginalInfo=None, custom=None, clientName=None, osInfo=None, mediaSetName=None,):
    self.gnsPath = gnsPath
    self.jobId = jobId
    self.jobName = jobName
    self.jobType = jobType
    self.clientId = clientId
    self.clientMac = clientMac
    self.clientType = clientType
    self.engineType = engineType
    self.nodeId = nodeId
    self.userName = userName
    self.sourceIp = sourceIp
    self.orginalInfo = orginalInfo
    self.custom = custom
    self.clientName = clientName
    self.osInfo = osInfo
    self.mediaSetName = mediaSetName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clientType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.engineType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.sourceIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.orginalInfo = ncCIDAuthInfo()
          self.orginalInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.custom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.clientName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.osInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.mediaSetName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTapeCIDObjectInfo')
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 2)
      oprot.writeString(self.jobId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobName is not None:
      oprot.writeFieldBegin('jobName', TType.STRING, 3)
      oprot.writeString(self.jobName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 4)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 5)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 6)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientType is not None:
      oprot.writeFieldBegin('clientType', TType.I32, 7)
      oprot.writeI32(self.clientType)
      oprot.writeFieldEnd()
    if self.engineType is not None:
      oprot.writeFieldBegin('engineType', TType.I32, 8)
      oprot.writeI32(self.engineType)
      oprot.writeFieldEnd()
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 9)
      oprot.writeString(self.nodeId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 10)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sourceIp is not None:
      oprot.writeFieldBegin('sourceIp', TType.STRING, 11)
      oprot.writeString(self.sourceIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.orginalInfo is not None:
      oprot.writeFieldBegin('orginalInfo', TType.STRUCT, 12)
      self.orginalInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.custom is not None:
      oprot.writeFieldBegin('custom', TType.STRING, 13)
      oprot.writeString(self.custom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientName is not None:
      oprot.writeFieldBegin('clientName', TType.STRING, 14)
      oprot.writeString(self.clientName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.osInfo is not None:
      oprot.writeFieldBegin('osInfo', TType.STRING, 15)
      oprot.writeString(self.osInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.mediaSetName is not None:
      oprot.writeFieldBegin('mediaSetName', TType.STRING, 16)
      oprot.writeString(self.mediaSetName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.jobName)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.clientType)
    value = (value * 31) ^ hash(self.engineType)
    value = (value * 31) ^ hash(self.nodeId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.sourceIp)
    value = (value * 31) ^ hash(self.orginalInfo)
    value = (value * 31) ^ hash(self.custom)
    value = (value * 31) ^ hash(self.clientName)
    value = (value * 31) ^ hash(self.osInfo)
    value = (value * 31) ^ hash(self.mediaSetName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTapeCIDObjectInfoSet(object):
  """
  磁带CID对象信息对象集合

  Attributes:
   - data
   - requestId
   - totalNum
   - finished
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'data', (TType.STRUCT,(ncTapeCIDObjectInfo, ncTapeCIDObjectInfo.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.I32, 'totalNum', None, None, ), # 3
    (4, TType.BOOL, 'finished', None, None, ), # 4
  )

  def __init__(self, data=None, requestId=None, totalNum=None, finished=None,):
    self.data = data
    self.requestId = requestId
    self.totalNum = totalNum
    self.finished = finished

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.data = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ncTapeCIDObjectInfo()
            _elem26.read(iprot)
            self.data.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTapeCIDObjectInfoSet')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter27 in self.data:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 3)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 4)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.finished)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectInfoSet(object):
  """

  /**
   * CID对象信息对象集合

  Attributes:
   - data
   - requestId
   - totalNum
   - finished
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'data', (TType.STRUCT,(ncCIDObjectInfo, ncCIDObjectInfo.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.I32, 'totalNum', None, None, ), # 3
    (4, TType.BOOL, 'finished', None, None, ), # 4
  )

  def __init__(self, data=None, requestId=None, totalNum=None, finished=None,):
    self.data = data
    self.requestId = requestId
    self.totalNum = totalNum
    self.finished = finished

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.data = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = ncCIDObjectInfo()
            _elem33.read(iprot)
            self.data.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectInfoSet')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter34 in self.data:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 3)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 4)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.finished)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimepointRequest(object):
  """
  时间点对象请求信息
  startTime 和 endTime 用于时间段过滤 不指定时获取所有的时间点

  Attributes:
   - requestId
   - gnsPath
   - index
   - count
   - startTime
   - endTime
   - filter
   - noflying
   - needMetadata
   - hint
   - order
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.STRING, 'gnsPath', None, None, ), # 2
    (3, TType.I64, 'index', None, 0, ), # 3
    (4, TType.I32, 'count', None, 100, ), # 4
    (5, TType.I64, 'startTime', None, 0, ), # 5
    (6, TType.I64, 'endTime', None, 0, ), # 6
    (7, TType.I32, 'filter', None,     0, ), # 7
    (8, TType.BOOL, 'noflying', None, True, ), # 8
    (9, TType.BOOL, 'needMetadata', None, False, ), # 9
    (10, TType.STRING, 'hint', None, None, ), # 10
    (11, TType.BOOL, 'order', None, True, ), # 11
    (12, TType.STRING, 'userId', None, None, ), # 12
  )

  def __init__(self, requestId=None, gnsPath=None, index=thrift_spec[3][4], count=thrift_spec[4][4], startTime=thrift_spec[5][4], endTime=thrift_spec[6][4], filter=thrift_spec[7][4], noflying=thrift_spec[8][4], needMetadata=thrift_spec[9][4], hint=None, order=thrift_spec[11][4], userId=None,):
    self.requestId = requestId
    self.gnsPath = gnsPath
    self.index = index
    self.count = count
    self.startTime = startTime
    self.endTime = endTime
    self.filter = filter
    self.noflying = noflying
    self.needMetadata = needMetadata
    self.hint = hint
    self.order = order
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.index = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.startTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.endTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.filter = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.noflying = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.needMetadata = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.hint = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.order = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.userId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimepointRequest')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I64, 3)
      oprot.writeI64(self.index)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 5)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 6)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.I32, 7)
      oprot.writeI32(self.filter)
      oprot.writeFieldEnd()
    if self.noflying is not None:
      oprot.writeFieldBegin('noflying', TType.BOOL, 8)
      oprot.writeBool(self.noflying)
      oprot.writeFieldEnd()
    if self.needMetadata is not None:
      oprot.writeFieldBegin('needMetadata', TType.BOOL, 9)
      oprot.writeBool(self.needMetadata)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 10)
      oprot.writeString(self.hint.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.BOOL, 11)
      oprot.writeBool(self.order)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 12)
      oprot.writeString(self.userId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.noflying)
    value = (value * 31) ^ hash(self.needMetadata)
    value = (value * 31) ^ hash(self.hint)
    value = (value * 31) ^ hash(self.order)
    value = (value * 31) ^ hash(self.userId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimepointInfo(object):
  """
  时间点对象信息

  Attributes:
   - timepoint
   - gnsPath
   - attributes
   - backupType
   - extAttributes
   - displayFlag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'timepoint', None, None, ), # 1
    (2, TType.STRING, 'gnsPath', None, None, ), # 2
    (3, TType.I32, 'attributes', None, None, ), # 3
    (4, TType.I32, 'backupType', None, None, ), # 4
    (5, TType.I32, 'extAttributes', None, None, ), # 5
    (6, TType.BOOL, 'displayFlag', None, True, ), # 6
  )

  def __init__(self, timepoint=None, gnsPath=None, attributes=None, backupType=None, extAttributes=None, displayFlag=thrift_spec[6][4],):
    self.timepoint = timepoint
    self.gnsPath = gnsPath
    self.attributes = attributes
    self.backupType = backupType
    self.extAttributes = extAttributes
    self.displayFlag = displayFlag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.timepoint = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.attributes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.backupType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.extAttributes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.displayFlag = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimepointInfo')
    if self.timepoint is not None:
      oprot.writeFieldBegin('timepoint', TType.I64, 1)
      oprot.writeI64(self.timepoint)
      oprot.writeFieldEnd()
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 2)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.I32, 3)
      oprot.writeI32(self.attributes)
      oprot.writeFieldEnd()
    if self.backupType is not None:
      oprot.writeFieldBegin('backupType', TType.I32, 4)
      oprot.writeI32(self.backupType)
      oprot.writeFieldEnd()
    if self.extAttributes is not None:
      oprot.writeFieldBegin('extAttributes', TType.I32, 5)
      oprot.writeI32(self.extAttributes)
      oprot.writeFieldEnd()
    if self.displayFlag is not None:
      oprot.writeFieldBegin('displayFlag', TType.BOOL, 6)
      oprot.writeBool(self.displayFlag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timepoint)
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.backupType)
    value = (value * 31) ^ hash(self.extAttributes)
    value = (value * 31) ^ hash(self.displayFlag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimepointInfoSet(object):
  """
  时间点对象信息集合

  Attributes:
   - data
   - requestId
   - totalNum
   - finished
   - exist
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'data', (TType.STRUCT,(ncTimepointInfo, ncTimepointInfo.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.I32, 'totalNum', None, None, ), # 3
    (4, TType.BOOL, 'finished', None, None, ), # 4
    (5, TType.BOOL, 'exist', None, True, ), # 5
  )

  def __init__(self, data=None, requestId=None, totalNum=None, finished=None, exist=thrift_spec[5][4],):
    self.data = data
    self.requestId = requestId
    self.totalNum = totalNum
    self.finished = finished
    self.exist = exist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.data = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = ncTimepointInfo()
            _elem40.read(iprot)
            self.data.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.exist = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimepointInfoSet')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter41 in self.data:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 3)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 4)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    if self.exist is not None:
      oprot.writeFieldBegin('exist', TType.BOOL, 5)
      oprot.writeBool(self.exist)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.totalNum)
    value = (value * 31) ^ hash(self.finished)
    value = (value * 31) ^ hash(self.exist)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDeleteDataRequest(object):
  """
  删除数据操作请求

  Attributes:
   - requstId
   - gnsPaths
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requstId', None, None, ), # 1
    (2, TType.LIST, 'gnsPaths', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, requstId=None, gnsPaths=None,):
    self.requstId = requstId
    self.gnsPaths = gnsPaths

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requstId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.gnsPaths = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString().decode('utf-8')
            self.gnsPaths.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDeleteDataRequest')
    if self.requstId is not None:
      oprot.writeFieldBegin('requstId', TType.STRING, 1)
      oprot.writeString(self.requstId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gnsPaths is not None:
      oprot.writeFieldBegin('gnsPaths', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.gnsPaths))
      for iter48 in self.gnsPaths:
        oprot.writeString(iter48.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requstId)
    value = (value * 31) ^ hash(self.gnsPaths)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDeleteDataReply(object):
  """
  删除数据操作结果

  Attributes:
   - succGnsPaths
   - failGnsPaths
   - requestId
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'succGnsPaths', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'failGnsPaths', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'requestId', None, None, ), # 3
  )

  def __init__(self, succGnsPaths=None, failGnsPaths=None, requestId=None,):
    self.succGnsPaths = succGnsPaths
    self.failGnsPaths = failGnsPaths
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.succGnsPaths = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString().decode('utf-8')
            self.succGnsPaths.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.failGnsPaths = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString().decode('utf-8')
            self.failGnsPaths.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDeleteDataReply')
    if self.succGnsPaths is not None:
      oprot.writeFieldBegin('succGnsPaths', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.succGnsPaths))
      for iter61 in self.succGnsPaths:
        oprot.writeString(iter61.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.failGnsPaths is not None:
      oprot.writeFieldBegin('failGnsPaths', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.failGnsPaths))
      for iter62 in self.failGnsPaths:
        oprot.writeString(iter62.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 3)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.succGnsPaths)
    value = (value * 31) ^ hash(self.failGnsPaths)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectInfoRequest(object):
  """
  Attributes:
   - gnsPath
   - requestId
   - cid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gnsPath', None, None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.STRING, 'cid', None, None, ), # 3
  )

  def __init__(self, gnsPath=None, requestId=None, cid=None,):
    self.gnsPath = gnsPath
    self.requestId = requestId
    self.cid = cid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectInfoRequest')
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.STRING, 3)
      oprot.writeString(self.cid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.cid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCIDObjectInfoReply(object):
  """
  Attributes:
   - requestId
   - exist
   - cidInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.BOOL, 'exist', None, None, ), # 2
    (3, TType.STRUCT, 'cidInfo', (ncCIDObjectInfo, ncCIDObjectInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, requestId=None, exist=None, cidInfo=None,):
    self.requestId = requestId
    self.exist = exist
    self.cidInfo = cidInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.exist = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cidInfo = ncCIDObjectInfo()
          self.cidInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCIDObjectInfoReply')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.exist is not None:
      oprot.writeFieldBegin('exist', TType.BOOL, 2)
      oprot.writeBool(self.exist)
      oprot.writeFieldEnd()
    if self.cidInfo is not None:
      oprot.writeFieldBegin('cidInfo', TType.STRUCT, 3)
      self.cidInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.exist)
    value = (value * 31) ^ hash(self.cidInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimepointObjectInfoRequest(object):
  """
  Attributes:
   - gnsPath
   - requestId
   - cid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gnsPath', None, None, ), # 1
    (2, TType.STRING, 'requestId', None, None, ), # 2
    (3, TType.STRING, 'cid', None, None, ), # 3
  )

  def __init__(self, gnsPath=None, requestId=None, cid=None,):
    self.gnsPath = gnsPath
    self.requestId = requestId
    self.cid = cid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gnsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimepointObjectInfoRequest')
    if self.gnsPath is not None:
      oprot.writeFieldBegin('gnsPath', TType.STRING, 1)
      oprot.writeString(self.gnsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 2)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.STRING, 3)
      oprot.writeString(self.cid.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gnsPath)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.cid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncTimepointObjectInfoReply(object):
  """
  Attributes:
   - requestId
   - exist
   - tpInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestId', None, None, ), # 1
    (2, TType.BOOL, 'exist', None, None, ), # 2
    (3, TType.STRUCT, 'tpInfo', (ncTimepointInfo, ncTimepointInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, requestId=None, exist=None, tpInfo=None,):
    self.requestId = requestId
    self.exist = exist
    self.tpInfo = tpInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.exist = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.tpInfo = ncTimepointInfo()
          self.tpInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncTimepointObjectInfoReply')
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 1)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.exist is not None:
      oprot.writeFieldBegin('exist', TType.BOOL, 2)
      oprot.writeBool(self.exist)
      oprot.writeFieldEnd()
    if self.tpInfo is not None:
      oprot.writeFieldBegin('tpInfo', TType.STRUCT, 3)
      self.tpInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.exist)
    value = (value * 31) ^ hash(self.tpInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
