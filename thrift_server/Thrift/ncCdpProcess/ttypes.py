#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncCDPJobCountInfo(object):
  """
  Attributes:
   - stopped
   - abnormal
   - running
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'stopped', None, None, ), # 1
    (2, TType.I32, 'abnormal', None, None, ), # 2
    (3, TType.I32, 'running', None, None, ), # 3
  )

  def __init__(self, stopped=None, abnormal=None, running=None,):
    self.stopped = stopped
    self.abnormal = abnormal
    self.running = running

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.stopped = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.abnormal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.running = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCDPJobCountInfo')
    if self.stopped is not None:
      oprot.writeFieldBegin('stopped', TType.I32, 1)
      oprot.writeI32(self.stopped)
      oprot.writeFieldEnd()
    if self.abnormal is not None:
      oprot.writeFieldBegin('abnormal', TType.I32, 2)
      oprot.writeI32(self.abnormal)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.I32, 3)
      oprot.writeI32(self.running)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stopped)
    value = (value * 31) ^ hash(self.abnormal)
    value = (value * 31) ^ hash(self.running)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCDPJobRunningUserInfo(object):
  """
  Attributes:
   - has_backupjob_users
   - has_repljob_users
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'has_backupjob_users', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'has_repljob_users', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, has_backupjob_users=None, has_repljob_users=None,):
    self.has_backupjob_users = has_backupjob_users
    self.has_repljob_users = has_repljob_users

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.has_backupjob_users = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.has_backupjob_users.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.has_repljob_users = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.has_repljob_users.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCDPJobRunningUserInfo')
    if self.has_backupjob_users is not None:
      oprot.writeFieldBegin('has_backupjob_users', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.has_backupjob_users))
      for iter12 in self.has_backupjob_users:
        oprot.writeString(iter12.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_repljob_users is not None:
      oprot.writeFieldBegin('has_repljob_users', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.has_repljob_users))
      for iter13 in self.has_repljob_users:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_backupjob_users)
    value = (value * 31) ^ hash(self.has_repljob_users)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
