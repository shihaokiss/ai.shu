#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncHostDrMetaManageSvc import ncHostDrMetaManageSvc
from ncHostDrMetaManageSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i64 get_snapshot_end_tp(string logMountPoint, i64 snapshotTp)')
  print('   get_one_minute_ios(string logMountPoint, i64 snapshotTp, i64 iotimestamp)')
  print('  i32 system_boot_is_gpt_disk(string logMountPoint)')
  print('  void delete_snapshot_io_log(string logMountPoint,  snapTimePoints)')
  print('   get_data_source(string logMountPoint, i64 snapshotTp)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncHostDrMetaManageSvc.Client(protocol)
transport.open()

if cmd == 'get_snapshot_end_tp':
  if len(args) != 2:
    print('get_snapshot_end_tp requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_snapshot_end_tp(args[0],eval(args[1]),))

elif cmd == 'get_one_minute_ios':
  if len(args) != 3:
    print('get_one_minute_ios requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_one_minute_ios(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'system_boot_is_gpt_disk':
  if len(args) != 1:
    print('system_boot_is_gpt_disk requires 1 args')
    sys.exit(1)
  pp.pprint(client.system_boot_is_gpt_disk(args[0],))

elif cmd == 'delete_snapshot_io_log':
  if len(args) != 2:
    print('delete_snapshot_io_log requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_snapshot_io_log(args[0],eval(args[1]),))

elif cmd == 'get_data_source':
  if len(args) != 2:
    print('get_data_source requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_data_source(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
