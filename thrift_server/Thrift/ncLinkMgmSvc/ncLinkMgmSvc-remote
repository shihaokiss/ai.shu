#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncLinkMgmSvc import ncLinkMgmSvc
from ncLinkMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  ncVolumeMappingReply create_link(ncVolumeMappingRequest request)')
  print('  void delete_link(ncLinkInfo request)')
  print('  ncVolumeMappingReply update_link(ncVolumeMappingRequest request)')
  print('  ncCheckLinkReply check_link(ncLinkInfo request)')
  print('   get_fc()')
  print('  ncVolumeMappingReply create_volume_mapping(ncVolumeMappingRequest request, ncLinkMappingRequest link)')
  print('  bool get_volume_mapping(ncVolumeMappingRequest request)')
  print('  void delete_volume_mapping(ncVolumeMappingRequest request)')
  print('  string get_target_wwn(string server_ip)')
  print('  string get_target_fc_wwn_map(string host_wwn)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncLinkMgmSvc.Client(protocol)
transport.open()

if cmd == 'create_link':
  if len(args) != 1:
    print('create_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_link(eval(args[0]),))

elif cmd == 'delete_link':
  if len(args) != 1:
    print('delete_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_link(eval(args[0]),))

elif cmd == 'update_link':
  if len(args) != 1:
    print('update_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_link(eval(args[0]),))

elif cmd == 'check_link':
  if len(args) != 1:
    print('check_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_link(eval(args[0]),))

elif cmd == 'get_fc':
  if len(args) != 0:
    print('get_fc requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_fc())

elif cmd == 'create_volume_mapping':
  if len(args) != 2:
    print('create_volume_mapping requires 2 args')
    sys.exit(1)
  pp.pprint(client.create_volume_mapping(eval(args[0]),eval(args[1]),))

elif cmd == 'get_volume_mapping':
  if len(args) != 1:
    print('get_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_volume_mapping(eval(args[0]),))

elif cmd == 'delete_volume_mapping':
  if len(args) != 1:
    print('delete_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_volume_mapping(eval(args[0]),))

elif cmd == 'get_target_wwn':
  if len(args) != 1:
    print('get_target_wwn requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_target_wwn(args[0],))

elif cmd == 'get_target_fc_wwn_map':
  if len(args) != 1:
    print('get_target_fc_wwn_map requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_target_fc_wwn_map(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
