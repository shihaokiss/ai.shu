#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncDedupeMgmSvc import ncDedupeMgmSvc
from ncDedupeMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   GetDedupeNodes()')
  print('  string CreateFingerprintPool(ncFPPoolInfo poolInfo)')
  print('  void EditFingerprintPool(string guid,  nodeIPs)')
  print('   GetFingerprintPoolNodes(string guid)')
  print('  string CheckFingerprintPoolStatus(string guid)')
  print('  bool CheckFingerprintPoolNodeLibStatus(string guid, i64 nodeguid)')
  print('  bool FaultDDcache()')
  print('  void DeleteFingerprintPool(string guid)')
  print('  void CleanFingerprintPool(string guid)')
  print('  void DeleteFingerprintPoolNodeLib()')
  print('  void CleanFingerprintPoolNodeLib()')
  print('   GetAllFingerprintPools()')
  print('  void CreateDDcache(string ddcachename, string ddcachepath, i64 size)')
  print('  void DeleteDDcache(string ddcachename)')
  print('  void ExpansionDDcache(string ddcachename, i64 size)')
  print('   GetLocalAllDDcache()')
  print('   CheckDDcacheCanDelete(string ddcachename)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncDedupeMgmSvc.Client(protocol)
transport.open()

if cmd == 'GetDedupeNodes':
  if len(args) != 0:
    print('GetDedupeNodes requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetDedupeNodes())

elif cmd == 'CreateFingerprintPool':
  if len(args) != 1:
    print('CreateFingerprintPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.CreateFingerprintPool(eval(args[0]),))

elif cmd == 'EditFingerprintPool':
  if len(args) != 2:
    print('EditFingerprintPool requires 2 args')
    sys.exit(1)
  pp.pprint(client.EditFingerprintPool(args[0],eval(args[1]),))

elif cmd == 'GetFingerprintPoolNodes':
  if len(args) != 1:
    print('GetFingerprintPoolNodes requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetFingerprintPoolNodes(args[0],))

elif cmd == 'CheckFingerprintPoolStatus':
  if len(args) != 1:
    print('CheckFingerprintPoolStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.CheckFingerprintPoolStatus(args[0],))

elif cmd == 'CheckFingerprintPoolNodeLibStatus':
  if len(args) != 2:
    print('CheckFingerprintPoolNodeLibStatus requires 2 args')
    sys.exit(1)
  pp.pprint(client.CheckFingerprintPoolNodeLibStatus(args[0],eval(args[1]),))

elif cmd == 'FaultDDcache':
  if len(args) != 0:
    print('FaultDDcache requires 0 args')
    sys.exit(1)
  pp.pprint(client.FaultDDcache())

elif cmd == 'DeleteFingerprintPool':
  if len(args) != 1:
    print('DeleteFingerprintPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.DeleteFingerprintPool(args[0],))

elif cmd == 'CleanFingerprintPool':
  if len(args) != 1:
    print('CleanFingerprintPool requires 1 args')
    sys.exit(1)
  pp.pprint(client.CleanFingerprintPool(args[0],))

elif cmd == 'DeleteFingerprintPoolNodeLib':
  if len(args) != 0:
    print('DeleteFingerprintPoolNodeLib requires 0 args')
    sys.exit(1)
  pp.pprint(client.DeleteFingerprintPoolNodeLib())

elif cmd == 'CleanFingerprintPoolNodeLib':
  if len(args) != 0:
    print('CleanFingerprintPoolNodeLib requires 0 args')
    sys.exit(1)
  pp.pprint(client.CleanFingerprintPoolNodeLib())

elif cmd == 'GetAllFingerprintPools':
  if len(args) != 0:
    print('GetAllFingerprintPools requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetAllFingerprintPools())

elif cmd == 'CreateDDcache':
  if len(args) != 3:
    print('CreateDDcache requires 3 args')
    sys.exit(1)
  pp.pprint(client.CreateDDcache(args[0],args[1],eval(args[2]),))

elif cmd == 'DeleteDDcache':
  if len(args) != 1:
    print('DeleteDDcache requires 1 args')
    sys.exit(1)
  pp.pprint(client.DeleteDDcache(args[0],))

elif cmd == 'ExpansionDDcache':
  if len(args) != 2:
    print('ExpansionDDcache requires 2 args')
    sys.exit(1)
  pp.pprint(client.ExpansionDDcache(args[0],eval(args[1]),))

elif cmd == 'GetLocalAllDDcache':
  if len(args) != 0:
    print('GetLocalAllDDcache requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetLocalAllDDcache())

elif cmd == 'CheckDDcacheCanDelete':
  if len(args) != 1:
    print('CheckDDcacheCanDelete requires 1 args')
    sys.exit(1)
  pp.pprint(client.CheckDDcacheCanDelete(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
