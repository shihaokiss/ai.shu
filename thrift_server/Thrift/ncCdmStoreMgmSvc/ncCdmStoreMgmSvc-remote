#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncCdmStoreMgmSvc import ncCdmStoreMgmSvc
from ncCdmStoreMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void Microprobe()')
  print('  ncGetVolumeInfo get_volume(string volume_name, i32 volume_type)')
  print('  ncGetVolumeInfo get_volume_by_id(string volume_id, i32 volume_type)')
  print('  ncTPool get_pool(string poolId, i32 poolType)')
  print('   get_pools(ncPoolType poolType)')
  print('  ncVolumeInfo create_base_volume(ncCreateBaseVolumeRequest request)')
  print('  void delete_base_volumes( baseVolumeIds, i32 poolType)')
  print('  ncVolumeSpace get_base_volume_space(string baseVolumeId, i32 poolType)')
  print('  ncSnapVolumeDetail create_snap_volume(string baseVolumeId, i32 poolType)')
  print('  void delete_snap_volumes( snapVolumeIds, i32 poolType)')
  print('  ncVolumeSpace get_snap_volume_space(string snapVolumeId, i32 poolType)')
  print('  ncVolumeInfo create_clone_volume(string snapVolumeId, i32 poolType)')
  print('  void delete_clone_volumes( cloneVolumeIds, i32 poolType)')
  print('  ncVolumeSpace get_clone_volume_space(string cloneVolumeId, i32 poolType)')
  print('  ncVolumeMapInfo create_volume_mapping(ncCreateVolumeMappingRequest request)')
  print('  void delete_volume_mapping(ncDeleteVolumeMappingRequest request)')
  print('  void async_create_volume_mappings( requests, string jobId)')
  print('  ncQueryCreateMappingResponse query_create_volume_mappings(ncQueryMappingRequest request)')
  print('  void async_delete_volume_mappings( requests, string jobId)')
  print('  ncQueryDelMappingResponse query_delete_volume_mappings(ncQueryMappingRequest request)')
  print('   get_volume_mappings(ncGetVolumeMappingRequest request)')
  print('  string get_target_wwn(string deviceIp, i32 poolType, string poolId)')
  print('   get_all_target_wwn(i32 poolType, string poolId, string linkId)')
  print('  i32 get_m_disk(string path, i32 poolType, string nodeIp)')
  print('  string get_data_for_ams(string kwargs)')
  print('  ncVolumeInfo get_base_volume_info_by_clone_volume_id(string clone_volume_id, i32 poolType)')
  print('  ncVolumeInfo get_base_volume_info_by_snap_volume_id(string snap_volume_id, i32 poolType)')
  print('  ncTPool get_binding_pool_by_snap_volume_id(string snap_volume_id, i32 poolType)')
  print('   get_all_base_volume_ids(i32 poolType)')
  print('   get_all_clone_volume_ids(i32 poolType)')
  print('  i64 get_all_spaces_by_volumes( jobVolumeRequestList, i32 poolType)')
  print('  i64 get_spaces_by_base_volume_id( BaseVolumeIdList, i32 poolType)')
  print('  i64 get_all_spaces( jobVolumeRequestList, i32 poolType)')
  print('   get_all_snap_volume_ids(i32 poolType)')
  print('  void notify_space_monitor()')
  print('  string get_node_ip_by_volume_id(string volumeId, i32 poolType)')
  print('  string get_server_ip_by_pool_id(string poolId, i32 poolType)')
  print('  ncSnapshotVolumeSyncReply snapshot_volume_sync(ncSnapshotVolumeSyncRequest request)')
  print('  void stop_snapshot_volume_sync(string snapshotVolumeSyncId, string srcSnapshotPoolId)')
  print('  ncSyncSnapVolumeProgress get_snapshot_volume_sync_status(string snapshotVolumeSyncId, string srcSnapshotPoolId)')
  print('  string finish_snapshot_volume_sync(ncSnapshotVolumeSyncRequest request)')
  print('  string finish_snyc_work(ncSnapVolumeDetail request)')
  print('  string get_data_ip_by_pool_id(string poolId, i32 poolType)')
  print('  ncLinkInfo get_link_info(string linkId)')
  print('   select_link(ncSelectLinkRequest request, i32 num)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncCdmStoreMgmSvc.Client(protocol)
transport.open()

if cmd == 'Microprobe':
  if len(args) != 0:
    print('Microprobe requires 0 args')
    sys.exit(1)
  pp.pprint(client.Microprobe())

elif cmd == 'get_volume':
  if len(args) != 2:
    print('get_volume requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_volume(args[0],eval(args[1]),))

elif cmd == 'get_volume_by_id':
  if len(args) != 2:
    print('get_volume_by_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_volume_by_id(args[0],eval(args[1]),))

elif cmd == 'get_pool':
  if len(args) != 2:
    print('get_pool requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_pool(args[0],eval(args[1]),))

elif cmd == 'get_pools':
  if len(args) != 1:
    print('get_pools requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_pools(eval(args[0]),))

elif cmd == 'create_base_volume':
  if len(args) != 1:
    print('create_base_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_base_volume(eval(args[0]),))

elif cmd == 'delete_base_volumes':
  if len(args) != 2:
    print('delete_base_volumes requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_base_volumes(eval(args[0]),eval(args[1]),))

elif cmd == 'get_base_volume_space':
  if len(args) != 2:
    print('get_base_volume_space requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_base_volume_space(args[0],eval(args[1]),))

elif cmd == 'create_snap_volume':
  if len(args) != 2:
    print('create_snap_volume requires 2 args')
    sys.exit(1)
  pp.pprint(client.create_snap_volume(args[0],eval(args[1]),))

elif cmd == 'delete_snap_volumes':
  if len(args) != 2:
    print('delete_snap_volumes requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_snap_volumes(eval(args[0]),eval(args[1]),))

elif cmd == 'get_snap_volume_space':
  if len(args) != 2:
    print('get_snap_volume_space requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_snap_volume_space(args[0],eval(args[1]),))

elif cmd == 'create_clone_volume':
  if len(args) != 2:
    print('create_clone_volume requires 2 args')
    sys.exit(1)
  pp.pprint(client.create_clone_volume(args[0],eval(args[1]),))

elif cmd == 'delete_clone_volumes':
  if len(args) != 2:
    print('delete_clone_volumes requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_clone_volumes(eval(args[0]),eval(args[1]),))

elif cmd == 'get_clone_volume_space':
  if len(args) != 2:
    print('get_clone_volume_space requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_clone_volume_space(args[0],eval(args[1]),))

elif cmd == 'create_volume_mapping':
  if len(args) != 1:
    print('create_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_volume_mapping(eval(args[0]),))

elif cmd == 'delete_volume_mapping':
  if len(args) != 1:
    print('delete_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_volume_mapping(eval(args[0]),))

elif cmd == 'async_create_volume_mappings':
  if len(args) != 2:
    print('async_create_volume_mappings requires 2 args')
    sys.exit(1)
  pp.pprint(client.async_create_volume_mappings(eval(args[0]),args[1],))

elif cmd == 'query_create_volume_mappings':
  if len(args) != 1:
    print('query_create_volume_mappings requires 1 args')
    sys.exit(1)
  pp.pprint(client.query_create_volume_mappings(eval(args[0]),))

elif cmd == 'async_delete_volume_mappings':
  if len(args) != 2:
    print('async_delete_volume_mappings requires 2 args')
    sys.exit(1)
  pp.pprint(client.async_delete_volume_mappings(eval(args[0]),args[1],))

elif cmd == 'query_delete_volume_mappings':
  if len(args) != 1:
    print('query_delete_volume_mappings requires 1 args')
    sys.exit(1)
  pp.pprint(client.query_delete_volume_mappings(eval(args[0]),))

elif cmd == 'get_volume_mappings':
  if len(args) != 1:
    print('get_volume_mappings requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_volume_mappings(eval(args[0]),))

elif cmd == 'get_target_wwn':
  if len(args) != 3:
    print('get_target_wwn requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_target_wwn(args[0],eval(args[1]),args[2],))

elif cmd == 'get_all_target_wwn':
  if len(args) != 3:
    print('get_all_target_wwn requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_all_target_wwn(eval(args[0]),args[1],args[2],))

elif cmd == 'get_m_disk':
  if len(args) != 3:
    print('get_m_disk requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_m_disk(args[0],eval(args[1]),args[2],))

elif cmd == 'get_data_for_ams':
  if len(args) != 1:
    print('get_data_for_ams requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_data_for_ams(args[0],))

elif cmd == 'get_base_volume_info_by_clone_volume_id':
  if len(args) != 2:
    print('get_base_volume_info_by_clone_volume_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_base_volume_info_by_clone_volume_id(args[0],eval(args[1]),))

elif cmd == 'get_base_volume_info_by_snap_volume_id':
  if len(args) != 2:
    print('get_base_volume_info_by_snap_volume_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_base_volume_info_by_snap_volume_id(args[0],eval(args[1]),))

elif cmd == 'get_binding_pool_by_snap_volume_id':
  if len(args) != 2:
    print('get_binding_pool_by_snap_volume_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_binding_pool_by_snap_volume_id(args[0],eval(args[1]),))

elif cmd == 'get_all_base_volume_ids':
  if len(args) != 1:
    print('get_all_base_volume_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_all_base_volume_ids(eval(args[0]),))

elif cmd == 'get_all_clone_volume_ids':
  if len(args) != 1:
    print('get_all_clone_volume_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_all_clone_volume_ids(eval(args[0]),))

elif cmd == 'get_all_spaces_by_volumes':
  if len(args) != 2:
    print('get_all_spaces_by_volumes requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_all_spaces_by_volumes(eval(args[0]),eval(args[1]),))

elif cmd == 'get_spaces_by_base_volume_id':
  if len(args) != 2:
    print('get_spaces_by_base_volume_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_spaces_by_base_volume_id(eval(args[0]),eval(args[1]),))

elif cmd == 'get_all_spaces':
  if len(args) != 2:
    print('get_all_spaces requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_all_spaces(eval(args[0]),eval(args[1]),))

elif cmd == 'get_all_snap_volume_ids':
  if len(args) != 1:
    print('get_all_snap_volume_ids requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_all_snap_volume_ids(eval(args[0]),))

elif cmd == 'notify_space_monitor':
  if len(args) != 0:
    print('notify_space_monitor requires 0 args')
    sys.exit(1)
  pp.pprint(client.notify_space_monitor())

elif cmd == 'get_node_ip_by_volume_id':
  if len(args) != 2:
    print('get_node_ip_by_volume_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_node_ip_by_volume_id(args[0],eval(args[1]),))

elif cmd == 'get_server_ip_by_pool_id':
  if len(args) != 2:
    print('get_server_ip_by_pool_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_server_ip_by_pool_id(args[0],eval(args[1]),))

elif cmd == 'snapshot_volume_sync':
  if len(args) != 1:
    print('snapshot_volume_sync requires 1 args')
    sys.exit(1)
  pp.pprint(client.snapshot_volume_sync(eval(args[0]),))

elif cmd == 'stop_snapshot_volume_sync':
  if len(args) != 2:
    print('stop_snapshot_volume_sync requires 2 args')
    sys.exit(1)
  pp.pprint(client.stop_snapshot_volume_sync(args[0],args[1],))

elif cmd == 'get_snapshot_volume_sync_status':
  if len(args) != 2:
    print('get_snapshot_volume_sync_status requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_snapshot_volume_sync_status(args[0],args[1],))

elif cmd == 'finish_snapshot_volume_sync':
  if len(args) != 1:
    print('finish_snapshot_volume_sync requires 1 args')
    sys.exit(1)
  pp.pprint(client.finish_snapshot_volume_sync(eval(args[0]),))

elif cmd == 'finish_snyc_work':
  if len(args) != 1:
    print('finish_snyc_work requires 1 args')
    sys.exit(1)
  pp.pprint(client.finish_snyc_work(eval(args[0]),))

elif cmd == 'get_data_ip_by_pool_id':
  if len(args) != 2:
    print('get_data_ip_by_pool_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_data_ip_by_pool_id(args[0],eval(args[1]),))

elif cmd == 'get_link_info':
  if len(args) != 1:
    print('get_link_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_link_info(args[0],))

elif cmd == 'select_link':
  if len(args) != 2:
    print('select_link requires 2 args')
    sys.exit(1)
  pp.pprint(client.select_link(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
