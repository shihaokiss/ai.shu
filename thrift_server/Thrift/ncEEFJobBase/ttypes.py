# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ncCommonType.ttypes
import ncCommonType_Var.ttypes
import ncEEFComm_Var.ttypes

from thrift.transport import TTransport
all_structs = []


class ncEEFBase(object):
    """
    Attributes:
     - execId
     - engineType
     - machineCode
     - ip
     - port
     - objectId
     - userName
     - jobType
     - clusterIp
     - extraParam
     - useSSL
     - proxyParam

    """


    def __init__(self, execId=None, engineType=None, machineCode=None, ip=None, port=None, objectId=None, userName=None, jobType=None, clusterIp=None, extraParam=None, useSSL=False, proxyParam=None,):
        self.execId = execId
        self.engineType = engineType
        self.machineCode = machineCode
        self.ip = ip
        self.port = port
        self.objectId = objectId
        self.userName = userName
        self.jobType = jobType
        self.clusterIp = clusterIp
        self.extraParam = extraParam
        self.useSSL = useSSL
        self.proxyParam = proxyParam

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.execId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.engineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.port = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.objectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.jobType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.clusterIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.extraParam = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.useSSL = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.proxyParam = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFBase')
        if self.execId is not None:
            oprot.writeFieldBegin('execId', TType.STRING, 1)
            oprot.writeString(self.execId.encode('utf-8') if sys.version_info[0] == 2 else self.execId)
            oprot.writeFieldEnd()
        if self.engineType is not None:
            oprot.writeFieldBegin('engineType', TType.I32, 2)
            oprot.writeI32(self.engineType)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 3)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 4)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I64, 5)
            oprot.writeI64(self.port)
            oprot.writeFieldEnd()
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.STRING, 6)
            oprot.writeString(self.objectId.encode('utf-8') if sys.version_info[0] == 2 else self.objectId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 7)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.jobType is not None:
            oprot.writeFieldBegin('jobType', TType.STRING, 8)
            oprot.writeString(self.jobType.encode('utf-8') if sys.version_info[0] == 2 else self.jobType)
            oprot.writeFieldEnd()
        if self.clusterIp is not None:
            oprot.writeFieldBegin('clusterIp', TType.STRING, 9)
            oprot.writeString(self.clusterIp.encode('utf-8') if sys.version_info[0] == 2 else self.clusterIp)
            oprot.writeFieldEnd()
        if self.extraParam is not None:
            oprot.writeFieldBegin('extraParam', TType.STRING, 10)
            oprot.writeString(self.extraParam.encode('utf-8') if sys.version_info[0] == 2 else self.extraParam)
            oprot.writeFieldEnd()
        if self.useSSL is not None:
            oprot.writeFieldBegin('useSSL', TType.BOOL, 11)
            oprot.writeBool(self.useSSL)
            oprot.writeFieldEnd()
        if self.proxyParam is not None:
            oprot.writeFieldBegin('proxyParam', TType.STRING, 12)
            oprot.writeString(self.proxyParam.encode('utf-8') if sys.version_info[0] == 2 else self.proxyParam)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.execId is None:
            raise TProtocolException(message='Required field execId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFObjectAtr(object):
    """
    Attributes:
     - objectId
     - objectName
     - objectInfo
     - objectCustomer
     - status
     - objectType
     - totalSize
     - completeSize
     - nodeName

    """


    def __init__(self, objectId=None, objectName=None, objectInfo=None, objectCustomer=None, status=None, objectType=None, totalSize=None, completeSize=None, nodeName=None,):
        self.objectId = objectId
        self.objectName = objectName
        self.objectInfo = objectInfo
        self.objectCustomer = objectCustomer
        self.status = status
        self.objectType = objectType
        self.totalSize = totalSize
        self.completeSize = completeSize
        self.nodeName = nodeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.objectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objectName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objectInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.objectCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.objectType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.completeSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nodeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFObjectAtr')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.STRING, 1)
            oprot.writeString(self.objectId.encode('utf-8') if sys.version_info[0] == 2 else self.objectId)
            oprot.writeFieldEnd()
        if self.objectName is not None:
            oprot.writeFieldBegin('objectName', TType.STRING, 2)
            oprot.writeString(self.objectName.encode('utf-8') if sys.version_info[0] == 2 else self.objectName)
            oprot.writeFieldEnd()
        if self.objectInfo is not None:
            oprot.writeFieldBegin('objectInfo', TType.STRING, 3)
            oprot.writeString(self.objectInfo.encode('utf-8') if sys.version_info[0] == 2 else self.objectInfo)
            oprot.writeFieldEnd()
        if self.objectCustomer is not None:
            oprot.writeFieldBegin('objectCustomer', TType.STRING, 4)
            oprot.writeString(self.objectCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.objectCustomer)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.objectType is not None:
            oprot.writeFieldBegin('objectType', TType.I32, 6)
            oprot.writeI32(self.objectType)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 7)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.completeSize is not None:
            oprot.writeFieldBegin('completeSize', TType.I64, 8)
            oprot.writeI64(self.completeSize)
            oprot.writeFieldEnd()
        if self.nodeName is not None:
            oprot.writeFieldBegin('nodeName', TType.STRING, 9)
            oprot.writeString(self.nodeName.encode('utf-8') if sys.version_info[0] == 2 else self.nodeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFAllObjectInfo(object):
    """
    Attributes:
     - baseInfo
     - objSet
     - finished

    """


    def __init__(self, baseInfo=None, objSet=None, finished=None,):
        self.baseInfo = baseInfo
        self.objSet = objSet
        self.finished = finished

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.objSet = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncEEFObjectAtr()
                        _elem5.read(iprot)
                        self.objSet.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFAllObjectInfo')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.objSet is not None:
            oprot.writeFieldBegin('objSet', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.objSet))
            for iter6 in self.objSet:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.finished is not None:
            oprot.writeFieldBegin('finished', TType.BOOL, 3)
            oprot.writeBool(self.finished)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFObjectInfo(object):
    """
    Attributes:
     - baseInfo
     - object

    """


    def __init__(self, baseInfo=None, object=None,):
        self.baseInfo = baseInfo
        self.object = object

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.object = ncEEFObjectAtr()
                    self.object.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFObjectInfo')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.object is not None:
            oprot.writeFieldBegin('object', TType.STRUCT, 2)
            self.object.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFTaskInfo(object):
    """
    Attributes:
     - totalSize
     - taskInfo
     - taskCustomer
     - baseInfo
     - sendSize

    """


    def __init__(self, totalSize=None, taskInfo=None, taskCustomer=None, baseInfo=None, sendSize=None,):
        self.totalSize = totalSize
        self.taskInfo = taskInfo
        self.taskCustomer = taskCustomer
        self.baseInfo = baseInfo
        self.sendSize = sendSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.taskInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskCustomer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sendSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFTaskInfo')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.taskInfo is not None:
            oprot.writeFieldBegin('taskInfo', TType.STRING, 2)
            oprot.writeString(self.taskInfo.encode('utf-8') if sys.version_info[0] == 2 else self.taskInfo)
            oprot.writeFieldEnd()
        if self.taskCustomer is not None:
            oprot.writeFieldBegin('taskCustomer', TType.STRING, 3)
            oprot.writeString(self.taskCustomer.encode('utf-8') if sys.version_info[0] == 2 else self.taskCustomer)
            oprot.writeFieldEnd()
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 4)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.sendSize is not None:
            oprot.writeFieldBegin('sendSize', TType.I64, 5)
            oprot.writeI64(self.sendSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCdmTaskCustomer(object):
    """
    Attributes:
     - id
     - name
     - dist_name
     - luns
     - config

    """


    def __init__(self, id=None, name=None, dist_name=None, luns=None, config=None,):
        self.id = id
        self.name = name
        self.dist_name = dist_name
        self.luns = luns
        self.config = config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dist_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.luns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCdmTaskCustomer')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.dist_name is not None:
            oprot.writeFieldBegin('dist_name', TType.STRING, 3)
            oprot.writeString(self.dist_name.encode('utf-8') if sys.version_info[0] == 2 else self.dist_name)
            oprot.writeFieldEnd()
        if self.luns is not None:
            oprot.writeFieldBegin('luns', TType.STRING, 4)
            oprot.writeString(self.luns.encode('utf-8') if sys.version_info[0] == 2 else self.luns)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 5)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFCdmTaskInfo(object):
    """
    Attributes:
     - totalSize
     - sendSize
     - beginTime
     - endTime
     - baseInfo
     - taskInfo
     - taskCustomer

    """


    def __init__(self, totalSize=None, sendSize=None, beginTime=None, endTime=None, baseInfo=None, taskInfo=None, taskCustomer=None,):
        self.totalSize = totalSize
        self.sendSize = sendSize
        self.beginTime = beginTime
        self.endTime = endTime
        self.baseInfo = baseInfo
        self.taskInfo = taskInfo
        self.taskCustomer = taskCustomer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sendSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.beginTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.taskInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.taskCustomer = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ncCdmTaskCustomer()
                        _elem12.read(iprot)
                        self.taskCustomer.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFCdmTaskInfo')
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I64, 1)
            oprot.writeI64(self.totalSize)
            oprot.writeFieldEnd()
        if self.sendSize is not None:
            oprot.writeFieldBegin('sendSize', TType.I64, 2)
            oprot.writeI64(self.sendSize)
            oprot.writeFieldEnd()
        if self.beginTime is not None:
            oprot.writeFieldBegin('beginTime', TType.STRING, 3)
            oprot.writeString(self.beginTime.encode('utf-8') if sys.version_info[0] == 2 else self.beginTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 4)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 5)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskInfo is not None:
            oprot.writeFieldBegin('taskInfo', TType.STRING, 6)
            oprot.writeString(self.taskInfo.encode('utf-8') if sys.version_info[0] == 2 else self.taskInfo)
            oprot.writeFieldEnd()
        if self.taskCustomer is not None:
            oprot.writeFieldBegin('taskCustomer', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.taskCustomer))
            for iter13 in self.taskCustomer:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFConnectionInfo(object):
    """
    Attributes:
     - baseInfo
     - processId
     - port

    """


    def __init__(self, baseInfo=None, processId=None, port=None,):
        self.baseInfo = baseInfo
        self.processId = processId
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.processId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFConnectionInfo')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.processId is not None:
            oprot.writeFieldBegin('processId', TType.I64, 2)
            oprot.writeI64(self.processId)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFExceCheckReply(object):
    """
    Attributes:
     - baseInfo
     - result
     - status
     - error
     - processId

    """


    def __init__(self, baseInfo=None, result=None, status=None, error=None, processId=None,):
        self.baseInfo = baseInfo
        self.result = result
        self.status = status
        self.error = error
        self.processId = processId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.processId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFExceCheckReply')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 4)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        if self.processId is not None:
            oprot.writeFieldBegin('processId', TType.I64, 5)
            oprot.writeI64(self.processId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFWatchReq(object):
    """
    Attributes:
     - request

    """


    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.request = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncEEFConnectionInfo()
                        _elem19.read(iprot)
                        self.request.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFWatchReq')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.request))
            for iter20 in self.request:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFWatchReply(object):
    """
    Attributes:
     - result

    """


    def __init__(self, result=None,):
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ncEEFExceCheckReply()
                        _elem26.read(iprot)
                        self.result.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFWatchReply')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter27 in self.result:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncExecLog(object):
    """
    Attributes:
     - logLevel
     - logInfo
     - logDetail
     - provider
     - messageId

    """


    def __init__(self, logLevel=None, logInfo=None, logDetail=None, provider=None, messageId=None,):
        self.logLevel = logLevel
        self.logInfo = logInfo
        self.logDetail = logDetail
        self.provider = provider
        self.messageId = messageId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.logLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.logInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.logDetail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.provider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncExecLog')
        if self.logLevel is not None:
            oprot.writeFieldBegin('logLevel', TType.I32, 1)
            oprot.writeI32(self.logLevel)
            oprot.writeFieldEnd()
        if self.logInfo is not None:
            oprot.writeFieldBegin('logInfo', TType.STRING, 2)
            oprot.writeString(self.logInfo.encode('utf-8') if sys.version_info[0] == 2 else self.logInfo)
            oprot.writeFieldEnd()
        if self.logDetail is not None:
            oprot.writeFieldBegin('logDetail', TType.STRING, 3)
            oprot.writeString(self.logDetail.encode('utf-8') if sys.version_info[0] == 2 else self.logDetail)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRING, 4)
            oprot.writeString(self.provider.encode('utf-8') if sys.version_info[0] == 2 else self.provider)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 5)
            oprot.writeString(self.messageId.encode('utf-8') if sys.version_info[0] == 2 else self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFMessage(object):
    """
    Attributes:
     - baseInfo
     - execLog

    """


    def __init__(self, baseInfo=None, execLog=None,):
        self.baseInfo = baseInfo
        self.execLog = execLog

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.execLog = ncExecLog()
                    self.execLog.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFMessage')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.execLog is not None:
            oprot.writeFieldBegin('execLog', TType.STRUCT, 2)
            self.execLog.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncEEFExecStatus(object):
    """
    Attributes:
     - baseInfo
     - status

    """


    def __init__(self, baseInfo=None, status=None,):
        self.baseInfo = baseInfo
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.baseInfo = ncEEFBase()
                    self.baseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncEEFExecStatus')
        if self.baseInfo is not None:
            oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
            self.baseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetClienteefSocketRequest(object):
    """
    Attributes:
     - uniqueId

    """


    def __init__(self, uniqueId=None,):
        self.uniqueId = uniqueId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uniqueId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetClienteefSocketRequest')
        if self.uniqueId is not None:
            oprot.writeFieldBegin('uniqueId', TType.STRING, 1)
            oprot.writeString(self.uniqueId.encode('utf-8') if sys.version_info[0] == 2 else self.uniqueId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.uniqueId is None:
            raise TProtocolException(message='Required field uniqueId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncGetClienteefSocketResponse(object):
    """
    Attributes:
     - isConnectted

    """


    def __init__(self, isConnectted=None,):
        self.isConnectted = isConnectted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isConnectted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncGetClienteefSocketResponse')
        if self.isConnectted is not None:
            oprot.writeFieldBegin('isConnectted', TType.BOOL, 1)
            oprot.writeBool(self.isConnectted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isConnectted is None:
            raise TProtocolException(message='Required field isConnectted is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncEEFBase)
ncEEFBase.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'execId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'engineType', None, None, ),  # 2
    (3, TType.STRING, 'machineCode', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ip', 'UTF8', None, ),  # 4
    (5, TType.I64, 'port', None, None, ),  # 5
    (6, TType.STRING, 'objectId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'userName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'jobType', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'clusterIp', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'extraParam', 'UTF8', None, ),  # 10
    (11, TType.BOOL, 'useSSL', None, False, ),  # 11
    (12, TType.STRING, 'proxyParam', 'UTF8', None, ),  # 12
)
all_structs.append(ncEEFObjectAtr)
ncEEFObjectAtr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'objectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'objectName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objectInfo', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'objectCustomer', 'UTF8', None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
    (6, TType.I32, 'objectType', None, None, ),  # 6
    (7, TType.I64, 'totalSize', None, None, ),  # 7
    (8, TType.I64, 'completeSize', None, None, ),  # 8
    (9, TType.STRING, 'nodeName', 'UTF8', None, ),  # 9
)
all_structs.append(ncEEFAllObjectInfo)
ncEEFAllObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.LIST, 'objSet', (TType.STRUCT, [ncEEFObjectAtr, None], False), None, ),  # 2
    (3, TType.BOOL, 'finished', None, None, ),  # 3
)
all_structs.append(ncEEFObjectInfo)
ncEEFObjectInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.STRUCT, 'object', [ncEEFObjectAtr, None], None, ),  # 2
)
all_structs.append(ncEEFTaskInfo)
ncEEFTaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.STRING, 'taskInfo', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'taskCustomer', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 4
    (5, TType.I64, 'sendSize', None, None, ),  # 5
)
all_structs.append(ncCdmTaskCustomer)
ncCdmTaskCustomer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'dist_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'luns', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'config', 'UTF8', None, ),  # 5
)
all_structs.append(ncEEFCdmTaskInfo)
ncEEFCdmTaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalSize', None, None, ),  # 1
    (2, TType.I64, 'sendSize', None, None, ),  # 2
    (3, TType.STRING, 'beginTime', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'endTime', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 5
    (6, TType.STRING, 'taskInfo', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'taskCustomer', (TType.STRUCT, [ncCdmTaskCustomer, None], False), None, ),  # 7
)
all_structs.append(ncEEFConnectionInfo)
ncEEFConnectionInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.I64, 'processId', None, None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
)
all_structs.append(ncEEFExceCheckReply)
ncEEFExceCheckReply.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.STRING, 'error', 'UTF8', None, ),  # 4
    (5, TType.I64, 'processId', None, None, ),  # 5
)
all_structs.append(ncEEFWatchReq)
ncEEFWatchReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'request', (TType.STRUCT, [ncEEFConnectionInfo, None], False), None, ),  # 1
)
all_structs.append(ncEEFWatchReply)
ncEEFWatchReply.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'result', (TType.STRUCT, [ncEEFExceCheckReply, None], False), None, ),  # 1
)
all_structs.append(ncExecLog)
ncExecLog.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'logLevel', None, None, ),  # 1
    (2, TType.STRING, 'logInfo', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'logDetail', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'provider', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'messageId', 'UTF8', None, ),  # 5
)
all_structs.append(ncEEFMessage)
ncEEFMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.STRUCT, 'execLog', [ncExecLog, None], None, ),  # 2
)
all_structs.append(ncEEFExecStatus)
ncEEFExecStatus.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'baseInfo', [ncEEFBase, None], None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ncGetClienteefSocketRequest)
ncGetClienteefSocketRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uniqueId', 'UTF8', None, ),  # 1
)
all_structs.append(ncGetClienteefSocketResponse)
ncGetClienteefSocketResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isConnectted', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
