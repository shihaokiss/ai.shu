#!/usr/bin/env python
#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ncStorageResMgmSvc import ncStorageResMgmSvc
from ncStorageResMgmSvc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  ncTask create_file_system(ncCreateApplicationVolumeRequest request)')
  print('  ncTask delete_file_system(ncDeleteApplicationVolumeRequest request)')
  print('  ncTask edit_file_system(ncEditApplicationVolumeRequest request)')
  print('  ncGetApplicationVolumesResponse get_application_volumes(ncGetApplicationVolumesRequest request)')
  print('  ncApplicationVolume get_application_volume(ncGetApplicationVolumeRequest request)')
  print('   get_application_volume_info(ncGetApplicationVolumeRequest request)')
  print('  ncApplicationVolume create_application_volume(ncCreateApplicationVolumeRequest request)')
  print('  void delete_application_volume(ncDeleteApplicationVolumeRequest request)')
  print('  ncApplicationVolume edit_application_volume(ncEditApplicationVolumeRequest request)')
  print('  bool migrate_file_system( request)')
  print('  bool unmount_file_system( request)')
  print('  bool check_volume_status(ncApplicationVolumeType request)')
  print('  void restart_service(string service_name)')
  print('  void put_disk(ncPutDiskRequest request)')
  print('  void post_spare(ncPostSpareDiskRequest request)')
  print('  void delete_spare(ncDeleteSpareDiskRequest request)')
  print('  ncVolumeMappingReply create_link(ncVolumeMappingRequest request)')
  print('  void delete_link(ncLinkInfo request)')
  print('  ncVolumeMappingReply update_link(ncVolumeMappingRequest request)')
  print('  bool check_mount_point(string mount_point)')
  print('   get_fc()')
  print('  ncLinkInfo get_link_info(string link_id)')
  print('   select_link(ncLinkInfo request, i32 num)')
  print('   select_fs_link(ncLinkInfo request, i32 num)')
  print('  ncVolumeMappingReply create_volume_mapping(ncVolumeMappingRequest request)')
  print('  bool get_volume_mapping(ncVolumeMappingRequest request)')
  print('  void delete_volume_mapping(ncVolumeMappingRequest request)')
  print('  string get_target_wwn(string server_ip)')
  print('  string get_fs_target_wwn(string server_ip, string pool_id)')
  print('   get_fs_all_target_wwn(string pool_id)')
  print('  string get_target_fc_wwn_map(string host_wwn)')
  print('   create_fs_volume_mapping(ncFSVolumeMappingRequest request)')
  print('   get_fs_volume_mapping(ncFSVolumeMappingRequest request)')
  print('   get_vbs_volume_mapping(ncCreateBaseVolumeRequest request)')
  print('  void delete_fs_volume_mapping(ncFSVolumeMappingRequest request)')
  print('  string get_raid_type()')
  print('   get_hardtype()')
  print('  ncRaidCard get_raidcard(string raidtype)')
  print('  string get_raidsname(string raidtype)')
  print('  void put_rebuild_raid(string raidname,  diskidlist, string raidtype, string node_id)')
  print('  void post_dedicated_spare(string raidname,  disklist, string raidtype, string node_id)')
  print('  void delete_raid_spare(string raidname, ncDeleteSpareDiskRequest request)')
  print('   get_raids_volume(string node_id, string raidtype)')
  print('  string get_raid_useable(string raid_name, string raidtype)')
  print('  bool post_raid(string raidname, i64 stripsize, i32 level,  disklist, i32 readcache, i32 writecache, string raidtype, i32 subGroup)')
  print('  void delete_raid(string raidname, string node_id, string raidtype)')
  print('  void put_raid(string raidname, i32 readcache, i32 writecache, string raidtype)')
  print('   get_raids(string raidtype, string node_id)')
  print('   get_hba_infos()')
  print('   get_pools( pool_ids)')
  print('  void create_base_volume(ncCreateVolumeRequest request)')
  print('  void delete_base_volumes(ncDeleteVolumeRequest request)')
  print('  ncVolume get_base_volume(ncGetVolumeRequest request)')
  print('  void create_snapshot_volume(ncCreateVolumeRequest request)')
  print('  void delete_snapshot_volumes(ncDeleteVolumeRequest request)')
  print('  ncVolume get_snapshot_volume(ncGetVolumeRequest request)')
  print('  void create_clone_volume(ncCreateVolumeRequest request)')
  print('  void delete_clone_volumes(ncDeleteVolumeRequest request)')
  print('  ncVolume get_clone_volume(ncGetVolumeRequest request)')
  print('  string get_fs_ip_by_pool_id(string pool_id)')
  print('   get_mount_path()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ncStorageResMgmSvc.Client(protocol)
transport.open()

if cmd == 'create_file_system':
  if len(args) != 1:
    print('create_file_system requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_file_system(eval(args[0]),))

elif cmd == 'delete_file_system':
  if len(args) != 1:
    print('delete_file_system requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_file_system(eval(args[0]),))

elif cmd == 'edit_file_system':
  if len(args) != 1:
    print('edit_file_system requires 1 args')
    sys.exit(1)
  pp.pprint(client.edit_file_system(eval(args[0]),))

elif cmd == 'get_application_volumes':
  if len(args) != 1:
    print('get_application_volumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_application_volumes(eval(args[0]),))

elif cmd == 'get_application_volume':
  if len(args) != 1:
    print('get_application_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_application_volume(eval(args[0]),))

elif cmd == 'get_application_volume_info':
  if len(args) != 1:
    print('get_application_volume_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_application_volume_info(eval(args[0]),))

elif cmd == 'create_application_volume':
  if len(args) != 1:
    print('create_application_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_application_volume(eval(args[0]),))

elif cmd == 'delete_application_volume':
  if len(args) != 1:
    print('delete_application_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_application_volume(eval(args[0]),))

elif cmd == 'edit_application_volume':
  if len(args) != 1:
    print('edit_application_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.edit_application_volume(eval(args[0]),))

elif cmd == 'migrate_file_system':
  if len(args) != 1:
    print('migrate_file_system requires 1 args')
    sys.exit(1)
  pp.pprint(client.migrate_file_system(eval(args[0]),))

elif cmd == 'unmount_file_system':
  if len(args) != 1:
    print('unmount_file_system requires 1 args')
    sys.exit(1)
  pp.pprint(client.unmount_file_system(eval(args[0]),))

elif cmd == 'check_volume_status':
  if len(args) != 1:
    print('check_volume_status requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_volume_status(eval(args[0]),))

elif cmd == 'restart_service':
  if len(args) != 1:
    print('restart_service requires 1 args')
    sys.exit(1)
  pp.pprint(client.restart_service(args[0],))

elif cmd == 'put_disk':
  if len(args) != 1:
    print('put_disk requires 1 args')
    sys.exit(1)
  pp.pprint(client.put_disk(eval(args[0]),))

elif cmd == 'post_spare':
  if len(args) != 1:
    print('post_spare requires 1 args')
    sys.exit(1)
  pp.pprint(client.post_spare(eval(args[0]),))

elif cmd == 'delete_spare':
  if len(args) != 1:
    print('delete_spare requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_spare(eval(args[0]),))

elif cmd == 'create_link':
  if len(args) != 1:
    print('create_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_link(eval(args[0]),))

elif cmd == 'delete_link':
  if len(args) != 1:
    print('delete_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_link(eval(args[0]),))

elif cmd == 'update_link':
  if len(args) != 1:
    print('update_link requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_link(eval(args[0]),))

elif cmd == 'check_mount_point':
  if len(args) != 1:
    print('check_mount_point requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_mount_point(args[0],))

elif cmd == 'get_fc':
  if len(args) != 0:
    print('get_fc requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_fc())

elif cmd == 'get_link_info':
  if len(args) != 1:
    print('get_link_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_link_info(args[0],))

elif cmd == 'select_link':
  if len(args) != 2:
    print('select_link requires 2 args')
    sys.exit(1)
  pp.pprint(client.select_link(eval(args[0]),eval(args[1]),))

elif cmd == 'select_fs_link':
  if len(args) != 2:
    print('select_fs_link requires 2 args')
    sys.exit(1)
  pp.pprint(client.select_fs_link(eval(args[0]),eval(args[1]),))

elif cmd == 'create_volume_mapping':
  if len(args) != 1:
    print('create_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_volume_mapping(eval(args[0]),))

elif cmd == 'get_volume_mapping':
  if len(args) != 1:
    print('get_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_volume_mapping(eval(args[0]),))

elif cmd == 'delete_volume_mapping':
  if len(args) != 1:
    print('delete_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_volume_mapping(eval(args[0]),))

elif cmd == 'get_target_wwn':
  if len(args) != 1:
    print('get_target_wwn requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_target_wwn(args[0],))

elif cmd == 'get_fs_target_wwn':
  if len(args) != 2:
    print('get_fs_target_wwn requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_fs_target_wwn(args[0],args[1],))

elif cmd == 'get_fs_all_target_wwn':
  if len(args) != 1:
    print('get_fs_all_target_wwn requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_fs_all_target_wwn(args[0],))

elif cmd == 'get_target_fc_wwn_map':
  if len(args) != 1:
    print('get_target_fc_wwn_map requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_target_fc_wwn_map(args[0],))

elif cmd == 'create_fs_volume_mapping':
  if len(args) != 1:
    print('create_fs_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_fs_volume_mapping(eval(args[0]),))

elif cmd == 'get_fs_volume_mapping':
  if len(args) != 1:
    print('get_fs_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_fs_volume_mapping(eval(args[0]),))

elif cmd == 'get_vbs_volume_mapping':
  if len(args) != 1:
    print('get_vbs_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_vbs_volume_mapping(eval(args[0]),))

elif cmd == 'delete_fs_volume_mapping':
  if len(args) != 1:
    print('delete_fs_volume_mapping requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_fs_volume_mapping(eval(args[0]),))

elif cmd == 'get_raid_type':
  if len(args) != 0:
    print('get_raid_type requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_raid_type())

elif cmd == 'get_hardtype':
  if len(args) != 0:
    print('get_hardtype requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_hardtype())

elif cmd == 'get_raidcard':
  if len(args) != 1:
    print('get_raidcard requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_raidcard(args[0],))

elif cmd == 'get_raidsname':
  if len(args) != 1:
    print('get_raidsname requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_raidsname(args[0],))

elif cmd == 'put_rebuild_raid':
  if len(args) != 4:
    print('put_rebuild_raid requires 4 args')
    sys.exit(1)
  pp.pprint(client.put_rebuild_raid(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'post_dedicated_spare':
  if len(args) != 4:
    print('post_dedicated_spare requires 4 args')
    sys.exit(1)
  pp.pprint(client.post_dedicated_spare(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'delete_raid_spare':
  if len(args) != 2:
    print('delete_raid_spare requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_raid_spare(args[0],eval(args[1]),))

elif cmd == 'get_raids_volume':
  if len(args) != 2:
    print('get_raids_volume requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_raids_volume(args[0],args[1],))

elif cmd == 'get_raid_useable':
  if len(args) != 2:
    print('get_raid_useable requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_raid_useable(args[0],args[1],))

elif cmd == 'post_raid':
  if len(args) != 8:
    print('post_raid requires 8 args')
    sys.exit(1)
  pp.pprint(client.post_raid(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],eval(args[7]),))

elif cmd == 'delete_raid':
  if len(args) != 3:
    print('delete_raid requires 3 args')
    sys.exit(1)
  pp.pprint(client.delete_raid(args[0],args[1],args[2],))

elif cmd == 'put_raid':
  if len(args) != 4:
    print('put_raid requires 4 args')
    sys.exit(1)
  pp.pprint(client.put_raid(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'get_raids':
  if len(args) != 2:
    print('get_raids requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_raids(args[0],args[1],))

elif cmd == 'get_hba_infos':
  if len(args) != 0:
    print('get_hba_infos requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_hba_infos())

elif cmd == 'get_pools':
  if len(args) != 1:
    print('get_pools requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_pools(eval(args[0]),))

elif cmd == 'create_base_volume':
  if len(args) != 1:
    print('create_base_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_base_volume(eval(args[0]),))

elif cmd == 'delete_base_volumes':
  if len(args) != 1:
    print('delete_base_volumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_base_volumes(eval(args[0]),))

elif cmd == 'get_base_volume':
  if len(args) != 1:
    print('get_base_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_base_volume(eval(args[0]),))

elif cmd == 'create_snapshot_volume':
  if len(args) != 1:
    print('create_snapshot_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_snapshot_volume(eval(args[0]),))

elif cmd == 'delete_snapshot_volumes':
  if len(args) != 1:
    print('delete_snapshot_volumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_snapshot_volumes(eval(args[0]),))

elif cmd == 'get_snapshot_volume':
  if len(args) != 1:
    print('get_snapshot_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_snapshot_volume(eval(args[0]),))

elif cmd == 'create_clone_volume':
  if len(args) != 1:
    print('create_clone_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.create_clone_volume(eval(args[0]),))

elif cmd == 'delete_clone_volumes':
  if len(args) != 1:
    print('delete_clone_volumes requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete_clone_volumes(eval(args[0]),))

elif cmd == 'get_clone_volume':
  if len(args) != 1:
    print('get_clone_volume requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_clone_volume(eval(args[0]),))

elif cmd == 'get_fs_ip_by_pool_id':
  if len(args) != 1:
    print('get_fs_ip_by_pool_id requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_fs_ip_by_pool_id(args[0],))

elif cmd == 'get_mount_path':
  if len(args) != 0:
    print('get_mount_path requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_mount_path())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
