#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ncVmFusionTransmitRequest(object):
  """
  Attributes:
   - serverId
   - vplatformId
   - objUrn
   - objType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'vplatformId', None, None, ), # 2
    (3, TType.STRING, 'objUrn', None, None, ), # 3
    (4, TType.I32, 'objType', None, None, ), # 4
  )

  def __init__(self, serverId=None, vplatformId=None, objUrn=None, objType=None,):
    self.serverId = serverId
    self.vplatformId = vplatformId
    self.objUrn = objUrn
    self.objType = objType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serverId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.objUrn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.objType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmFusionTransmitRequest')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.STRING, 1)
      oprot.writeString(self.serverId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objUrn is not None:
      oprot.writeFieldBegin('objUrn', TType.STRING, 3)
      oprot.writeString(self.objUrn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objType is not None:
      oprot.writeFieldBegin('objType', TType.I32, 4)
      oprot.writeI32(self.objType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serverId)
    value = (value * 31) ^ hash(self.vplatformId)
    value = (value * 31) ^ hash(self.objUrn)
    value = (value * 31) ^ hash(self.objType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVmwareTransmitRequest(object):
  """
  Attributes:
   - clientId
   - hostName
   - parentPath
   - vplatformId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRING, 'hostName', None, None, ), # 2
    (3, TType.STRING, 'parentPath', None, None, ), # 3
    (4, TType.STRING, 'vplatformId', None, None, ), # 4
  )

  def __init__(self, clientId=None, hostName=None, parentPath=None, vplatformId=None,):
    self.clientId = clientId
    self.hostName = hostName
    self.parentPath = parentPath
    self.vplatformId = vplatformId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmwareTransmitRequest')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostName is not None:
      oprot.writeFieldBegin('hostName', TType.STRING, 2)
      oprot.writeString(self.hostName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.parentPath is not None:
      oprot.writeFieldBegin('parentPath', TType.STRING, 3)
      oprot.writeString(self.parentPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 4)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.hostName)
    value = (value * 31) ^ hash(self.parentPath)
    value = (value * 31) ^ hash(self.vplatformId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncCasTransmitRequest(object):
  """
  Attributes:
   - clientIp
   - vplatformId
   - objid
   - objType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientIp', None, None, ), # 1
    (2, TType.STRING, 'vplatformId', None, None, ), # 2
    (3, TType.STRING, 'objid', None, None, ), # 3
    (4, TType.I32, 'objType', None, None, ), # 4
  )

  def __init__(self, clientIp=None, vplatformId=None, objid=None, objType=None,):
    self.clientIp = clientIp
    self.vplatformId = vplatformId
    self.objid = objid
    self.objType = objType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.objid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.objType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncCasTransmitRequest')
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 1)
      oprot.writeString(self.clientIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objid is not None:
      oprot.writeFieldBegin('objid', TType.STRING, 3)
      oprot.writeString(self.objid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objType is not None:
      oprot.writeFieldBegin('objType', TType.I32, 4)
      oprot.writeI32(self.objType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientIp)
    value = (value * 31) ^ hash(self.vplatformId)
    value = (value * 31) ^ hash(self.objid)
    value = (value * 31) ^ hash(self.objType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncIncloudTransmitRequest(object):
  """
  Attributes:
   - clientId
   - vplatformId
   - objid
   - objType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientId', None, None, ), # 1
    (2, TType.STRING, 'vplatformId', None, None, ), # 2
    (3, TType.STRING, 'objid', None, None, ), # 3
    (4, TType.I32, 'objType', None, None, ), # 4
  )

  def __init__(self, clientId=None, vplatformId=None, objid=None, objType=None,):
    self.clientId = clientId
    self.vplatformId = vplatformId
    self.objid = objid
    self.objType = objType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.objid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.objType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncIncloudTransmitRequest')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 1)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objid is not None:
      oprot.writeFieldBegin('objid', TType.STRING, 3)
      oprot.writeString(self.objid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objType is not None:
      oprot.writeFieldBegin('objType', TType.I32, 4)
      oprot.writeI32(self.objType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.vplatformId)
    value = (value * 31) ^ hash(self.objid)
    value = (value * 31) ^ hash(self.objType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncAcloudTransmitRequest(object):
  """
  Attributes:
   - clientIp
   - vplatformId
   - objid
   - objType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientIp', None, None, ), # 1
    (2, TType.STRING, 'vplatformId', None, None, ), # 2
    (3, TType.STRING, 'objid', None, None, ), # 3
    (4, TType.I32, 'objType', None, None, ), # 4
  )

  def __init__(self, clientIp=None, vplatformId=None, objid=None, objType=None,):
    self.clientIp = clientIp
    self.vplatformId = vplatformId
    self.objid = objid
    self.objType = objType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.objid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.objType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncAcloudTransmitRequest')
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 1)
      oprot.writeString(self.clientIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objid is not None:
      oprot.writeFieldBegin('objid', TType.STRING, 3)
      oprot.writeString(self.objid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.objType is not None:
      oprot.writeFieldBegin('objType', TType.I32, 4)
      oprot.writeI32(self.objType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientIp)
    value = (value * 31) ^ hash(self.vplatformId)
    value = (value * 31) ^ hash(self.objid)
    value = (value * 31) ^ hash(self.objType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
