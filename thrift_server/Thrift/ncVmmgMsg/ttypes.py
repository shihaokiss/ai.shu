# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncVmFusionTransmitRequest(object):
    """
    Attributes:
     - serverId
     - vplatformId
     - objUrn
     - objType

    """


    def __init__(self, serverId=None, vplatformId=None, objUrn=None, objType=None,):
        self.serverId = serverId
        self.vplatformId = vplatformId
        self.objUrn = objUrn
        self.objType = objType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objUrn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVmFusionTransmitRequest')
        if self.serverId is not None:
            oprot.writeFieldBegin('serverId', TType.STRING, 1)
            oprot.writeString(self.serverId.encode('utf-8') if sys.version_info[0] == 2 else self.serverId)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.objUrn is not None:
            oprot.writeFieldBegin('objUrn', TType.STRING, 3)
            oprot.writeString(self.objUrn.encode('utf-8') if sys.version_info[0] == 2 else self.objUrn)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 4)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncVmwareTransmitRequest(object):
    """
    Attributes:
     - clientId
     - hostName
     - parentPath
     - vplatformId

    """


    def __init__(self, clientId=None, hostName=None, parentPath=None, vplatformId=None,):
        self.clientId = clientId
        self.hostName = hostName
        self.parentPath = parentPath
        self.vplatformId = vplatformId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncVmwareTransmitRequest')
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 1)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.hostName is not None:
            oprot.writeFieldBegin('hostName', TType.STRING, 2)
            oprot.writeString(self.hostName.encode('utf-8') if sys.version_info[0] == 2 else self.hostName)
            oprot.writeFieldEnd()
        if self.parentPath is not None:
            oprot.writeFieldBegin('parentPath', TType.STRING, 3)
            oprot.writeString(self.parentPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentPath)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 4)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncCasTransmitRequest(object):
    """
    Attributes:
     - clientIp
     - vplatformId
     - objid
     - objType

    """


    def __init__(self, clientIp=None, vplatformId=None, objid=None, objType=None,):
        self.clientIp = clientIp
        self.vplatformId = vplatformId
        self.objid = objid
        self.objType = objType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncCasTransmitRequest')
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 1)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.objid is not None:
            oprot.writeFieldBegin('objid', TType.STRING, 3)
            oprot.writeString(self.objid.encode('utf-8') if sys.version_info[0] == 2 else self.objid)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 4)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncIncloudTransmitRequest(object):
    """
    Attributes:
     - clientId
     - vplatformId
     - objid
     - objType

    """


    def __init__(self, clientId=None, vplatformId=None, objid=None, objType=None,):
        self.clientId = clientId
        self.vplatformId = vplatformId
        self.objid = objid
        self.objType = objType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncIncloudTransmitRequest')
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 1)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.objid is not None:
            oprot.writeFieldBegin('objid', TType.STRING, 3)
            oprot.writeString(self.objid.encode('utf-8') if sys.version_info[0] == 2 else self.objid)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 4)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncAcloudTransmitRequest(object):
    """
    Attributes:
     - clientIp
     - vplatformId
     - objid
     - objType

    """


    def __init__(self, clientIp=None, vplatformId=None, objid=None, objType=None,):
        self.clientIp = clientIp
        self.vplatformId = vplatformId
        self.objid = objid
        self.objType = objType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vplatformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAcloudTransmitRequest')
        if self.clientIp is not None:
            oprot.writeFieldBegin('clientIp', TType.STRING, 1)
            oprot.writeString(self.clientIp.encode('utf-8') if sys.version_info[0] == 2 else self.clientIp)
            oprot.writeFieldEnd()
        if self.vplatformId is not None:
            oprot.writeFieldBegin('vplatformId', TType.STRING, 2)
            oprot.writeString(self.vplatformId.encode('utf-8') if sys.version_info[0] == 2 else self.vplatformId)
            oprot.writeFieldEnd()
        if self.objid is not None:
            oprot.writeFieldBegin('objid', TType.STRING, 3)
            oprot.writeString(self.objid.encode('utf-8') if sys.version_info[0] == 2 else self.objid)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 4)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncVmFusionTransmitRequest)
ncVmFusionTransmitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serverId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objUrn', 'UTF8', None, ),  # 3
    (4, TType.I32, 'objType', None, None, ),  # 4
)
all_structs.append(ncVmwareTransmitRequest)
ncVmwareTransmitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentPath', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 4
)
all_structs.append(ncCasTransmitRequest)
ncCasTransmitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'objType', None, None, ),  # 4
)
all_structs.append(ncIncloudTransmitRequest)
ncIncloudTransmitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'objType', None, None, ),  # 4
)
all_structs.append(ncAcloudTransmitRequest)
ncAcloudTransmitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vplatformId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'objType', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
