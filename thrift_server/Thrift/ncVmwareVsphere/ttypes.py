#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ncVmwareDatasourceType(object):
  NC_VMWARE_ROOT = 12000
  NC_VMWARE_ESXI = 12001
  NC_VMWARE_DC = 12002
  NC_VMWARE_DIR = 12003
  NC_VMWARE_CLU = 12004
  NC_VMWARE_HOST = 12005
  NC_VMWARE_POOL = 12006
  NC_VMWARE_VM = 12007
  NC_VMWARE_VAPP = 12008

  _VALUES_TO_NAMES = {
    12000: "NC_VMWARE_ROOT",
    12001: "NC_VMWARE_ESXI",
    12002: "NC_VMWARE_DC",
    12003: "NC_VMWARE_DIR",
    12004: "NC_VMWARE_CLU",
    12005: "NC_VMWARE_HOST",
    12006: "NC_VMWARE_POOL",
    12007: "NC_VMWARE_VM",
    12008: "NC_VMWARE_VAPP",
  }

  _NAMES_TO_VALUES = {
    "NC_VMWARE_ROOT": 12000,
    "NC_VMWARE_ESXI": 12001,
    "NC_VMWARE_DC": 12002,
    "NC_VMWARE_DIR": 12003,
    "NC_VMWARE_CLU": 12004,
    "NC_VMWARE_HOST": 12005,
    "NC_VMWARE_POOL": 12006,
    "NC_VMWARE_VM": 12007,
    "NC_VMWARE_VAPP": 12008,
  }

class ncTfVmwareObjType(object):
  NC_TF_TYPE_HOST = 12005

  _VALUES_TO_NAMES = {
    12005: "NC_TF_TYPE_HOST",
  }

  _NAMES_TO_VALUES = {
    "NC_TF_TYPE_HOST": 12005,
  }

class ncVmwarePlatformType(object):
  NC_PLATFORM_TYPE_VCENTER = 0
  NC_PLATFORM_TYPE_ESXI = 1
  NC_PLATFORM_TYPE_UNKNOW = 2

  _VALUES_TO_NAMES = {
    0: "NC_PLATFORM_TYPE_VCENTER",
    1: "NC_PLATFORM_TYPE_ESXI",
    2: "NC_PLATFORM_TYPE_UNKNOW",
  }

  _NAMES_TO_VALUES = {
    "NC_PLATFORM_TYPE_VCENTER": 0,
    "NC_PLATFORM_TYPE_ESXI": 1,
    "NC_PLATFORM_TYPE_UNKNOW": 2,
  }


class ncVcenterInfo(object):
  """
  Attributes:
   - name
   - ip
   - userName
   - pwd
   - onLine
   - clientId
   - vplatformId
   - hostname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.STRING, 'userName', None, None, ), # 3
    (4, TType.STRING, 'pwd', None, None, ), # 4
    (5, TType.BOOL, 'onLine', None, None, ), # 5
    (6, TType.STRING, 'clientId', None, None, ), # 6
    (7, TType.STRING, 'vplatformId', None, None, ), # 7
    (8, TType.STRING, 'hostname', None, None, ), # 8
  )

  def __init__(self, name=None, ip=None, userName=None, pwd=None, onLine=None, clientId=None, vplatformId=None, hostname=None,):
    self.name = name
    self.ip = ip
    self.userName = userName
    self.pwd = pwd
    self.onLine = onLine
    self.clientId = clientId
    self.vplatformId = vplatformId
    self.hostname = hostname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pwd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.onLine = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.hostname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVcenterInfo')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 3)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.pwd is not None:
      oprot.writeFieldBegin('pwd', TType.STRING, 4)
      oprot.writeString(self.pwd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.onLine is not None:
      oprot.writeFieldBegin('onLine', TType.BOOL, 5)
      oprot.writeBool(self.onLine)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 6)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 7)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 8)
      oprot.writeString(self.hostname.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.ip)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.pwd)
    value = (value * 31) ^ hash(self.onLine)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.vplatformId)
    value = (value * 31) ^ hash(self.hostname)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncvmFolderInfo(object):
  """
  Attributes:
   - parentPath
   - datacentername
   - login
   - clientId
   - vplatformId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'parentPath', None, None, ), # 1
    (2, TType.STRING, 'datacentername', None, None, ), # 2
    (3, TType.STRUCT, 'login', (ncVcenterInfo, ncVcenterInfo.thrift_spec), None, ), # 3
    (4, TType.STRING, 'clientId', None, None, ), # 4
    (5, TType.STRING, 'vplatformId', None, None, ), # 5
  )

  def __init__(self, parentPath=None, datacentername=None, login=None, clientId=None, vplatformId=None,):
    self.parentPath = parentPath
    self.datacentername = datacentername
    self.login = login
    self.clientId = clientId
    self.vplatformId = vplatformId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.parentPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.datacentername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.login = ncVcenterInfo()
          self.login.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncvmFolderInfo')
    if self.parentPath is not None:
      oprot.writeFieldBegin('parentPath', TType.STRING, 1)
      oprot.writeString(self.parentPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.datacentername is not None:
      oprot.writeFieldBegin('datacentername', TType.STRING, 2)
      oprot.writeString(self.datacentername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRUCT, 3)
      self.login.write(oprot)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 4)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 5)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.parentPath)
    value = (value * 31) ^ hash(self.datacentername)
    value = (value * 31) ^ hash(self.login)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.vplatformId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncResourcePool(object):
  """
  Attributes:
   - parentPath
   - hostname
   - login
   - clientId
   - vplatformId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'parentPath', None, None, ), # 1
    (2, TType.STRING, 'hostname', None, None, ), # 2
    (3, TType.STRUCT, 'login', (ncVcenterInfo, ncVcenterInfo.thrift_spec), None, ), # 3
    (4, TType.STRING, 'clientId', None, None, ), # 4
    (5, TType.STRING, 'vplatformId', None, None, ), # 5
  )

  def __init__(self, parentPath=None, hostname=None, login=None, clientId=None, vplatformId=None,):
    self.parentPath = parentPath
    self.hostname = hostname
    self.login = login
    self.clientId = clientId
    self.vplatformId = vplatformId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.parentPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.login = ncVcenterInfo()
          self.login.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncResourcePool')
    if self.parentPath is not None:
      oprot.writeFieldBegin('parentPath', TType.STRING, 1)
      oprot.writeString(self.parentPath.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 2)
      oprot.writeString(self.hostname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRUCT, 3)
      self.login.write(oprot)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 4)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 5)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.parentPath)
    value = (value * 31) ^ hash(self.hostname)
    value = (value * 31) ^ hash(self.login)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.vplatformId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVmObjectNameInfo(object):
  """
  Attributes:
   - hostNames
   - login
   - clientId
   - vplatformId
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hostNames', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'login', (ncVcenterInfo, ncVcenterInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'clientId', None, None, ), # 3
    (4, TType.STRING, 'vplatformId', None, None, ), # 4
  )

  def __init__(self, hostNames=None, login=None, clientId=None, vplatformId=None,):
    self.hostNames = hostNames
    self.login = login
    self.clientId = clientId
    self.vplatformId = vplatformId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hostNames = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.hostNames.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.login = ncVcenterInfo()
          self.login.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clientId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vplatformId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmObjectNameInfo')
    if self.hostNames is not None:
      oprot.writeFieldBegin('hostNames', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.hostNames))
      for iter6 in self.hostNames:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRUCT, 2)
      self.login.write(oprot)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 3)
      oprot.writeString(self.clientId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.vplatformId is not None:
      oprot.writeFieldBegin('vplatformId', TType.STRING, 4)
      oprot.writeString(self.vplatformId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hostNames)
    value = (value * 31) ^ hash(self.login)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.vplatformId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVmNetworkAdapter(object):
  """
  数据源请求结果

  Attributes:
   - vmGuid
   - networkAdapter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vmGuid', None, None, ), # 1
    (2, TType.LIST, 'networkAdapter', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, vmGuid=None, networkAdapter=None,):
    self.vmGuid = vmGuid
    self.networkAdapter = networkAdapter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.vmGuid = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.networkAdapter = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString().decode('utf-8')
            self.networkAdapter.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmNetworkAdapter')
    if self.vmGuid is not None:
      oprot.writeFieldBegin('vmGuid', TType.STRING, 1)
      oprot.writeString(self.vmGuid.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.networkAdapter is not None:
      oprot.writeFieldBegin('networkAdapter', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.networkAdapter))
      for iter13 in self.networkAdapter:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.vmGuid is None:
      raise TProtocol.TProtocolException(message='Required field vmGuid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vmGuid)
    value = (value * 31) ^ hash(self.networkAdapter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVmwareHostInfo(object):
  """
  获取单个host的信息

  Attributes:
   - displayname
   - hostIp
   - onLine
   - nodetype
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'displayname', None, None, ), # 1
    (2, TType.STRING, 'hostIp', None, None, ), # 2
    (3, TType.I32, 'onLine', None, None, ), # 3
    (4, TType.I32, 'nodetype', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
  )

  def __init__(self, displayname=None, hostIp=None, onLine=None, nodetype=None, type=None,):
    self.displayname = displayname
    self.hostIp = hostIp
    self.onLine = onLine
    self.nodetype = nodetype
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.displayname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostIp = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.onLine = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nodetype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmwareHostInfo')
    if self.displayname is not None:
      oprot.writeFieldBegin('displayname', TType.STRING, 1)
      oprot.writeString(self.displayname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostIp is not None:
      oprot.writeFieldBegin('hostIp', TType.STRING, 2)
      oprot.writeString(self.hostIp.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.onLine is not None:
      oprot.writeFieldBegin('onLine', TType.I32, 3)
      oprot.writeI32(self.onLine)
      oprot.writeFieldEnd()
    if self.nodetype is not None:
      oprot.writeFieldBegin('nodetype', TType.I32, 4)
      oprot.writeI32(self.nodetype)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.displayname)
    value = (value * 31) ^ hash(self.hostIp)
    value = (value * 31) ^ hash(self.onLine)
    value = (value * 31) ^ hash(self.nodetype)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVmwareHostInfoSet(object):
  """
  Attributes:
   - vmHostInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'vmHostInfos', (TType.STRUCT,(ncVmwareHostInfo, ncVmwareHostInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, vmHostInfos=None,):
    self.vmHostInfos = vmHostInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vmHostInfos = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = ncVmwareHostInfo()
            _elem19.read(iprot)
            self.vmHostInfos.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVmwareHostInfoSet')
    if self.vmHostInfos is not None:
      oprot.writeFieldBegin('vmHostInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.vmHostInfos))
      for iter20 in self.vmHostInfos:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vmHostInfos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncVCenterStatus(object):
  """
  获取所有vcenter的在线和离线状态


  Attributes:
   - clientMac
   - onLine
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientMac', None, None, ), # 1
    (2, TType.I32, 'onLine', None, None, ), # 2
  )

  def __init__(self, clientMac=None, onLine=None,):
    self.clientMac = clientMac
    self.onLine = onLine

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientMac = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.onLine = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncVCenterStatus')
    if self.clientMac is not None:
      oprot.writeFieldBegin('clientMac', TType.STRING, 1)
      oprot.writeString(self.clientMac.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.onLine is not None:
      oprot.writeFieldBegin('onLine', TType.I32, 2)
      oprot.writeI32(self.onLine)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientMac)
    value = (value * 31) ^ hash(self.onLine)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncString(object):
  """
  返回String消息体


  Attributes:
   - strVal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'strVal', None, None, ), # 1
  )

  def __init__(self, strVal=None,):
    self.strVal = strVal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.strVal = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncString')
    if self.strVal is not None:
      oprot.writeFieldBegin('strVal', TType.STRING, 1)
      oprot.writeString(self.strVal.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.strVal)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncStringList(object):
  """
  返回String消息体列表


  Attributes:
   - strList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'strList', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, strList=None,):
    self.strList = strList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.strList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString().decode('utf-8')
            self.strList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncStringList')
    if self.strList is not None:
      oprot.writeFieldBegin('strList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.strList))
      for iter27 in self.strList:
        oprot.writeString(iter27.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.strList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncdatastore(object):
  """
  返回存储信息

  Attributes:
   - strName
   - spacecapacity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'strName', None, None, ), # 1
    (2, TType.I64, 'spacecapacity', None, None, ), # 2
  )

  def __init__(self, strName=None, spacecapacity=None,):
    self.strName = strName
    self.spacecapacity = spacecapacity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.strName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.spacecapacity = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncdatastore')
    if self.strName is not None:
      oprot.writeFieldBegin('strName', TType.STRING, 1)
      oprot.writeString(self.strName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.spacecapacity is not None:
      oprot.writeFieldBegin('spacecapacity', TType.I64, 2)
      oprot.writeI64(self.spacecapacity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.strName)
    value = (value * 31) ^ hash(self.spacecapacity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncdatastoreList(object):
  """
  Attributes:
   - datastoreList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'datastoreList', (TType.STRUCT,(ncdatastore, ncdatastore.thrift_spec)), None, ), # 1
  )

  def __init__(self, datastoreList=None,):
    self.datastoreList = datastoreList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.datastoreList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = ncdatastore()
            _elem33.read(iprot)
            self.datastoreList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncdatastoreList')
    if self.datastoreList is not None:
      oprot.writeFieldBegin('datastoreList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.datastoreList))
      for iter34 in self.datastoreList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.datastoreList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncResource(object):
  """
  返回资源池信息


  Attributes:
   - fullname
   - displayname
   - showname
   - hostname
   - nodetype
   - checkable
   - isParent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fullname', None, None, ), # 1
    (2, TType.STRING, 'displayname', None, None, ), # 2
    (3, TType.STRING, 'showname', None, None, ), # 3
    (4, TType.STRING, 'hostname', None, None, ), # 4
    (5, TType.I32, 'nodetype', None, None, ), # 5
    (6, TType.BOOL, 'checkable', None, None, ), # 6
    (7, TType.BOOL, 'isParent', None, None, ), # 7
  )

  def __init__(self, fullname=None, displayname=None, showname=None, hostname=None, nodetype=None, checkable=None, isParent=None,):
    self.fullname = fullname
    self.displayname = displayname
    self.showname = showname
    self.hostname = hostname
    self.nodetype = nodetype
    self.checkable = checkable
    self.isParent = isParent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fullname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.displayname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.showname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hostname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.nodetype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.checkable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.isParent = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncResource')
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 1)
      oprot.writeString(self.fullname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.displayname is not None:
      oprot.writeFieldBegin('displayname', TType.STRING, 2)
      oprot.writeString(self.displayname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.showname is not None:
      oprot.writeFieldBegin('showname', TType.STRING, 3)
      oprot.writeString(self.showname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 4)
      oprot.writeString(self.hostname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodetype is not None:
      oprot.writeFieldBegin('nodetype', TType.I32, 5)
      oprot.writeI32(self.nodetype)
      oprot.writeFieldEnd()
    if self.checkable is not None:
      oprot.writeFieldBegin('checkable', TType.BOOL, 6)
      oprot.writeBool(self.checkable)
      oprot.writeFieldEnd()
    if self.isParent is not None:
      oprot.writeFieldBegin('isParent', TType.BOOL, 7)
      oprot.writeBool(self.isParent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fullname)
    value = (value * 31) ^ hash(self.displayname)
    value = (value * 31) ^ hash(self.showname)
    value = (value * 31) ^ hash(self.hostname)
    value = (value * 31) ^ hash(self.nodetype)
    value = (value * 31) ^ hash(self.checkable)
    value = (value * 31) ^ hash(self.isParent)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncResourceList(object):
  """
  Attributes:
   - resourceList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'resourceList', (TType.STRUCT,(ncResource, ncResource.thrift_spec)), None, ), # 1
  )

  def __init__(self, resourceList=None,):
    self.resourceList = resourceList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.resourceList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = ncResource()
            _elem40.read(iprot)
            self.resourceList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncResourceList')
    if self.resourceList is not None:
      oprot.writeFieldBegin('resourceList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.resourceList))
      for iter41 in self.resourceList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataCenter(object):
  """
  返回数据中心信息


  Attributes:
   - fullname
   - displayname
   - showname
   - nodetype
   - isParent
   - checkable
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fullname', None, None, ), # 1
    (2, TType.STRING, 'displayname', None, None, ), # 2
    (3, TType.STRING, 'showname', None, None, ), # 3
    (4, TType.I32, 'nodetype', None, None, ), # 4
    (5, TType.BOOL, 'isParent', None, None, ), # 5
    (6, TType.BOOL, 'checkable', None, None, ), # 6
  )

  def __init__(self, fullname=None, displayname=None, showname=None, nodetype=None, isParent=None, checkable=None,):
    self.fullname = fullname
    self.displayname = displayname
    self.showname = showname
    self.nodetype = nodetype
    self.isParent = isParent
    self.checkable = checkable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fullname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.displayname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.showname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nodetype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isParent = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.checkable = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataCenter')
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 1)
      oprot.writeString(self.fullname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.displayname is not None:
      oprot.writeFieldBegin('displayname', TType.STRING, 2)
      oprot.writeString(self.displayname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.showname is not None:
      oprot.writeFieldBegin('showname', TType.STRING, 3)
      oprot.writeString(self.showname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodetype is not None:
      oprot.writeFieldBegin('nodetype', TType.I32, 4)
      oprot.writeI32(self.nodetype)
      oprot.writeFieldEnd()
    if self.isParent is not None:
      oprot.writeFieldBegin('isParent', TType.BOOL, 5)
      oprot.writeBool(self.isParent)
      oprot.writeFieldEnd()
    if self.checkable is not None:
      oprot.writeFieldBegin('checkable', TType.BOOL, 6)
      oprot.writeBool(self.checkable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fullname)
    value = (value * 31) ^ hash(self.displayname)
    value = (value * 31) ^ hash(self.showname)
    value = (value * 31) ^ hash(self.nodetype)
    value = (value * 31) ^ hash(self.isParent)
    value = (value * 31) ^ hash(self.checkable)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncDataCenterList(object):
  """
  Attributes:
   - datacenterList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'datacenterList', (TType.STRUCT,(ncDataCenter, ncDataCenter.thrift_spec)), None, ), # 1
  )

  def __init__(self, datacenterList=None,):
    self.datacenterList = datacenterList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.datacenterList = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = ncDataCenter()
            _elem47.read(iprot)
            self.datacenterList.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncDataCenterList')
    if self.datacenterList is not None:
      oprot.writeFieldBegin('datacenterList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.datacenterList))
      for iter48 in self.datacenterList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.datacenterList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFolder(object):
  """
  返回数据中心下的文件夹


  Attributes:
   - fullname
   - displayname
   - showname
   - datacentername
   - nodetype
   - checkable
   - isParent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fullname', None, None, ), # 1
    (2, TType.STRING, 'displayname', None, None, ), # 2
    (3, TType.STRING, 'showname', None, None, ), # 3
    (4, TType.STRING, 'datacentername', None, None, ), # 4
    (5, TType.I32, 'nodetype', None, None, ), # 5
    (6, TType.BOOL, 'checkable', None, None, ), # 6
    (7, TType.BOOL, 'isParent', None, None, ), # 7
  )

  def __init__(self, fullname=None, displayname=None, showname=None, datacentername=None, nodetype=None, checkable=None, isParent=None,):
    self.fullname = fullname
    self.displayname = displayname
    self.showname = showname
    self.datacentername = datacentername
    self.nodetype = nodetype
    self.checkable = checkable
    self.isParent = isParent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fullname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.displayname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.showname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.datacentername = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.nodetype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.checkable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.isParent = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFolder')
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 1)
      oprot.writeString(self.fullname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.displayname is not None:
      oprot.writeFieldBegin('displayname', TType.STRING, 2)
      oprot.writeString(self.displayname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.showname is not None:
      oprot.writeFieldBegin('showname', TType.STRING, 3)
      oprot.writeString(self.showname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.datacentername is not None:
      oprot.writeFieldBegin('datacentername', TType.STRING, 4)
      oprot.writeString(self.datacentername.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nodetype is not None:
      oprot.writeFieldBegin('nodetype', TType.I32, 5)
      oprot.writeI32(self.nodetype)
      oprot.writeFieldEnd()
    if self.checkable is not None:
      oprot.writeFieldBegin('checkable', TType.BOOL, 6)
      oprot.writeBool(self.checkable)
      oprot.writeFieldEnd()
    if self.isParent is not None:
      oprot.writeFieldBegin('isParent', TType.BOOL, 7)
      oprot.writeBool(self.isParent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fullname)
    value = (value * 31) ^ hash(self.displayname)
    value = (value * 31) ^ hash(self.showname)
    value = (value * 31) ^ hash(self.datacentername)
    value = (value * 31) ^ hash(self.nodetype)
    value = (value * 31) ^ hash(self.checkable)
    value = (value * 31) ^ hash(self.isParent)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncFolderList(object):
  """
  Attributes:
   - folderList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'folderList', (TType.STRUCT,(ncFolder, ncFolder.thrift_spec)), None, ), # 1
  )

  def __init__(self, folderList=None,):
    self.folderList = folderList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.folderList = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = ncFolder()
            _elem54.read(iprot)
            self.folderList.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncFolderList')
    if self.folderList is not None:
      oprot.writeFieldBegin('folderList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.folderList))
      for iter55 in self.folderList:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.folderList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ncPlatformType(object):
  """
  返回虚拟化平台类型（vcenter or ESXI）


  Attributes:
   - plattype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'plattype', None, None, ), # 1
  )

  def __init__(self, plattype=None,):
    self.plattype = plattype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.plattype = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ncPlatformType')
    if self.plattype is not None:
      oprot.writeFieldBegin('plattype', TType.I32, 1)
      oprot.writeI32(self.plattype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.plattype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
