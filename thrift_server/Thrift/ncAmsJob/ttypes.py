# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ncAppType(object):
    NO_USE = 0
    ESO_BACKUPENGINE_FILEENGINE = 1
    ESO_BACKUPENGINE_SYSENGINE = 2
    ESO_BACKUPENGINE_DB2ENGINE = 3
    ESO_BACKUPENGINE_SYBASEENGINE = 4
    ESO_BACKUPENGINE_SQLSERVERENGINE = 5
    ESO_BACKUPENGINE_ORACLEENGINE = 6
    ESO_BACKUPENGINE_MYSQLENGINE = 7
    ESO_BACKUPENGINE_DMENGINE = 8
    ESO_BACKUPENGINE_GBASEENGINE = 9
    ESO_BACKUPENGINE_EXCHANGEENGINE = 10
    ESO_BACKUPENGINE_DOMINOENGINE = 12
    ESO_BACKUPENGINE_MONGOENGINE = 13
    ESO_BACKUPENGINE_VMWAREENGINE = 14
    ESO_BACKUPENGINE_HYPERVENGINE = 15
    ESO_BACKUPENGINE_FUSIONPCENGINE = 17
    ESO_BACKUPENGINE_XENSERVERENGINE = 18
    ESO_BACKUPENGINE_ASENGINE = 24
    ESO_BACKUPENGINE_CASENGINE = 25
    ESO_BACKUPENGINE_REMOTE_COPY = 29
    ESO_BACKUPENGINE_HADOOPENGINE = 37
    ESO_BACKUPENGINE_OPENSTACKENGINE = 38

    _VALUES_TO_NAMES = {
        0: "NO_USE",
        1: "ESO_BACKUPENGINE_FILEENGINE",
        2: "ESO_BACKUPENGINE_SYSENGINE",
        3: "ESO_BACKUPENGINE_DB2ENGINE",
        4: "ESO_BACKUPENGINE_SYBASEENGINE",
        5: "ESO_BACKUPENGINE_SQLSERVERENGINE",
        6: "ESO_BACKUPENGINE_ORACLEENGINE",
        7: "ESO_BACKUPENGINE_MYSQLENGINE",
        8: "ESO_BACKUPENGINE_DMENGINE",
        9: "ESO_BACKUPENGINE_GBASEENGINE",
        10: "ESO_BACKUPENGINE_EXCHANGEENGINE",
        12: "ESO_BACKUPENGINE_DOMINOENGINE",
        13: "ESO_BACKUPENGINE_MONGOENGINE",
        14: "ESO_BACKUPENGINE_VMWAREENGINE",
        15: "ESO_BACKUPENGINE_HYPERVENGINE",
        17: "ESO_BACKUPENGINE_FUSIONPCENGINE",
        18: "ESO_BACKUPENGINE_XENSERVERENGINE",
        24: "ESO_BACKUPENGINE_ASENGINE",
        25: "ESO_BACKUPENGINE_CASENGINE",
        29: "ESO_BACKUPENGINE_REMOTE_COPY",
        37: "ESO_BACKUPENGINE_HADOOPENGINE",
        38: "ESO_BACKUPENGINE_OPENSTACKENGINE",
    }

    _NAMES_TO_VALUES = {
        "NO_USE": 0,
        "ESO_BACKUPENGINE_FILEENGINE": 1,
        "ESO_BACKUPENGINE_SYSENGINE": 2,
        "ESO_BACKUPENGINE_DB2ENGINE": 3,
        "ESO_BACKUPENGINE_SYBASEENGINE": 4,
        "ESO_BACKUPENGINE_SQLSERVERENGINE": 5,
        "ESO_BACKUPENGINE_ORACLEENGINE": 6,
        "ESO_BACKUPENGINE_MYSQLENGINE": 7,
        "ESO_BACKUPENGINE_DMENGINE": 8,
        "ESO_BACKUPENGINE_GBASEENGINE": 9,
        "ESO_BACKUPENGINE_EXCHANGEENGINE": 10,
        "ESO_BACKUPENGINE_DOMINOENGINE": 12,
        "ESO_BACKUPENGINE_MONGOENGINE": 13,
        "ESO_BACKUPENGINE_VMWAREENGINE": 14,
        "ESO_BACKUPENGINE_HYPERVENGINE": 15,
        "ESO_BACKUPENGINE_FUSIONPCENGINE": 17,
        "ESO_BACKUPENGINE_XENSERVERENGINE": 18,
        "ESO_BACKUPENGINE_ASENGINE": 24,
        "ESO_BACKUPENGINE_CASENGINE": 25,
        "ESO_BACKUPENGINE_REMOTE_COPY": 29,
        "ESO_BACKUPENGINE_HADOOPENGINE": 37,
        "ESO_BACKUPENGINE_OPENSTACKENGINE": 38,
    }


class ncTaskStatus(object):
    Not_Start = 1
    Ready = 2
    Running = 3
    Stopping = 4
    Stoped = 5
    Abnormal = 6

    _VALUES_TO_NAMES = {
        1: "Not_Start",
        2: "Ready",
        3: "Running",
        4: "Stopping",
        5: "Stoped",
        6: "Abnormal",
    }

    _NAMES_TO_VALUES = {
        "Not_Start": 1,
        "Ready": 2,
        "Running": 3,
        "Stopping": 4,
        "Stoped": 5,
        "Abnormal": 6,
    }


class ncexecResult(object):
    Guard = 0
    Success = 1
    PartSuss = 2
    WarnSuss = 3
    Stoped = 4
    Failed = 5
    Abnormal = 6

    _VALUES_TO_NAMES = {
        0: "Guard",
        1: "Success",
        2: "PartSuss",
        3: "WarnSuss",
        4: "Stoped",
        5: "Failed",
        6: "Abnormal",
    }

    _NAMES_TO_VALUES = {
        "Guard": 0,
        "Success": 1,
        "PartSuss": 2,
        "WarnSuss": 3,
        "Stoped": 4,
        "Failed": 5,
        "Abnormal": 6,
    }


class ncTaskExecType(object):
    UNKNOWN = 0
    FULL_BACKUP = 1
    FORE_INCRE_BACKUP = 2
    LOG_BACKUP = 3
    DIFF_BACKUP = 4
    AB7_DATA_REMOTE = 8
    DATA_BACKUP = 9
    DATA_ACCESS = 11
    COMMON_RECOVERY = 12
    CDP = 18
    REMOTE_COPY = 22
    REMOTE_COPY_RESTORE = 23

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "FULL_BACKUP",
        2: "FORE_INCRE_BACKUP",
        3: "LOG_BACKUP",
        4: "DIFF_BACKUP",
        8: "AB7_DATA_REMOTE",
        9: "DATA_BACKUP",
        11: "DATA_ACCESS",
        12: "COMMON_RECOVERY",
        18: "CDP",
        22: "REMOTE_COPY",
        23: "REMOTE_COPY_RESTORE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "FULL_BACKUP": 1,
        "FORE_INCRE_BACKUP": 2,
        "LOG_BACKUP": 3,
        "DIFF_BACKUP": 4,
        "AB7_DATA_REMOTE": 8,
        "DATA_BACKUP": 9,
        "DATA_ACCESS": 11,
        "COMMON_RECOVERY": 12,
        "CDP": 18,
        "REMOTE_COPY": 22,
        "REMOTE_COPY_RESTORE": 23,
    }


class ncTaskSubType(object):
    DATA_BACKUP = 6
    DATA_RECOVERY = 7
    AB7_DATA_REMOTE = 8
    REAL_TIME_COPY = 12
    REPLICA_DATA_ACCESS = 14

    _VALUES_TO_NAMES = {
        6: "DATA_BACKUP",
        7: "DATA_RECOVERY",
        8: "AB7_DATA_REMOTE",
        12: "REAL_TIME_COPY",
        14: "REPLICA_DATA_ACCESS",
    }

    _NAMES_TO_VALUES = {
        "DATA_BACKUP": 6,
        "DATA_RECOVERY": 7,
        "AB7_DATA_REMOTE": 8,
        "REAL_TIME_COPY": 12,
        "REPLICA_DATA_ACCESS": 14,
    }


class ncAmsJobType(object):
    """
    Attributes:
     - taskId
     - name
     - taskParentType
     - taskSubType
     - appType
     - status
     - desc
     - createTime
     - modifyTime
     - isDeleted
     - srcType
     - srcValue
     - dest
     - sla
     - schedule
     - user
     - dataSources
     - advParams
     - destType

    """


    def __init__(self, taskId=None, name=None, taskParentType=None, taskSubType=None, appType=None, status=None, desc=None, createTime=None, modifyTime=None, isDeleted=None, srcType=None, srcValue=None, dest=None, sla=None, schedule=None, user=None, dataSources=None, advParams=None, destType=None,):
        self.taskId = taskId
        self.name = name
        self.taskParentType = taskParentType
        self.taskSubType = taskSubType
        self.appType = appType
        self.status = status
        self.desc = desc
        self.createTime = createTime
        self.modifyTime = modifyTime
        self.isDeleted = isDeleted
        self.srcType = srcType
        self.srcValue = srcValue
        self.dest = dest
        self.sla = sla
        self.schedule = schedule
        self.user = user
        self.dataSources = dataSources
        self.advParams = advParams
        self.destType = destType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.taskParentType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.taskSubType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.appType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.modifyTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.isDeleted = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.srcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.srcValue = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.srcValue[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.dest = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val13 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.dest[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.sla = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.schedule = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = {}
                        (_ktype21, _vtype22, _size20) = iprot.readMapBegin()
                        for _i24 in range(_size20):
                            _key25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem19[_key25] = _val26
                        iprot.readMapEnd()
                        self.schedule.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.MAP:
                    self.user = {}
                    (_ktype28, _vtype29, _size27) = iprot.readMapBegin()
                    for _i31 in range(_size27):
                        _key32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.user[_key32] = _val33
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.dataSources = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = {}
                        (_ktype41, _vtype42, _size40) = iprot.readMapBegin()
                        for _i44 in range(_size40):
                            _key45 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem39[_key45] = _val46
                        iprot.readMapEnd()
                        self.dataSources.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.advParams = {}
                    (_ktype48, _vtype49, _size47) = iprot.readMapBegin()
                    for _i51 in range(_size47):
                        _key52 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val53 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.advParams[_key52] = _val53
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.destType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncAmsJobType')
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 1)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.taskParentType is not None:
            oprot.writeFieldBegin('taskParentType', TType.I32, 3)
            oprot.writeI32(self.taskParentType)
            oprot.writeFieldEnd()
        if self.taskSubType is not None:
            oprot.writeFieldBegin('taskSubType', TType.I32, 4)
            oprot.writeI32(self.taskSubType)
            oprot.writeFieldEnd()
        if self.appType is not None:
            oprot.writeFieldBegin('appType', TType.I32, 5)
            oprot.writeI32(self.appType)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 7)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 8)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.modifyTime is not None:
            oprot.writeFieldBegin('modifyTime', TType.I64, 9)
            oprot.writeI64(self.modifyTime)
            oprot.writeFieldEnd()
        if self.isDeleted is not None:
            oprot.writeFieldBegin('isDeleted', TType.I32, 10)
            oprot.writeI32(self.isDeleted)
            oprot.writeFieldEnd()
        if self.srcType is not None:
            oprot.writeFieldBegin('srcType', TType.I32, 11)
            oprot.writeI32(self.srcType)
            oprot.writeFieldEnd()
        if self.srcValue is not None:
            oprot.writeFieldBegin('srcValue', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.srcValue))
            for kiter54, viter55 in self.srcValue.items():
                oprot.writeString(kiter54.encode('utf-8') if sys.version_info[0] == 2 else kiter54)
                oprot.writeString(viter55.encode('utf-8') if sys.version_info[0] == 2 else viter55)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.dest is not None:
            oprot.writeFieldBegin('dest', TType.MAP, 13)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.dest))
            for kiter56, viter57 in self.dest.items():
                oprot.writeString(kiter56.encode('utf-8') if sys.version_info[0] == 2 else kiter56)
                oprot.writeString(viter57.encode('utf-8') if sys.version_info[0] == 2 else viter57)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sla is not None:
            oprot.writeFieldBegin('sla', TType.STRING, 14)
            oprot.writeString(self.sla.encode('utf-8') if sys.version_info[0] == 2 else self.sla)
            oprot.writeFieldEnd()
        if self.schedule is not None:
            oprot.writeFieldBegin('schedule', TType.LIST, 15)
            oprot.writeListBegin(TType.MAP, len(self.schedule))
            for iter58 in self.schedule:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter58))
                for kiter59, viter60 in iter58.items():
                    oprot.writeString(kiter59.encode('utf-8') if sys.version_info[0] == 2 else kiter59)
                    oprot.writeString(viter60.encode('utf-8') if sys.version_info[0] == 2 else viter60)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.MAP, 16)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.user))
            for kiter61, viter62 in self.user.items():
                oprot.writeString(kiter61.encode('utf-8') if sys.version_info[0] == 2 else kiter61)
                oprot.writeString(viter62.encode('utf-8') if sys.version_info[0] == 2 else viter62)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.dataSources is not None:
            oprot.writeFieldBegin('dataSources', TType.LIST, 17)
            oprot.writeListBegin(TType.MAP, len(self.dataSources))
            for iter63 in self.dataSources:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter63))
                for kiter64, viter65 in iter63.items():
                    oprot.writeString(kiter64.encode('utf-8') if sys.version_info[0] == 2 else kiter64)
                    oprot.writeString(viter65.encode('utf-8') if sys.version_info[0] == 2 else viter65)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.advParams is not None:
            oprot.writeFieldBegin('advParams', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.advParams))
            for kiter66, viter67 in self.advParams.items():
                oprot.writeString(kiter66.encode('utf-8') if sys.version_info[0] == 2 else kiter66)
                oprot.writeString(viter67.encode('utf-8') if sys.version_info[0] == 2 else viter67)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.destType is not None:
            oprot.writeFieldBegin('destType', TType.I32, 19)
            oprot.writeI32(self.destType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncJobLog(object):
    """
    Attributes:
     - taskId
     - logID
     - execType
     - execStatus
     - execResult
     - execDesc
     - startTime
     - endTime
     - speed
     - totalSize
     - compressedSize
     - deduplicationSize
     - calculateTime
     - failureCode
     - failureReason
     - srcType
     - destType
     - srcId
     - destId
     - srcAdditionName
     - destAdditionName

    """


    def __init__(self, taskId=None, logID=None, execType=None, execStatus=None, execResult=None, execDesc=None, startTime=None, endTime=None, speed=None, totalSize=None, compressedSize=None, deduplicationSize=None, calculateTime=None, failureCode=None, failureReason=None, srcType=None, destType=None, srcId=None, destId=None, srcAdditionName=None, destAdditionName=None,):
        self.taskId = taskId
        self.logID = logID
        self.execType = execType
        self.execStatus = execStatus
        self.execResult = execResult
        self.execDesc = execDesc
        self.startTime = startTime
        self.endTime = endTime
        self.speed = speed
        self.totalSize = totalSize
        self.compressedSize = compressedSize
        self.deduplicationSize = deduplicationSize
        self.calculateTime = calculateTime
        self.failureCode = failureCode
        self.failureReason = failureReason
        self.srcType = srcType
        self.destType = destType
        self.srcId = srcId
        self.destId = destId
        self.srcAdditionName = srcAdditionName
        self.destAdditionName = destAdditionName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.taskId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.logID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.execType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.execStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.execResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.execDesc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.speed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.totalSize = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.compressedSize = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.deduplicationSize = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.calculateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.failureCode = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.failureReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.srcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.destType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.srcId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.destId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.srcAdditionName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.destAdditionName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncJobLog')
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.STRING, 1)
            oprot.writeString(self.taskId.encode('utf-8') if sys.version_info[0] == 2 else self.taskId)
            oprot.writeFieldEnd()
        if self.logID is not None:
            oprot.writeFieldBegin('logID', TType.STRING, 2)
            oprot.writeString(self.logID.encode('utf-8') if sys.version_info[0] == 2 else self.logID)
            oprot.writeFieldEnd()
        if self.execType is not None:
            oprot.writeFieldBegin('execType', TType.I32, 3)
            oprot.writeI32(self.execType)
            oprot.writeFieldEnd()
        if self.execStatus is not None:
            oprot.writeFieldBegin('execStatus', TType.I32, 4)
            oprot.writeI32(self.execStatus)
            oprot.writeFieldEnd()
        if self.execResult is not None:
            oprot.writeFieldBegin('execResult', TType.I32, 5)
            oprot.writeI32(self.execResult)
            oprot.writeFieldEnd()
        if self.execDesc is not None:
            oprot.writeFieldBegin('execDesc', TType.STRING, 6)
            oprot.writeString(self.execDesc.encode('utf-8') if sys.version_info[0] == 2 else self.execDesc)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 7)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 8)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.STRING, 9)
            oprot.writeString(self.speed.encode('utf-8') if sys.version_info[0] == 2 else self.speed)
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.STRING, 10)
            oprot.writeString(self.totalSize.encode('utf-8') if sys.version_info[0] == 2 else self.totalSize)
            oprot.writeFieldEnd()
        if self.compressedSize is not None:
            oprot.writeFieldBegin('compressedSize', TType.STRING, 11)
            oprot.writeString(self.compressedSize.encode('utf-8') if sys.version_info[0] == 2 else self.compressedSize)
            oprot.writeFieldEnd()
        if self.deduplicationSize is not None:
            oprot.writeFieldBegin('deduplicationSize', TType.STRING, 12)
            oprot.writeString(self.deduplicationSize.encode('utf-8') if sys.version_info[0] == 2 else self.deduplicationSize)
            oprot.writeFieldEnd()
        if self.calculateTime is not None:
            oprot.writeFieldBegin('calculateTime', TType.I64, 13)
            oprot.writeI64(self.calculateTime)
            oprot.writeFieldEnd()
        if self.failureCode is not None:
            oprot.writeFieldBegin('failureCode', TType.I64, 15)
            oprot.writeI64(self.failureCode)
            oprot.writeFieldEnd()
        if self.failureReason is not None:
            oprot.writeFieldBegin('failureReason', TType.STRING, 16)
            oprot.writeString(self.failureReason.encode('utf-8') if sys.version_info[0] == 2 else self.failureReason)
            oprot.writeFieldEnd()
        if self.srcType is not None:
            oprot.writeFieldBegin('srcType', TType.I32, 17)
            oprot.writeI32(self.srcType)
            oprot.writeFieldEnd()
        if self.destType is not None:
            oprot.writeFieldBegin('destType', TType.I32, 18)
            oprot.writeI32(self.destType)
            oprot.writeFieldEnd()
        if self.srcId is not None:
            oprot.writeFieldBegin('srcId', TType.STRING, 19)
            oprot.writeString(self.srcId.encode('utf-8') if sys.version_info[0] == 2 else self.srcId)
            oprot.writeFieldEnd()
        if self.destId is not None:
            oprot.writeFieldBegin('destId', TType.STRING, 20)
            oprot.writeString(self.destId.encode('utf-8') if sys.version_info[0] == 2 else self.destId)
            oprot.writeFieldEnd()
        if self.srcAdditionName is not None:
            oprot.writeFieldBegin('srcAdditionName', TType.STRING, 21)
            oprot.writeString(self.srcAdditionName.encode('utf-8') if sys.version_info[0] == 2 else self.srcAdditionName)
            oprot.writeFieldEnd()
        if self.destAdditionName is not None:
            oprot.writeFieldBegin('destAdditionName', TType.STRING, 22)
            oprot.writeString(self.destAdditionName.encode('utf-8') if sys.version_info[0] == 2 else self.destAdditionName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncAmsJobType)
ncAmsJobType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'taskParentType', None, None, ),  # 3
    (4, TType.I32, 'taskSubType', None, None, ),  # 4
    (5, TType.I32, 'appType', None, None, ),  # 5
    (6, TType.I32, 'status', None, None, ),  # 6
    (7, TType.STRING, 'desc', 'UTF8', None, ),  # 7
    (8, TType.I64, 'createTime', None, None, ),  # 8
    (9, TType.I64, 'modifyTime', None, None, ),  # 9
    (10, TType.I32, 'isDeleted', None, None, ),  # 10
    (11, TType.I32, 'srcType', None, None, ),  # 11
    (12, TType.MAP, 'srcValue', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.MAP, 'dest', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 13
    (14, TType.STRING, 'sla', 'UTF8', None, ),  # 14
    (15, TType.LIST, 'schedule', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 15
    (16, TType.MAP, 'user', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 16
    (17, TType.LIST, 'dataSources', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 17
    (18, TType.MAP, 'advParams', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 18
    (19, TType.I32, 'destType', None, None, ),  # 19
)
all_structs.append(ncJobLog)
ncJobLog.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'taskId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'logID', 'UTF8', None, ),  # 2
    (3, TType.I32, 'execType', None, None, ),  # 3
    (4, TType.I32, 'execStatus', None, None, ),  # 4
    (5, TType.I32, 'execResult', None, None, ),  # 5
    (6, TType.STRING, 'execDesc', 'UTF8', None, ),  # 6
    (7, TType.I64, 'startTime', None, None, ),  # 7
    (8, TType.I64, 'endTime', None, None, ),  # 8
    (9, TType.STRING, 'speed', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'totalSize', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'compressedSize', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'deduplicationSize', 'UTF8', None, ),  # 12
    (13, TType.I64, 'calculateTime', None, None, ),  # 13
    None,  # 14
    (15, TType.I64, 'failureCode', None, None, ),  # 15
    (16, TType.STRING, 'failureReason', 'UTF8', None, ),  # 16
    (17, TType.I32, 'srcType', None, None, ),  # 17
    (18, TType.I32, 'destType', None, None, ),  # 18
    (19, TType.STRING, 'srcId', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'destId', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'srcAdditionName', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'destAdditionName', 'UTF8', None, ),  # 22
)
fix_spec(all_structs)
del all_structs
