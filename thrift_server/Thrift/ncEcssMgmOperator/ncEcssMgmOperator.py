# -*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=UTF-8
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    ECSS服务接口

    """
    def GetTaskSetInfoSet(self, request, cloudInfo):
        """
        获取所有的任务集信息

        @param request: 请求参数
        @return 指定存储的所有任务集信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo

        """
        pass

    def GetSubObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定 GNS 对象的子对象集合

        @param request:    请求参数集合

        @return GNS 对象集，若 partialSign 为空，则表示已全部获取完毕

        @throw 转抛内部调用异常
               若 @partialSign 不存在，则抛出异常提示。

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定存储的所有CID对象信息 可指定条件

        @param request: 请求参数
        @return 指定存储的所有CID对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def GetTimepointSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定任务的所有时间点对象信息 可指定条件

        @param request: 请求参数
        @return 指定任务的所有时间点对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定任务的对象信息 可指定条件

        @param request: 请求参数
        @return 指定任务的所有时间点对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
        """
        多客户端备份同一个timepoint时，调用该接口表示所有节点全部备份完毕,使时间点可用
        @param request: 指定任务的待处理时间点对象信息
        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def DelTimepointLineData(self, request, cloudInfo, taskSetSign):
        """
        删除指定时间点对象的数据，只支持完备时间点，用于删除完备时间点时间线，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def DelTimepointData(self, request, cloudInfo, taskSetSign):
        """
        删除指定时间点对象的数据，只支持永久增量已合并的时间点，用于删除永久增量时间点，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def DelCIDObjectData(self, request, cloudInfo, taskSetSign):
        """
        删除指定CID对象的数据，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def DelTaskSetData(self, request, cloudInfo, taskSetSign):
        """
        删除指定任务集的数据, 标记删除

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        pass

    def SetVolumeInfo(self, volumeInfo):
        """
        设置索引卷信息

        @param volumeInfo: 索引卷信息

        @throw 转抛内部调用异常

        Parameters:
         - volumeInfo

        """
        pass

    def GetVolumeInfo(self):
        """
        获取索引卷信息

        @param volumeInfo: 索引卷信息

        @throw 转抛内部调用异常

        """
        pass

    def CheckVolumeIsEmpty(self):
        """
        检测索引卷是否存在数据,存在返回false，不存在返回true

        @throw 转抛内部调用异常

        """
        pass

    def GetBucketList(self, cloudInfo):
        """
        获取桶列表，不含元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        pass

    def GetMetaBucket(self, cloudInfo):
        """
        获取元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        pass

    def SetMetaBucket(self, cloudInfo, metaBucketName):
        """
        设置元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo
         - metaBucketName

        """
        pass

    def CheckBucketsExists(self, cloudInfo):
        """
        检查桶是否存在（串行依次检查每个桶）

        @param cloudInfo: 云存储信息（包含桶列表）
        @return 桶状态信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        pass

    def SetCloudSign(self, cloudOldInfo, cloudInfo):
        """
        设置云签名（由于在修改了AK后，会导致云签名不一致，因此，需要保存修改之前的签名）
        如果签名已经存在，则不设置，即：如果多次修改AK，则只会用第一次修改AK之前url+AK计算签名

        参数cloudOldInfo中只需要传入url和AK即可
        @param cloudOldInfo.url       : 云存储URL
        @param cloudOldInfo.accessKey : 云存储AK（修改AK之前的AK）
        @param cloudInfo              : 新的云存储信息，用于将签名文件上传到索引桶（桶信息只需要索引桶即可）

        @throw 转抛内部调用异常

        Parameters:
         - cloudOldInfo
         - cloudInfo

        """
        pass

    def DelAllBucketData(self, requestID, cloudInfo):
        """
         * 删除指定租户下所有桶的数据
         *
         * @param cloudInfo:    租户云存储信息
         *
         * @throw 转抛内部调用异常
         *
        *

        Parameters:
         - requestID
         - cloudInfo

        """
        pass

    def VerifyCloudCert(self, cloudInfo):
        """
         * 证书认证
         *
         * @param cloudInfo: 云存储信息
         * @return ncCloudCertInfo: 证书信息
         *
         * @throw 转抛内部调用异常
        *

        Parameters:
         - cloudInfo

        """
        pass


class Client(Iface):
    """
    ECSS服务接口

    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetTaskSetInfoSet(self, request, cloudInfo):
        """
        获取所有的任务集信息

        @param request: 请求参数
        @return 指定存储的所有任务集信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo

        """
        self.send_GetTaskSetInfoSet(request, cloudInfo)
        return self.recv_GetTaskSetInfoSet()

    def send_GetTaskSetInfoSet(self, request, cloudInfo):
        self._oprot.writeMessageBegin('GetTaskSetInfoSet', TMessageType.CALL, self._seqid)
        args = GetTaskSetInfoSet_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTaskSetInfoSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTaskSetInfoSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTaskSetInfoSet failed: unknown result")

    def GetSubObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定 GNS 对象的子对象集合

        @param request:    请求参数集合

        @return GNS 对象集，若 partialSign 为空，则表示已全部获取完毕

        @throw 转抛内部调用异常
               若 @partialSign 不存在，则抛出异常提示。

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_GetSubObjectSet(request, cloudInfo, taskSetSign)
        return self.recv_GetSubObjectSet()

    def send_GetSubObjectSet(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('GetSubObjectSet', TMessageType.CALL, self._seqid)
        args = GetSubObjectSet_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetSubObjectSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetSubObjectSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetSubObjectSet failed: unknown result")

    def GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定存储的所有CID对象信息 可指定条件

        @param request: 请求参数
        @return 指定存储的所有CID对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_GetCIDObjectSet(request, cloudInfo, taskSetSign)
        return self.recv_GetCIDObjectSet()

    def send_GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('GetCIDObjectSet', TMessageType.CALL, self._seqid)
        args = GetCIDObjectSet_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCIDObjectSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCIDObjectSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCIDObjectSet failed: unknown result")

    def GetTimepointSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定任务的所有时间点对象信息 可指定条件

        @param request: 请求参数
        @return 指定任务的所有时间点对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_GetTimepointSet(request, cloudInfo, taskSetSign)
        return self.recv_GetTimepointSet()

    def send_GetTimepointSet(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('GetTimepointSet', TMessageType.CALL, self._seqid)
        args = GetTimepointSet_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTimepointSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTimepointSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTimepointSet failed: unknown result")

    def GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
        """
        获取指定任务的对象信息 可指定条件

        @param request: 请求参数
        @return 指定任务的所有时间点对象信息

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_GetGNSObjectSet(request, cloudInfo, taskSetSign)
        return self.recv_GetGNSObjectSet()

    def send_GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('GetGNSObjectSet', TMessageType.CALL, self._seqid)
        args = GetGNSObjectSet_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetGNSObjectSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetGNSObjectSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetGNSObjectSet failed: unknown result")

    def SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
        """
        多客户端备份同一个timepoint时，调用该接口表示所有节点全部备份完毕,使时间点可用
        @param request: 指定任务的待处理时间点对象信息
        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_SetTimepointAvailable(request, cloudInfo, taskSetSign)
        self.recv_SetTimepointAvailable()

    def send_SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('SetTimepointAvailable', TMessageType.CALL, self._seqid)
        args = SetTimepointAvailable_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetTimepointAvailable(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetTimepointAvailable_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def DelTimepointLineData(self, request, cloudInfo, taskSetSign):
        """
        删除指定时间点对象的数据，只支持完备时间点，用于删除完备时间点时间线，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_DelTimepointLineData(request, cloudInfo, taskSetSign)
        self.recv_DelTimepointLineData()

    def send_DelTimepointLineData(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('DelTimepointLineData', TMessageType.CALL, self._seqid)
        args = DelTimepointLineData_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DelTimepointLineData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DelTimepointLineData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def DelTimepointData(self, request, cloudInfo, taskSetSign):
        """
        删除指定时间点对象的数据，只支持永久增量已合并的时间点，用于删除永久增量时间点，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_DelTimepointData(request, cloudInfo, taskSetSign)
        self.recv_DelTimepointData()

    def send_DelTimepointData(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('DelTimepointData', TMessageType.CALL, self._seqid)
        args = DelTimepointData_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DelTimepointData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DelTimepointData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def DelCIDObjectData(self, request, cloudInfo, taskSetSign):
        """
        删除指定CID对象的数据，标记删除

        @param gns:    GNS 路径

        @throw 转抛内部调用异常
               gns路径不是CID对象路径时抛异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_DelCIDObjectData(request, cloudInfo, taskSetSign)
        self.recv_DelCIDObjectData()

    def send_DelCIDObjectData(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('DelCIDObjectData', TMessageType.CALL, self._seqid)
        args = DelCIDObjectData_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DelCIDObjectData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DelCIDObjectData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def DelTaskSetData(self, request, cloudInfo, taskSetSign):
        """
        删除指定任务集的数据, 标记删除

        @throw 转抛内部调用异常

        Parameters:
         - request
         - cloudInfo
         - taskSetSign

        """
        self.send_DelTaskSetData(request, cloudInfo, taskSetSign)
        self.recv_DelTaskSetData()

    def send_DelTaskSetData(self, request, cloudInfo, taskSetSign):
        self._oprot.writeMessageBegin('DelTaskSetData', TMessageType.CALL, self._seqid)
        args = DelTaskSetData_args()
        args.request = request
        args.cloudInfo = cloudInfo
        args.taskSetSign = taskSetSign
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DelTaskSetData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DelTaskSetData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def SetVolumeInfo(self, volumeInfo):
        """
        设置索引卷信息

        @param volumeInfo: 索引卷信息

        @throw 转抛内部调用异常

        Parameters:
         - volumeInfo

        """
        self.send_SetVolumeInfo(volumeInfo)
        self.recv_SetVolumeInfo()

    def send_SetVolumeInfo(self, volumeInfo):
        self._oprot.writeMessageBegin('SetVolumeInfo', TMessageType.CALL, self._seqid)
        args = SetVolumeInfo_args()
        args.volumeInfo = volumeInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetVolumeInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetVolumeInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def GetVolumeInfo(self):
        """
        获取索引卷信息

        @param volumeInfo: 索引卷信息

        @throw 转抛内部调用异常

        """
        self.send_GetVolumeInfo()
        return self.recv_GetVolumeInfo()

    def send_GetVolumeInfo(self):
        self._oprot.writeMessageBegin('GetVolumeInfo', TMessageType.CALL, self._seqid)
        args = GetVolumeInfo_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetVolumeInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetVolumeInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetVolumeInfo failed: unknown result")

    def CheckVolumeIsEmpty(self):
        """
        检测索引卷是否存在数据,存在返回false，不存在返回true

        @throw 转抛内部调用异常

        """
        self.send_CheckVolumeIsEmpty()
        return self.recv_CheckVolumeIsEmpty()

    def send_CheckVolumeIsEmpty(self):
        self._oprot.writeMessageBegin('CheckVolumeIsEmpty', TMessageType.CALL, self._seqid)
        args = CheckVolumeIsEmpty_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CheckVolumeIsEmpty(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CheckVolumeIsEmpty_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CheckVolumeIsEmpty failed: unknown result")

    def GetBucketList(self, cloudInfo):
        """
        获取桶列表，不含元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        self.send_GetBucketList(cloudInfo)
        return self.recv_GetBucketList()

    def send_GetBucketList(self, cloudInfo):
        self._oprot.writeMessageBegin('GetBucketList', TMessageType.CALL, self._seqid)
        args = GetBucketList_args()
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetBucketList(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetBucketList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetBucketList failed: unknown result")

    def GetMetaBucket(self, cloudInfo):
        """
        获取元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        self.send_GetMetaBucket(cloudInfo)
        return self.recv_GetMetaBucket()

    def send_GetMetaBucket(self, cloudInfo):
        self._oprot.writeMessageBegin('GetMetaBucket', TMessageType.CALL, self._seqid)
        args = GetMetaBucket_args()
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetMetaBucket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetMetaBucket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetMetaBucket failed: unknown result")

    def SetMetaBucket(self, cloudInfo, metaBucketName):
        """
        设置元数据桶

        @param cloudInfo: 云存储信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo
         - metaBucketName

        """
        self.send_SetMetaBucket(cloudInfo, metaBucketName)
        self.recv_SetMetaBucket()

    def send_SetMetaBucket(self, cloudInfo, metaBucketName):
        self._oprot.writeMessageBegin('SetMetaBucket', TMessageType.CALL, self._seqid)
        args = SetMetaBucket_args()
        args.cloudInfo = cloudInfo
        args.metaBucketName = metaBucketName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetMetaBucket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetMetaBucket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def CheckBucketsExists(self, cloudInfo):
        """
        检查桶是否存在（串行依次检查每个桶）

        @param cloudInfo: 云存储信息（包含桶列表）
        @return 桶状态信息

        @throw 转抛内部调用异常

        Parameters:
         - cloudInfo

        """
        self.send_CheckBucketsExists(cloudInfo)
        return self.recv_CheckBucketsExists()

    def send_CheckBucketsExists(self, cloudInfo):
        self._oprot.writeMessageBegin('CheckBucketsExists', TMessageType.CALL, self._seqid)
        args = CheckBucketsExists_args()
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CheckBucketsExists(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CheckBucketsExists_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CheckBucketsExists failed: unknown result")

    def SetCloudSign(self, cloudOldInfo, cloudInfo):
        """
        设置云签名（由于在修改了AK后，会导致云签名不一致，因此，需要保存修改之前的签名）
        如果签名已经存在，则不设置，即：如果多次修改AK，则只会用第一次修改AK之前url+AK计算签名

        参数cloudOldInfo中只需要传入url和AK即可
        @param cloudOldInfo.url       : 云存储URL
        @param cloudOldInfo.accessKey : 云存储AK（修改AK之前的AK）
        @param cloudInfo              : 新的云存储信息，用于将签名文件上传到索引桶（桶信息只需要索引桶即可）

        @throw 转抛内部调用异常

        Parameters:
         - cloudOldInfo
         - cloudInfo

        """
        self.send_SetCloudSign(cloudOldInfo, cloudInfo)
        self.recv_SetCloudSign()

    def send_SetCloudSign(self, cloudOldInfo, cloudInfo):
        self._oprot.writeMessageBegin('SetCloudSign', TMessageType.CALL, self._seqid)
        args = SetCloudSign_args()
        args.cloudOldInfo = cloudOldInfo
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetCloudSign(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetCloudSign_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exp is not None:
            raise result.exp
        return

    def DelAllBucketData(self, requestID, cloudInfo):
        """
         * 删除指定租户下所有桶的数据
         *
         * @param cloudInfo:    租户云存储信息
         *
         * @throw 转抛内部调用异常
         *
        *

        Parameters:
         - requestID
         - cloudInfo

        """
        self.send_DelAllBucketData(requestID, cloudInfo)
        return self.recv_DelAllBucketData()

    def send_DelAllBucketData(self, requestID, cloudInfo):
        self._oprot.writeMessageBegin('DelAllBucketData', TMessageType.CALL, self._seqid)
        args = DelAllBucketData_args()
        args.requestID = requestID
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DelAllBucketData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DelAllBucketData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DelAllBucketData failed: unknown result")

    def VerifyCloudCert(self, cloudInfo):
        """
         * 证书认证
         *
         * @param cloudInfo: 云存储信息
         * @return ncCloudCertInfo: 证书信息
         *
         * @throw 转抛内部调用异常
        *

        Parameters:
         - cloudInfo

        """
        self.send_VerifyCloudCert(cloudInfo)
        return self.recv_VerifyCloudCert()

    def send_VerifyCloudCert(self, cloudInfo):
        self._oprot.writeMessageBegin('VerifyCloudCert', TMessageType.CALL, self._seqid)
        args = VerifyCloudCert_args()
        args.cloudInfo = cloudInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_VerifyCloudCert(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = VerifyCloudCert_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exp is not None:
            raise result.exp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "VerifyCloudCert failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetTaskSetInfoSet"] = Processor.process_GetTaskSetInfoSet
        self._processMap["GetSubObjectSet"] = Processor.process_GetSubObjectSet
        self._processMap["GetCIDObjectSet"] = Processor.process_GetCIDObjectSet
        self._processMap["GetTimepointSet"] = Processor.process_GetTimepointSet
        self._processMap["GetGNSObjectSet"] = Processor.process_GetGNSObjectSet
        self._processMap["SetTimepointAvailable"] = Processor.process_SetTimepointAvailable
        self._processMap["DelTimepointLineData"] = Processor.process_DelTimepointLineData
        self._processMap["DelTimepointData"] = Processor.process_DelTimepointData
        self._processMap["DelCIDObjectData"] = Processor.process_DelCIDObjectData
        self._processMap["DelTaskSetData"] = Processor.process_DelTaskSetData
        self._processMap["SetVolumeInfo"] = Processor.process_SetVolumeInfo
        self._processMap["GetVolumeInfo"] = Processor.process_GetVolumeInfo
        self._processMap["CheckVolumeIsEmpty"] = Processor.process_CheckVolumeIsEmpty
        self._processMap["GetBucketList"] = Processor.process_GetBucketList
        self._processMap["GetMetaBucket"] = Processor.process_GetMetaBucket
        self._processMap["SetMetaBucket"] = Processor.process_SetMetaBucket
        self._processMap["CheckBucketsExists"] = Processor.process_CheckBucketsExists
        self._processMap["SetCloudSign"] = Processor.process_SetCloudSign
        self._processMap["DelAllBucketData"] = Processor.process_DelAllBucketData
        self._processMap["VerifyCloudCert"] = Processor.process_VerifyCloudCert
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetTaskSetInfoSet(self, seqid, iprot, oprot):
        args = GetTaskSetInfoSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTaskSetInfoSet_result()
        try:
            result.success = self._handler.GetTaskSetInfoSet(args.request, args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTaskSetInfoSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetSubObjectSet(self, seqid, iprot, oprot):
        args = GetSubObjectSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetSubObjectSet_result()
        try:
            result.success = self._handler.GetSubObjectSet(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetSubObjectSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCIDObjectSet(self, seqid, iprot, oprot):
        args = GetCIDObjectSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCIDObjectSet_result()
        try:
            result.success = self._handler.GetCIDObjectSet(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCIDObjectSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTimepointSet(self, seqid, iprot, oprot):
        args = GetTimepointSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTimepointSet_result()
        try:
            result.success = self._handler.GetTimepointSet(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTimepointSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetGNSObjectSet(self, seqid, iprot, oprot):
        args = GetGNSObjectSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetGNSObjectSet_result()
        try:
            result.success = self._handler.GetGNSObjectSet(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetGNSObjectSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetTimepointAvailable(self, seqid, iprot, oprot):
        args = SetTimepointAvailable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetTimepointAvailable_result()
        try:
            self._handler.SetTimepointAvailable(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetTimepointAvailable", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DelTimepointLineData(self, seqid, iprot, oprot):
        args = DelTimepointLineData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DelTimepointLineData_result()
        try:
            self._handler.DelTimepointLineData(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DelTimepointLineData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DelTimepointData(self, seqid, iprot, oprot):
        args = DelTimepointData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DelTimepointData_result()
        try:
            self._handler.DelTimepointData(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DelTimepointData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DelCIDObjectData(self, seqid, iprot, oprot):
        args = DelCIDObjectData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DelCIDObjectData_result()
        try:
            self._handler.DelCIDObjectData(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DelCIDObjectData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DelTaskSetData(self, seqid, iprot, oprot):
        args = DelTaskSetData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DelTaskSetData_result()
        try:
            self._handler.DelTaskSetData(args.request, args.cloudInfo, args.taskSetSign)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DelTaskSetData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetVolumeInfo(self, seqid, iprot, oprot):
        args = SetVolumeInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetVolumeInfo_result()
        try:
            self._handler.SetVolumeInfo(args.volumeInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetVolumeInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetVolumeInfo(self, seqid, iprot, oprot):
        args = GetVolumeInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetVolumeInfo_result()
        try:
            result.success = self._handler.GetVolumeInfo()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetVolumeInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CheckVolumeIsEmpty(self, seqid, iprot, oprot):
        args = CheckVolumeIsEmpty_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CheckVolumeIsEmpty_result()
        try:
            result.success = self._handler.CheckVolumeIsEmpty()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CheckVolumeIsEmpty", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetBucketList(self, seqid, iprot, oprot):
        args = GetBucketList_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetBucketList_result()
        try:
            result.success = self._handler.GetBucketList(args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetBucketList", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetMetaBucket(self, seqid, iprot, oprot):
        args = GetMetaBucket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetMetaBucket_result()
        try:
            result.success = self._handler.GetMetaBucket(args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetMetaBucket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetMetaBucket(self, seqid, iprot, oprot):
        args = SetMetaBucket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetMetaBucket_result()
        try:
            self._handler.SetMetaBucket(args.cloudInfo, args.metaBucketName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetMetaBucket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CheckBucketsExists(self, seqid, iprot, oprot):
        args = CheckBucketsExists_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CheckBucketsExists_result()
        try:
            result.success = self._handler.CheckBucketsExists(args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CheckBucketsExists", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetCloudSign(self, seqid, iprot, oprot):
        args = SetCloudSign_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetCloudSign_result()
        try:
            self._handler.SetCloudSign(args.cloudOldInfo, args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetCloudSign", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DelAllBucketData(self, seqid, iprot, oprot):
        args = DelAllBucketData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DelAllBucketData_result()
        try:
            result.success = self._handler.DelAllBucketData(args.requestID, args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DelAllBucketData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_VerifyCloudCert(self, seqid, iprot, oprot):
        args = VerifyCloudCert_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = VerifyCloudCert_result()
        try:
            result.success = self._handler.VerifyCloudCert(args.cloudInfo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ncException.ttypes.ncException as exp:
            msg_type = TMessageType.REPLY
            result.exp = exp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("VerifyCloudCert", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetTaskSetInfoSet_args(object):
    """
    Attributes:
     - request
     - cloudInfo

    """


    def __init__(self, request=None, cloudInfo=None,):
        self.request = request
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncEcssCommonDefinition.ttypes.ncTaskSetRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTaskSetInfoSet_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTaskSetInfoSet_args)
GetTaskSetInfoSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncEcssCommonDefinition.ttypes.ncTaskSetRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
)


class GetTaskSetInfoSet_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncTaskSetInfoSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTaskSetInfoSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTaskSetInfoSet_result)
GetTaskSetInfoSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncTaskSetInfoSet, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetSubObjectSet_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncGNSObjectRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetSubObjectSet_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetSubObjectSet_args)
GetSubObjectSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncGNSObjectRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class GetSubObjectSet_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncObjectInfo.ttypes.ncGNSObjectInfoSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetSubObjectSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetSubObjectSet_result)
GetSubObjectSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncObjectInfo.ttypes.ncGNSObjectInfoSet, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetCIDObjectSet_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncCIDObjectRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCIDObjectSet_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCIDObjectSet_args)
GetCIDObjectSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncCIDObjectRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class GetCIDObjectSet_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncObjectInfo.ttypes.ncCIDObjectInfoSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCIDObjectSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCIDObjectSet_result)
GetCIDObjectSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncObjectInfo.ttypes.ncCIDObjectInfoSet, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetTimepointSet_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncTimepointRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTimepointSet_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTimepointSet_args)
GetTimepointSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncTimepointRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class GetTimepointSet_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncObjectInfo.ttypes.ncTimepointInfoSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTimepointSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTimepointSet_result)
GetTimepointSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncObjectInfo.ttypes.ncTimepointInfoSet, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetGNSObjectSet_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncGNSObjectSetRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGNSObjectSet_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGNSObjectSet_args)
GetGNSObjectSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncGNSObjectSetRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class GetGNSObjectSet_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncObjectInfo.ttypes.ncGNSObjectInfoSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGNSObjectSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGNSObjectSet_result)
GetGNSObjectSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncObjectInfo.ttypes.ncGNSObjectInfoSet, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class SetTimepointAvailable_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncTimepointObjectInfoRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetTimepointAvailable_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetTimepointAvailable_args)
SetTimepointAvailable_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncTimepointObjectInfoRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class SetTimepointAvailable_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetTimepointAvailable_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetTimepointAvailable_result)
SetTimepointAvailable_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class DelTimepointLineData_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncDeleteDataRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTimepointLineData_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTimepointLineData_args)
DelTimepointLineData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncDeleteDataRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class DelTimepointLineData_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTimepointLineData_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTimepointLineData_result)
DelTimepointLineData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class DelTimepointData_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncDeleteDataRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTimepointData_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTimepointData_args)
DelTimepointData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncDeleteDataRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class DelTimepointData_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTimepointData_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTimepointData_result)
DelTimepointData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class DelCIDObjectData_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncObjectInfo.ttypes.ncGNSObjectRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelCIDObjectData_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelCIDObjectData_args)
DelCIDObjectData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncObjectInfo.ttypes.ncGNSObjectRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class DelCIDObjectData_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelCIDObjectData_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelCIDObjectData_result)
DelCIDObjectData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class DelTaskSetData_args(object):
    """
    Attributes:
     - request
     - cloudInfo
     - taskSetSign

    """


    def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
        self.request = request
        self.cloudInfo = cloudInfo
        self.taskSetSign = taskSetSign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = ncEcssCommonDefinition.ttypes.ncTaskSetRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.taskSetSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTaskSetData_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.taskSetSign is not None:
            oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
            oprot.writeString(self.taskSetSign.encode('utf-8') if sys.version_info[0] == 2 else self.taskSetSign)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTaskSetData_args)
DelTaskSetData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [ncEcssCommonDefinition.ttypes.ncTaskSetRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
    (3, TType.STRING, 'taskSetSign', 'UTF8', None, ),  # 3
)


class DelTaskSetData_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelTaskSetData_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelTaskSetData_result)
DelTaskSetData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class SetVolumeInfo_args(object):
    """
    Attributes:
     - volumeInfo

    """


    def __init__(self, volumeInfo=None,):
        self.volumeInfo = volumeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.volumeInfo = ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo()
                    self.volumeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetVolumeInfo_args')
        if self.volumeInfo is not None:
            oprot.writeFieldBegin('volumeInfo', TType.STRUCT, 1)
            self.volumeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetVolumeInfo_args)
SetVolumeInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'volumeInfo', [ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo, None], None, ),  # 1
)


class SetVolumeInfo_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetVolumeInfo_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetVolumeInfo_result)
SetVolumeInfo_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetVolumeInfo_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetVolumeInfo_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetVolumeInfo_args)
GetVolumeInfo_args.thrift_spec = (
)


class GetVolumeInfo_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetVolumeInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetVolumeInfo_result)
GetVolumeInfo_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class CheckVolumeIsEmpty_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckVolumeIsEmpty_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CheckVolumeIsEmpty_args)
CheckVolumeIsEmpty_args.thrift_spec = (
)


class CheckVolumeIsEmpty_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckVolumeIsEmpty_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CheckVolumeIsEmpty_result)
CheckVolumeIsEmpty_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetBucketList_args(object):
    """
    Attributes:
     - cloudInfo

    """


    def __init__(self, cloudInfo=None,):
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetBucketList_args')
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetBucketList_args)
GetBucketList_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
)


class GetBucketList_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncBucketInfoReply()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetBucketList_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetBucketList_result)
GetBucketList_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncBucketInfoReply, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class GetMetaBucket_args(object):
    """
    Attributes:
     - cloudInfo

    """


    def __init__(self, cloudInfo=None,):
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetMetaBucket_args')
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetMetaBucket_args)
GetMetaBucket_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
)


class GetMetaBucket_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncBucketInfoReply()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetMetaBucket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetMetaBucket_result)
GetMetaBucket_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncBucketInfoReply, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class SetMetaBucket_args(object):
    """
    Attributes:
     - cloudInfo
     - metaBucketName

    """


    def __init__(self, cloudInfo=None, metaBucketName=None,):
        self.cloudInfo = cloudInfo
        self.metaBucketName = metaBucketName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.metaBucketName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetMetaBucket_args')
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.metaBucketName is not None:
            oprot.writeFieldBegin('metaBucketName', TType.STRING, 2)
            oprot.writeString(self.metaBucketName.encode('utf-8') if sys.version_info[0] == 2 else self.metaBucketName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetMetaBucket_args)
SetMetaBucket_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
    (2, TType.STRING, 'metaBucketName', 'UTF8', None, ),  # 2
)


class SetMetaBucket_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetMetaBucket_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetMetaBucket_result)
SetMetaBucket_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class CheckBucketsExists_args(object):
    """
    Attributes:
     - cloudInfo

    """


    def __init__(self, cloudInfo=None,):
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckBucketsExists_args')
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CheckBucketsExists_args)
CheckBucketsExists_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
)


class CheckBucketsExists_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncEcssCommonDefinition.ttypes.ncBucketStatus()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckBucketsExists_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CheckBucketsExists_result)
CheckBucketsExists_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ncEcssCommonDefinition.ttypes.ncBucketStatus, None], False), None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class SetCloudSign_args(object):
    """
    Attributes:
     - cloudOldInfo
     - cloudInfo

    """


    def __init__(self, cloudOldInfo=None, cloudInfo=None,):
        self.cloudOldInfo = cloudOldInfo
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudOldInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudOldInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetCloudSign_args')
        if self.cloudOldInfo is not None:
            oprot.writeFieldBegin('cloudOldInfo', TType.STRUCT, 1)
            self.cloudOldInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetCloudSign_args)
SetCloudSign_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudOldInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
)


class SetCloudSign_result(object):
    """
    Attributes:
     - exp

    """


    def __init__(self, exp=None,):
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetCloudSign_result')
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetCloudSign_result)
SetCloudSign_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class DelAllBucketData_args(object):
    """
    Attributes:
     - requestID
     - cloudInfo

    """


    def __init__(self, requestID=None, cloudInfo=None,):
        self.requestID = requestID
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelAllBucketData_args')
        if self.requestID is not None:
            oprot.writeFieldBegin('requestID', TType.STRING, 1)
            oprot.writeString(self.requestID.encode('utf-8') if sys.version_info[0] == 2 else self.requestID)
            oprot.writeFieldEnd()
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelAllBucketData_args)
DelAllBucketData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestID', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 2
)


class DelAllBucketData_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncBucketInfoReply()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelAllBucketData_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DelAllBucketData_result)
DelAllBucketData_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncBucketInfoReply, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)


class VerifyCloudCert_args(object):
    """
    Attributes:
     - cloudInfo

    """


    def __init__(self, cloudInfo=None,):
        self.cloudInfo = cloudInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
                    self.cloudInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCloudCert_args')
        if self.cloudInfo is not None:
            oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
            self.cloudInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(VerifyCloudCert_args)
VerifyCloudCert_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudInfo', [ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, None], None, ),  # 1
)


class VerifyCloudCert_result(object):
    """
    Attributes:
     - success
     - exp

    """


    def __init__(self, success=None, exp=None,):
        self.success = success
        self.exp = exp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ncEcssCommonDefinition.ttypes.ncCloudCertInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exp = ncException.ttypes.ncException()
                    self.exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCloudCert_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.STRUCT, 1)
            self.exp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(VerifyCloudCert_result)
VerifyCloudCert_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ncEcssCommonDefinition.ttypes.ncCloudCertInfo, None], None, ),  # 0
    (1, TType.STRUCT, 'exp', [ncException.ttypes.ncException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

