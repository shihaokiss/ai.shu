#
# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8,new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  """
  ECSS服务接口
  """
  def GetTaskSetInfoSet(self, request, cloudInfo):
    """
    获取所有的任务集信息

    @param request: 请求参数
    @return 指定存储的所有任务集信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
    """
    pass

  def GetSubObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定 GNS 对象的子对象集合

    @param request:    请求参数集合

    @return GNS 对象集，若 partialSign 为空，则表示已全部获取完毕

    @throw 转抛内部调用异常
           若 @partialSign 不存在，则抛出异常提示。

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定存储的所有CID对象信息 可指定条件

    @param request: 请求参数
    @return 指定存储的所有CID对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def GetTimepointSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定任务的所有时间点对象信息 可指定条件

    @param request: 请求参数
    @return 指定任务的所有时间点对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定任务的对象信息 可指定条件

    @param request: 请求参数
    @return 指定任务的所有时间点对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
    """
    多客户端备份同一个timepoint时，调用该接口表示所有节点全部备份完毕,使时间点可用
    @param request: 指定任务的待处理时间点对象信息
    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def DelTimepointLineData(self, request, cloudInfo, taskSetSign):
    """
    删除指定时间点对象的数据，只支持完备时间点，用于删除完备时间点时间线，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def DelTimepointData(self, request, cloudInfo, taskSetSign):
    """
    删除指定时间点对象的数据，只支持永久增量已合并的时间点，用于删除永久增量时间点，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def DelCIDObjectData(self, request, cloudInfo, taskSetSign):
    """
    删除指定CID对象的数据，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def DelTaskSetData(self, request, cloudInfo, taskSetSign):
    """
    删除指定任务集的数据, 标记删除

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    pass

  def SetVolumeInfo(self, volumeInfo):
    """
    设置索引卷信息

    @param volumeInfo: 索引卷信息

    @throw 转抛内部调用异常

    Parameters:
     - volumeInfo
    """
    pass

  def GetVolumeInfo(self):
    """
    获取索引卷信息

    @param volumeInfo: 索引卷信息

    @throw 转抛内部调用异常
    """
    pass

  def CheckVolumeIsEmpty(self):
    """
    检测索引卷是否存在数据,存在返回false，不存在返回true

    @throw 转抛内部调用异常
    """
    pass

  def GetBucketList(self, cloudInfo):
    """
    获取桶列表，不含元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
    """
    pass

  def GetMetaBucket(self, cloudInfo):
    """
    获取元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
    """
    pass

  def SetMetaBucket(self, cloudInfo, metaBucketName):
    """
    设置元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
     - metaBucketName
    """
    pass


class Client(Iface):
  """
  ECSS服务接口
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def GetTaskSetInfoSet(self, request, cloudInfo):
    """
    获取所有的任务集信息

    @param request: 请求参数
    @return 指定存储的所有任务集信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
    """
    self.send_GetTaskSetInfoSet(request, cloudInfo)
    return self.recv_GetTaskSetInfoSet()

  def send_GetTaskSetInfoSet(self, request, cloudInfo):
    self._oprot.writeMessageBegin('GetTaskSetInfoSet', TMessageType.CALL, self._seqid)
    args = GetTaskSetInfoSet_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetTaskSetInfoSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetTaskSetInfoSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTaskSetInfoSet failed: unknown result")

  def GetSubObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定 GNS 对象的子对象集合

    @param request:    请求参数集合

    @return GNS 对象集，若 partialSign 为空，则表示已全部获取完毕

    @throw 转抛内部调用异常
           若 @partialSign 不存在，则抛出异常提示。

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_GetSubObjectSet(request, cloudInfo, taskSetSign)
    return self.recv_GetSubObjectSet()

  def send_GetSubObjectSet(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('GetSubObjectSet', TMessageType.CALL, self._seqid)
    args = GetSubObjectSet_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetSubObjectSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetSubObjectSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetSubObjectSet failed: unknown result")

  def GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定存储的所有CID对象信息 可指定条件

    @param request: 请求参数
    @return 指定存储的所有CID对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_GetCIDObjectSet(request, cloudInfo, taskSetSign)
    return self.recv_GetCIDObjectSet()

  def send_GetCIDObjectSet(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('GetCIDObjectSet', TMessageType.CALL, self._seqid)
    args = GetCIDObjectSet_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetCIDObjectSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetCIDObjectSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCIDObjectSet failed: unknown result")

  def GetTimepointSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定任务的所有时间点对象信息 可指定条件

    @param request: 请求参数
    @return 指定任务的所有时间点对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_GetTimepointSet(request, cloudInfo, taskSetSign)
    return self.recv_GetTimepointSet()

  def send_GetTimepointSet(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('GetTimepointSet', TMessageType.CALL, self._seqid)
    args = GetTimepointSet_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetTimepointSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetTimepointSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTimepointSet failed: unknown result")

  def GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
    """
    获取指定任务的对象信息 可指定条件

    @param request: 请求参数
    @return 指定任务的所有时间点对象信息

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_GetGNSObjectSet(request, cloudInfo, taskSetSign)
    return self.recv_GetGNSObjectSet()

  def send_GetGNSObjectSet(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('GetGNSObjectSet', TMessageType.CALL, self._seqid)
    args = GetGNSObjectSet_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetGNSObjectSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetGNSObjectSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetGNSObjectSet failed: unknown result")

  def SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
    """
    多客户端备份同一个timepoint时，调用该接口表示所有节点全部备份完毕,使时间点可用
    @param request: 指定任务的待处理时间点对象信息
    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_SetTimepointAvailable(request, cloudInfo, taskSetSign)
    self.recv_SetTimepointAvailable()

  def send_SetTimepointAvailable(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('SetTimepointAvailable', TMessageType.CALL, self._seqid)
    args = SetTimepointAvailable_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SetTimepointAvailable(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = SetTimepointAvailable_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def DelTimepointLineData(self, request, cloudInfo, taskSetSign):
    """
    删除指定时间点对象的数据，只支持完备时间点，用于删除完备时间点时间线，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_DelTimepointLineData(request, cloudInfo, taskSetSign)
    self.recv_DelTimepointLineData()

  def send_DelTimepointLineData(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('DelTimepointLineData', TMessageType.CALL, self._seqid)
    args = DelTimepointLineData_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DelTimepointLineData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = DelTimepointLineData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def DelTimepointData(self, request, cloudInfo, taskSetSign):
    """
    删除指定时间点对象的数据，只支持永久增量已合并的时间点，用于删除永久增量时间点，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_DelTimepointData(request, cloudInfo, taskSetSign)
    self.recv_DelTimepointData()

  def send_DelTimepointData(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('DelTimepointData', TMessageType.CALL, self._seqid)
    args = DelTimepointData_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DelTimepointData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = DelTimepointData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def DelCIDObjectData(self, request, cloudInfo, taskSetSign):
    """
    删除指定CID对象的数据，标记删除

    @param gns:    GNS 路径

    @throw 转抛内部调用异常
           gns路径不是CID对象路径时抛异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_DelCIDObjectData(request, cloudInfo, taskSetSign)
    self.recv_DelCIDObjectData()

  def send_DelCIDObjectData(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('DelCIDObjectData', TMessageType.CALL, self._seqid)
    args = DelCIDObjectData_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DelCIDObjectData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = DelCIDObjectData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def DelTaskSetData(self, request, cloudInfo, taskSetSign):
    """
    删除指定任务集的数据, 标记删除

    @throw 转抛内部调用异常

    Parameters:
     - request
     - cloudInfo
     - taskSetSign
    """
    self.send_DelTaskSetData(request, cloudInfo, taskSetSign)
    self.recv_DelTaskSetData()

  def send_DelTaskSetData(self, request, cloudInfo, taskSetSign):
    self._oprot.writeMessageBegin('DelTaskSetData', TMessageType.CALL, self._seqid)
    args = DelTaskSetData_args()
    args.request = request
    args.cloudInfo = cloudInfo
    args.taskSetSign = taskSetSign
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DelTaskSetData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = DelTaskSetData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def SetVolumeInfo(self, volumeInfo):
    """
    设置索引卷信息

    @param volumeInfo: 索引卷信息

    @throw 转抛内部调用异常

    Parameters:
     - volumeInfo
    """
    self.send_SetVolumeInfo(volumeInfo)
    self.recv_SetVolumeInfo()

  def send_SetVolumeInfo(self, volumeInfo):
    self._oprot.writeMessageBegin('SetVolumeInfo', TMessageType.CALL, self._seqid)
    args = SetVolumeInfo_args()
    args.volumeInfo = volumeInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SetVolumeInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = SetVolumeInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return

  def GetVolumeInfo(self):
    """
    获取索引卷信息

    @param volumeInfo: 索引卷信息

    @throw 转抛内部调用异常
    """
    self.send_GetVolumeInfo()
    return self.recv_GetVolumeInfo()

  def send_GetVolumeInfo(self):
    self._oprot.writeMessageBegin('GetVolumeInfo', TMessageType.CALL, self._seqid)
    args = GetVolumeInfo_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetVolumeInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetVolumeInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetVolumeInfo failed: unknown result")

  def CheckVolumeIsEmpty(self):
    """
    检测索引卷是否存在数据,存在返回false，不存在返回true

    @throw 转抛内部调用异常
    """
    self.send_CheckVolumeIsEmpty()
    return self.recv_CheckVolumeIsEmpty()

  def send_CheckVolumeIsEmpty(self):
    self._oprot.writeMessageBegin('CheckVolumeIsEmpty', TMessageType.CALL, self._seqid)
    args = CheckVolumeIsEmpty_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CheckVolumeIsEmpty(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = CheckVolumeIsEmpty_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CheckVolumeIsEmpty failed: unknown result")

  def GetBucketList(self, cloudInfo):
    """
    获取桶列表，不含元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
    """
    self.send_GetBucketList(cloudInfo)
    return self.recv_GetBucketList()

  def send_GetBucketList(self, cloudInfo):
    self._oprot.writeMessageBegin('GetBucketList', TMessageType.CALL, self._seqid)
    args = GetBucketList_args()
    args.cloudInfo = cloudInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetBucketList(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetBucketList_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetBucketList failed: unknown result")

  def GetMetaBucket(self, cloudInfo):
    """
    获取元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
    """
    self.send_GetMetaBucket(cloudInfo)
    return self.recv_GetMetaBucket()

  def send_GetMetaBucket(self, cloudInfo):
    self._oprot.writeMessageBegin('GetMetaBucket', TMessageType.CALL, self._seqid)
    args = GetMetaBucket_args()
    args.cloudInfo = cloudInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetMetaBucket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetMetaBucket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exp is not None:
      raise result.exp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetMetaBucket failed: unknown result")

  def SetMetaBucket(self, cloudInfo, metaBucketName):
    """
    设置元数据桶

    @param cloudInfo: 云存储信息

    @throw 转抛内部调用异常

    Parameters:
     - cloudInfo
     - metaBucketName
    """
    self.send_SetMetaBucket(cloudInfo, metaBucketName)
    self.recv_SetMetaBucket()

  def send_SetMetaBucket(self, cloudInfo, metaBucketName):
    self._oprot.writeMessageBegin('SetMetaBucket', TMessageType.CALL, self._seqid)
    args = SetMetaBucket_args()
    args.cloudInfo = cloudInfo
    args.metaBucketName = metaBucketName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SetMetaBucket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = SetMetaBucket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.exp is not None:
      raise result.exp
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["GetTaskSetInfoSet"] = Processor.process_GetTaskSetInfoSet
    self._processMap["GetSubObjectSet"] = Processor.process_GetSubObjectSet
    self._processMap["GetCIDObjectSet"] = Processor.process_GetCIDObjectSet
    self._processMap["GetTimepointSet"] = Processor.process_GetTimepointSet
    self._processMap["GetGNSObjectSet"] = Processor.process_GetGNSObjectSet
    self._processMap["SetTimepointAvailable"] = Processor.process_SetTimepointAvailable
    self._processMap["DelTimepointLineData"] = Processor.process_DelTimepointLineData
    self._processMap["DelTimepointData"] = Processor.process_DelTimepointData
    self._processMap["DelCIDObjectData"] = Processor.process_DelCIDObjectData
    self._processMap["DelTaskSetData"] = Processor.process_DelTaskSetData
    self._processMap["SetVolumeInfo"] = Processor.process_SetVolumeInfo
    self._processMap["GetVolumeInfo"] = Processor.process_GetVolumeInfo
    self._processMap["CheckVolumeIsEmpty"] = Processor.process_CheckVolumeIsEmpty
    self._processMap["GetBucketList"] = Processor.process_GetBucketList
    self._processMap["GetMetaBucket"] = Processor.process_GetMetaBucket
    self._processMap["SetMetaBucket"] = Processor.process_SetMetaBucket

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_GetTaskSetInfoSet(self, seqid, iprot, oprot):
    args = GetTaskSetInfoSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetTaskSetInfoSet_result()
    try:
      result.success = self._handler.GetTaskSetInfoSet(args.request, args.cloudInfo)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetTaskSetInfoSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetSubObjectSet(self, seqid, iprot, oprot):
    args = GetSubObjectSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetSubObjectSet_result()
    try:
      result.success = self._handler.GetSubObjectSet(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetSubObjectSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetCIDObjectSet(self, seqid, iprot, oprot):
    args = GetCIDObjectSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetCIDObjectSet_result()
    try:
      result.success = self._handler.GetCIDObjectSet(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetCIDObjectSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetTimepointSet(self, seqid, iprot, oprot):
    args = GetTimepointSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetTimepointSet_result()
    try:
      result.success = self._handler.GetTimepointSet(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetTimepointSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetGNSObjectSet(self, seqid, iprot, oprot):
    args = GetGNSObjectSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetGNSObjectSet_result()
    try:
      result.success = self._handler.GetGNSObjectSet(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetGNSObjectSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SetTimepointAvailable(self, seqid, iprot, oprot):
    args = SetTimepointAvailable_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SetTimepointAvailable_result()
    try:
      self._handler.SetTimepointAvailable(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("SetTimepointAvailable", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DelTimepointLineData(self, seqid, iprot, oprot):
    args = DelTimepointLineData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DelTimepointLineData_result()
    try:
      self._handler.DelTimepointLineData(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("DelTimepointLineData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DelTimepointData(self, seqid, iprot, oprot):
    args = DelTimepointData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DelTimepointData_result()
    try:
      self._handler.DelTimepointData(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("DelTimepointData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DelCIDObjectData(self, seqid, iprot, oprot):
    args = DelCIDObjectData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DelCIDObjectData_result()
    try:
      self._handler.DelCIDObjectData(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("DelCIDObjectData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DelTaskSetData(self, seqid, iprot, oprot):
    args = DelTaskSetData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DelTaskSetData_result()
    try:
      self._handler.DelTaskSetData(args.request, args.cloudInfo, args.taskSetSign)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("DelTaskSetData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SetVolumeInfo(self, seqid, iprot, oprot):
    args = SetVolumeInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SetVolumeInfo_result()
    try:
      self._handler.SetVolumeInfo(args.volumeInfo)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("SetVolumeInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetVolumeInfo(self, seqid, iprot, oprot):
    args = GetVolumeInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetVolumeInfo_result()
    try:
      result.success = self._handler.GetVolumeInfo()
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetVolumeInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_CheckVolumeIsEmpty(self, seqid, iprot, oprot):
    args = CheckVolumeIsEmpty_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CheckVolumeIsEmpty_result()
    try:
      result.success = self._handler.CheckVolumeIsEmpty()
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("CheckVolumeIsEmpty", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetBucketList(self, seqid, iprot, oprot):
    args = GetBucketList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetBucketList_result()
    try:
      result.success = self._handler.GetBucketList(args.cloudInfo)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetBucketList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetMetaBucket(self, seqid, iprot, oprot):
    args = GetMetaBucket_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetMetaBucket_result()
    try:
      result.success = self._handler.GetMetaBucket(args.cloudInfo)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("GetMetaBucket", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SetMetaBucket(self, seqid, iprot, oprot):
    args = SetMetaBucket_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SetMetaBucket_result()
    try:
      self._handler.SetMetaBucket(args.cloudInfo, args.metaBucketName)
    except ncException.ttypes.ncException, exp:
      result.exp = exp
    oprot.writeMessageBegin("SetMetaBucket", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class GetTaskSetInfoSet_args(object):
  """
  Attributes:
   - request
   - cloudInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncEcssCommonDefinition.ttypes.ncTaskSetRequest, ncEcssCommonDefinition.ttypes.ncTaskSetRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, request=None, cloudInfo=None,):
    self.request = request
    self.cloudInfo = cloudInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncEcssCommonDefinition.ttypes.ncTaskSetRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTaskSetInfoSet_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetTaskSetInfoSet_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncEcssCommonDefinition.ttypes.ncTaskSetInfoSet, ncEcssCommonDefinition.ttypes.ncTaskSetInfoSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncEcssCommonDefinition.ttypes.ncTaskSetInfoSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTaskSetInfoSet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetSubObjectSet_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncGNSObjectRequest, ncObjectInfo.ttypes.ncGNSObjectRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncGNSObjectRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetSubObjectSet_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetSubObjectSet_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncObjectInfo.ttypes.ncGNSObjectInfoSet, ncObjectInfo.ttypes.ncGNSObjectInfoSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncObjectInfo.ttypes.ncGNSObjectInfoSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetSubObjectSet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetCIDObjectSet_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncCIDObjectRequest, ncObjectInfo.ttypes.ncCIDObjectRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncCIDObjectRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetCIDObjectSet_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetCIDObjectSet_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncObjectInfo.ttypes.ncCIDObjectInfoSet, ncObjectInfo.ttypes.ncCIDObjectInfoSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncObjectInfo.ttypes.ncCIDObjectInfoSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetCIDObjectSet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetTimepointSet_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncTimepointRequest, ncObjectInfo.ttypes.ncTimepointRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncTimepointRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTimepointSet_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetTimepointSet_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncObjectInfo.ttypes.ncTimepointInfoSet, ncObjectInfo.ttypes.ncTimepointInfoSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncObjectInfo.ttypes.ncTimepointInfoSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTimepointSet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetGNSObjectSet_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncGNSObjectSetRequest, ncObjectInfo.ttypes.ncGNSObjectSetRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncGNSObjectSetRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetGNSObjectSet_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetGNSObjectSet_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncObjectInfo.ttypes.ncGNSObjectInfoSet, ncObjectInfo.ttypes.ncGNSObjectInfoSet.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncObjectInfo.ttypes.ncGNSObjectInfoSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetGNSObjectSet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetTimepointAvailable_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncTimepointObjectInfoRequest, ncObjectInfo.ttypes.ncTimepointObjectInfoRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncTimepointObjectInfoRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetTimepointAvailable_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetTimepointAvailable_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetTimepointAvailable_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTimepointLineData_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncDeleteDataRequest, ncObjectInfo.ttypes.ncDeleteDataRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncDeleteDataRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTimepointLineData_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTimepointLineData_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTimepointLineData_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTimepointData_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncDeleteDataRequest, ncObjectInfo.ttypes.ncDeleteDataRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncDeleteDataRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTimepointData_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTimepointData_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTimepointData_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelCIDObjectData_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncObjectInfo.ttypes.ncGNSObjectRequest, ncObjectInfo.ttypes.ncGNSObjectRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncObjectInfo.ttypes.ncGNSObjectRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelCIDObjectData_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelCIDObjectData_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelCIDObjectData_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTaskSetData_args(object):
  """
  Attributes:
   - request
   - cloudInfo
   - taskSetSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ncEcssCommonDefinition.ttypes.ncTaskSetRequest, ncEcssCommonDefinition.ttypes.ncTaskSetRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'taskSetSign', None, None, ), # 3
  )

  def __init__(self, request=None, cloudInfo=None, taskSetSign=None,):
    self.request = request
    self.cloudInfo = cloudInfo
    self.taskSetSign = taskSetSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ncEcssCommonDefinition.ttypes.ncTaskSetRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskSetSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTaskSetData_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 2)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.taskSetSign is not None:
      oprot.writeFieldBegin('taskSetSign', TType.STRING, 3)
      oprot.writeString(self.taskSetSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.request)
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.taskSetSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelTaskSetData_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelTaskSetData_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetVolumeInfo_args(object):
  """
  Attributes:
   - volumeInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'volumeInfo', (ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo, ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, volumeInfo=None,):
    self.volumeInfo = volumeInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.volumeInfo = ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo()
          self.volumeInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetVolumeInfo_args')
    if self.volumeInfo is not None:
      oprot.writeFieldBegin('volumeInfo', TType.STRUCT, 1)
      self.volumeInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.volumeInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetVolumeInfo_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetVolumeInfo_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetVolumeInfo_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetVolumeInfo_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetVolumeInfo_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo, ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncEcssCommonDefinition.ttypes.ncEcssVolumeInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetVolumeInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckVolumeIsEmpty_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckVolumeIsEmpty_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckVolumeIsEmpty_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckVolumeIsEmpty_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetBucketList_args(object):
  """
  Attributes:
   - cloudInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, cloudInfo=None,):
    self.cloudInfo = cloudInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetBucketList_args')
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cloudInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetBucketList_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncEcssCommonDefinition.ttypes.ncBucketInfoReply, ncEcssCommonDefinition.ttypes.ncBucketInfoReply.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncEcssCommonDefinition.ttypes.ncBucketInfoReply()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetBucketList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetaBucket_args(object):
  """
  Attributes:
   - cloudInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, cloudInfo=None,):
    self.cloudInfo = cloudInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetMetaBucket_args')
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cloudInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetaBucket_result(object):
  """
  Attributes:
   - success
   - exp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ncEcssCommonDefinition.ttypes.ncBucketInfoReply, ncEcssCommonDefinition.ttypes.ncBucketInfoReply.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exp=None,):
    self.success = success
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ncEcssCommonDefinition.ttypes.ncBucketInfoReply()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetMetaBucket_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetMetaBucket_args(object):
  """
  Attributes:
   - cloudInfo
   - metaBucketName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cloudInfo', (ncEcssCommonDefinition.ttypes.ncCloudStorageInfo, ncEcssCommonDefinition.ttypes.ncCloudStorageInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'metaBucketName', None, None, ), # 2
  )

  def __init__(self, cloudInfo=None, metaBucketName=None,):
    self.cloudInfo = cloudInfo
    self.metaBucketName = metaBucketName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cloudInfo = ncEcssCommonDefinition.ttypes.ncCloudStorageInfo()
          self.cloudInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.metaBucketName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetMetaBucket_args')
    if self.cloudInfo is not None:
      oprot.writeFieldBegin('cloudInfo', TType.STRUCT, 1)
      self.cloudInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.metaBucketName is not None:
      oprot.writeFieldBegin('metaBucketName', TType.STRING, 2)
      oprot.writeString(self.metaBucketName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cloudInfo)
    value = (value * 31) ^ hash(self.metaBucketName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetMetaBucket_result(object):
  """
  Attributes:
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exp', (ncException.ttypes.ncException, ncException.ttypes.ncException.thrift_spec), None, ), # 1
  )

  def __init__(self, exp=None,):
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exp = ncException.ttypes.ncException()
          self.exp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetMetaBucket_result')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.STRUCT, 1)
      self.exp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
